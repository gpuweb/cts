{"version":3,"file":"uniformity.spec.js","names":["description","makeTestGroup","keysOf","unreachable","ShaderValidationTest","g","kCollectiveOps","op","stage","kConditions","cond","expectation","generateCondition","condition","generateOp","generateConditionalStatement","statement","code","test","desc","params","u","combine","beginSubcases","combineWithParams","fn","t","startsWith","skipIfLanguageFeatureNotSupported","expectCompileResult","kSubgroupOps","kFragmentBuiltinValues","builtin","type","beforeAllSubcases","skipIf","isCompatibility","includes","enable","kComputeBuiltinValues","uniform","generatePointerCheck","check","kPointerCases","address_uniform_literal","address_uniform_value","address_nonuniform_value","address_uniform_chain","address_nonuniform_chain1","address_nonuniform_chain2","wg_uniform_load_is_uniform","contents_scalar_uniform1","contents_scalar_uniform2","contents_scalar_uniform3","contents_scalar_nonuniform1","contents_scalar_nonuniform2","contents_scalar_alias_uniform","contents_scalar_alias_nonuniform1","contents_scalar_alias_nonuniform2","contents_scalar_alias_nonuniform3","contents_scalar_alias_nonuniform4","contents_scalar_alias_nonuniform5","contents_array_uniform_index","contents_array_nonuniform_index1","contents_array_nonuniform_index2","contents_array_nonuniform_index3","contents_struct_uniform","contents_struct_nonuniform1","contents_struct_nonuniform2","contents_struct_nonuniform3","contents_struct_chain_uniform","contents_struct_chain_nonuniform1","contents_struct_chain_nonuniform2","contents_struct_chain_nonuniform3","contents_lhs_ref_pointer_deref1","contents_lhs_ref_pointer_deref1a","contents_lhs_ref_pointer_deref2","contents_lhs_ref_pointer_deref2a","contents_lhs_ref_pointer_deref3","contents_lhs_ref_pointer_deref3a","contents_lhs_ref_pointer_deref4","contents_lhs_ref_pointer_deref4a","contents_lhs_ref_pointer_deref4b","contents_lhs_ref_pointer_deref4c","contents_lhs_ref_pointer_deref4d","contents_lhs_ref_pointer_deref4e","contents_lhs_pointer_deref2","needs_deref_sugar","contents_lhs_pointer_deref2a","contents_lhs_pointer_deref3","contents_lhs_pointer_deref3a","contents_lhs_pointer_deref4","contents_lhs_pointer_deref4a","contents_lhs_pointer_deref4b","contents_lhs_pointer_deref4c","contents_lhs_pointer_deref4d","contents_lhs_pointer_deref4e","contents_rhs_pointer_deref1","contents_rhs_pointer_deref1a","contents_rhs_pointer_deref2","contents_rhs_pointer_swizzle_uniform","contents_rhs_pointer_swizzle_non_uniform","testcase","case","with_check","without_check","expectedUniformity","init","kFuncVarCases","no_assign","typename","typedecl","assignment","simple_uniform","simple_nonuniform","compound_assign_uniform","compound_assign_nonuniform","unreachable_uniform","unreachable_nonuniform","if_no_else_uniform","if_no_else_nonuniform","if_no_then_uniform","if_no_then_nonuniform","if_else_uniform","if_else_nonuniform","if_else_split","if_unreachable_else_none","if_unreachable_else_uniform","if_unreachable_else_nonuniform","if_unreachable_then_none","if_unreachable_then_uniform","if_unreachable_then_nonuniform","if_nonescaping_nonuniform","loop_body_depends_on_continuing_uniform","loop_body_depends_on_continuing_nonuniform","loop_body_uniform","loop_body_nonuniform","loop_body_nonuniform_cond","loop_unreachable_continuing","loop_continuing_from_body_uniform","loop_continuing_from_body_nonuniform","loop_continuing_from_body_split1","loop_continuing_from_body_split2","loop_continuing_from_body_split3","loop_continuing_from_body_split4","loop_continuing_from_body_split5","loop_in_loop_with_continue_uniform","loop_in_loop_with_continue_nonuniform","after_loop_with_uniform_break_uniform","after_loop_with_uniform_break_nonuniform","after_loop_with_nonuniform_break","after_loop_with_uniform_breaks","switch_uniform_case","switch_nonuniform_case","after_switch_all_uniform","after_switch_some_assign","after_switch_nonuniform","after_switch_with_break_nonuniform1","after_switch_with_break_nonuniform2","for_loop_uniform_body","for_loop_nonuniform_body","for_loop_uniform_body_no_condition","for_loop_nonuniform_body_no_condition","for_loop_uniform_increment","for_loop_nonuniform_increment","for_loop_uniform_init","for_loop_nonuniform_init","while_loop_uniform_body","while_loop_nonuniform_body","partial_assignment_uniform","partial_assignment_nonuniform","partial_assignment_all_members_uniform","partial_assignment_all_members_nonuniform","partial_assignment_single_element_struct_uniform","partial_assignment_single_element_struct_nonuniform","partial_assignment_single_element_array_uniform","partial_assignment_single_element_array_nonuniform","nested1","nested2","kVarInit","no_init","nonuniform","func_case","result","kShortCircuitExpressionCases","or_uniform_uniform","or_uniform_nonuniform","or_nonuniform_uniform","or_nonuniform_nonuniform","or_uniform_first_nonuniform","or_uniform_second_nonuniform","and_uniform_uniform","and_uniform_nonuniform","and_nonuniform_uniform","and_nonuniform_nonuniform","and_uniform_first_nonuniform","and_uniform_second_nonuniform","kPointerParamCases","pointer_uniform_passthrough_value","function","call","pointer_nonuniform_passthrough_value","pointer_store_uniform_value","pointer_store_nonuniform_value","pointer_depends_on_nonpointer_param_uniform","pointer_depends_on_nonpointer_param_nonuniform","pointer_depends_on_pointer_param_uniform","pointer_depends_on_pointer_param_nonuniform","pointer_codependent1","pointer_codependent2","pointer_codependent3","pointer_codependent4","uniform_param_uniform_assignment","uniform_param_nonuniform_assignment","nonuniform_param_uniform_assignment","nonuniform_param_nonuniform_assignment","required_uniform_success","required_uniform_failure","uniform_conditional_call_assign_uniform","uniform_conditional_call_assign_nonuniform1","uniform_conditional_call_assign_nonuniform2","nonuniform_conditional_call_assign_uniform","pointer_case","res","kExpressionCases","literal","uniform_index","nonuniform_index1","nonuniform_index2","uniform_struct","nonuniform_struct","kBinOps","plus","minus","times","div","rem","and","or","xor","shl","shr","less","lessequal","greater","greaterequal","equal","notequal","e1","e2","e","kFunctionCases","uniform_result","nonuniform_result","nonuniform_return_is_uniform_after_call","uniform_passthrough_parameter","nonuniform_passthrough_parameter","combined_parameters1","combined_parameters2","combined_parameters3","combined_parameters4","uniform_parameter_cf_after_nonuniform_expr","required_uniform_function_call_in_uniform_cf","required_uniform_function_call_in_nonuniform_cf","required_uniform_function_call_in_nonuniform_cf2","required_uniform_function_call_depends_on_uniform_param","required_uniform_function_call_depends_on_nonuniform_param","dpdx_nonuniform_result","dpdy_nonuniform_result","dpdxCoarse_nonuniform_result","dpdyCoarse_nonuniform_result","dpdxFine_nonuniform_result","dpdyFine_nonuniform_result","fwidth_nonuniform_result","fwidthCoarse_nonuniform_result","fwidthFine_nonuniform_result","textureSample_nonuniform_result","textureSampleBias_nonuniform_result","textureSampleCompare_nonuniform_result","textureDimensions_uniform_input_uniform_result","textureGather_uniform_input_uniform_result","textureGatherCompare_uniform_input_uniform_result","textureLoad_uniform_input_uniform_result","textureNumLayers_uniform_input_uniform_result","textureNumLevels_uniform_input_uniform_result","textureNumSamples_uniform_input_uniform_result","textureSampleLevel_uniform_input_uniform_result","textureSampleGrad_uniform_input_uniform_result","textureSampleCompareLevel_uniform_input_uniform_result","textureSampleBaseClampToEdge_uniform_input_uniform_result","min_uniform_input_uniform_result","value_constructor_uniform_input_uniform_result","wgsl"],"sources":["../../../../../src/webgpu/shader/validation/uniformity/uniformity.spec.ts"],"sourcesContent":["export const description = `Validation tests for uniformity analysis`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kCollectiveOps = [\n  { op: 'textureSample', stage: 'fragment' },\n  { op: 'textureSampleBias', stage: 'fragment' },\n  { op: 'textureSampleCompare', stage: 'fragment' },\n  { op: 'dpdx', stage: 'fragment' },\n  { op: 'dpdxCoarse', stage: 'fragment' },\n  { op: 'dpdxFine', stage: 'fragment' },\n  { op: 'dpdy', stage: 'fragment' },\n  { op: 'dpdyCoarse', stage: 'fragment' },\n  { op: 'dpdyFine', stage: 'fragment' },\n  { op: 'fwidth', stage: 'fragment' },\n  { op: 'fwidthCoarse', stage: 'fragment' },\n  { op: 'fwidthFine', stage: 'fragment' },\n  { op: 'storageBarrier', stage: 'compute' },\n  { op: 'textureBarrier', stage: 'compute' },\n  { op: 'workgroupBarrier', stage: 'compute' },\n  { op: 'workgroupUniformLoad', stage: 'compute' },\n];\n\nconst kConditions = [\n  { cond: 'uniform_storage_ro', expectation: true },\n  { cond: 'nonuniform_storage_ro', expectation: false },\n  { cond: 'nonuniform_storage_rw', expectation: false },\n  { cond: 'nonuniform_builtin', expectation: false },\n  { cond: 'uniform_literal', expectation: true },\n  { cond: 'uniform_const', expectation: true },\n  { cond: 'uniform_override', expectation: true },\n  { cond: 'uniform_let', expectation: true },\n  { cond: 'nonuniform_let', expectation: false },\n  { cond: 'uniform_or', expectation: true },\n  { cond: 'nonuniform_or1', expectation: false },\n  { cond: 'nonuniform_or2', expectation: false },\n  { cond: 'uniform_and', expectation: true },\n  { cond: 'nonuniform_and1', expectation: false },\n  { cond: 'nonuniform_and2', expectation: false },\n  { cond: 'uniform_func_var', expectation: true },\n  { cond: 'nonuniform_func_var', expectation: false },\n  { cond: 'storage_texture_ro', expectation: true },\n  { cond: 'storage_texture_rw', expectation: false },\n];\n\nfunction generateCondition(condition: string): string {\n  switch (condition) {\n    case 'uniform_storage_ro': {\n      return `ro_buffer[0] == 0`;\n    }\n    case 'nonuniform_storage_ro': {\n      return `ro_buffer[priv_var[0]] == 0`;\n    }\n    case 'nonuniform_storage_rw': {\n      return `rw_buffer[0] == 0`;\n    }\n    case 'nonuniform_builtin': {\n      return `p.x == 0`;\n    }\n    case 'uniform_literal': {\n      return `false`;\n    }\n    case 'uniform_const': {\n      return `c`;\n    }\n    case 'uniform_override': {\n      return `o == 0`;\n    }\n    case 'uniform_let': {\n      return `u_let == 0`;\n    }\n    case 'nonuniform_let': {\n      return `n_let == 0`;\n    }\n    case 'uniform_or': {\n      return `u_let == 0 || uniform_buffer.y > 1`;\n    }\n    case 'nonuniform_or1': {\n      return `u_let == 0 || n_let == 0`;\n    }\n    case 'nonuniform_or2': {\n      return `n_let == 0 || u_let == 0`;\n    }\n    case 'uniform_and': {\n      return `u_let == 0 && uniform_buffer.y > 1`;\n    }\n    case 'nonuniform_and1': {\n      return `u_let == 0 && n_let == 0`;\n    }\n    case 'nonuniform_and2': {\n      return `n_let == 0 && u_let == 0`;\n    }\n    case 'uniform_func_var': {\n      return `u_f == 0`;\n    }\n    case 'nonuniform_func_var': {\n      return `n_f == 0`;\n    }\n    case 'storage_texture_ro': {\n      return `textureLoad(ro_storage_texture, vec2()).x == 0`;\n    }\n    case 'storage_texture_rw': {\n      return `textureLoad(rw_storage_texture, vec2()).x == 0`;\n    }\n    default: {\n      unreachable(`Unhandled condition`);\n    }\n  }\n}\n\nfunction generateOp(op: string): string {\n  switch (op) {\n    case 'textureSample': {\n      return `let x = ${op}(tex, s, vec2(0,0));\\n`;\n    }\n    case 'textureSampleBias': {\n      return `let x = ${op}(tex, s, vec2(0,0), 0);\\n`;\n    }\n    case 'textureSampleCompare': {\n      return `let x = ${op}(tex_depth, s_comp, vec2(0,0), 0);\\n`;\n    }\n    case 'storageBarrier':\n    case 'textureBarrier':\n    case 'workgroupBarrier': {\n      return `${op}();\\n`;\n    }\n    case 'workgroupUniformLoad': {\n      return `let x = ${op}(&wg);`;\n    }\n    case 'dpdx':\n    case 'dpdxCoarse':\n    case 'dpdxFine':\n    case 'dpdy':\n    case 'dpdyCoarse':\n    case 'dpdyFine':\n    case 'fwidth':\n    case 'fwidthCoarse':\n    case 'fwidthFine': {\n      return `let x = ${op}(0);\\n`;\n    }\n    case 'subgroupAdd':\n    case 'subgroupInclusiveAdd':\n    case 'subgroupExclusiveAdd':\n    case 'subgroupMul':\n    case 'subgroupInclusiveMul':\n    case 'subgroupExclusiveMul':\n    case 'subgroupMax':\n    case 'subgroupMin':\n    case 'subgroupAnd':\n    case 'subgroupOr':\n    case 'subgroupXor':\n    case 'subgroupBroadcastFirst':\n    case 'quadSwapX':\n    case 'quadSwapY':\n    case 'quadSwapDiagonal':\n      return `let x = ${op}(0);\\n`;\n    case 'subgroupAll':\n    case 'subgroupAny':\n    case 'subgroupBallot':\n      return `let x = ${op}(false);\\n`;\n    case 'subgroupElect':\n      return `let x = ${op}();\\n`;\n    case 'subgroupBroadcast':\n    case 'subgroupShuffle':\n    case 'subgroupShuffleUp':\n    case 'subgroupShuffleDown':\n    case 'subgroupShuffleXor':\n    case 'quadBroadcast':\n      return `let x = ${op}(0, 0);\\n`;\n    default: {\n      unreachable(`Unhandled op`);\n    }\n  }\n}\n\nfunction generateConditionalStatement(statement: string, condition: string, op: string): string {\n  const code = ``;\n  switch (statement) {\n    case 'if': {\n      return `if ${generateCondition(condition)} {\n        ${generateOp(op)};\n      }\n      `;\n    }\n    case 'for': {\n      return `for (; ${generateCondition(condition)};) {\n        ${generateOp(op)};\n      }\n      `;\n    }\n    case 'while': {\n      return `while ${generateCondition(condition)} {\n        ${generateOp(op)};\n      }\n      `;\n    }\n    case 'switch': {\n      return `switch u32(${generateCondition(condition)}) {\n        case 0: {\n          ${generateOp(op)};\n        }\n        default: { }\n      }\n      `;\n    }\n    default: {\n      unreachable(`Unhandled statement`);\n    }\n  }\n\n  return code;\n}\n\ng.test('basics')\n  .desc(`Test collective operations in simple uniform or non-uniform control flow.`)\n  .params(u =>\n    u\n      .combine('statement', ['if', 'for', 'while', 'switch'] as const)\n      .beginSubcases()\n      .combineWithParams(kConditions)\n      .combineWithParams(kCollectiveOps)\n  )\n  .fn(t => {\n    if (t.params.op === 'textureBarrier' || t.params.cond.startsWith('storage_texture')) {\n      t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    }\n\n    let code = `\n @group(0) @binding(0) var s : sampler;\n @group(0) @binding(1) var s_comp : sampler_comparison;\n @group(0) @binding(2) var tex : texture_2d<f32>;\n @group(0) @binding(3) var tex_depth : texture_depth_2d;\n\n @group(1) @binding(0) var<storage, read> ro_buffer : array<f32, 4>;\n @group(1) @binding(1) var<storage, read_write> rw_buffer : array<f32, 4>;\n @group(1) @binding(2) var<uniform> uniform_buffer : vec4<f32>;\n\n @group(2) @binding(0) var ro_storage_texture : texture_storage_2d<rgba8unorm, read>;\n @group(2) @binding(1) var rw_storage_texture : texture_storage_2d<rgba8unorm, read_write>;\n\n var<private> priv_var : array<f32, 4> = array(0,0,0,0);\n\n const c = false;\n override o : f32;\n`;\n\n    if (t.params.stage === 'compute') {\n      code += `var<workgroup> wg : f32;\\n`;\n      code += ` @workgroup_size(16, 1, 1)`;\n    }\n    code += `@${t.params.stage}`;\n    code += `\\nfn main(`;\n    if (t.params.stage === 'compute') {\n      code += `@builtin(global_invocation_id) p : vec3<u32>`;\n    } else {\n      code += `@builtin(position) p : vec4<f32>`;\n    }\n    code += `) {\n      let u_let = uniform_buffer.x;\n      let n_let = rw_buffer[0];\n      var u_f = uniform_buffer.z;\n      var n_f = rw_buffer[1];\n    `;\n\n    // Simple control statement containing the op.\n    code += generateConditionalStatement(t.params.statement, t.params.cond, t.params.op);\n\n    code += `\\n}\\n`;\n\n    t.expectCompileResult(t.params.expectation, code);\n  });\n\nconst kSubgroupOps = [\n  'subgroupAdd',\n  'subgroupInclusiveAdd',\n  'subgroupExclusiveAdd',\n  'subgroupMul',\n  'subgroupInclusiveMul',\n  'subgroupExclusiveMul',\n  'subgroupMax',\n  'subgroupMin',\n  'subgroupAll',\n  'subgroupAny',\n  'subgroupAnd',\n  'subgroupOr',\n  'subgroupXor',\n  'subgroupBallot',\n  'subgroupElect',\n  'subgroupBroadcast',\n  'subgroupBroadcastFirst',\n  'subgroupShuffle',\n  'subgroupShuffleUp',\n  'subgroupShuffleDown',\n  'subgroupShuffleXor',\n  'quadBroadcast',\n  'quadSwapX',\n  'quadSwapY',\n  'quadSwapDiagonal',\n] as const;\n\ng.test('basics,subgroups')\n  .desc(`Test subgroup operations in simple uniform or non-uniform control flow.`)\n  .params(u =>\n    u\n      .combine('statement', ['if', 'for', 'while', 'switch'] as const)\n      .beginSubcases()\n      .combineWithParams(kConditions)\n      .combine('op', kSubgroupOps)\n      .combine('stage', ['compute', 'fragment'] as const)\n  )\n  .fn(t => {\n    let code = `\n enable subgroups;\n\n @group(0) @binding(0) var s : sampler;\n @group(0) @binding(1) var s_comp : sampler_comparison;\n @group(0) @binding(2) var tex : texture_2d<f32>;\n @group(0) @binding(3) var tex_depth : texture_depth_2d;\n\n @group(1) @binding(0) var<storage, read> ro_buffer : array<f32, 4>;\n @group(1) @binding(1) var<storage, read_write> rw_buffer : array<f32, 4>;\n @group(1) @binding(2) var<uniform> uniform_buffer : vec4<f32>;\n\n @group(2) @binding(0) var ro_storage_texture : texture_storage_2d<rgba8unorm, read>;\n @group(2) @binding(1) var rw_storage_texture : texture_storage_2d<rgba8unorm, read_write>;\n\n var<private> priv_var : array<f32, 4> = array(0,0,0,0);\n\n const c = false;\n override o : f32;\n`;\n\n    if (t.params.stage === 'compute') {\n      code += `var<workgroup> wg : f32;\\n`;\n      code += ` @workgroup_size(16, 1, 1)`;\n    }\n    code += `@${t.params.stage}`;\n    code += `\\nfn main(`;\n    if (t.params.stage === 'compute') {\n      code += `@builtin(global_invocation_id) p : vec3<u32>`;\n    } else {\n      code += `@builtin(position) p : vec4<f32>`;\n    }\n    code += `) {\n      let u_let = uniform_buffer.x;\n      let n_let = rw_buffer[0];\n      var u_f = uniform_buffer.z;\n      var n_f = rw_buffer[1];\n    `;\n\n    // Simple control statement containing the op.\n    code += generateConditionalStatement(t.params.statement, t.params.cond, t.params.op);\n\n    code += `\\n}\\n`;\n\n    t.expectCompileResult(t.params.expectation, code);\n  });\n\nconst kFragmentBuiltinValues = [\n  {\n    builtin: `position`,\n    type: `vec4<f32>`,\n  },\n  {\n    builtin: `front_facing`,\n    type: `bool`,\n  },\n  {\n    builtin: `sample_index`,\n    type: `u32`,\n  },\n  {\n    builtin: `sample_mask`,\n    type: `u32`,\n  },\n  {\n    builtin: `subgroup_invocation_id`,\n    type: `u32`,\n  },\n  {\n    builtin: `subgroup_size`,\n    type: `u32`,\n  },\n];\n\ng.test('fragment_builtin_values')\n  .desc(`Test uniformity of fragment built-in values`)\n  .params(u => u.combineWithParams(kFragmentBuiltinValues).beginSubcases())\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && ['sample_index', 'sample_mask'].includes(t.params.builtin),\n      'compatibility mode does not support sample_index or sample_mask'\n    );\n  })\n  .fn(t => {\n    let cond = ``;\n    switch (t.params.type) {\n      case `u32`:\n      case `i32`:\n      case `f32`: {\n        cond = `p > 0`;\n        break;\n      }\n      case `vec4<u32>`:\n      case `vec4<i32>`:\n      case `vec4<f32>`: {\n        cond = `p.x > 0`;\n        break;\n      }\n      case `bool`: {\n        cond = `p`;\n        break;\n      }\n      default: {\n        unreachable(`Unhandled type`);\n      }\n    }\n    const enable = t.params.builtin.includes('subgroup') ? 'enable subgroups;' : '';\n    const code = `\n${enable}\n@group(0) @binding(0) var s : sampler;\n@group(0) @binding(1) var tex : texture_2d<f32>;\n\n@fragment\nfn main(@builtin(${t.params.builtin}) p : ${t.params.type}) {\n  if ${cond} {\n    let texel = textureSample(tex, s, vec2<f32>(0,0));\n  }\n}\n`;\n\n    t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    t.expectCompileResult(false, code);\n  });\n\nconst kComputeBuiltinValues = [\n  {\n    builtin: `local_invocation_id`,\n    type: `vec3<f32>`,\n    uniform: false,\n  },\n  {\n    builtin: `local_invocation_index`,\n    type: `u32`,\n    uniform: false,\n  },\n  {\n    builtin: `global_invocation_id`,\n    type: `vec3<u32>`,\n    uniform: false,\n  },\n  {\n    builtin: `workgroup_id`,\n    type: `vec3<u32>`,\n    uniform: true,\n  },\n  {\n    builtin: `num_workgroups`,\n    type: `vec3<u32>`,\n    uniform: true,\n  },\n  {\n    builtin: `subgroup_invocation_id`,\n    type: `u32`,\n    uniform: false,\n  },\n  {\n    builtin: `subgroup_size`,\n    type: `u32`,\n    uniform: true,\n  },\n];\n\ng.test('compute_builtin_values')\n  .desc(`Test uniformity of compute built-in values`)\n  .params(u => u.combineWithParams(kComputeBuiltinValues).beginSubcases())\n  .fn(t => {\n    let cond = ``;\n    switch (t.params.type) {\n      case `u32`:\n      case `i32`:\n      case `f32`: {\n        cond = `p > 0`;\n        break;\n      }\n      case `vec3<u32>`:\n      case `vec3<i32>`:\n      case `vec3<f32>`: {\n        cond = `p.x > 0`;\n        break;\n      }\n      case `bool`: {\n        cond = `p`;\n        break;\n      }\n      default: {\n        unreachable(`Unhandled type`);\n      }\n    }\n    const enable = t.params.builtin.includes('subgroup') ? 'enable subgroups;' : '';\n    const code = `\n${enable}\n@compute @workgroup_size(16,1,1)\nfn main(@builtin(${t.params.builtin}) p : ${t.params.type}) {\n  if ${cond} {\n    workgroupBarrier();\n  }\n}\n`;\n\n    t.expectCompileResult(t.params.uniform, code);\n  });\n\nfunction generatePointerCheck(check: string): string {\n  if (check === `address`) {\n    return `let tmp = workgroupUniformLoad(ptr);`;\n  } else {\n    // check === `contents`\n    return `if test_val > 0 {\n      workgroupBarrier();\n    }`;\n  }\n}\n\ninterface PointerCase {\n  code: string;\n  check: 'address' | 'contents';\n  uniform: boolean | 'never';\n  needs_deref_sugar?: boolean;\n}\n\nconst kPointerCases: Record<string, PointerCase> = {\n  address_uniform_literal: {\n    code: `let ptr = &wg_array[0];`,\n    check: `address`,\n    uniform: true,\n  },\n  address_uniform_value: {\n    code: `let ptr = &wg_array[uniform_value];`,\n    check: `address`,\n    uniform: true,\n  },\n  address_nonuniform_value: {\n    code: `let ptr = &wg_array[nonuniform_value];`,\n    check: `address`,\n    uniform: false,\n  },\n  address_uniform_chain: {\n    code: `let p1 = &wg_struct.x;\n    let p2 = &(*p1)[uniform_value];\n    let p3 = &(*p2).x;\n    let ptr = &(*p3)[uniform_value];`,\n    check: `address`,\n    uniform: true,\n  },\n  address_nonuniform_chain1: {\n    code: `let p1 = &wg_struct.x;\n    let p2 = &(*p1)[nonuniform_value];\n    let p3 = &(*p2).x;\n    let ptr = &(*p3)[uniform_value];`,\n    check: `address`,\n    uniform: false,\n  },\n  address_nonuniform_chain2: {\n    code: `let p1 = &wg_struct.x;\n    let p2 = &(*p1)[uniform_value];\n    let p3 = &(*p2).x;\n    let ptr = &(*p3)[nonuniform_value];`,\n    check: `address`,\n    uniform: false,\n  },\n  wg_uniform_load_is_uniform: {\n    code: `let test_val = workgroupUniformLoad(&wg_scalar);`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_scalar_uniform1: {\n    code: `let ptr = &func_scalar;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_scalar_uniform2: {\n    code: `func_scalar = nonuniform_value;\n    let ptr = &func_scalar;\n    func_scalar = 0;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_scalar_uniform3: {\n    code: `let ptr = &func_scalar;\n    func_scalar = nonuniform_value;\n    func_scalar = uniform_value;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_scalar_nonuniform1: {\n    code: `func_scalar = nonuniform_value;\n    let ptr = &func_scalar;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_scalar_nonuniform2: {\n    code: `let ptr = &func_scalar;\n    *ptr = nonuniform_value;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_scalar_alias_uniform: {\n    code: `let p = &func_scalar;\n    let ptr = p;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_scalar_alias_nonuniform1: {\n    code: `func_scalar = nonuniform_value;\n    let p = &func_scalar;\n    let ptr = p;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_scalar_alias_nonuniform2: {\n    code: `let p = &func_scalar;\n    *p = nonuniform_value;\n    let ptr = p;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_scalar_alias_nonuniform3: {\n    code: `let p = &func_scalar;\n    let ptr = p;\n    *p = nonuniform_value;\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_scalar_alias_nonuniform4: {\n    code: `let p = &func_scalar;\n    func_scalar = nonuniform_value;\n    let test_val = *p;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_scalar_alias_nonuniform5: {\n    code: `let p = &func_scalar;\n    *p = nonuniform_value;\n    let test_val = func_scalar;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_array_uniform_index: {\n    code: `let ptr = &func_array[uniform_value];\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_array_nonuniform_index1: {\n    code: `let ptr = &func_array[nonuniform_value];\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_array_nonuniform_index2: {\n    code: `let ptr = &func_array[lid.x];\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_array_nonuniform_index3: {\n    code: `let ptr = &func_array[gid.x];\n    let test_val = *ptr;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_struct_uniform: {\n    code: `let p1 = &func_struct.x[uniform_value].x[uniform_value].x[uniform_value];\n    let test_val = *p1;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_struct_nonuniform1: {\n    code: `let p1 = &func_struct.x[nonuniform_value].x[uniform_value].x[uniform_value];\n    let test_val = *p1;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_struct_nonuniform2: {\n    code: `let p1 = &func_struct.x[uniform_value].x[gid.x].x[uniform_value];\n    let test_val = *p1;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_struct_nonuniform3: {\n    code: `let p1 = &func_struct.x[uniform_value].x[uniform_value].x[lid.y];\n    let test_val = *p1;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_struct_chain_uniform: {\n    code: `let p1 = &func_struct.x;\n    let p2 = &(*p1)[uniform_value];\n    let p3 = &(*p2).x;\n    let p4 = &(*p3)[uniform_value];\n    let p5 = &(*p4).x;\n    let p6 = &(*p5)[uniform_value];\n    let test_val = *p6;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_struct_chain_nonuniform1: {\n    code: `let p1 = &func_struct.x;\n    let p2 = &(*p1)[nonuniform_value];\n    let p3 = &(*p2).x;\n    let p4 = &(*p3)[uniform_value];\n    let p5 = &(*p4).x;\n    let p6 = &(*p5)[uniform_value];\n    let test_val = *p6;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_struct_chain_nonuniform2: {\n    code: `let p1 = &func_struct.x;\n    let p2 = &(*p1)[uniform_value];\n    let p3 = &(*p2).x;\n    let p4 = &(*p3)[gid.x];\n    let p5 = &(*p4).x;\n    let p6 = &(*p5)[uniform_value];\n    let test_val = *p6;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_struct_chain_nonuniform3: {\n    code: `let p1 = &func_struct.x;\n    let p2 = &(*p1)[uniform_value];\n    let p3 = &(*p2).x;\n    let p4 = &(*p3)[uniform_value];\n    let p5 = &(*p4).x;\n    let p6 = &(*p5)[lid.y];\n    let test_val = *p6;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref1: {\n    code: `*&func_scalar = uniform_value;\n    let test_val = func_scalar;`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_lhs_ref_pointer_deref1a: {\n    code: `*&func_scalar = nonuniform_value;\n    let test_val = func_scalar;`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref2: {\n    code: `*&(func_array[nonuniform_value]) = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref2a: {\n    code: `(func_array[nonuniform_value]) = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref3: {\n    code: `*&(func_array[needs_uniform(uniform_value)]) = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_lhs_ref_pointer_deref3a: {\n    code: `*&(func_array[needs_uniform(nonuniform_value)]) = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: 'never',\n  },\n  contents_lhs_ref_pointer_deref4: {\n    code: `*&((*&(func_struct.x[uniform_value])).x[uniform_value].x[uniform_value]) = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: true,\n  },\n  contents_lhs_ref_pointer_deref4a: {\n    code: `*&((*&(func_struct.x[uniform_value])).x[uniform_value].x[uniform_value]) = nonuniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref4b: {\n    code: `*&((*&(func_struct.x[uniform_value])).x[uniform_value].x[nonuniform_value]) = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref4c: {\n    code: `*&((*&(func_struct.x[uniform_value])).x[nonuniform_value]).x[uniform_value] = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref4d: {\n    code: `*&((*&(func_struct.x[nonuniform_value])).x[uniform_value].x)[uniform_value] = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n  },\n  contents_lhs_ref_pointer_deref4e: {\n    code: `*&((*&(func_struct.x[uniform_value])).x[needs_uniform(nonuniform_value)].x[uniform_value]) = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: 'never',\n  },\n\n  // The following cases require the 'pointer_composite_access' language feature.\n  contents_lhs_pointer_deref2: {\n    code: `(&func_array)[uniform_value] = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: true,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref2a: {\n    code: `(&func_array)[nonuniform_value] = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref3: {\n    code: `(&func_array)[needs_uniform(uniform_value)] = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: true,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref3a: {\n    code: `(&func_array)[needs_uniform(nonuniform_value)] = uniform_value;\n    let test_val = func_array[0];`,\n    check: `contents`,\n    uniform: 'never',\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref4: {\n    code: `(&((&(func_struct.x[uniform_value])).x[uniform_value]).x)[uniform_value] = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: true,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref4a: {\n    code: `(&((&(func_struct.x[uniform_value])).x[uniform_value]).x)[uniform_value] = nonuniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref4b: {\n    code: `(&((&(func_struct.x[uniform_value])).x)[uniform_value]).x[nonuniform_value] = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref4c: {\n    code: `(&((&(func_struct.x[uniform_value])).x[nonuniform_value]).x)[uniform_value] = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref4d: {\n    code: `(&((&(func_struct.x[nonuniform_value])).x[uniform_value]).x)[uniform_value] = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n  contents_lhs_pointer_deref4e: {\n    code: `(&((&(func_struct.x[uniform_value])).x)[needs_uniform(nonuniform_value)].x[uniform_value]) = uniform_value;\n    let test_val = func_struct.x[0].x[0].x[0];`,\n    check: `contents`,\n    uniform: 'never',\n    needs_deref_sugar: true,\n  },\n  contents_rhs_pointer_deref1: {\n    code: `let test_val = (&func_array)[uniform_value];`,\n    check: `contents`,\n    uniform: true,\n    needs_deref_sugar: true,\n  },\n  contents_rhs_pointer_deref1a: {\n    code: `let test_val = (&func_array)[nonuniform_value];`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n  contents_rhs_pointer_deref2: {\n    code: `let test_val = (&func_array)[needs_uniform(nonuniform_value)];`,\n    check: `contents`,\n    uniform: `never`,\n    needs_deref_sugar: true,\n  },\n  contents_rhs_pointer_swizzle_uniform: {\n    code: `func_vector = vec4(uniform_value);\n    let test_val = dot((&func_vector).yw, vec2());`,\n    check: `contents`,\n    uniform: true,\n    needs_deref_sugar: true,\n  },\n  contents_rhs_pointer_swizzle_non_uniform: {\n    code: `func_vector = vec4(nonuniform_value);\n    let test_val = dot((&func_vector).yw, vec2());`,\n    check: `contents`,\n    uniform: false,\n    needs_deref_sugar: true,\n  },\n};\n\ng.test('pointers')\n  .desc(`Test pointer uniformity (contents and addresses)`)\n  .params(u => u.combine('case', keysOf(kPointerCases)).beginSubcases())\n  .fn(t => {\n    const testcase = kPointerCases[t.params.case];\n    const code = `\nvar<workgroup> wg_scalar : u32;\nvar<workgroup> wg_array : array<u32, 16>;\n\nstruct Inner {\n  x : array<u32, 4>\n}\nstruct Middle {\n  x : array<Inner, 4>\n}\nstruct Outer {\n  x : array<Middle, 4>\n}\nvar<workgroup> wg_struct : Outer;\n\n@group(0) @binding(0)\nvar<storage> uniform_value : u32;\n@group(0) @binding(1)\nvar<storage, read_write> nonuniform_value : u32;\n\nfn needs_uniform(val : u32) -> u32{\n  if val == 0 {\n    workgroupBarrier();\n  }\n  return val;\n}\n\n@compute @workgroup_size(16, 1, 1)\nfn main(@builtin(local_invocation_id) lid : vec3<u32>,\n        @builtin(global_invocation_id) gid : vec3<u32>) {\n  var func_scalar : u32;\n  var func_vector : vec4u;\n  var func_array : array<u32, 16>;\n  var func_struct : Outer;\n\n  ${testcase.code}\n`;\n\n    const with_check =\n      code +\n      `\n${generatePointerCheck(testcase.check)}\n}`;\n\n    if (testcase.needs_deref_sugar === true) {\n      t.skipIfLanguageFeatureNotSupported('pointer_composite_access');\n    }\n    // Explicitly check false to distinguish from never.\n    if (testcase.uniform === false) {\n      const without_check = code + `}\\n`;\n      t.expectCompileResult(true, without_check);\n    }\n    t.expectCompileResult(testcase.uniform === true, with_check);\n  });\n\nfunction expectedUniformity(uniform: string, init: string): boolean {\n  if (uniform === `always`) {\n    return true;\n  } else if (uniform === `init`) {\n    return init === `no_init` || init === `uniform`;\n  }\n\n  // uniform == `never` (or unknown values)\n  return false;\n}\n\nconst kFuncVarCases = {\n  no_assign: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: ``,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  simple_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `x = uniform_value[0];`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  simple_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `x = nonuniform_value[0];`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  compound_assign_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `x += uniform_value[0];`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  compound_assign_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `x -= nonuniform_value[0];`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  unreachable_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      break;\n      x = uniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  unreachable_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      break;\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  if_no_else_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = uniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  if_no_else_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  if_no_then_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n    } else {\n      x = uniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  if_no_then_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n    } else {\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  if_else_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = uniform_value[0];\n    } else {\n      x = uniform_value[1];\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  if_else_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = nonuniform_value[0];\n    } else {\n      x = nonuniform_value[1];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  if_else_split: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = uniform_value[0];\n    } else {\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  if_unreachable_else_none: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n    } else {\n      return;\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  if_unreachable_else_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = uniform_value[0];\n    } else {\n      return;\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  if_unreachable_else_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = nonuniform_value[0];\n    } else {\n      return;\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  if_unreachable_then_none: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      return;\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  if_unreachable_then_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      return;\n    } else {\n      x = uniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  if_unreachable_then_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      return;\n    } else {\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  if_nonescaping_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `if uniform_cond {\n      x = nonuniform_value[0];\n      return;\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  loop_body_depends_on_continuing_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if x > 0 {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n      continuing {\n        x = uniform_value[0];\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `init`,\n  },\n  loop_body_depends_on_continuing_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if x > 0 {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n      continuing {\n        x = nonuniform_value[0];\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `never`,\n  },\n  loop_body_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      x = uniform_value[0];\n      continuing {\n        break if uniform_cond;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  loop_body_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      x = nonuniform_value[0];\n      continuing {\n        break if uniform_cond;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  loop_body_nonuniform_cond: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      // The analysis doesn't recognize the content of the value.\n      x = uniform_value[0];\n      continuing {\n        break if nonuniform_cond;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  loop_unreachable_continuing: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      break;\n      continuing {\n        break if uniform_cond;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  loop_continuing_from_body_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      x = uniform_value[0];\n      continuing  {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `always`,\n  },\n  loop_continuing_from_body_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      x = nonuniform_value[0];\n      continuing  {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `never`,\n  },\n  loop_continuing_from_body_split1: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if uniform_cond {\n        x = uniform_value[0];\n      }\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `init`,\n  },\n  loop_continuing_from_body_split2: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if uniform_cond {\n        x = nonuniform_value[0];\n      }\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `never`,\n  },\n  loop_continuing_from_body_split3: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if uniform_cond {\n        x = uniform_value[0];\n      } else {\n        x = uniform_value[1];\n      }\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `always`,\n  },\n  loop_continuing_from_body_split4: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if nonuniform_cond {\n        x = uniform_value[0];\n      } else {\n        x = uniform_value[1];\n      }\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `never`,\n  },\n  loop_continuing_from_body_split5: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if nonuniform_cond {\n        x = uniform_value[0];\n      } else {\n        x = uniform_value[0];\n      }\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    // The analysis doesn't recognize that uniform_value[0] is assignment on all paths.\n    uniform: `never`,\n  },\n  loop_in_loop_with_continue_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      loop {\n        x = nonuniform_value[0];\n        if nonuniform_cond {\n          break;\n        }\n        continue;\n      }\n      x = uniform_value[0];\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `always`,\n  },\n  loop_in_loop_with_continue_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      loop {\n        x = uniform_value[0];\n        if uniform_cond {\n          break;\n        }\n        continue;\n      }\n      x = nonuniform_value[0];\n      continuing {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n        break if uniform_cond;\n      }\n    }`,\n    cond: `true`, // override the standard check\n    uniform: `never`,\n  },\n  after_loop_with_uniform_break_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if uniform_cond {\n        x = uniform_value[0];\n        break;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  after_loop_with_uniform_break_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if uniform_cond {\n        x = nonuniform_value[0];\n        break;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  after_loop_with_nonuniform_break: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if nonuniform_cond {\n        x = uniform_value[0];\n        break;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  after_loop_with_uniform_breaks: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `loop {\n      if uniform_cond {\n        x = uniform_value[0];\n        break;\n      } else {\n        break;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  switch_uniform_case: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch uniform_val {\n      case 0 {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n      }\n      default {\n      }\n    }`,\n    cond: `true`, // override default check\n    uniform: `init`,\n  },\n  switch_nonuniform_case: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch nonuniform_val {\n      case 0 {\n        if x > 0 {\n          let tmp = textureSample(t, s, vec2f(0,0));\n        }\n      }\n      default {\n      }\n    }`,\n    cond: `true`, // override default check\n    uniform: `never`,\n  },\n  after_switch_all_uniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch uniform_val {\n      case 0 {\n        x = uniform_value[0];\n      }\n      case 1,2 {\n        x = uniform_value[1];\n      }\n      default {\n        x = uniform_value[2];\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  after_switch_some_assign: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch uniform_val {\n      case 0 {\n        x = uniform_value[0];\n      }\n      case 1,2 {\n        x = uniform_value[1];\n      }\n      default {\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  after_switch_nonuniform: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch uniform_val {\n      case 0 {\n        x = uniform_value[0];\n      }\n      case 1,2 {\n        x = uniform_value[1];\n      }\n      default {\n        x = nonuniform_value[0];\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  after_switch_with_break_nonuniform1: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch uniform_val {\n      default {\n        if uniform_cond {\n          x = uniform_value[0];\n          break;\n        }\n        x = nonuniform_value[0];\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  after_switch_with_break_nonuniform2: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `switch uniform_val {\n      default {\n        x = uniform_value[0];\n        if uniform_cond {\n          x = nonuniform_value[0];\n          break;\n        }\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  for_loop_uniform_body: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (var i = 0; i < 10; i += 1) {\n      x = uniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  for_loop_nonuniform_body: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (var i = 0; i < 10; i += 1) {\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  for_loop_uniform_body_no_condition: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (var i = 0; ; i += 1) {\n      x = uniform_value[0];\n      if uniform_cond {\n        break;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  for_loop_nonuniform_body_no_condition: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (var i = 0; ; i += 1) {\n      x = nonuniform_value[0];\n      if uniform_cond {\n        break;\n      }\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  for_loop_uniform_increment: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (; uniform_cond; x += uniform_value[0]) {\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  for_loop_nonuniform_increment: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (; uniform_cond; x += nonuniform_value[0]) {\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  for_loop_uniform_init: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (x = uniform_value[0]; uniform_cond; ) {\n    }`,\n    cond: `x > 0`,\n    uniform: `always`,\n  },\n  for_loop_nonuniform_init: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `for (x = nonuniform_value[0]; uniform_cond;) {\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  while_loop_uniform_body: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `while uniform_cond {\n      x = uniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `init`,\n  },\n  while_loop_nonuniform_body: {\n    typename: `u32`,\n    typedecl: ``,\n    assignment: `while uniform_cond {\n      x = nonuniform_value[0];\n    }`,\n    cond: `x > 0`,\n    uniform: `never`,\n  },\n  partial_assignment_uniform: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32,\n      y : u32\n    }`,\n    assignment: `x.x = uniform_value[0].x;`,\n    cond: `x.x > 0`,\n    uniform: `init`,\n  },\n  partial_assignment_nonuniform: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32,\n      y : u32\n    }`,\n    assignment: `x.x = nonuniform_value[0].x;`,\n    cond: `x.x > 0`,\n    uniform: `never`,\n  },\n  partial_assignment_all_members_uniform: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32,\n      y : u32\n    }`,\n    assignment: `x.x = uniform_value[0].x;\n    x.y = uniform_value[1].y;`,\n    cond: `x.x > 0`,\n    uniform: `init`,\n  },\n  partial_assignment_all_members_nonuniform: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32,\n      y : u32\n    }`,\n    assignment: `x.x = nonuniform_value[0].x;\n    x.y = uniform_value[0].x;`,\n    cond: `x.x > 0`,\n    uniform: `never`,\n  },\n  partial_assignment_single_element_struct_uniform: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32\n    }`,\n    assignment: `x.x = uniform_value[0].x;`,\n    cond: `x.x > 0`,\n    uniform: `init`,\n  },\n  partial_assignment_single_element_struct_nonuniform: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32\n    }`,\n    assignment: `x.x = nonuniform_value[0].x;`,\n    cond: `x.x > 0`,\n    uniform: `never`,\n  },\n  partial_assignment_single_element_array_uniform: {\n    typename: `array<u32, 1>`,\n    typedecl: ``,\n    assignment: `x[0] = uniform_value[0][0];`,\n    cond: `x[0] > 0`,\n    uniform: `init`,\n  },\n  partial_assignment_single_element_array_nonuniform: {\n    typename: `array<u32, 1>`,\n    typedecl: ``,\n    assignment: `x[0] = nonuniform_value[0][0];`,\n    cond: `x[0] > 0`,\n    uniform: `never`,\n  },\n  nested1: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32,\n      y : u32\n    }`,\n    assignment: `for (; uniform_cond; ) {\n      if uniform_cond {\n        x = uniform_value[0];\n        break;\n        x.y = nonuniform_value[0].y;\n      } else {\n        if uniform_cond {\n          continue;\n        }\n        x = uniform_value[1];\n      }\n    }`,\n    cond: `x.x > 0`,\n    uniform: `init`,\n  },\n  nested2: {\n    typename: `block`,\n    typedecl: `struct block {\n      x : u32,\n      y : u32\n    }`,\n    assignment: `for (; uniform_cond; ) {\n      if uniform_cond {\n        x = uniform_value[0];\n        break;\n        x.y = nonuniform_value[0].y;\n      } else {\n        if nonuniform_cond {\n          continue;\n        }\n        x = uniform_value[1];\n      }\n    }`,\n    cond: `x.x > 0`,\n    uniform: `never`,\n  },\n};\n\nconst kVarInit = {\n  no_init: ``,\n  uniform: `= uniform_value[3];`,\n  nonuniform: `= nonuniform_value[3];`,\n};\n\ng.test('function_variables')\n  .desc(`Test uniformity of function variables`)\n  .params(u => u.combine('case', keysOf(kFuncVarCases)).combine('init', keysOf(kVarInit)))\n  .fn(t => {\n    const func_case = kFuncVarCases[t.params.case];\n    const code = `\n${func_case.typedecl}\n\n@group(0) @binding(0)\nvar<storage> uniform_value : array<${func_case.typename}, 4>;\n@group(0) @binding(1)\nvar<storage, read_write> nonuniform_value : array<${func_case.typename}, 4>;\n\n@group(1) @binding(0)\nvar t : texture_2d<f32>;\n@group(1) @binding(1)\nvar s : sampler;\n\nvar<private> nonuniform_cond : bool = true;\nconst uniform_cond : bool = true;\nvar<private> nonuniform_val : u32 = 0;\nconst uniform_val : u32 = 0;\n\n@fragment\nfn main() {\n  var x : ${func_case.typename} ${kVarInit[t.params.init]};\n\n  ${func_case.assignment}\n\n  if ${func_case.cond} {\n    let tmp = textureSample(t, s, vec2f(0,0));\n  }\n}\n`;\n\n    const result = expectedUniformity(func_case.uniform, t.params.init);\n    if (!result) {\n      t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    }\n    t.expectCompileResult(result, code);\n  });\n\nconst kShortCircuitExpressionCases = {\n  or_uniform_uniform: {\n    code: `\n      let x = uniform_cond || uniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: true,\n  },\n  or_uniform_nonuniform: {\n    code: `\n      let x = uniform_cond || nonuniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: false,\n  },\n  or_nonuniform_uniform: {\n    code: `\n      let x = nonuniform_cond || uniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: false,\n  },\n  or_nonuniform_nonuniform: {\n    code: `\n      let x = nonuniform_cond || nonuniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: false,\n  },\n  or_uniform_first_nonuniform: {\n    code: `\n      let x = textureSample(t, s, vec2f(0,0)).x == 0 || nonuniform_cond;\n    `,\n    uniform: true,\n  },\n  or_uniform_second_nonuniform: {\n    code: `\n      let x = nonuniform_cond || textureSample(t, s, vec2f(0,0)).x == 0;\n    `,\n    uniform: false,\n  },\n  and_uniform_uniform: {\n    code: `\n      let x = uniform_cond && uniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: true,\n  },\n  and_uniform_nonuniform: {\n    code: `\n      let x = uniform_cond && nonuniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: false,\n  },\n  and_nonuniform_uniform: {\n    code: `\n      let x = nonuniform_cond && uniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: false,\n  },\n  and_nonuniform_nonuniform: {\n    code: `\n      let x = nonuniform_cond && nonuniform_cond;\n      if x {\n        let tmp = textureSample(t, s, vec2f(0,0));\n      }\n    `,\n    uniform: false,\n  },\n  and_uniform_first_nonuniform: {\n    code: `\n      let x = textureSample(t, s, vec2f(0,0)).x == 0 && nonuniform_cond;\n    `,\n    uniform: true,\n  },\n  and_uniform_second_nonuniform: {\n    code: `\n      let x = nonuniform_cond && textureSample(t, s, vec2f(0,0)).x == 0;\n    `,\n    uniform: false,\n  },\n};\n\nconst kPointerParamCases = {\n  pointer_uniform_passthrough_value: {\n    function: `fn foo(p : ptr<function, u32>) -> u32 {\n      return *p;\n    }`,\n    call: `var x = uniform_values[0];\n    let call = foo(&x);`,\n    cond: `x > 0`,\n    uniform: true,\n  },\n  pointer_nonuniform_passthrough_value: {\n    function: `fn foo(p : ptr<function, u32>) -> u32 {\n      return *p;\n    }`,\n    call: `var x = uniform_values[0];\n    let call = foo(&x);`,\n    cond: `x > 0`,\n    uniform: true,\n  },\n  pointer_store_uniform_value: {\n    function: `fn foo(p : ptr<function, u32>) {\n      *p = uniform_values[0];\n    }`,\n    call: `var x = nonuniform_values[0];\n    foo(&x);`,\n    cond: `x > 0`,\n    uniform: true,\n  },\n  pointer_store_nonuniform_value: {\n    function: `fn foo(p : ptr<function, u32>) {\n      *p = nonuniform_values[0];\n    }`,\n    call: `var x = uniform_values[0];\n    foo(&x);`,\n    cond: `x > 0`,\n    uniform: false,\n  },\n  pointer_depends_on_nonpointer_param_uniform: {\n    function: `fn foo(p : ptr<function, u32>, x : u32) {\n      *p = x;\n    }`,\n    call: `var x = nonuniform_values[0];\n    foo(&x, uniform_values[0]);`,\n    cond: `x > 0`,\n    uniform: true,\n  },\n  pointer_depends_on_nonpointer_param_nonuniform: {\n    function: `fn foo(p : ptr<function, u32>, x : u32) {\n      *p = x;\n    }`,\n    call: `var x = uniform_values[0];\n    foo(&x, nonuniform_values[0]);`,\n    cond: `x > 0`,\n    uniform: false,\n  },\n  pointer_depends_on_pointer_param_uniform: {\n    function: `fn foo(p : ptr<function, u32>, q : ptr<function, u32>) {\n      *p = *q;\n    }`,\n    call: `var x = nonuniform_values[0];\n    var y = uniform_values[0];\n    foo(&x, &y);`,\n    cond: `x > 0`,\n    uniform: true,\n  },\n  pointer_depends_on_pointer_param_nonuniform: {\n    function: `fn foo(p : ptr<function, u32>, q : ptr<function, u32>) {\n      *p = *q;\n    }`,\n    call: `var x = uniform_values[0];\n    var y = nonuniform_values[0];\n    foo(&x, &y);`,\n    cond: `x > 0`,\n    uniform: false,\n  },\n  pointer_codependent1: {\n    function: `fn foo(p : ptr<function, u32>, q : ptr<function, u32>) {\n      if *p > 0 {\n        *p = *q;\n      } else {\n        *q++;\n      }\n    }`,\n    call: `var x = uniform_values[0];\n    var y = uniform_values[1];\n    foo(&x, &y);\n    let a = x + y;`,\n    cond: `a > 0`,\n    uniform: true,\n  },\n  pointer_codependent2: {\n    function: `fn foo(p : ptr<function, u32>, q : ptr<function, u32>) {\n      if *p > 0 {\n        *p = *q;\n      } else {\n        *q++;\n      }\n    }`,\n    call: `var x = uniform_values[0];\n    var y = nonuniform_values[1];\n    foo(&x, &y);\n    let a = x + y;`,\n    cond: `a > 0`,\n    uniform: false,\n  },\n  pointer_codependent3: {\n    function: `fn foo(p : ptr<function, u32>, q : ptr<function, u32>) {\n      if *p > 0 {\n        *p = *q;\n      } else {\n        *q++;\n      }\n    }`,\n    call: `var x = nonuniform_values[0];\n    var y = uniform_values[1];\n    foo(&x, &y);\n    let a = x + y;`,\n    cond: `a > 0`,\n    uniform: false,\n  },\n  pointer_codependent4: {\n    function: `fn foo(p : ptr<function, u32>, q : ptr<function, u32>) {\n      if *p > 0 {\n        *p = *q;\n      } else {\n        *q++;\n      }\n    }`,\n    call: `var x = nonuniform_values[0];\n    var y = nonuniform_values[1];\n    foo(&x, &y);\n    let a = x + y;`,\n    cond: `a > 0`,\n    uniform: false,\n  },\n  uniform_param_uniform_assignment: {\n    function: `fn foo(p : ptr<function, array<u32, 2>>, idx : u32) {\n      (*p)[idx] = uniform_values[0];\n    }`,\n    call: `var x = array(uniform_values[0], uniform_values[1]);\n    foo(&x, uniform_values[3]);`,\n    cond: `x[0] > 0`,\n    uniform: true,\n  },\n  uniform_param_nonuniform_assignment: {\n    function: `fn foo(p : ptr<function, array<u32, 2>>, idx : u32) {\n      (*p)[idx] = nonuniform_values[0];\n    }`,\n    call: `var x = array(uniform_values[0], uniform_values[1]);\n    foo(&x, uniform_values[3]);`,\n    cond: `x[0] > 0`,\n    uniform: false,\n  },\n  nonuniform_param_uniform_assignment: {\n    function: `fn foo(p : ptr<function, array<u32, 2>>, idx : u32) {\n      (*p)[idx] = uniform_values[0];\n    }`,\n    call: `var x = array(uniform_values[0], uniform_values[1]);\n    foo(&x, u32(clamp(pos.x, 0, 1)));`,\n    cond: `x[0] > 0`,\n    uniform: false,\n  },\n  nonuniform_param_nonuniform_assignment: {\n    function: `fn foo(p : ptr<function, array<u32, 2>>, idx : u32) {\n      (*p)[idx] = nonuniform_values[0];\n    }`,\n    call: `var x = array(uniform_values[0], uniform_values[1]);\n    foo(&x, u32(clamp(pos.x, 0, 1)));`,\n    cond: `x[0] > 0`,\n    uniform: false,\n  },\n  required_uniform_success: {\n    function: `fn foo(p : ptr<function, u32>) {\n      if *p > 0 {\n        let tmp = textureSample(t,s,vec2f(0,0));\n      }\n    }`,\n    call: `var x = uniform_values[0];\n    foo(&x);`,\n    cond: `uniform_cond`,\n    uniform: true,\n  },\n  required_uniform_failure: {\n    function: `fn foo(p : ptr<function, u32>) {\n      if *p > 0 {\n        let tmp = textureSample(t,s,vec2f(0,0));\n      }\n    }`,\n    call: `var x = nonuniform_values[0];\n    foo(&x);`,\n    cond: `uniform_cond`,\n    uniform: false,\n  },\n  uniform_conditional_call_assign_uniform: {\n    function: `fn foo(p : ptr<function, u32>) {\n      *p = uniform_values[0];\n    }`,\n    call: `var x = uniform_values[1];\n    if uniform_cond {\n      foo(&x);\n    }`,\n    cond: `x > 0`,\n    uniform: true,\n  },\n  uniform_conditional_call_assign_nonuniform1: {\n    function: `fn foo(p : ptr<function, u32>) {\n      *p = nonuniform_values[0];\n    }`,\n    call: `var x = uniform_values[1];\n    if uniform_cond {\n      foo(&x);\n    }`,\n    cond: `x > 0`,\n    uniform: false,\n  },\n  uniform_conditional_call_assign_nonuniform2: {\n    function: `fn foo(p : ptr<function, u32>) {\n      *p = uniform_values[0];\n    }`,\n    call: `var x = nonuniform_values[1];\n    if uniform_cond {\n      foo(&x);\n    }`,\n    cond: `x > 0`,\n    uniform: false,\n  },\n  nonuniform_conditional_call_assign_uniform: {\n    function: `fn foo(p : ptr<function, u32>) {\n      *p = uniform_values[0];\n    }`,\n    call: `var x = uniform_values[1];\n    if nonuniform_cond {\n      foo(&x);\n    }`,\n    cond: `x > 0`,\n    uniform: false,\n  },\n};\n\ng.test('function_pointer_parameters')\n  .desc(`Test functions and calls with pointer parameters`)\n  .params(u => u.combine('case', keysOf(kPointerParamCases)))\n  .fn(t => {\n    const pointer_case = kPointerParamCases[t.params.case];\n    const code = `\n@group(0) @binding(0)\nvar t : texture_2d<f32>;\n@group(0) @binding(1)\nvar s : sampler;\n\nconst uniform_cond = true;\nvar<private> nonuniform_cond = true;\n\n@group(1) @binding(0)\nvar<storage> uniform_values : array<u32, 4>;\n@group(1) @binding(1)\nvar<storage, read_write> nonuniform_values : array<u32, 4>;\n\n${pointer_case.function}\n\n@fragment\nfn main(@builtin(position) pos : vec4f) {\n  ${pointer_case.call}\n\n  if ${pointer_case.cond} {\n    let tmp = textureSample(t,s,vec2f(0,0));\n  }\n}\n`;\n\n    const res = pointer_case.uniform;\n    if (!res) {\n      t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    }\n    t.expectCompileResult(res, code);\n  });\n\ng.test('short_circuit_expressions')\n  .desc(`Test uniformity of expressions`)\n  .params(u => u.combine('case', keysOf(kShortCircuitExpressionCases)))\n  .fn(t => {\n    const testcase = kShortCircuitExpressionCases[t.params.case];\n    const code = `\n@group(1) @binding(0)\nvar t : texture_2d<f32>;\n@group(1) @binding(1)\nvar s : sampler;\n\nconst uniform_cond = true;\nvar<private> nonuniform_cond = false;\n\n@fragment\nfn main() {\n  ${testcase.code}\n}\n`;\n\n    const res = testcase.uniform;\n    if (!res) {\n      t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    }\n    t.expectCompileResult(res, code);\n  });\n\nconst kExpressionCases = {\n  literal: {\n    code: `1u`,\n    uniform: true,\n  },\n  uniform: {\n    code: `uniform_val`,\n    uniform: true,\n  },\n  nonuniform: {\n    code: `nonuniform_val`,\n    uniform: false,\n  },\n  uniform_index: {\n    code: `uniform_value[uniform_val]`,\n    uniform: true,\n  },\n  nonuniform_index1: {\n    code: `uniform_value[nonuniform_val]`,\n    uniform: false,\n  },\n  nonuniform_index2: {\n    code: `nonuniform_value[uniform_val]`,\n    uniform: false,\n  },\n  uniform_struct: {\n    code: `uniform_struct.x`,\n    uniform: true,\n  },\n  nonuniform_struct: {\n    code: `nonuniform_struct.x`,\n    uniform: false,\n  },\n};\n\nconst kBinOps = {\n  plus: {\n    code: '+',\n    test: '> 0',\n  },\n  minus: {\n    code: '-',\n    test: '> 0',\n  },\n  times: {\n    code: '*',\n    test: '> 0',\n  },\n  div: {\n    code: '/',\n    test: '> 0',\n  },\n  rem: {\n    code: '%',\n    test: '> 0',\n  },\n  and: {\n    code: '&',\n    test: '> 0',\n  },\n  or: {\n    code: '|',\n    test: '> 0',\n  },\n  xor: {\n    code: '^',\n    test: '> 0',\n  },\n  shl: {\n    code: '<<',\n    test: '> 0',\n  },\n  shr: {\n    code: '>>',\n    test: '> 0',\n  },\n  less: {\n    code: '<',\n    test: '',\n  },\n  lessequal: {\n    code: '<=',\n    test: '',\n  },\n  greater: {\n    code: '>',\n    test: '',\n  },\n  greaterequal: {\n    code: '>=',\n    test: '',\n  },\n  equal: {\n    code: '==',\n    test: '',\n  },\n  notequal: {\n    code: '!=',\n    test: '',\n  },\n};\n\ng.test('binary_expressions')\n  .desc(`Test uniformity of binary expressions`)\n  .params(u =>\n    u\n      .combine('e1', keysOf(kExpressionCases))\n      .combine('e2', keysOf(kExpressionCases))\n      .beginSubcases()\n      .combine('op', keysOf(kBinOps))\n  )\n  .fn(t => {\n    const e1 = kExpressionCases[t.params.e1];\n    const e2 = kExpressionCases[t.params.e2];\n    const op = kBinOps[t.params.op];\n    const code = `\n@group(0) @binding(0)\nvar t : texture_2d<f32>;\n@group(0) @binding(1)\nvar s : sampler;\n\nstruct S {\n  x : u32\n}\n\nconst uniform_struct = S(1);\nvar<private> nonuniform_struct = S(1);\n\nconst uniform_value : array<u32, 2> = array(1,1);\nvar<private> nonuniform_value : array<u32, 2> = array(1,1);\n\nconst uniform_val : u32 = 1;\nvar<private> nonuniform_val : u32 = 1;\n\n@fragment\nfn main() {\n  let tmp = ${e1.code} ${op.code} ${e2.code};\n  if tmp ${op.test} {\n    let res = textureSample(t, s, vec2f(0,0));\n  }\n}\n`;\n\n    const res = e1.uniform && e2.uniform;\n    if (!res) {\n      t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    }\n    t.expectCompileResult(res, code);\n  });\n\ng.test('unary_expressions')\n  .desc(`Test uniformity of uniary expressions`)\n  .params(u =>\n    u\n      .combine('e', keysOf(kExpressionCases))\n      .combine('op', ['!b_tmp', '~i_tmp > 0', '-i32(i_tmp) > 0'] as const)\n  )\n  .fn(t => {\n    const e = kExpressionCases[t.params.e];\n    const code = `\n@group(0) @binding(0)\nvar t : texture_2d<f32>;\n@group(0) @binding(1)\nvar s : sampler;\n\nstruct S {\n  x : i32\n}\n\nconst uniform_struct = S(1);\nvar<private> nonuniform_struct = S(1);\n\nconst uniform_value : array<i32, 2> = array(1,1);\nvar<private> nonuniform_value : array<i32, 2> = array(1,1);\n\nconst uniform_val : i32 = 1;\nvar<private> nonuniform_val : i32 = 1;\n\n@fragment\nfn main() {\n  let i_tmp = ${e.code};\n  let b_tmp = bool(i_tmp);\n  let tmp = ${t.params.op};\n  if tmp {\n    let res = textureSample(t, s, vec2f(0,0));\n  }\n}\n`;\n\n    const res = e.uniform;\n    if (!res) {\n      t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    }\n    t.expectCompileResult(res, code);\n  });\n\nconst kFunctionCases = {\n  uniform_result: {\n    function: `fn foo() -> u32 {\n      return uniform_values[0];\n    }`,\n    call: `let call = foo();`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  nonuniform_result: {\n    function: `fn foo() -> u32 {\n      return nonuniform_values[0];\n    }`,\n    call: `let call = foo();`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  nonuniform_return_is_uniform_after_call: {\n    function: `fn foo() {\n      if nonuniform_values[0] > 0 {\n        return;\n      } else {\n        return;\n      }\n    }`,\n    call: `foo();`,\n    cond: `uniform_cond`,\n    uniform: true,\n  },\n  uniform_passthrough_parameter: {\n    function: `fn foo(x : u32) -> u32 {\n      return x;\n    }`,\n    call: `let call = foo(uniform_values[0]);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  nonuniform_passthrough_parameter: {\n    function: `fn foo(x : u32) -> u32 {\n      return x;\n    }`,\n    call: `let call = foo(nonuniform_values[0]);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  combined_parameters1: {\n    function: `fn foo(x : u32, y : u32) -> u32 {\n      return x + y;\n    }`,\n    call: `let call = foo(uniform_values[0], uniform_values[1]);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  combined_parameters2: {\n    function: `fn foo(x : u32, y : u32) -> u32 {\n      return x + y;\n    }`,\n    call: `let call = foo(nonuniform_values[0], uniform_values[1]);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  combined_parameters3: {\n    function: `fn foo(x : u32, y : u32) -> u32 {\n      return x + y;\n    }`,\n    call: `let call = foo(uniform_values[0], nonuniform_values[1]);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  combined_parameters4: {\n    function: `fn foo(x : u32, y : u32) -> u32 {\n      return x + y;\n    }`,\n    call: `let call = foo(nonuniform_values[0], nonuniform_values[1]);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  uniform_parameter_cf_after_nonuniform_expr: {\n    function: `fn foo(x : bool, y : vec4f) -> f32 {\n      return select(0, y.x, x);\n    }`,\n    call: `let call = foo(nonuniform_cond || uniform_cond, textureSample(t,s,vec2f(0,0)));`,\n    cond: `uniform_cond`,\n    uniform: true,\n  },\n  required_uniform_function_call_in_uniform_cf: {\n    function: `fn foo() -> vec4f {\n      return textureSample(t,s,vec2f(0,0));\n    }`,\n    call: `if uniform_cond {\n      let call = foo();\n    }`,\n    cond: `uniform_cond`,\n    uniform: true,\n  },\n  required_uniform_function_call_in_nonuniform_cf: {\n    function: `fn foo() -> vec4f {\n      return textureSample(t,s,vec2f(0,0));\n    }`,\n    call: `if nonuniform_cond {\n      let call = foo();\n    }`,\n    cond: `uniform_cond`,\n    uniform: false,\n  },\n  required_uniform_function_call_in_nonuniform_cf2: {\n    function: `@diagnostic(warning, derivative_uniformity)\n    fn foo() -> vec4f {\n      return textureSample(t,s,vec2f(0,0));\n    }`,\n    call: `if nonuniform_cond {\n      let call = foo();\n      let sample = textureSample(t,s,vec2f(0,0));\n    }`,\n    cond: `uniform_cond`,\n    uniform: false,\n  },\n  required_uniform_function_call_depends_on_uniform_param: {\n    function: `fn foo(x : bool) -> vec4f {\n      if x {\n        return textureSample(t,s,vec2f(0,0));\n      }\n      return vec4f(0);\n    }`,\n    call: `let call = foo(uniform_cond);`,\n    cond: `uniform_cond`,\n    uniform: true,\n  },\n  required_uniform_function_call_depends_on_nonuniform_param: {\n    function: `fn foo(x : bool) -> vec4f {\n      if x {\n        return textureSample(t,s,vec2f(0,0));\n      }\n      return vec4f(0);\n    }`,\n    call: `let call = foo(nonuniform_cond);`,\n    cond: `uniform_cond`,\n    uniform: false,\n  },\n  dpdx_nonuniform_result: {\n    function: ``,\n    call: `let call = dpdx(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  dpdy_nonuniform_result: {\n    function: ``,\n    call: `let call = dpdy(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  dpdxCoarse_nonuniform_result: {\n    function: ``,\n    call: `let call = dpdxCoarse(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  dpdyCoarse_nonuniform_result: {\n    function: ``,\n    call: `let call = dpdyCoarse(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  dpdxFine_nonuniform_result: {\n    function: ``,\n    call: `let call = dpdxFine(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  dpdyFine_nonuniform_result: {\n    function: ``,\n    call: `let call = dpdyFine(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  fwidth_nonuniform_result: {\n    function: ``,\n    call: `let call = fwidth(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  fwidthCoarse_nonuniform_result: {\n    function: ``,\n    call: `let call = fwidthCoarse(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  fwidthFine_nonuniform_result: {\n    function: ``,\n    call: `let call = fwidthFine(1);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  textureSample_nonuniform_result: {\n    function: ``,\n    call: `let call = textureSample(t,s,vec2f(0,0));`,\n    cond: `call.x > 0`,\n    uniform: false,\n  },\n  textureSampleBias_nonuniform_result: {\n    function: ``,\n    call: `let call = textureSampleBias(t,s,vec2f(0,0), 0);`,\n    cond: `call.x > 0`,\n    uniform: false,\n  },\n  textureSampleCompare_nonuniform_result: {\n    function: ``,\n    call: `let call = textureSampleCompare(td,sd,vec2f(0,0), 0);`,\n    cond: `call > 0`,\n    uniform: false,\n  },\n  textureDimensions_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureDimensions(t);`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  textureGather_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureGather(0,t,s,vec2f(0,0));`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  textureGatherCompare_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureGatherCompare(td,sd,vec2f(0,0), 0);`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  textureLoad_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureLoad(t,vec2u(0,0),0);`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  textureNumLayers_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureNumLayers(ta);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  textureNumLevels_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureNumLevels(t);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  textureNumSamples_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureNumSamples(ts);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  textureSampleLevel_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureSampleLevel(t,s,vec2f(0,0),0);`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  textureSampleGrad_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureSampleGrad(t,s,vec2f(0,0),vec2f(0,0),vec2f(0,0));`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  textureSampleCompareLevel_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureSampleCompareLevel(td,sd,vec2f(0,0), 0);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  textureSampleBaseClampToEdge_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = textureSampleBaseClampToEdge(t,s,vec2f(0,0));`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n  min_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = min(0,0);`,\n    cond: `call > 0`,\n    uniform: true,\n  },\n  value_constructor_uniform_input_uniform_result: {\n    function: ``,\n    call: `let call = vec2u(0,0);`,\n    cond: `call.x > 0`,\n    uniform: true,\n  },\n};\n\ng.test('functions')\n  .desc(`Test uniformity of function calls (non-pointer parameters)`)\n  .params(u => u.combine('case', keysOf(kFunctionCases)))\n  .fn(t => {\n    const func_case = kFunctionCases[t.params.case];\n    const code = `\n@group(0) @binding(0)\nvar t : texture_2d<f32>;\n@group(0) @binding(1)\nvar s : sampler;\n@group(0) @binding(2)\nvar td : texture_depth_2d;\n@group(0) @binding(3)\nvar sd : sampler_comparison;\n@group(0) @binding(4)\nvar ta : texture_2d_array<f32>;\n@group(0) @binding(5)\nvar ts : texture_multisampled_2d<f32>;\n\nconst uniform_cond = true;\nvar<private> nonuniform_cond = true;\n\n@group(1) @binding(0)\nvar<storage> uniform_values : array<u32, 4>;\n@group(1) @binding(1)\nvar<storage, read_write> nonuniform_values : array<u32, 4>;\n\n${func_case.function}\n\n@fragment\nfn main() {\n  ${func_case.call}\n\n  if ${func_case.cond} {\n    let tmp = textureSample(t,s,vec2f(0,0));\n  }\n}\n`;\n\n    const res = func_case.uniform;\n    if (!res) {\n      t.expectCompileResult(true, `diagnostic(off, derivative_uniformity);\\n` + code);\n    }\n    t.expectCompileResult(res, code);\n  });\n\ng.test('subgroups,parameters')\n  .desc('Test subgroup operations that require a uniform parameter')\n  .params(u =>\n    u\n      .combine('op', ['subgroupShuffleUp', 'subgroupShuffleDown', 'subgroupShuffleXor'] as const)\n      .combine('uniform', [false, true] as const)\n  )\n  .fn(t => {\n    const wgsl = `\nenable subgroups;\n\nvar<private> non_uniform : u32 = 0;\n\n@group(0) @binding(0)\nvar<storage> uniform : u32;\n\n@compute @workgroup_size(16,1,1)\nfn main() {\n  let x = ${t.params.op}(non_uniform, ${t.params.uniform ? 'uniform' : 'non_uniform'});\n}`;\n\n    t.expectCompileResult(t.params.uniform, wgsl);\n  });\n"],"mappings":"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"}