{"version":3,"file":"util.js","names":["generateShader","attribute","type","stage","io","use_struct","code","includes","param","retType","retVal","groupAndBinding","group","binding","undefined","basicEmitter","name","kResourceEmitters","Map","kResourceKindsAll","kResourceKindsA","kResourceKindsB","declareEntrypoint","body"],"sources":["../../../../../src/webgpu/shader/validation/shader_io/util.ts"],"sourcesContent":["/**\n * Generate an entry point that uses an entry point IO variable.\n *\n * @param {Object} params\n * @param params.attribute The entry point IO attribute.\n * @param params.type The type to use for the entry point IO variable.\n * @param params.stage The shader stage.\n * @param params.io An \"in|out\" string specifying whether the entry point IO is an input or an output.\n * @param params.use_struct True to wrap the entry point IO in a struct.\n * @returns The generated shader code.\n */\nexport function generateShader({\n  attribute,\n  type,\n  stage,\n  io,\n  use_struct,\n}: {\n  attribute: string;\n  type: string;\n  stage: string;\n  io: string;\n  use_struct: boolean;\n}) {\n  let code = '';\n\n  if (attribute.includes('subgroup')) {\n    code += 'enable subgroups;\\n';\n  }\n  if (attribute.includes('clip_distances')) {\n    code += 'enable clip_distances;\\n';\n  }\n  if (attribute.includes('primitive_id')) {\n    code += 'enable chromium_experimental_primitive_id;\\n';\n  }\n\n  if (use_struct) {\n    // Generate a struct that wraps the entry point IO variable.\n    code += 'struct S {\\n';\n    code += `  ${attribute} value : ${type},\\n`;\n    if (stage === 'vertex' && io === 'out' && !attribute.includes('builtin(position)')) {\n      // Add position builtin for vertex outputs.\n      code += `  @builtin(position) position : vec4<f32>,\\n`;\n    }\n    code += '};\\n\\n';\n  }\n\n  if (stage !== '') {\n    // Generate the entry point attributes.\n    code += `@${stage}`;\n    if (stage === 'compute') {\n      code += ' @workgroup_size(1)';\n    }\n  }\n\n  // Generate the entry point parameter and return type.\n  let param = '';\n  let retType = '';\n  let retVal = '';\n  if (io === 'in') {\n    if (use_struct) {\n      param = `in : S`;\n    } else {\n      param = `${attribute} value : ${type}`;\n    }\n\n    // Vertex shaders must always return `@builtin(position)`.\n    if (stage === 'vertex') {\n      retType = `-> @builtin(position) vec4<f32>`;\n      retVal = `return vec4<f32>();`;\n    }\n  } else if (io === 'out') {\n    if (use_struct) {\n      retType = '-> S';\n      retVal = `return S();`;\n    } else {\n      retType = `-> ${attribute} ${type}`;\n      retVal = `return ${type}();`;\n    }\n  }\n\n  code += `\n    fn main(${param}) ${retType} {\n      ${retVal}\n    }\n  `;\n\n  return code;\n}\n\n/**\n * ResourceDeclarationEmitter is a function that emits the WGSL declaring a resource variable with\n * the given group, binding and name.\n */\nexport type ResourceDeclarationEmitter = (name: string, group?: number, binding?: number) => string;\n\n/** Helper function for emitting a resource declaration's group and binding attributes */\nfunction groupAndBinding(group?: number, binding?: number): string {\n  return (\n    `${group !== undefined ? `@group(${group})` : '/* no group */'} ` +\n    `${binding !== undefined ? `@binding(${binding})` : '/* no binding */'}`\n  );\n}\n\n/** Helper function for emitting a resource declaration for the given type */\nfunction basicEmitter(type: string): ResourceDeclarationEmitter {\n  return (name: string, group?: number, binding?: number) =>\n    `${groupAndBinding(group, binding)} var ${name} : ${type};\\n`;\n}\n\n/** Map of resource declaration name, to an emitter. */\nexport const kResourceEmitters = new Map<string, ResourceDeclarationEmitter>([\n  ['texture_1d', basicEmitter('texture_1d<i32>')],\n  ['texture_2d', basicEmitter('texture_2d<i32>')],\n  ['texture_2d_array', basicEmitter('texture_2d_array<f32>')],\n  ['texture_3d', basicEmitter('texture_3d<i32>')],\n  ['texture_cube', basicEmitter('texture_cube<u32>')],\n  ['texture_cube_array', basicEmitter('texture_cube_array<u32>')],\n  ['texture_multisampled_2d', basicEmitter('texture_multisampled_2d<i32>')],\n  ['texture_external', basicEmitter('texture_external')],\n  ['texture_storage_1d', basicEmitter('texture_storage_1d<rgba8unorm, write>')],\n  ['texture_storage_2d', basicEmitter('texture_storage_2d<rgba8sint, write>')],\n  ['texture_storage_2d_array', basicEmitter('texture_storage_2d_array<r32uint, write>')],\n  ['texture_storage_3d', basicEmitter('texture_storage_3d<rgba32uint, write>')],\n  ['texture_depth_2d', basicEmitter('texture_depth_2d')],\n  ['texture_depth_2d_array', basicEmitter('texture_depth_2d_array')],\n  ['texture_depth_cube', basicEmitter('texture_depth_cube')],\n  ['texture_depth_cube_array', basicEmitter('texture_depth_cube_array')],\n  ['texture_depth_multisampled_2d', basicEmitter('texture_depth_multisampled_2d')],\n  ['sampler', basicEmitter('sampler')],\n  ['sampler_comparison', basicEmitter('sampler_comparison')],\n  [\n    'uniform',\n    (name: string, group?: number, binding?: number) =>\n      `${groupAndBinding(group, binding)} var<uniform> ${name} : array<vec4<f32>, 16>;\\n`,\n  ],\n  [\n    'storage',\n    (name: string, group?: number, binding?: number) =>\n      `${groupAndBinding(group, binding)} var<storage> ${name} : array<vec4<f32>, 16>;\\n`,\n  ],\n]);\n\n/** All possible resource types for use as test permutations. */\nexport const kResourceKindsAll = [\n  'texture_1d',\n  'texture_2d',\n  'texture_2d_array',\n  'texture_3d',\n  'texture_cube',\n  'texture_cube_array',\n  'texture_multisampled_2d',\n  'texture_external',\n  'texture_storage_1d',\n  'texture_storage_2d',\n  'texture_storage_2d_array',\n  'texture_storage_3d',\n  'texture_depth_2d',\n  'texture_depth_2d_array',\n  'texture_depth_cube',\n  'texture_depth_cube_array',\n  'texture_depth_multisampled_2d',\n  'sampler',\n  'sampler_comparison',\n  'uniform',\n  'storage',\n];\n\n/** A small selection of resource declaration names, which can be used in test permutations */\nexport const kResourceKindsA = ['storage', 'texture_2d', 'texture_external', 'uniform'];\n\n/** A small selection of resource declaration names, which can be used in test permutations */\nexport const kResourceKindsB = ['texture_3d', 'texture_storage_1d', 'uniform'];\n\n/** An enumerator of shader stages */\nexport type ShaderStage = 'vertex' | 'fragment' | 'compute';\n\n/**\n * declareEntrypoint emits the WGSL to declare an entry point with the given name, stage and body.\n * The generated function will have an appropriate return type and return statement, so that `body`\n * does not have to change between stage.\n * @param name the entry point function name\n * @param stage the entry point stage\n * @param body the body of the function (excluding any automatically suffixed return statements)\n * @returns the WGSL string for the entry point\n */\nexport function declareEntrypoint(name: string, stage: ShaderStage, body: string): string {\n  switch (stage) {\n    case 'vertex':\n      return `@vertex\nfn ${name}() -> @builtin(position) vec4f {\n  ${body}\n  return vec4f();\n}`;\n    case 'fragment':\n      return `@fragment\nfn ${name}() {\n  ${body}\n}`;\n    case 'compute':\n      return `@compute @workgroup_size(1)\nfn ${name}() {\n  ${body}\n}`;\n  }\n}\n"],"mappings":"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"}