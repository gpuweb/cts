{"version":3,"file":"matrix.spec.js","names":["description","makeTestGroup","keysOf","Type","ShaderValidationTest","g","test","desc","params","u","combine","fn","t","ty","type","enable","requiresF16","code","create","wgsl","expect","expectCompileResult","beginSubcases","element","scalarTy","vectorTy","rows","matrixTy","columns","module_decl","decl","toString","function_decl","kOutOfBoundsCases","const_module_in_bounds","result","const_module_oob_neg","const_module_oob_pos","const_func_in_bounds","const_func_oob_neg","const_func_oob_pos","override_in_bounds","pipeline","value","override_oob_neg","override_oob_pos","runtime_in_bounds","runtime_oob_neg","runtime_oob_pos","runtime_array_const_oob_neg","runtime_array_override_oob_neg","testcase","case","v","expectPipelineResult","expectedResult","constants","x","reference"],"sources":["../../../../../../src/webgpu/shader/validation/expression/access/matrix.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for matrix access expressions\n\n* Index type\n* Result type\n* Early-evaluation errors\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { Type } from '../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('index_type')\n  .desc('Tests valid index types for array access expressions')\n  .params(u =>\n    u.combine('type', [\n      'bool',\n      'u32',\n      'i32',\n      'abstract-int',\n      'f32',\n      'f16',\n      'abstract-float',\n      'vec2i',\n    ] as const)\n  )\n  .fn(t => {\n    const ty = Type[t.params.type];\n    const enable = ty.requiresF16() ? 'enable f16;' : '';\n    const code = `${enable}\n    fn foo() {\n      var x = mat2x2(1,2,3,4);\n      let tmp = x[${ty.create(0).wgsl()}];\n    }`;\n    const expect =\n      t.params.type === 'i32' || t.params.type === 'u32' || t.params.type === 'abstract-int';\n    t.expectCompileResult(expect, code);\n  });\n\ng.test('result_type')\n  .desc('Tests that correct result type is produced for an access expression')\n  .params(u =>\n    u\n      .combine('element', ['f16', 'f32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .beginSubcases()\n      .combine('rows', [2, 3, 4] as const)\n      .combine('decl', ['function', 'module'] as const)\n  )\n  .fn(t => {\n    const enable = t.params.element === 'f16' ? 'enable f16;' : '';\n    const scalarTy = Type[t.params.element];\n    const vectorTy = Type['vec'](t.params.rows, scalarTy);\n    const matrixTy = Type['mat'](t.params.columns, t.params.rows, scalarTy);\n    const module_decl =\n      t.params.decl === 'module'\n        ? `@group(0) @binding(0) var<storage> x : ${matrixTy.toString()};`\n        : ``;\n    const function_decl = t.params.decl === 'module' ? `` : `var x : ${matrixTy.toString()};`;\n    const code = `${enable}\n    ${module_decl}\n    fn foo() {\n      ${function_decl}\n      let tmp1 : ${vectorTy.toString()} = x[0];\n      let tmp2 : ${vectorTy.toString()} = x[1];\n    }`;\n    t.expectCompileResult(true, code);\n  });\n\ninterface OutOfBoundsCase {\n  code: string;\n  result: boolean;\n  pipeline?: boolean;\n  value?: number;\n}\n\nconst kOutOfBoundsCases: Record<string, OutOfBoundsCase> = {\n  const_module_in_bounds: {\n    code: `const x = mat2x2(1,2,3,4)[0];`,\n    result: true,\n  },\n  const_module_oob_neg: {\n    code: `const x = mat2x2(1,2,3,4)[-1];`,\n    result: false,\n  },\n  const_module_oob_pos: {\n    code: `const x = mat2x2(1,2,3,4)[2];`,\n    result: false,\n  },\n  const_func_in_bounds: {\n    code: `fn foo() {\n      const x = mat2x2(1,2,3,4)[0];\n    }`,\n    result: true,\n  },\n  const_func_oob_neg: {\n    code: `fn foo {\n      const x = mat2x2(1,2,3,4)[-1];\n    }`,\n    result: false,\n  },\n  const_func_oob_pos: {\n    code: `fn foo {\n      const x = mat2x2(1,2,3,4)[2];\n    }`,\n    result: false,\n  },\n  override_in_bounds: {\n    code: `override x : i32;\n    fn y() -> u32 {\n      let tmp = mat2x2(1,2,3,4)[x];\n      return 0;\n    }`,\n    result: true,\n    pipeline: true,\n    value: 0,\n  },\n  override_oob_neg: {\n    code: `override x : i32;\n    fn y() -> u32 {\n      let tmp = mat2x2(1,2,3,4)[x];\n      return 0;\n    }`,\n    result: false,\n    pipeline: true,\n    value: -1,\n  },\n  override_oob_pos: {\n    code: `override x : i32;\n    fn y() -> u32 {\n      let tmp = mat2x2(1,2,3,4)[x];\n      return 0;\n    }`,\n    result: false,\n    pipeline: true,\n    value: 2,\n  },\n  runtime_in_bounds: {\n    code: `fn foo() {\n      let idx = 0;\n      let x = mat2x2(1,2,3,4)[idx];\n    }`,\n    result: true,\n  },\n  runtime_oob_neg: {\n    code: `fn foo() {\n      let idx = -1;\n      let x = mat2x2(1,2,3,4)[idx];\n    }`,\n    result: true,\n  },\n  runtime_oob_pos: {\n    code: `fn foo() {\n      let idx = 3;\n      let x = mat2x2(1,2,3,4)[idx];\n    }`,\n    result: true,\n  },\n  runtime_array_const_oob_neg: {\n    code: `@group(0) @binding(0) var<storage> x : mat2x2<f32>;\n    fn y() -> u32 {\n      let tmp = x[-1];\n      return 0;\n    }`,\n    result: false,\n  },\n  runtime_array_override_oob_neg: {\n    code: `@group(0) @binding(0) var<storage> v : mat2x2<f32>;\n    override x : i32;\n    fn y() -> u32 {\n      let tmp = v[x];\n      return 0;\n    }`,\n    result: false,\n    pipeline: true,\n    value: -1,\n  },\n};\n\ng.test('early_eval_errors')\n  .desc('Tests early evaluation errors for out-of-bounds indexing')\n  .params(u => u.combine('case', keysOf(kOutOfBoundsCases)))\n  .fn(t => {\n    const testcase = kOutOfBoundsCases[t.params.case];\n    if (testcase.pipeline) {\n      const v: number = testcase.value ?? 0;\n      t.expectPipelineResult({\n        expectedResult: testcase.result,\n        code: testcase.code,\n        constants: { x: v },\n        reference: ['y()'],\n      });\n    } else {\n      t.expectCompileResult(testcase.result, testcase.code);\n    }\n  });\n\ng.test('abstract_matrix_concrete_index')\n  .desc('Tests that a concrete index type on an abstract array remains abstract')\n  .fn(t => {\n    const code = `\n    const idx = 0i;\n    const_assert mat2x2(1.11001100110011008404,1,1,1)[0i][0i] == 1.11001100110011008404;`;\n    t.expectCompileResult(true, code);\n  });\n"],"mappings":"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"}