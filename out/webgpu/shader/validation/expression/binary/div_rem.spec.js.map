{"version":3,"file":"div_rem.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","kBit","ScalarType","Type","VectorType","concreteTypeOf","isAbstractType","isConvertible","kAllScalarsAndVectors","kConcreteNumericScalarsAndVectors","scalarTypeOf","ShaderValidationTest","kConstantAndOverrideStages","validateConstOrOverrideBinaryOpEval","resultType","g","kOperators","div","op","rem","kScalarAndVectorTypes","kConcreteNumericScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","fn","t","lhs","rhs","lhsElement","rhsElement","hasBool","bool","hasF16","f16","resType","canConvertScalarToVector","resTypeIsTypeable","code","compound_assignment","create","wgsl","rhs_value","scalarLHS","integral","u32","i32","valid","expectCompileResult","expand","p","toString","lType","width","nonOneIndex","expandWithParams","partialDivByZeroIsError","includes","cases","leftValue","rightValue","error","leftRuntime","push","negative","min","swap","type","index","values","Array","fill","stage","kInvalidTypes","array","expr","control","e","ptr","atomic","texture","sampler","struct"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/div_rem.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for division and remainder expressions.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kBit } from '../../../../util/constants.js';\nimport {\n  ScalarType,\n  Type,\n  Value,\n  VectorType,\n  concreteTypeOf,\n  isAbstractType,\n  isConvertible,\n  kAllScalarsAndVectors,\n  kConcreteNumericScalarsAndVectors,\n  scalarTypeOf,\n} from '../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\nimport {\n  kConstantAndOverrideStages,\n  validateConstOrOverrideBinaryOpEval,\n} from '../call/builtin/const_override_validation.js';\n\nimport { resultType } from './result_type.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of operators tested in this file.\nconst kOperators = {\n  div: { op: '/' },\n  rem: { op: '%' },\n} as const;\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\nconst kConcreteNumericScalarAndVectorTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\ng.test('scalar_vector')\n  .desc(\n    `\n  Validates that scalar and vector expressions are only accepted for compatible numeric types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('lhs', keysOf(kScalarAndVectorTypes))\n      .combine(\n        'rhs',\n        // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n        // vec3 + vec3 and vec4 + vec4 is tested in execution tests.\n        keysOf(kScalarAndVectorTypes).filter(\n          value => !(value.startsWith('vec3') || value.startsWith('vec4'))\n        )\n      )\n      .combine('compound_assignment', [false, true] as const)\n      .beginSubcases()\n      .combine('op', keysOf(kOperators))\n      .combine('rhs_value', [0, 1] as const)\n  )\n  .fn(t => {\n    const op = kOperators[t.params.op];\n    const lhs = kScalarAndVectorTypes[t.params.lhs];\n    const rhs = kScalarAndVectorTypes[t.params.rhs];\n    const lhsElement = scalarTypeOf(lhs);\n    const rhsElement = scalarTypeOf(rhs);\n    const hasBool = lhsElement === Type.bool || rhsElement === Type.bool;\n    const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n    const resType = resultType({ lhs, rhs, canConvertScalarToVector: true });\n    const resTypeIsTypeable = resType && !isAbstractType(scalarTypeOf(resType));\n    const code = t.params.compound_assignment\n      ? `\n${hasF16 ? 'enable f16;' : ''}\nfn f() {\n  var v = ${lhs.create(0).wgsl()};\n  v ${op.op}= ${rhs.create(t.params.rhs_value).wgsl()};\n}\n`\n      : `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(1).wgsl()};\nconst rhs = ${rhs.create(t.params.rhs_value).wgsl()};\nconst foo ${resTypeIsTypeable ? `: ${resType}` : ''} = lhs ${op.op} rhs;\n`;\n\n    const scalarLHS = scalarTypeOf(concreteTypeOf(lhs));\n    const integral = scalarLHS === Type.u32 || scalarLHS === Type.i32;\n    let valid = !hasBool && resType !== null;\n    if (valid && t.params.compound_assignment) {\n      valid =\n        valid &&\n        isConvertible(resType!, concreteTypeOf(lhs)) &&\n        (!integral || t.params.rhs_value === 1);\n    } else {\n      valid = valid && t.params.rhs_value === 1;\n    }\n    t.expectCompileResult(valid, code);\n  });\n\ng.test('scalar_vector_out_of_range')\n  .desc(\n    `\n    Checks that constant or override evaluation of div/rem operations on scalar/vectors that produce out of division by 0 or out of range values cause validation errors.\n      - Checks for all concrete numeric scalar and vector types, including scalar * vector and vector * scalar.\n      - Checks for all vector elements that could cause the out of range to happen.\n      - Checks for valid small cases and 0, also the minimum i32.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('lhs', keysOf(kConcreteNumericScalarAndVectorTypes))\n      .expand('rhs', p => {\n        if (kScalarAndVectorTypes[p.lhs] instanceof VectorType) {\n          return [p.lhs, scalarTypeOf(kScalarAndVectorTypes[p.lhs]).toString()];\n        }\n        return [p.lhs];\n      })\n      .beginSubcases()\n      .expand('swap', p => {\n        if (p.lhs === p.rhs) {\n          return [false];\n        }\n        return [false, true];\n      })\n      .combine('nonOneIndex', [0, 1, 2, 3])\n      .filter(p => {\n        const lType = kScalarAndVectorTypes[p.lhs];\n        if (lType instanceof VectorType) {\n          return lType.width > p.nonOneIndex;\n        }\n        return p.nonOneIndex === 0;\n      })\n      .expandWithParams(p => {\n        // When lhs is a non-const expression, division by zero is only an error for integral types.\n        const partialDivByZeroIsError = [Type.i32, Type.u32].includes(\n          scalarTypeOf(kScalarAndVectorTypes[p.rhs])\n        );\n        const cases = [\n          { leftValue: 42, rightValue: 0, error: true, leftRuntime: false },\n          { leftValue: 42, rightValue: 0, error: partialDivByZeroIsError, leftRuntime: true },\n          { leftValue: 0, rightValue: 0, error: partialDivByZeroIsError, leftRuntime: true },\n          { leftValue: 0, rightValue: 42, error: false, leftRuntime: false },\n        ];\n        if (p.lhs === 'i32') {\n          cases.push({\n            leftValue: -kBit.i32.negative.min,\n            rightValue: -1,\n            error: true,\n            leftRuntime: false,\n          });\n          cases.push({\n            leftValue: -kBit.i32.negative.min + 1,\n            rightValue: -1,\n            error: false,\n            leftRuntime: false,\n          });\n        }\n        return cases;\n      })\n      .combine('stage', kConstantAndOverrideStages)\n  )\n  .fn(t => {\n    const { op, leftValue, rightValue, error, leftRuntime, nonOneIndex, swap } = t.params;\n    let { lhs, rhs } = t.params;\n\n    // Handle the swapping of LHS and RHS to test all cases of scalar * vector.\n    if (swap) {\n      [rhs, lhs] = [lhs, rhs];\n    }\n\n    // Creates either a scalar with the value, or a vector with the value only at a specific index.\n    const create = (type: ScalarType | VectorType, index: number, value: number): Value => {\n      if (type instanceof ScalarType) {\n        return type.create(value);\n      } else {\n        assert(type instanceof VectorType);\n        const values = new Array(type.width);\n        values.fill(1);\n        values[index] = value;\n        return type.create(values);\n      }\n    };\n\n    // Check if there is overflow\n    validateConstOrOverrideBinaryOpEval(\n      t,\n      kOperators[op].op,\n      !error,\n      leftRuntime ? 'runtime' : t.params.stage,\n      create(kScalarAndVectorTypes[lhs], nonOneIndex, leftValue),\n      t.params.stage,\n      create(kScalarAndVectorTypes[rhs], nonOneIndex, rightValue)\n    );\n  });\n\ninterface InvalidTypeConfig {\n  // An expression that produces a value of the target type.\n  expr: string;\n  // A function that converts an expression of the target type into a valid integer operand.\n  control: (x: string) => string;\n}\nconst kInvalidTypes: Record<string, InvalidTypeConfig> = {\n  array: {\n    expr: 'arr',\n    control: e => `${e}[0]`,\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: e => `*${e}`,\n  },\n\n  atomic: {\n    expr: 'a',\n    control: e => `atomicLoad(&${e})`,\n  },\n\n  texture: {\n    expr: 't',\n    control: e => `i32(textureLoad(${e}, vec2(), 0).x)`,\n  },\n\n  sampler: {\n    expr: 's',\n    control: e => `i32(textureSampleLevel(t, ${e}, vec2(), 0).x)`,\n  },\n\n  struct: {\n    expr: 'str',\n    control: e => `${e}.u`,\n  },\n};\n\ng.test('invalid_type_with_itself')\n  .desc(\n    `\n  Validates that expressions are never accepted for non-scalar, non-vector, and non-matrix types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('type', keysOf(kInvalidTypes))\n      .combine('control', [true, false])\n      .beginSubcases()\n  )\n  .fn(t => {\n    const op = kOperators[t.params.op];\n    const type = kInvalidTypes[t.params.type];\n    const expr = t.params.control ? type.control(type.expr) : type.expr;\n    const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<i32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${op.op} ${expr};\n}\n`;\n\n    t.expectCompileResult(t.params.control, code);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,+CAA+C;AAC7E,SAASC,MAAM,EAAEC,eAAe,QAAQ,2CAA2C;AACnF,SAASC,MAAM,QAAQ,oCAAoC;AAC3D,SAASC,IAAI,QAAQ,+BAA+B;AACpD;EACEC,UAAU;EACVC,IAAI;;EAEJC,UAAU;EACVC,cAAc;EACdC,cAAc;EACdC,aAAa;EACbC,qBAAqB;EACrBC,iCAAiC;EACjCC,YAAY;AACP,gCAAgC;AACvC,SAASC,oBAAoB,QAAQ,iCAAiC;AACtE;EACEC,0BAA0B;EAC1BC,mCAAmC;AAC9B,8CAA8C;;AAErD,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C,OAAO,MAAMC,CAAC,GAAGlB,aAAa,CAACc,oBAAoB,CAAC;;AAEpD;AACA,MAAMK,UAAU,GAAG;EACjBC,GAAG,EAAE,EAAEC,EAAE,EAAE,GAAG,CAAC,CAAC;EAChBC,GAAG,EAAE,EAAED,EAAE,EAAE,GAAG,CAAC;AACjB,CAAU;;AAEV;AACA,MAAME,qBAAqB,GAAGrB,eAAe,CAACS,qBAAqB,CAAC;AACpE,MAAMa,oCAAoC,GAAGtB,eAAe,CAACU,iCAAiC,CAAC;;AAE/FM,CAAC,CAACO,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,KAAK,EAAE5B,MAAM,CAACsB,qBAAqB,CAAC,CAAC;AAC7CM,OAAO;EACN,KAAK;EACL;EACA;EACA5B,MAAM,CAACsB,qBAAqB,CAAC,CAACO,MAAM;IAClC,CAAAC,KAAK,KAAI,EAAEA,KAAK,CAACC,UAAU,CAAC,MAAM,CAAC,IAAID,KAAK,CAACC,UAAU,CAAC,MAAM,CAAC;EACjE;AACF,CAAC;AACAH,OAAO,CAAC,qBAAqB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAU,CAAC;AACtDI,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,IAAI,EAAE5B,MAAM,CAACkB,UAAU,CAAC,CAAC;AACjCU,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAU;AACzC,CAAC;AACAK,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMd,EAAE,GAAGF,UAAU,CAACgB,CAAC,CAACR,MAAM,CAACN,EAAE,CAAC;EAClC,MAAMe,GAAG,GAAGb,qBAAqB,CAACY,CAAC,CAACR,MAAM,CAACS,GAAG,CAAC;EAC/C,MAAMC,GAAG,GAAGd,qBAAqB,CAACY,CAAC,CAACR,MAAM,CAACU,GAAG,CAAC;EAC/C,MAAMC,UAAU,GAAGzB,YAAY,CAACuB,GAAG,CAAC;EACpC,MAAMG,UAAU,GAAG1B,YAAY,CAACwB,GAAG,CAAC;EACpC,MAAMG,OAAO,GAAGF,UAAU,KAAKhC,IAAI,CAACmC,IAAI,IAAIF,UAAU,KAAKjC,IAAI,CAACmC,IAAI;EACpE,MAAMC,MAAM,GAAGJ,UAAU,KAAKhC,IAAI,CAACqC,GAAG,IAAIJ,UAAU,KAAKjC,IAAI,CAACqC,GAAG;EACjE,MAAMC,OAAO,GAAG3B,UAAU,CAAC,EAAEmB,GAAG,EAAEC,GAAG,EAAEQ,wBAAwB,EAAE,IAAI,CAAC,CAAC,CAAC;EACxE,MAAMC,iBAAiB,GAAGF,OAAO,IAAI,CAACnC,cAAc,CAACI,YAAY,CAAC+B,OAAO,CAAC,CAAC;EAC3E,MAAMG,IAAI,GAAGZ,CAAC,CAACR,MAAM,CAACqB,mBAAmB;EACpC;AACT,EAAEN,MAAM,GAAG,aAAa,GAAG,EAAG;AAC9B;AACA,YAAYN,GAAG,CAACa,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE;AACjC,MAAM7B,EAAE,CAACA,EAAG,KAAIgB,GAAG,CAACY,MAAM,CAACd,CAAC,CAACR,MAAM,CAACwB,SAAS,CAAC,CAACD,IAAI,CAAC,CAAE;AACtD;AACA,CAAC;EACQ;AACT,EAAER,MAAM,GAAG,aAAa,GAAG,EAAG;AAC9B,cAAcN,GAAG,CAACa,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE;AACnC,cAAcb,GAAG,CAACY,MAAM,CAACd,CAAC,CAACR,MAAM,CAACwB,SAAS,CAAC,CAACD,IAAI,CAAC,CAAE;AACpD,YAAYJ,iBAAiB,GAAI,KAAIF,OAAQ,EAAC,GAAG,EAAG,UAASvB,EAAE,CAACA,EAAG;AACnE,CAAC;;EAEG,MAAM+B,SAAS,GAAGvC,YAAY,CAACL,cAAc,CAAC4B,GAAG,CAAC,CAAC;EACnD,MAAMiB,QAAQ,GAAGD,SAAS,KAAK9C,IAAI,CAACgD,GAAG,IAAIF,SAAS,KAAK9C,IAAI,CAACiD,GAAG;EACjE,IAAIC,KAAK,GAAG,CAAChB,OAAO,IAAII,OAAO,KAAK,IAAI;EACxC,IAAIY,KAAK,IAAIrB,CAAC,CAACR,MAAM,CAACqB,mBAAmB,EAAE;IACzCQ,KAAK;IACHA,KAAK;IACL9C,aAAa,CAACkC,OAAO,EAAGpC,cAAc,CAAC4B,GAAG,CAAC,CAAC;IAC3C,CAACiB,QAAQ,IAAIlB,CAAC,CAACR,MAAM,CAACwB,SAAS,KAAK,CAAC,CAAC;EAC3C,CAAC,MAAM;IACLK,KAAK,GAAGA,KAAK,IAAIrB,CAAC,CAACR,MAAM,CAACwB,SAAS,KAAK,CAAC;EAC3C;EACAhB,CAAC,CAACsB,mBAAmB,CAACD,KAAK,EAAET,IAAI,CAAC;AACpC,CAAC,CAAC;;AAEJ7B,CAAC,CAACO,IAAI,CAAC,4BAA4B,CAAC;AACjCC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,IAAI,EAAE5B,MAAM,CAACkB,UAAU,CAAC,CAAC;AACjCU,OAAO,CAAC,KAAK,EAAE5B,MAAM,CAACuB,oCAAoC,CAAC,CAAC;AAC5DkC,MAAM,CAAC,KAAK,EAAE,CAAAC,CAAC,KAAI;EAClB,IAAIpC,qBAAqB,CAACoC,CAAC,CAACvB,GAAG,CAAC,YAAY7B,UAAU,EAAE;IACtD,OAAO,CAACoD,CAAC,CAACvB,GAAG,EAAEvB,YAAY,CAACU,qBAAqB,CAACoC,CAAC,CAACvB,GAAG,CAAC,CAAC,CAACwB,QAAQ,CAAC,CAAC,CAAC;EACvE;EACA,OAAO,CAACD,CAAC,CAACvB,GAAG,CAAC;AAChB,CAAC,CAAC;AACDH,aAAa,CAAC,CAAC;AACfyB,MAAM,CAAC,MAAM,EAAE,CAAAC,CAAC,KAAI;EACnB,IAAIA,CAAC,CAACvB,GAAG,KAAKuB,CAAC,CAACtB,GAAG,EAAE;IACnB,OAAO,CAAC,KAAK,CAAC;EAChB;EACA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;AACtB,CAAC,CAAC;AACDR,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACpCC,MAAM,CAAC,CAAA6B,CAAC,KAAI;EACX,MAAME,KAAK,GAAGtC,qBAAqB,CAACoC,CAAC,CAACvB,GAAG,CAAC;EAC1C,IAAIyB,KAAK,YAAYtD,UAAU,EAAE;IAC/B,OAAOsD,KAAK,CAACC,KAAK,GAAGH,CAAC,CAACI,WAAW;EACpC;EACA,OAAOJ,CAAC,CAACI,WAAW,KAAK,CAAC;AAC5B,CAAC,CAAC;AACDC,gBAAgB,CAAC,CAAAL,CAAC,KAAI;EACrB;EACA,MAAMM,uBAAuB,GAAG,CAAC3D,IAAI,CAACiD,GAAG,EAAEjD,IAAI,CAACgD,GAAG,CAAC,CAACY,QAAQ;IAC3DrD,YAAY,CAACU,qBAAqB,CAACoC,CAAC,CAACtB,GAAG,CAAC;EAC3C,CAAC;EACD,MAAM8B,KAAK,GAAG;EACZ,EAAEC,SAAS,EAAE,EAAE,EAAEC,UAAU,EAAE,CAAC,EAAEC,KAAK,EAAE,IAAI,EAAEC,WAAW,EAAE,KAAK,CAAC,CAAC;EACjE,EAAEH,SAAS,EAAE,EAAE,EAAEC,UAAU,EAAE,CAAC,EAAEC,KAAK,EAAEL,uBAAuB,EAAEM,WAAW,EAAE,IAAI,CAAC,CAAC;EACnF,EAAEH,SAAS,EAAE,CAAC,EAAEC,UAAU,EAAE,CAAC,EAAEC,KAAK,EAAEL,uBAAuB,EAAEM,WAAW,EAAE,IAAI,CAAC,CAAC;EAClF,EAAEH,SAAS,EAAE,CAAC,EAAEC,UAAU,EAAE,EAAE,EAAEC,KAAK,EAAE,KAAK,EAAEC,WAAW,EAAE,KAAK,CAAC,CAAC,CACnE;;EACD,IAAIZ,CAAC,CAACvB,GAAG,KAAK,KAAK,EAAE;IACnB+B,KAAK,CAACK,IAAI,CAAC;MACTJ,SAAS,EAAE,CAAChE,IAAI,CAACmD,GAAG,CAACkB,QAAQ,CAACC,GAAG;MACjCL,UAAU,EAAE,CAAC,CAAC;MACdC,KAAK,EAAE,IAAI;MACXC,WAAW,EAAE;IACf,CAAC,CAAC;IACFJ,KAAK,CAACK,IAAI,CAAC;MACTJ,SAAS,EAAE,CAAChE,IAAI,CAACmD,GAAG,CAACkB,QAAQ,CAACC,GAAG,GAAG,CAAC;MACrCL,UAAU,EAAE,CAAC,CAAC;MACdC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;EACA,OAAOJ,KAAK;AACd,CAAC,CAAC;AACDtC,OAAO,CAAC,OAAO,EAAEd,0BAA0B;AAChD,CAAC;AACAmB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEd,EAAE,EAAE+C,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,WAAW,EAAER,WAAW,EAAEY,IAAI,CAAC,CAAC,GAAGxC,CAAC,CAACR,MAAM;EACrF,IAAI,EAAES,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGF,CAAC,CAACR,MAAM;;EAE3B;EACA,IAAIgD,IAAI,EAAE;IACR,CAACtC,GAAG,EAAED,GAAG,CAAC,GAAG,CAACA,GAAG,EAAEC,GAAG,CAAC;EACzB;;EAEA;EACA,MAAMY,MAAM,GAAGA,CAAC2B,IAA6B,EAAEC,KAAa,EAAE9C,KAAa,KAAY;IACrF,IAAI6C,IAAI,YAAYvE,UAAU,EAAE;MAC9B,OAAOuE,IAAI,CAAC3B,MAAM,CAAClB,KAAK,CAAC;IAC3B,CAAC,MAAM;MACL5B,MAAM,CAACyE,IAAI,YAAYrE,UAAU,CAAC;MAClC,MAAMuE,MAAM,GAAG,IAAIC,KAAK,CAACH,IAAI,CAACd,KAAK,CAAC;MACpCgB,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MACdF,MAAM,CAACD,KAAK,CAAC,GAAG9C,KAAK;MACrB,OAAO6C,IAAI,CAAC3B,MAAM,CAAC6B,MAAM,CAAC;IAC5B;EACF,CAAC;;EAED;EACA9D,mCAAmC;IACjCmB,CAAC;IACDhB,UAAU,CAACE,EAAE,CAAC,CAACA,EAAE;IACjB,CAACiD,KAAK;IACNC,WAAW,GAAG,SAAS,GAAGpC,CAAC,CAACR,MAAM,CAACsD,KAAK;IACxChC,MAAM,CAAC1B,qBAAqB,CAACa,GAAG,CAAC,EAAE2B,WAAW,EAAEK,SAAS,CAAC;IAC1DjC,CAAC,CAACR,MAAM,CAACsD,KAAK;IACdhC,MAAM,CAAC1B,qBAAqB,CAACc,GAAG,CAAC,EAAE0B,WAAW,EAAEM,UAAU;EAC5D,CAAC;AACH,CAAC,CAAC;;;;;;;;AAQJ,MAAMa,aAAgD,GAAG;EACvDC,KAAK,EAAE;IACLC,IAAI,EAAE,KAAK;IACXC,OAAO,EAAEA,CAAAC,CAAC,KAAK,GAAEA,CAAE;EACrB,CAAC;;EAEDC,GAAG,EAAE;IACHH,IAAI,EAAE,MAAM;IACZC,OAAO,EAAEA,CAAAC,CAAC,KAAK,IAAGA,CAAE;EACtB,CAAC;;EAEDE,MAAM,EAAE;IACNJ,IAAI,EAAE,GAAG;IACTC,OAAO,EAAEA,CAAAC,CAAC,KAAK,eAAcA,CAAE;EACjC,CAAC;;EAEDG,OAAO,EAAE;IACPL,IAAI,EAAE,GAAG;IACTC,OAAO,EAAEA,CAAAC,CAAC,KAAK,mBAAkBA,CAAE;EACrC,CAAC;;EAEDI,OAAO,EAAE;IACPN,IAAI,EAAE,GAAG;IACTC,OAAO,EAAEA,CAAAC,CAAC,KAAK,6BAA4BA,CAAE;EAC/C,CAAC;;EAEDK,MAAM,EAAE;IACNP,IAAI,EAAE,KAAK;IACXC,OAAO,EAAEA,CAAAC,CAAC,KAAK,GAAEA,CAAE;EACrB;AACF,CAAC;;AAEDpE,CAAC,CAACO,IAAI,CAAC,0BAA0B,CAAC;AAC/BC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,IAAI,EAAE5B,MAAM,CAACkB,UAAU,CAAC,CAAC;AACjCU,OAAO,CAAC,MAAM,EAAE5B,MAAM,CAACiF,aAAa,CAAC,CAAC;AACtCrD,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACjCI,aAAa,CAAC;AACnB,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMd,EAAE,GAAGF,UAAU,CAACgB,CAAC,CAACR,MAAM,CAACN,EAAE,CAAC;EAClC,MAAMuD,IAAI,GAAGM,aAAa,CAAC/C,CAAC,CAACR,MAAM,CAACiD,IAAI,CAAC;EACzC,MAAMQ,IAAI,GAAGjD,CAAC,CAACR,MAAM,CAAC0D,OAAO,GAAGT,IAAI,CAACS,OAAO,CAACT,IAAI,CAACQ,IAAI,CAAC,GAAGR,IAAI,CAACQ,IAAI;EACnE,MAAMrC,IAAI,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAcqC,IAAK,IAAG/D,EAAE,CAACA,EAAG,IAAG+D,IAAK;AACpC;AACA,CAAC;;EAEGjD,CAAC,CAACsB,mBAAmB,CAACtB,CAAC,CAACR,MAAM,CAAC0D,OAAO,EAAEtC,IAAI,CAAC;AAC/C,CAAC,CAAC"}