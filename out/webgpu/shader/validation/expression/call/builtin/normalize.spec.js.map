{"version":3,"file":"normalize.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatVectors","scalarTypeOf","quantizeToF16","quantizeToF32","isSubnormalNumberF16","isSubnormalNumberF32","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValidArgumentTypes","quantizeFunctionForScalarType","type","f32","f16","v","isSubnormalFunctionForScalarType","test","desc","params","u","combine","filter","stage","beginSubcases","expand","fn","t","expectedResult","scalarType","quantizeFn","Number","value","vv","dp","width","len","Math","sqrt","Infinity","isSubnormalFn","skipIf","create","kInvalidArgumentTypes","abstractInt","bool","vec","kArgCases","good","bad_no_parens","bad_0args","bad_2args","bad_0array","bad_0struct","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/normalize.spec.ts"],"sourcesContent":["const builtin = 'normalize';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatVectors,\n  scalarTypeOf,\n  ScalarType,\n} from '../../../../../util/conversion.js';\nimport {\n  QuantizeFunc,\n  quantizeToF16,\n  quantizeToF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n} from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidArgumentTypes = objectsToRecord(kConvertableToFloatVectors);\n\nfunction quantizeFunctionForScalarType(type: ScalarType): QuantizeFunc<number> {\n  switch (type) {\n    case Type.f32:\n      return quantizeToF32;\n    case Type.f16:\n      return quantizeToF16;\n    default:\n      return (v: number) => v;\n  }\n}\n\nfunction isSubnormalFunctionForScalarType(type: ScalarType): (v: number) => boolean {\n  switch (type) {\n    case Type.f32:\n      return isSubnormalNumberF32;\n    case Type.f16:\n      return isSubnormalNumberF16;\n    default:\n      return (v: number) => false;\n  }\n}\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValidArgumentTypes))\n      .filter(u => stageSupportsType(u.stage, kValidArgumentTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u => fullRangeForType(kValidArgumentTypes[u.type]))\n  )\n  .fn(t => {\n    let expectedResult = true;\n\n    const scalarType = scalarTypeOf(kValidArgumentTypes[t.params.type]);\n    const quantizeFn = quantizeFunctionForScalarType(scalarType);\n    // Should be invalid if the normalization calculations result in intermediate\n    // values that exceed the maximum representable float value for the given type,\n    // or if the length is smaller than the smallest representable float value.\n    const v = Number(t.params.value);\n    const vv = quantizeFn(v * v);\n    const dp = quantizeFn(vv * kValidArgumentTypes[t.params.type].width);\n    const len = quantizeFn(Math.sqrt(dp));\n    if (vv === Infinity || dp === Infinity || len === 0) {\n      expectedResult = false;\n    }\n\n    // We skip tests with values that would involve subnormal computations in\n    // order to avoid defining a specific behavior (flush to zero).\n    const isSubnormalFn = isSubnormalFunctionForScalarType(scalarType);\n    t.skipIf(isSubnormalFn(vv) || isSubnormalFn(dp) || isSubnormalFn(len));\n\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kValidArgumentTypes[t.params.type].create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kInvalidArgumentTypes = objectsToRecord([\n  Type.f32,\n  Type.f16,\n  Type.abstractInt,\n  Type.bool,\n  Type.vec(2, Type.bool),\n  Type.vec(3, Type.bool),\n  Type.vec(4, Type.bool),\n  ...kConcreteIntegerScalarsAndVectors,\n]);\n\ng.test('invalid_argument')\n  .desc(\n    `\nValidates that all scalar arguments and vector integer or boolean arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kInvalidArgumentTypes)))\n  .fn(t => {\n    const expectedResult = false; // should always error with invalid argument types\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kInvalidArgumentTypes[t.params.type].create(0)],\n      'constant'\n    );\n  });\n\nconst kArgCases = {\n  good: '(vec3f(1, 0, 0))',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_2args: '(vec3f(),vec3f())',\n  // Bad value for arg 0\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n};\n\ng.test('args')\n  .desc(`Test compilation failure of ${builtin}  with variously shaped and typed arguments`)\n  .params(u => u.combine('arg', keysOf(kArgCases)))\n  .fn(t => {\n    t.expectCompileResult(\n      t.params.arg === 'good',\n      `const c = ${builtin}${kArgCases[t.params.arg]};`\n    );\n  });\n\ng.test('must_use')\n  .desc(`Result of ${builtin} must be used`)\n  .params(u => u.combine('use', [true, false]))\n  .fn(t => {\n    const use_it = t.params.use ? '_ = ' : '';\n    t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n  });\n"],"mappings":"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"}