{"version":3,"file":"textureLoad.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","assert","kAllTextureFormats","kTextureFormatInfo","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","stringToType","ShaderValidationTest","getNonStorageTextureTypeWGSL","getSampleAndBaseTextureTypeForTextureType","kNonStorageTextureTypeInfo","kTestTextureTypes","kCoords1DTypes","i32","u32","kCoords2DTypes","vec2i","vec2u","kCoords3DTypes","vec3i","vec3u","kValidTextureLoadParameterTypesForNonStorageTextures","texture_1d","coordsArgTypes","hasLevelArg","texture_2d","texture_2d_array","hasArrayIndexArg","texture_3d","texture_multisampled_2d","hasSampleIndexArg","texture_depth_2d","texture_depth_2d_array","texture_depth_multisampled_2d","texture_external","kValidTextureLoadParameterTypesForStorageTextures","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","kNonStorageTextureTypes","kStorageTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","texelTypes","map","v","toString","beforeAllSubcases","skipIfTextureLoadNotSupportedForTextureTypeDeprecated","fn","returnType","texelType","returnVarType","varWGSL","texelArgType","textureWGSL","coordWGSL","create","wgsl","arrayWGSL","levelWGSL","sampleIndexWGSL","code","expectSuccess","expectCompileResult","filter","coordType","value","coordArgType","format","color","storage","skipIfLanguageFeatureNotSupported","skipIfTextureFormatNotUsableAsStorageTextureDeprecated","arrayIndexType","arrayIndexArgType","args","arg","join","levelType","levelArgType","sampleIndexType","sampleIndexArgType","testTextureType","baseTestTextureType","types","numTestNumberArgs","numExpectNumberArgs","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["const builtin = 'textureLoad';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureLoad coords parameter must be correct type\n* test textureLoad array_index parameter must be correct type\n* test textureLoad level parameter must be correct type\n* test textureLoad sample_index parameter must be correct type\n* test textureLoad returns the correct type\n* test textureLoad doesn't work with texture types it's not supposed to\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n  stringToType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getNonStorageTextureTypeWGSL,\n  getSampleAndBaseTextureTypeForTextureType,\n  kNonStorageTextureTypeInfo,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\ntype TextureLoadArguments = {\n  coordsArgTypes: readonly [ScalarType | VectorType, ScalarType | VectorType];\n  hasArrayIndexArg?: boolean;\n  hasLevelArg?: boolean;\n  hasSampleIndexArg?: boolean;\n};\n\nconst kCoords1DTypes = [Type.i32, Type.u32] as const;\nconst kCoords2DTypes = [Type.vec2i, Type.vec2u] as const;\nconst kCoords3DTypes = [Type.vec3i, Type.vec3u] as const;\n\nconst kValidTextureLoadParameterTypesForNonStorageTextures: { [n: string]: TextureLoadArguments } =\n  {\n    texture_1d: {\n      coordsArgTypes: kCoords1DTypes,\n      hasLevelArg: true,\n    },\n    texture_2d: {\n      coordsArgTypes: kCoords2DTypes,\n      hasLevelArg: true,\n    },\n    texture_2d_array: {\n      coordsArgTypes: kCoords2DTypes,\n      hasArrayIndexArg: true,\n      hasLevelArg: true,\n    },\n    texture_3d: {\n      coordsArgTypes: kCoords3DTypes,\n      hasLevelArg: true,\n    },\n    texture_multisampled_2d: {\n      coordsArgTypes: kCoords2DTypes,\n      hasSampleIndexArg: true,\n    },\n    texture_depth_2d: {\n      coordsArgTypes: kCoords2DTypes,\n      hasLevelArg: true,\n    },\n    texture_depth_2d_array: {\n      coordsArgTypes: kCoords2DTypes,\n      hasArrayIndexArg: true,\n      hasLevelArg: true,\n    },\n    texture_depth_multisampled_2d: {\n      coordsArgTypes: kCoords2DTypes,\n      hasSampleIndexArg: true,\n    },\n    texture_external: { coordsArgTypes: kCoords2DTypes },\n  } as const;\n\nconst kValidTextureLoadParameterTypesForStorageTextures: { [n: string]: TextureLoadArguments } = {\n  texture_storage_1d: { coordsArgTypes: [Type.i32, Type.u32] },\n  texture_storage_2d: { coordsArgTypes: [Type.vec2i, Type.vec2u] },\n  texture_storage_2d_array: {\n    coordsArgTypes: [Type.vec2i, Type.vec2u],\n    hasArrayIndexArg: true,\n  },\n  texture_storage_3d: { coordsArgTypes: [Type.vec3i, Type.vec3u] },\n} as const;\n\nconst kNonStorageTextureTypes = keysOf(kValidTextureLoadParameterTypesForNonStorageTextures);\nconst kStorageTextureTypes = keysOf(kValidTextureLoadParameterTypesForStorageTextures);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', kNonStorageTextureTypes)\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.textureType)\n  )\n  .fn(t => {\n    const { returnType, textureType, texelType } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const varWGSL = returnVarType.toString();\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n    const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(texelArgType, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.textureType)\n  )\n  .fn(t => {\n    const { textureType, coordType, texelType, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n    const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(coordArgType, coordsArgTypes[0]) ||\n      isConvertible(coordArgType, coordsArgTypes[1]);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kStorageTextureTypes)\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('format', kAllTextureFormats)\n      // filter to only storage texture formats.\n      .filter(t => !!kTextureFormatInfo[t.format].color?.storage)\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n  )\n  .fn(t => {\n    const { textureType, coordType, format, value } = t.params;\n    t.skipIfTextureFormatNotUsableAsStorageTextureDeprecated(format);\n\n    const coordArgType = kValuesTypes[coordType];\n    const { coordsArgTypes, hasArrayIndexArg } =\n      kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(coordArgType, coordsArgTypes[0]) ||\n      isConvertible(coordArgType, coordsArgTypes[1]);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no array_index\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasArrayIndexArg\n      )\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.textureType)\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, texelType, value } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgTypes, hasLevelArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}, ${arrayWGSL}${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kStorageTextureTypes)\n      // filter out types with no array_index\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForStorageTextures[t.textureType].hasArrayIndexArg\n      )\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('format', kAllTextureFormats)\n      // filter to only storage texture formats.\n      .filter(t => !!kTextureFormatInfo[t.format].color?.storage)\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, format, value } = t.params;\n    t.skipIfTextureFormatNotUsableAsStorageTextureDeprecated(format);\n\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgTypes, hasLevelArg } =\n      kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}, ${arrayWGSL}${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('level_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no level\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasLevelArg\n      )\n      .combine('levelType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.textureType)\n  )\n  .fn(t => {\n    const { textureType, levelType, texelType, value } = t.params;\n    const levelArgType = kValuesTypes[levelType];\n    const { coordsArgTypes, hasArrayIndexArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = levelArgType.create(value).wgsl();\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}, ${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('sample_index_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect sample_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no sample_index\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasSampleIndexArg\n      )\n      .combine('sampleIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.sampleIndexType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.textureType)\n  )\n  .fn(t => {\n    const { textureType, sampleIndexType, texelType, value } = t.params;\n    const sampleIndexArgType = kValuesTypes[sampleIndexType];\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n    assert(!hasLevelArg);\n\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const sampleIndexWGSL = sampleIndexArgType.create(value).wgsl();\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}, ${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(sampleIndexArgType, Type.i32) || isConvertible(sampleIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .beginSubcases()\n      .combine('textureType', kNonStorageTextureTypes)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.testTextureType)\n  )\n  .fn(t => {\n    const { testTextureType, textureType } = t.params;\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n    const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n\n    const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n    let expectSuccess = false;\n    const types =\n      kValidTextureLoadParameterTypesForNonStorageTextures[baseTestTextureType] ||\n      kValidTextureLoadParameterTypesForStorageTextures[baseTestTextureType];\n    if (types) {\n      const numTestNumberArgs =\n        (types.hasArrayIndexArg ? 1 : 0) +\n        (types.hasLevelArg ? 1 : 0) +\n        (types.hasSampleIndexArg ? 1 : 0);\n      const numExpectNumberArgs =\n        (hasArrayIndexArg ? 1 : 0) + (hasLevelArg ? 1 : 0) + (hasSampleIndexArg ? 1 : 0);\n      const typesMatch = types\n        ? types.coordsArgTypes[0] === coordsArgTypes[0] && numTestNumberArgs === numExpectNumberArgs\n        : false;\n      expectSuccess = typesMatch;\n    }\n\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .beginSubcases()\n      .combine('textureType', kStorageTextureTypes)\n      .combine('format', kAllTextureFormats)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfTextureLoadNotSupportedForTextureTypeDeprecated(t.params.testTextureType)\n  )\n  .fn(t => {\n    const { testTextureType, textureType } = t.params;\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n      kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n    const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n\n    const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n    let expectSuccess = false;\n    const types =\n      kValidTextureLoadParameterTypesForNonStorageTextures[baseTestTextureType] ||\n      kValidTextureLoadParameterTypesForStorageTextures[baseTestTextureType];\n    if (types) {\n      const numTestNumberArgs =\n        (types.hasArrayIndexArg ? 1 : 0) +\n        (types.hasLevelArg ? 1 : 0) +\n        (types.hasSampleIndexArg ? 1 : 0);\n      const numExpectNumberArgs =\n        (hasArrayIndexArg ? 1 : 0) + (hasLevelArg ? 1 : 0) + (hasSampleIndexArg ? 1 : 0);\n      const typesMatch = types\n        ? types.coordsArgTypes[0] === coordsArgTypes[0] && numTestNumberArgs === numExpectNumberArgs\n        : false;\n      expectSuccess = typesMatch;\n    }\n\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureLoad(t, vec2(0,0), 0);\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}