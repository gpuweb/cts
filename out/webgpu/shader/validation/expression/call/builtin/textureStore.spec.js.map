{"version":3,"file":"textureStore.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","getTextureFormatColorType","kPossibleStorageTextureFormats","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","getSampleAndBaseTextureTypeForTextureType","kTestTextureTypes","kTextureColorTypeToType","sint","vec4i","uint","vec4u","float","vec4f","kValidTextureStoreParameterTypes","texture_storage_1d","coordsArgTypes","i32","u32","texture_storage_2d","vec2i","vec2u","texture_storage_2d_array","hasArrayIndexArg","texture_storage_3d","vec3i","vec3u","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","coordType","value","fn","textureType","coordArgType","coordWGSL","create","wgsl","arrayWGSL","format","valueWGSL","code","expectSuccess","expectCompileResult","arrayIndexType","arrayIndexArgType","args","map","arg","join","valueType","skipIfTextureFormatNotUsableAsStorageTexture","valueArgType","colorType","requiredValueType","testTextureType","replace","baseTestTextureType","sampleType","types","typesMatch"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureStore.spec.ts"],"sourcesContent":["const builtin = 'textureStore';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureStore coords parameter must be correct type\n* test textureStore array_index parameter must be correct type\n* test textureStore value parameter must be correct type\n* test textureStore doesn't work with texture types it's not supposed to\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  getTextureFormatColorType,\n  kPossibleStorageTextureFormats,\n} from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getSampleAndBaseTextureTypeForTextureType,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\nconst kTextureColorTypeToType = {\n  sint: Type.vec4i,\n  uint: Type.vec4u,\n  float: Type.vec4f,\n  'unfilterable-float': Type.vec4f,\n};\n\ntype TextureStoreArguments = {\n  coordsArgTypes: readonly [ScalarType | VectorType, ScalarType | VectorType];\n  hasArrayIndexArg?: boolean;\n};\n\nconst kValidTextureStoreParameterTypes: { [n: string]: TextureStoreArguments } = {\n  texture_storage_1d: { coordsArgTypes: [Type.i32, Type.u32] },\n  texture_storage_2d: { coordsArgTypes: [Type.vec2i, Type.vec2u] },\n  texture_storage_2d_array: {\n    coordsArgTypes: [Type.vec2i, Type.vec2u],\n    hasArrayIndexArg: true,\n  },\n  texture_storage_3d: { coordsArgTypes: [Type.vec3i, Type.vec3u] },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureStoreParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureStoreParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, coordType, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const { coordsArgTypes, hasArrayIndexArg } = kValidTextureStoreParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const format = 'rgba8unorm';\n    const valueWGSL = 'vec4f(0)';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format},write>;\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(coordArgType, coordsArgTypes[0]) ||\n      isConvertible(coordArgType, coordsArgTypes[1]);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureStoreParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgTypes } = kValidTextureStoreParameterTypes[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const format = 'rgba8unorm';\n    const valueWGSL = 'vec4f(0)';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, write>;\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}, ${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('value_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore')\n  .desc(\n    `\nValidates that only incorrect value arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('valueType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('format', kPossibleStorageTextureFormats)\n      .combine('value', [0, 1, 2])\n  )\n  .fn(t => {\n    const { textureType, valueType, format, value } = t.params;\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n    const valueArgType = kValuesTypes[valueType];\n    const args = [valueArgType.create(value)];\n    const { coordsArgTypes, hasArrayIndexArg } = kValidTextureStoreParameterTypes[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const valueWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, write>;\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n    const colorType = getTextureFormatColorType(format);\n    const requiredValueType = kTextureColorTypeToType[colorType];\n    const expectSuccess = isConvertible(valueArgType, requiredValueType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .beginSubcases()\n      .combine('textureType', keysOf(kValidTextureStoreParameterTypes))\n      .combine('format', kPossibleStorageTextureFormats)\n  )\n  .fn(t => {\n    const { testTextureType, textureType, format } = t.params;\n    const { coordsArgTypes, hasArrayIndexArg } = kValidTextureStoreParameterTypes[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const colorType = getTextureFormatColorType(format);\n    const valueType = kTextureColorTypeToType[colorType];\n    const valueWGSL = valueType.create(0).wgsl();\n\n    const code = `\n@group(0) @binding(1) var t: ${testTextureType.replace(', read', ', write')};\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n\n    const [baseTestTextureType, sampleType] =\n      getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n    let expectSuccess = false;\n    const types = kValidTextureStoreParameterTypes[baseTestTextureType];\n    if (types) {\n      const typesMatch = types\n        ? types.coordsArgTypes[0] === coordsArgTypes[0] &&\n          types.hasArrayIndexArg === hasArrayIndexArg &&\n          isConvertible(valueType, sampleType)\n        : false;\n      expectSuccess = typesMatch;\n    }\n\n    t.expectCompileResult(expectSuccess, code);\n  });\n"],"mappings":"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"}