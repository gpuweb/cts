{"version":3,"file":"quantizeToF16.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteF32ScalarsAndVectors","quantizeToF16","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValidArgumentTypes","abstractFloat","vec","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","fn","t","expectedResult","f16Value","Number","value","Infinity","create","kArgCasesF16","bad_0f16","bad_0vec2h","bad_0vec3h","bad_0vec4h","kArgCases","good","bad_no_parens","bad_0args","bad_2arg","bad_0bool","bad_0array","bad_0struct","bad_0uint","bad_0int","bad_0vec2i","bad_0vec2u","bad_0vec3i","bad_0vec3u","bad_0vec4i","bad_0vec4u","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/quantizeToF16.spec.ts"],"sourcesContent":["const builtin = 'quantizeToF16';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { Type, kConcreteF32ScalarsAndVectors } from '../../../../../util/conversion.js';\nimport { quantizeToF16 } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidArgumentTypes = objectsToRecord([\n  Type.abstractFloat,\n  Type.vec(2, Type.abstractFloat),\n  Type.vec(3, Type.abstractFloat),\n  Type.vec(4, Type.abstractFloat),\n  ...kConcreteF32ScalarsAndVectors,\n]);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() error on invalid inputs.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValidArgumentTypes))\n      .filter(u => stageSupportsType(u.stage, kValidArgumentTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u => fullRangeForType(kValidArgumentTypes[u.type]))\n  )\n  .fn(t => {\n    let expectedResult = true;\n\n    // Should be invalid if the quantized value exceeds the maximum representable\n    // 16-bit float value.\n    const f16Value = quantizeToF16(Number(t.params.value));\n    if (f16Value === Infinity || f16Value === -Infinity) {\n      expectedResult = false;\n    }\n\n    const type = kValidArgumentTypes[t.params.type];\n\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [type.create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kArgCasesF16 = {\n  bad_0f16: '(1h)',\n  bad_0vec2h: '(vec2h())',\n  bad_0vec3h: '(vec3h())',\n  bad_0vec4h: '(vec4h())',\n};\n\nconst kArgCases = {\n  good: '(vec3f())',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_2arg: '(1.0, 2.0)',\n  // Bad value for arg 0\n  bad_0bool: '(false)',\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n  bad_0uint: '(1u)',\n  bad_0int: '(1i)',\n  bad_0vec2i: '(vec2i())',\n  bad_0vec2u: '(vec2u())',\n  bad_0vec3i: '(vec3i())',\n  bad_0vec3u: '(vec3u())',\n  bad_0vec4i: '(vec4i())',\n  bad_0vec4u: '(vec4u())',\n  ...kArgCasesF16,\n};\n\ng.test('args')\n  .desc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`)\n  .params(u => u.combine('arg', keysOf(kArgCases)))\n  .fn(t => {\n    t.expectCompileResult(\n      t.params.arg === 'good',\n      `const c = ${builtin}${kArgCases[t.params.arg]};`\n    );\n  });\n\ng.test('must_use')\n  .desc(`Result of ${builtin} must be used`)\n  .params(u => u.combine('use', [true, false]))\n  .fn(t => {\n    const use_it = t.params.use ? '_ = ' : '';\n    t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n  });\n"],"mappings":"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"}