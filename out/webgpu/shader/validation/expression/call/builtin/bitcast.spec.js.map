{"version":3,"file":"bitcast.spec.js","names":["description","makeTestGroup","keysOf","assert","kBit","linearRange","ShaderValidationTest","g","kVectorCases","v1_b0","width","badIndex","v2_b0","v2_b1","v3_b0","v3_b1","v3_b2","v4_b0","v4_b1","v4_b2","v4_b3","numNaNs","f32InfAndNaNInU32","f32","positive","infinity","i32","max","negative","u32","test","specURL","desc","params","u","combine","beginSubcases","expand","p","useBadValue","fn","t","vectorize","badScalar","fromScalarType","bitBadValue","destType","srcType","components","Array","keys","map","i","join","code","expectCompileResult","f16InfAndNaNInU16","f16","u16x2ToU32","u16x2","length","buffer","ArrayBuffer","view","DataView","setUint16","getUint32","filter","badSrcElemBitsInU32","f32_matrix_types","j","reduce","a","c","concat","f16_matrix_types","bool_types","T","type","enable_directives","includes","preamble","srcVal","direction","typeOf","s","b","var","src_type","other_type","dst_type","use","case"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/bitcast.spec.ts"],"sourcesContent":["export const description = `\nValidation negative tests for bitcast builtins.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport { linearRange } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A VectorCase specifies the number of components a vector type has,\n// and which component will have a bad value.\n// Use width = 1 to indicate a scalar.\ntype VectorCase = { width: number; badIndex: number };\nconst kVectorCases: Record<string, VectorCase> = {\n  v1_b0: { width: 1, badIndex: 0 },\n  v2_b0: { width: 2, badIndex: 0 },\n  v2_b1: { width: 2, badIndex: 1 },\n  v3_b0: { width: 3, badIndex: 0 },\n  v3_b1: { width: 3, badIndex: 1 },\n  v3_b2: { width: 3, badIndex: 2 },\n  v4_b0: { width: 4, badIndex: 0 },\n  v4_b1: { width: 4, badIndex: 1 },\n  v4_b2: { width: 4, badIndex: 2 },\n  v4_b3: { width: 4, badIndex: 3 },\n};\n\nconst numNaNs = 4;\nconst f32InfAndNaNInU32: number[] = [\n  // Cover NaNs evenly in integer space.\n  // The positive NaN with the lowest integer representation is the integer\n  // for infinity, plus one.\n  // The positive NaN with the highest integer representation is i32.max (!)\n  ...linearRange(kBit.f32.positive.infinity + 1, kBit.i32.positive.max, numNaNs),\n  // The negative NaN with the lowest integer representation is the integer\n  // for negative infinity, plus one.\n  // The negative NaN with the highest integer representation is u32.max (!)\n  ...linearRange(kBit.f32.negative.infinity + 1, kBit.u32.max, numNaNs),\n  kBit.f32.positive.infinity,\n  kBit.f32.negative.infinity,\n];\n\ng.test('bad_const_to_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nIt is a shader-creation error if any const-expression of floating-point type evaluates to NaN or infinity.\n`\n  )\n  .params(u =>\n    u\n      .combine('fromScalarType', ['i32', 'u32'] as const)\n      .combine('vectorize', keysOf(kVectorCases))\n      .beginSubcases()\n      // Also validate that testcases without using bad bit can pass the exam\n      .combine('useBadValue', [true, false])\n      .expand('bitBadValue', p =>\n        p.useBadValue ? ([...f32InfAndNaNInU32] as const) : [0 as const]\n      )\n  )\n  .fn(t => {\n    // For scalar cases, generate code like:\n    //  const f = bitcast<f32>(i32(u32(0x7f800000)));\n    // For vector cases, generate code where one component is bad. In this case\n    // width=4 and badIndex=2\n    //  const f = bitcast<vec4f>(vec4<32>(0,0,i32(u32(0x7f800000)),0));\n    const vectorize = kVectorCases[t.params.vectorize];\n    const width = vectorize.width;\n    const badIndex = vectorize.badIndex;\n    const badScalar = `${t.params.fromScalarType}(u32(${t.params.bitBadValue}))`;\n    const destType = width === 1 ? 'f32' : `vec${width}f`;\n    const srcType =\n      width === 1 ? t.params.fromScalarType : `vec${width}<${t.params.fromScalarType}>`;\n    const components = [...Array(width).keys()]\n      .map(i => (i === badIndex ? badScalar : '0'))\n      .join(',');\n    const code = `const f = bitcast<${destType}>(${srcType}(${components}));`;\n    t.expectCompileResult(!t.params.useBadValue, code);\n  });\n\nconst f16InfAndNaNInU16: number[] = [\n  // Cover NaNs evenly in integer space.\n  // The positive NaN with the lowest integer representation is the integer\n  // for infinity, plus one.\n  // The positive NaN with the highest integer representation is i16.max = 32767\n  ...linearRange(kBit.f16.positive.infinity + 1, 32767, numNaNs),\n  // The negative NaN with the lowest integer representation is the integer\n  // for negative infinity, plus one.\n  // The negative NaN with the highest integer representation is u16.max = 65535\n  ...linearRange(kBit.f16.negative.infinity + 1, 65535, numNaNs),\n  kBit.f16.positive.infinity,\n  kBit.f16.negative.infinity,\n];\n\n/**\n * @returns an u32 whose lower and higher 16bits are the two elements of the\n * given array of two u16 respectively, in little-endian.\n */\nfunction u16x2ToU32(u16x2: number[]): number {\n  assert(u16x2.length === 2);\n  // Create a DataView with 4 bytes buffer.\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  // Enforce little-endian.\n  view.setUint16(0, u16x2[0], true);\n  view.setUint16(2, u16x2[1], true);\n  return view.getUint32(0, true);\n}\n\ng.test('bad_const_to_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nIt is a shader-creation error if any const-expression of floating-point type evaluates to NaN or infinity.\n`\n  )\n  .params(u =>\n    u\n      .combine('fromScalarType', ['i32', 'u32'] as const)\n      .combine('vectorize', keysOf(kVectorCases))\n      // Only test valid bitcast to vec2<f16> or vec4<f16>\n      .filter(p => kVectorCases[p.vectorize].width % 2 === 0)\n      .beginSubcases()\n      // Also validate that testcases without using bad bit can pass the exam\n      .combine('useBadValue', [true, false])\n      .expand('bitBadValue', p =>\n        p.useBadValue ? ([...f16InfAndNaNInU16] as const) : [0 as const]\n      )\n  )\n  .fn(t => {\n    // For width = 2 generate code like:\n    //  const f = bitcast<vec2<f16>>(i32(u32(0x7f800000)));\n    // And for width = 4:\n    //  const f = bitcast<vec4<f16>>(vec2<i32>(0,i32(u32(0x7f800000))));\n    const vectorize = kVectorCases[t.params.vectorize];\n    const width = vectorize.width;\n    const badIndex = vectorize.badIndex;\n\n    // Only bistcast to vec2<f16> or vec4<f16> is valid.\n    assert(width === 2 || width === 4);\n\n    // Put the bad f16 bits into lower 16 bits of source element if bad index is 0 or 2, else higher 16 bits.\n    const badSrcElemBitsInU32 = u16x2ToU32(\n      badIndex % 2 === 0 ? [t.params.bitBadValue, 0] : [0, t.params.bitBadValue]\n    );\n    const badScalar = `${t.params.fromScalarType}(u32(${badSrcElemBitsInU32}))`;\n\n    const destType = `vec${width}<f16>`;\n    const srcType = width === 2 ? t.params.fromScalarType : `vec2<${t.params.fromScalarType}>`;\n    const components = [...Array(width / 2).keys()]\n      .map(i => (i === badIndex >> 1 ? badScalar : '0'))\n      .join(',');\n    const code = `\n    enable f16;\n    const f = bitcast<${destType}>(${srcType}(${components}));`;\n    t.expectCompileResult(!t.params.useBadValue, code);\n  });\n\nconst f32_matrix_types = [2, 3, 4]\n  .map(i => [2, 3, 4].map(j => `mat${i}x${j}f`))\n  .reduce((a, c) => a.concat(c), []);\nconst f16_matrix_types = [2, 3, 4]\n  .map(i => [2, 3, 4].map(j => `mat${i}x${j}<f16>`))\n  .reduce((a, c) => a.concat(c), []);\nconst bool_types = ['bool', ...[2, 3, 4].map(i => `vec${i}<bool>`)];\n\ng.test('bad_type_constructible')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nBitcast only applies to concrete numeric scalar or concrete numeric vector.\nTest constructible types.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', [\n        ...f32_matrix_types,\n        ...f16_matrix_types,\n        ...bool_types,\n        'array<i32,2>',\n        'S',\n      ])\n      .combine('direction', ['to', 'from'])\n  )\n  .fn(t => {\n    const T = t.params.type;\n    const enable_directives = t.params.type.includes('f16') ? 'enable f16;\\n' : '';\n    const preamble = T === 'S' ? 'struct S { a:i32 } ' : '';\n    // Create a value of type T using zero-construction: T().\n    const srcVal = t.params.direction === 'to' ? '0' : `${T}()`;\n    const destType = t.params.direction === 'to' ? T : 'i32';\n    const code = enable_directives + preamble + `const x = bitcast<${destType}>(${srcVal});`;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('bad_type_nonconstructible')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nBitcast only applies to concrete numeric scalar or concrete numeric vector.\nTest non-constructible types.\n`\n  )\n  .params(u => u.combine('var', ['s', 't', 'b', 'p']).combine('direction', ['to', 'from']))\n  .fn(t => {\n    const typeOf: Record<string, string> = {\n      s: 'sampler',\n      t: 'texture_depth_2d',\n      b: 'array<i32>',\n      p: 'ptr<private,i32>',\n    };\n    const srcVal = t.params.direction === 'to' ? '0' : t.params.var;\n    const destType = t.params.direction === 'to' ? typeOf[t.params.var] : 'i32';\n    const code = `\n    @group(0) @binding(0) var s: sampler;\n    @group(0) @binding(1) var t: texture_depth_2d;\n    @group(0) @binding(2) var<storage> b: array<i32>;\n    var<private> v: i32;\n    @compute @workgroup_size(1)\n    fn main() {\n      let p = &v;\n      let x = bitcast<${destType}>(${srcVal});\n    }\n    `;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('bad_to_vec3h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nCan't cast numeric type to vec3<f16> because it is 48 bits wide\nand no other type is that size.\n`\n  )\n  .params(u =>\n    u\n      .combine('other_type', [\n        'bool',\n        'u32',\n        'i32',\n        'f32',\n        'vec2<bool>',\n        'vec3<bool>',\n        'vec4<bool>',\n        'vec2u',\n        'vec3u',\n        'vec4u',\n        'vec2i',\n        'vec3i',\n        'vec4i',\n        'vec2f',\n        'vec3f',\n        'vec4f',\n        'vec2h',\n        'vec4h',\n      ] as const)\n      .combine('direction', ['to', 'from'] as const)\n      .combine('type', ['vec3<f16>', 'vec3h'])\n  )\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? t.params.type : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? t.params.type : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('bad_to_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nCan't cast non-16-bit types to f16 because it is 16 bits wide\nand no other type is that size.\n`\n  )\n  .params(u =>\n    u\n      .combine('other_type', [\n        'bool',\n        'u32',\n        'i32',\n        'f32',\n        'vec2<bool>',\n        'vec3<bool>',\n        'vec4<bool>',\n        'vec2u',\n        'vec3u',\n        'vec4u',\n        'vec2i',\n        'vec3i',\n        'vec4i',\n        'vec2f',\n        'vec3f',\n        'vec4f',\n        'vec2h',\n        'vec3h',\n        'vec4h',\n      ] as const)\n      .combine('direction', ['to', 'from'] as const)\n  )\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? 'f16' : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? 'f16' : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('valid_vec2h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`Check valid vec2<f16> bitcasts`)\n  .params(u =>\n    u\n      .combine('other_type', ['u32', 'i32', 'f32'] as const)\n      .combine('type', ['vec2<f16>', 'vec2h'] as const)\n      .combine('direction', ['to', 'from'] as const)\n  )\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? t.params.type : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? t.params.type : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('valid_vec4h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`Check valid vec2<f16> bitcasts`)\n  .params(u =>\n    u\n      .combine('other_type', [\n        'vec2<u32>',\n        'vec2u',\n        'vec2<i32>',\n        'vec2i',\n        'vec2<f32>',\n        'vec2f',\n      ] as const)\n      .combine('type', ['vec4<f16>', 'vec4h'] as const)\n      .combine('direction', ['to', 'from'] as const)\n  )\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? t.params.type : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? t.params.type : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('must_use')\n  .desc('Test that bitcast result must be used')\n  .params(u =>\n    u\n      .combine('case', [\n        'bitcast<u32>(1i)',\n        'bitcast<f32>(1u)',\n        'bitcast<vec2f>(vec2i())',\n        'bitcast<vec3u>(vec3u())',\n        'bitcast<vec4i>(vec4f())',\n      ] as const)\n      .combine('use', [true, false] as const)\n  )\n  .fn(t => {\n    const code = `\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} ${t.params.case};\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}