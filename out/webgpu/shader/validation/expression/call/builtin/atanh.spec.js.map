{"version":3,"file":"atanh.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalarsAndVectors","absBigInt","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","minusTwoToTwoRangeForType","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","fn","t","expectedResult","value","Math","abs","create","kIntegerArgumentTypes","f32","kTests","valid","src","pass","alias","bool","i32","u32","vec_bool","vec_i32","vec_u32","matrix","atomic","array","array_runtime","struct","enumerant","ptr","ptr_deref","sampler","texture","no_params","too_many_params","one","greater_then_one","negative_one","less_then_negative_one","must_use","code","expectCompileResult"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/atanh.spec.ts"],"sourcesContent":["const builtin = 'atanh';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatScalarsAndVectors,\n} from '../../../../../util/conversion.js';\nimport { absBigInt } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  minusTwoToTwoRangeForType,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u =>\n        unique(\n          minusTwoToTwoRangeForType(kValuesTypes[u.type]),\n          fullRangeForType(kValuesTypes[u.type])\n        )\n      )\n  )\n  .fn(t => {\n    const expectedResult =\n      typeof t.params.value === 'bigint'\n        ? absBigInt(t.params.value) < 1n\n        : Math.abs(t.params.value) < 1;\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kValuesTypes[t.params.type].create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kIntegerArgumentTypes = objectsToRecord([Type.f32, ...kConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kIntegerArgumentTypes)))\n  .fn(t => {\n    const type = kIntegerArgumentTypes[t.params.type];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ type === Type.f32,\n      [type.create(0)],\n      'constant'\n    );\n  });\n\nconst kTests = {\n  valid: {\n    src: `_ = atanh(.1);`,\n    pass: true,\n  },\n  alias: {\n    src: `_ = atanh(f32_alias(.1));`,\n    pass: true,\n  },\n\n  bool: {\n    src: `_ = atanh(false);`,\n    pass: false,\n  },\n  i32: {\n    src: `_ = atanh(0i);`,\n    pass: false,\n  },\n  u32: {\n    src: `_ = atanh(0u);`,\n    pass: false,\n  },\n  vec_bool: {\n    src: `_ = atanh(vec2<bool>(false, true));`,\n    pass: false,\n  },\n  vec_i32: {\n    src: `_ = atanh(vec2<i32>(0, 0));`,\n    pass: false,\n  },\n  vec_u32: {\n    src: `_ = atanh(vec2<u32>(0, 0));`,\n    pass: false,\n  },\n  matrix: {\n    src: `_ = atanh(mat2x2(0, 0, 0, 0));`,\n    pass: false,\n  },\n  atomic: {\n    src: ` _ = atanh(a);`,\n    pass: false,\n  },\n  array: {\n    src: `var a: array<u32, 5>;\n          _ = atanh(a);`,\n    pass: false,\n  },\n  array_runtime: {\n    src: `_ = atanh(k.arry);`,\n    pass: false,\n  },\n  struct: {\n    src: `var a: A;\n          _ = atanh(a);`,\n    pass: false,\n  },\n  enumerant: {\n    src: `_ = atanh(read_write);`,\n    pass: false,\n  },\n  ptr: {\n    src: `var<function> a = 0f;\n          let p: ptr<function, f32> = &a;\n          _ = atanh(p);`,\n    pass: false,\n  },\n  ptr_deref: {\n    src: `var<function> a = 0f;\n          let p: ptr<function, f32> = &a;\n          _ = atanh(*p);`,\n    pass: true,\n  },\n  sampler: {\n    src: `_ = atanh(s);`,\n    pass: false,\n  },\n  texture: {\n    src: `_ = atanh(t);`,\n    pass: false,\n  },\n  no_params: {\n    src: `_ = atanh();`,\n    pass: false,\n  },\n  too_many_params: {\n    src: `_ = atanh(0, .2);`,\n    pass: false,\n  },\n\n  one: {\n    src: `_ = atanh(1f);`,\n    pass: false,\n  },\n  greater_then_one: {\n    src: `_ = atanh(1.1f);`,\n    pass: false,\n  },\n  negative_one: {\n    src: `_ = atanh(-1f);`,\n    pass: false,\n  },\n  less_then_negative_one: {\n    src: `_ = atanh(-1.1f);`,\n    pass: false,\n  },\n\n  must_use: {\n    src: `atanh(0.1);`,\n    pass: false,\n  },\n};\n\ng.test('parameters')\n  .desc(`Test that ${builtin} is validated correctly.`)\n  .params(u => u.combine('test', keysOf(kTests)))\n  .fn(t => {\n    const src = kTests[t.params.test].src;\n    const code = `\nalias f32_alias = f32;\n\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: texture_2d<f32>;\n\nvar<workgroup> a: atomic<u32>;\n\nstruct A {\n  i: u32,\n}\nstruct B {\n  arry: array<u32>,\n}\n@group(0) @binding(3) var<storage> k: B;\n\n\n@vertex\nfn main() -> @builtin(position) vec4<f32> {\n  ${src}\n  return vec4<f32>(.4, .2, .3, .1);\n}`;\n    t.expectCompileResult(kTests[t.params.test].pass, code);\n  });\n"],"mappings":";;GAAA,MAAMA,OAAO,GAAG,OAAO,CACvB,OAAO,MAAMC,WAAW,GAAI;AAC5B,2BAA2BD,OAAQ;AACnC,CAAC;AAED,SAASE,aAAa,QAAQ,kDAAkD;AAChF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C;AACtF;EACEC,IAAI;EACJC,iCAAiC;EACjCC,oCAAoC;AAC/B,mCAAmC;AAC1C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE;EACEC,gBAAgB;EAChBC,0BAA0B;EAC1BC,yBAAyB;EACzBC,iBAAiB;EACjBC,MAAM;EACNC,kCAAkC;AAC7B,gCAAgC;;AAEvC,OAAO,MAAMC,CAAC,GAAGd,aAAa,CAACO,oBAAoB,CAAC;;AAEpD,MAAMQ,YAAY,GAAGb,eAAe,CAACG,oCAAoC,CAAC;;AAE1ES,CAAC,CAACE,IAAI,CAAC,QAAQ,CAAC;AACbC,IAAI;EACF;AACL,gEAAgEnB,OAAQ;AACxE;AACE,CAAC;AACAoB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,OAAO,EAAEX,0BAA0B,CAAC;AAC5CW,OAAO,CAAC,MAAM,EAAEnB,MAAM,CAACc,YAAY,CAAC,CAAC;AACrCM,MAAM,CAAC,CAAAF,CAAC,KAAIR,iBAAiB,CAACQ,CAAC,CAACG,KAAK,EAAEP,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC;AAC7DC,aAAa,CAAC,CAAC;AACfC,MAAM,CAAC,OAAO,EAAE,CAAAN,CAAC;AAChBP,MAAM;EACJF,yBAAyB,CAACK,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC,CAAC;EAC/Cf,gBAAgB,CAACO,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC;AACvC;AACF;AACJ,CAAC;AACAG,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,cAAc;EAClB,OAAOD,CAAC,CAACT,MAAM,CAACW,KAAK,KAAK,QAAQ;EAC9BvB,SAAS,CAACqB,CAAC,CAACT,MAAM,CAACW,KAAK,CAAC,GAAG,EAAE;EAC9BC,IAAI,CAACC,GAAG,CAACJ,CAAC,CAACT,MAAM,CAACW,KAAK,CAAC,GAAG,CAAC;EAClChB,kCAAkC;IAChCc,CAAC;IACD7B,OAAO;IACP8B,cAAc;IACd,CAACb,YAAY,CAACY,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC,CAACS,MAAM,CAACL,CAAC,CAACT,MAAM,CAACW,KAAK,CAAC,CAAC;IACpDF,CAAC,CAACT,MAAM,CAACI;EACX,CAAC;AACH,CAAC,CAAC;;AAEJ,MAAMW,qBAAqB,GAAG/B,eAAe,CAAC,CAACC,IAAI,CAAC+B,GAAG,EAAE,GAAG9B,iCAAiC,CAAC,CAAC;;AAE/FU,CAAC,CAACE,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI;EACF;AACL,qEAAqEnB,OAAQ;AAC7E;AACE,CAAC;AACAoB,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAEnB,MAAM,CAACgC,qBAAqB,CAAC,CAAC,CAAC;AAC7DP,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMJ,IAAI,GAAGU,qBAAqB,CAACN,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC;EACjDV,kCAAkC;IAChCc,CAAC;IACD7B,OAAO;IACP,oBAAqByB,IAAI,KAAKpB,IAAI,CAAC+B,GAAG;IACtC,CAACX,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB;EACF,CAAC;AACH,CAAC,CAAC;;AAEJ,MAAMG,MAAM,GAAG;EACbC,KAAK,EAAE;IACLC,GAAG,EAAG,gBAAe;IACrBC,IAAI,EAAE;EACR,CAAC;EACDC,KAAK,EAAE;IACLF,GAAG,EAAG,2BAA0B;IAChCC,IAAI,EAAE;EACR,CAAC;;EAEDE,IAAI,EAAE;IACJH,GAAG,EAAG,mBAAkB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDG,GAAG,EAAE;IACHJ,GAAG,EAAG,gBAAe;IACrBC,IAAI,EAAE;EACR,CAAC;EACDI,GAAG,EAAE;IACHL,GAAG,EAAG,gBAAe;IACrBC,IAAI,EAAE;EACR,CAAC;EACDK,QAAQ,EAAE;IACRN,GAAG,EAAG,qCAAoC;IAC1CC,IAAI,EAAE;EACR,CAAC;EACDM,OAAO,EAAE;IACPP,GAAG,EAAG,6BAA4B;IAClCC,IAAI,EAAE;EACR,CAAC;EACDO,OAAO,EAAE;IACPR,GAAG,EAAG,6BAA4B;IAClCC,IAAI,EAAE;EACR,CAAC;EACDQ,MAAM,EAAE;IACNT,GAAG,EAAG,gCAA+B;IACrCC,IAAI,EAAE;EACR,CAAC;EACDS,MAAM,EAAE;IACNV,GAAG,EAAG,gBAAe;IACrBC,IAAI,EAAE;EACR,CAAC;EACDU,KAAK,EAAE;IACLX,GAAG,EAAG;AACV,wBAAwB;IACpBC,IAAI,EAAE;EACR,CAAC;EACDW,aAAa,EAAE;IACbZ,GAAG,EAAG,oBAAmB;IACzBC,IAAI,EAAE;EACR,CAAC;EACDY,MAAM,EAAE;IACNb,GAAG,EAAG;AACV,wBAAwB;IACpBC,IAAI,EAAE;EACR,CAAC;EACDa,SAAS,EAAE;IACTd,GAAG,EAAG,wBAAuB;IAC7BC,IAAI,EAAE;EACR,CAAC;EACDc,GAAG,EAAE;IACHf,GAAG,EAAG;AACV;AACA,wBAAwB;IACpBC,IAAI,EAAE;EACR,CAAC;EACDe,SAAS,EAAE;IACThB,GAAG,EAAG;AACV;AACA,yBAAyB;IACrBC,IAAI,EAAE;EACR,CAAC;EACDgB,OAAO,EAAE;IACPjB,GAAG,EAAG,eAAc;IACpBC,IAAI,EAAE;EACR,CAAC;EACDiB,OAAO,EAAE;IACPlB,GAAG,EAAG,eAAc;IACpBC,IAAI,EAAE;EACR,CAAC;EACDkB,SAAS,EAAE;IACTnB,GAAG,EAAG,cAAa;IACnBC,IAAI,EAAE;EACR,CAAC;EACDmB,eAAe,EAAE;IACfpB,GAAG,EAAG,mBAAkB;IACxBC,IAAI,EAAE;EACR,CAAC;;EAEDoB,GAAG,EAAE;IACHrB,GAAG,EAAG,gBAAe;IACrBC,IAAI,EAAE;EACR,CAAC;EACDqB,gBAAgB,EAAE;IAChBtB,GAAG,EAAG,kBAAiB;IACvBC,IAAI,EAAE;EACR,CAAC;EACDsB,YAAY,EAAE;IACZvB,GAAG,EAAG,iBAAgB;IACtBC,IAAI,EAAE;EACR,CAAC;EACDuB,sBAAsB,EAAE;IACtBxB,GAAG,EAAG,mBAAkB;IACxBC,IAAI,EAAE;EACR,CAAC;;EAEDwB,QAAQ,EAAE;IACRzB,GAAG,EAAG,aAAY;IAClBC,IAAI,EAAE;EACR;AACF,CAAC;;AAEDxB,CAAC,CAACE,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI,CAAE,aAAYnB,OAAQ,0BAAyB,CAAC;AACpDoB,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAEnB,MAAM,CAACkC,MAAM,CAAC,CAAC,CAAC;AAC9CT,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMU,GAAG,GAAGF,MAAM,CAACR,CAAC,CAACT,MAAM,CAACF,IAAI,CAAC,CAACqB,GAAG;EACrC,MAAM0B,IAAI,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI1B,GAAI;AACR;AACA,EAAE;EACEV,CAAC,CAACqC,mBAAmB,CAAC7B,MAAM,CAACR,CAAC,CAACT,MAAM,CAACF,IAAI,CAAC,CAACsB,IAAI,EAAEyB,IAAI,CAAC;AACzD,CAAC,CAAC"}