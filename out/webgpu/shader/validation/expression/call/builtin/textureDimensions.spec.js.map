{"version":3,"file":"textureDimensions.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","kPossibleStorageTextureFormats","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","stringToType","ShaderValidationTest","getNonStorageTextureTypeWGSL","getSampleAndBaseTextureTypeForTextureType","kNonStorageTextureTypeInfo","kTestTextureTypes","kValidTextureDimensionParameterTypesForNonStorageTextures","texture_1d","returnType","u32","hasLevelArg","texture_2d","vec2u","texture_2d_array","texture_cube","texture_cube_array","texture_3d","vec3u","texture_multisampled_2d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_external","kValidTextureDimensionParameterTypesForStorageTextures","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","kNonStorageTextureTypes","kStorageTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","texelTypes","map","v","toString","fn","texelType","returnVarType","returnRequiredType","varWGSL","texelArgType","textureWGSL","levelWGSL","code","expectSuccess","expectCompileResult","format","skipIfTextureFormatNotUsableAsStorageTexture","filter","levelType","value","levelArgType","create","wgsl","i32","testTextureType","baseTestTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureDimensions.spec.ts"],"sourcesContent":["const builtin = 'textureDimension';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureDimension returns the correct type\n* test textureDimension level parameter must be correct type\n* test textureDimension doesn't work with texture types it's not supposed to\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { kPossibleStorageTextureFormats } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  isUnsignedType,\n  stringToType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getNonStorageTextureTypeWGSL,\n  getSampleAndBaseTextureTypeForTextureType,\n  kNonStorageTextureTypeInfo,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\ntype TextureDimensionArguments = {\n  returnType: Type;\n  hasLevelArg?: boolean;\n};\n\nconst kValidTextureDimensionParameterTypesForNonStorageTextures: {\n  [n: string]: TextureDimensionArguments;\n} = {\n  texture_1d: {\n    returnType: Type.u32,\n    hasLevelArg: true,\n  },\n  texture_2d: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_2d_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_cube: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_cube_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_3d: {\n    returnType: Type.vec3u,\n    hasLevelArg: true,\n  },\n  texture_multisampled_2d: {\n    returnType: Type.vec2u,\n  },\n  texture_depth_2d: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_depth_2d_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_depth_cube: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_depth_cube_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true,\n  },\n  texture_depth_multisampled_2d: {\n    returnType: Type.vec2u,\n  },\n  texture_external: { returnType: Type.vec2u },\n};\n\nconst kValidTextureDimensionParameterTypesForStorageTextures: {\n  [n: string]: TextureDimensionArguments;\n} = {\n  texture_storage_1d: {\n    returnType: Type.u32,\n  },\n  texture_storage_2d: {\n    returnType: Type.vec2u,\n  },\n  texture_storage_2d_array: {\n    returnType: Type.vec2u,\n  },\n  texture_storage_3d: {\n    returnType: Type.vec3u,\n  },\n} as const;\n\nconst kNonStorageTextureTypes = keysOf(kValidTextureDimensionParameterTypesForNonStorageTextures);\nconst kStorageTextureTypes = keysOf(kValidTextureDimensionParameterTypesForStorageTextures);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', kNonStorageTextureTypes)\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n  )\n  .fn(t => {\n    const { returnType, textureType, texelType } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n    const { returnType: returnRequiredType, hasLevelArg } =\n      kValidTextureDimensionParameterTypesForNonStorageTextures[textureType];\n\n    const varWGSL = returnVarType.toString();\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureDimensions(t${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(returnRequiredType, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('return_type,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', kStorageTextureTypes)\n      .beginSubcases()\n      .combine('format', kPossibleStorageTextureFormats)\n  )\n  .fn(t => {\n    const { returnType, textureType, format } = t.params;\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n    const returnVarType = kValuesTypes[returnType];\n    const { returnType: returnRequiredType, hasLevelArg } =\n      kValidTextureDimensionParameterTypesForStorageTextures[textureType];\n\n    const varWGSL = returnVarType.toString();\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureDimensions(t${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(returnRequiredType, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('level_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions')\n  .desc(\n    `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no level\n      .filter(\n        t => !!kValidTextureDimensionParameterTypesForNonStorageTextures[t.textureType].hasLevelArg\n      )\n      .combine('levelType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, levelType, texelType, value } = t.params;\n    const levelArgType = kValuesTypes[levelType];\n\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n    const levelWGSL = levelArgType.create(value).wgsl();\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureDimensions(t, ${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .beginSubcases()\n      .combine('textureType', keysOf(kValidTextureDimensionParameterTypesForNonStorageTextures))\n      .expand('hasLevelArg', t =>\n        kValidTextureDimensionParameterTypesForNonStorageTextures[t.textureType].hasLevelArg\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { testTextureType, hasLevelArg } = t.params;\n\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureDimensions(t${levelWGSL});\n  return vec4f(0);\n}\n`;\n\n    const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n    let expectSuccess = true;\n    const types =\n      kValidTextureDimensionParameterTypesForNonStorageTextures[baseTestTextureType] ||\n      kValidTextureDimensionParameterTypesForStorageTextures[baseTestTextureType];\n    if (types) {\n      const typesMatch = !hasLevelArg || !!types.hasLevelArg;\n      expectSuccess = typesMatch;\n    }\n\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureDimensions(t);\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}