{"version":3,"file":"textureNumLayers.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","kPossibleStorageTextureFormats","Type","kAllScalarsAndVectors","isConvertible","stringToType","ShaderValidationTest","getNonStorageTextureTypeWGSL","kNonStorageTextureTypeInfo","kTestTextureTypes","kTextureNumLayersTextureTypesForNonStorageTextures","kTextureNumLayersTextureTypesForStorageTextures","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","texelTypes","map","v","toString","fn","returnType","texelType","returnVarType","varWGSL","texelArgType","textureWGSL","code","expectSuccess","u32","expectCompileResult","format","skipIfTextureFormatNotUsableAsStorageTexture","testTextureType","includes","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureNumLayers.spec.ts"],"sourcesContent":["const builtin = 'textureNumLayers';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureNumLayers returns the correct type\n* test textureNumLayers doesn't work with texture types it's not supposed to\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { kPossibleStorageTextureFormats } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  stringToType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getNonStorageTextureTypeWGSL,\n  kNonStorageTextureTypeInfo,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\nconst kTextureNumLayersTextureTypesForNonStorageTextures = [\n  'texture_2d_array',\n  'texture_cube_array',\n  'texture_depth_2d_array',\n  'texture_depth_cube_array',\n] as const;\n\nconst kTextureNumLayersTextureTypesForStorageTextures = ['texture_storage_2d_array'] as const;\n\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturenumlayers')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', kTextureNumLayersTextureTypesForNonStorageTextures)\n      .beginSubcases()\n      .expand('texelType', t =>\n        kNonStorageTextureTypeInfo[t.textureType].texelTypes.map(v => v.toString())\n      )\n  )\n  .fn(t => {\n    const { returnType, textureType, texelType } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n\n    const varWGSL = returnVarType.toString();\n    const texelArgType = stringToType(texelType);\n    const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n\n    const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureNumLayers(t);\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(Type.u32, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('return_type,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturenumlayers')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', kTextureNumLayersTextureTypesForStorageTextures)\n      .beginSubcases()\n      .combine('format', kPossibleStorageTextureFormats)\n  )\n  .fn(t => {\n    const { returnType, textureType, format } = t.params;\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n    const returnVarType = kValuesTypes[returnType];\n\n    const varWGSL = returnVarType.toString();\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureNumLayers(t);\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(Type.u32, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturenumlayers')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u => u.combine('testTextureType', kTestTextureTypes))\n  .fn(t => {\n    const { testTextureType } = t.params;\n    const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureNumLayers(t);\n  return vec4f(0);\n}\n`;\n\n    const expectSuccess = testTextureType.includes('array');\n\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_2d_array<f32>;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureNumLayers(t);\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}