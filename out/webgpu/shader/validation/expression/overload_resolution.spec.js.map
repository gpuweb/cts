{"version":3,"file":"overload_resolution.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","kAllNumericScalarsAndVectors","isConvertible","VectorType","ShaderValidationTest","g","kImplicitConversionCases","absint_to_bool","expr","valid","absint_to_u32","absint_to_i32","absint_to_f32","absint_to_f16","f16","absfloat_to_bool","absfloat_to_u32","absfloat_to_i32","absfloat_to_f32","absfloat_to_f16","vector_absint_to_bool","vector_absint_to_u32","vector_absint_to_i32","vector_absint_to_f32","vector_absint_to_f16","vector_absfloat_to_bool","vector_absfloat_to_u32","vector_absfloat_to_i32","vector_absfloat_to_f32","vector_absfloat_to_f16","vector_swizzle_integer","vector_swizzle_float","vector_default_ctor_integer","vector_default_ctor_abstract","vector_swizzle_abstract","vector_abstract_to_integer","vector_wrong_result_i32","vector_wrong_result_f32","vector_wrong_result_splat","array_absint_to_bool","array_absint_to_u32","array_absint_to_i32","array_absint_to_f32","array_absint_to_f16","array_absfloat_to_bool","array_absfloat_to_u32","array_absfloat_to_i32","array_absfloat_to_f32","array_absfloat_to_f16","mat2x2_index_absint","mat2x2_index_absfloat","mat2x2_index_float","mat2x2_wrong_result","test","desc","params","u","combine","fn","t","testcase","case","code","expectCompileResult","kTypes","kTypeKeys","beginSubcases","filter","arg1","arg2","t1","t2","t1IsVector","t2IsVector","size","resTy","enable","requiresF16","min","max","res","op","v1","create","wgsl","v2","resV","assertExpr"],"sources":["../../../../../src/webgpu/shader/validation/expression/overload_resolution.spec.ts"],"sourcesContent":["export const description = `Validation tests for implicit conversions and overload resolution`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../common/util/data_tables.js';\nimport {\n  kAllNumericScalarsAndVectors,\n  isConvertible,\n  VectorType,\n} from '../../../util/conversion.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ninterface Case {\n  expr: string;\n  valid: boolean;\n  f16?: boolean;\n}\n\nconst kImplicitConversionCases: Record<string, Case> = {\n  absint_to_bool: {\n    expr: `any(1)`,\n    valid: false,\n  },\n  absint_to_u32: {\n    expr: `1 == 1u`,\n    valid: true,\n  },\n  absint_to_i32: {\n    expr: `1 == 1i`,\n    valid: true,\n  },\n  absint_to_f32: {\n    expr: `1 == 1f`,\n    valid: true,\n  },\n  absint_to_f16: {\n    expr: `1 == 1h`,\n    valid: true,\n    f16: true,\n  },\n  absfloat_to_bool: {\n    expr: `any(1.0)`,\n    valid: false,\n  },\n  absfloat_to_u32: {\n    expr: `1.0 == 1u`,\n    valid: false,\n  },\n  absfloat_to_i32: {\n    expr: `1.0 == 1i`,\n    valid: false,\n  },\n  absfloat_to_f32: {\n    expr: `1.0 == 1f`,\n    valid: true,\n  },\n  absfloat_to_f16: {\n    expr: `1.0 == 1h`,\n    valid: true,\n    f16: true,\n  },\n  vector_absint_to_bool: {\n    expr: `any(vec2(1))`,\n    valid: false,\n  },\n  vector_absint_to_u32: {\n    expr: `all(vec2(1) == vec2u(1u))`,\n    valid: true,\n  },\n  vector_absint_to_i32: {\n    expr: `all(vec3(1) == vec3i(1i))`,\n    valid: true,\n  },\n  vector_absint_to_f32: {\n    expr: `all(vec4(1) == vec4f(1f))`,\n    valid: true,\n  },\n  vector_absint_to_f16: {\n    expr: `all(vec2(1) == vec2h(1h))`,\n    valid: true,\n    f16: true,\n  },\n  vector_absfloat_to_bool: {\n    expr: `any(vec2(1.0))`,\n    valid: false,\n  },\n  vector_absfloat_to_u32: {\n    expr: `all(vec2(1.0) == vec2u(1u))`,\n    valid: false,\n  },\n  vector_absfloat_to_i32: {\n    expr: `all(vec3(1.0) == vec2i(1i))`,\n    valid: false,\n  },\n  vector_absfloat_to_f32: {\n    expr: `all(vec4(1.0) == vec4f(1f))`,\n    valid: true,\n  },\n  vector_absfloat_to_f16: {\n    expr: `all(vec2(1.0) == vec2h(1h))`,\n    valid: true,\n    f16: true,\n  },\n  vector_swizzle_integer: {\n    expr: `vec2(1).x == 1i`,\n    valid: true,\n  },\n  vector_swizzle_float: {\n    expr: `vec2(1).y == 1f`,\n    valid: true,\n  },\n  vector_default_ctor_integer: {\n    expr: `all(vec3().xy == vec2i())`,\n    valid: true,\n  },\n  vector_default_ctor_abstract: {\n    expr: `all(vec3().xy == vec2())`,\n    valid: true,\n  },\n  vector_swizzle_abstract: {\n    expr: `vec4(1f).x == 1`,\n    valid: true,\n  },\n  vector_abstract_to_integer: {\n    expr: `all(vec4(1) == vec4i(1))`,\n    valid: true,\n  },\n  vector_wrong_result_i32: {\n    expr: `vec2(1,2f).x == 1i`,\n    valid: false,\n  },\n  vector_wrong_result_f32: {\n    expr: `vec2(1,2i).y == 2f`,\n    valid: false,\n  },\n  vector_wrong_result_splat: {\n    expr: `vec2(1.0).x == 1i`,\n    valid: false,\n  },\n  array_absint_to_bool: {\n    expr: `any(array(1)[0])`,\n    valid: false,\n  },\n  array_absint_to_u32: {\n    expr: `array(1)[0] == array<u32,1>(1u)[0]`,\n    valid: true,\n  },\n  array_absint_to_i32: {\n    expr: `array(1)[0] == array<i32,1>(1i)[0]`,\n    valid: true,\n  },\n  array_absint_to_f32: {\n    expr: `array(1)[0] == array<f32,1>(1f)[0]`,\n    valid: true,\n  },\n  array_absint_to_f16: {\n    expr: `array(1)[0] == array<f16,1>(1h)[0]`,\n    valid: true,\n    f16: true,\n  },\n  array_absfloat_to_bool: {\n    expr: `any(array(1.0)[0])`,\n    valid: false,\n  },\n  array_absfloat_to_u32: {\n    expr: `array(1.0)[0] == array<u32,1>(1u)[0]`,\n    valid: false,\n  },\n  array_absfloat_to_i32: {\n    expr: `array(1.0)[0] == array<i32,1>(1i)[0]`,\n    valid: false,\n  },\n  array_absfloat_to_f32: {\n    expr: `array(1.0)[0] == array<f32,1>(1f)[0]`,\n    valid: true,\n  },\n  array_absfloat_to_f16: {\n    expr: `array(1.0)[0] == array<f16,1>(1h)[0]`,\n    valid: true,\n    f16: true,\n  },\n  mat2x2_index_absint: {\n    expr: `all(mat2x2(1,2,3,4)[0] == vec2(1,2))`,\n    valid: true,\n  },\n  mat2x2_index_absfloat: {\n    expr: `all(mat2x2(1,2,3,4)[1] == vec2(3.0,4.0))`,\n    valid: true,\n  },\n  mat2x2_index_float: {\n    expr: `all(mat2x2(0,0,0,0)[1] == vec2f())`,\n    valid: true,\n  },\n  mat2x2_wrong_result: {\n    expr: `all(mat2x2(0f,0,0,0)[0] == vec2h())`,\n    valid: false,\n    f16: true,\n  },\n};\n\ng.test('implicit_conversions')\n  .desc('Test implicit conversions')\n  .params(u => u.combine('case', keysOf(kImplicitConversionCases)))\n  .fn(t => {\n    const testcase = kImplicitConversionCases[t.params.case];\n    const code = `${testcase.f16 ? 'enable f16;' : ''}\n    const_assert ${testcase.expr};`;\n    t.expectCompileResult(testcase.valid, code);\n  });\n\nconst kTypes = objectsToRecord(kAllNumericScalarsAndVectors);\nconst kTypeKeys = keysOf(kTypes);\n\ng.test('overload_resolution')\n  .desc('Test overload resolution')\n  .params(u =>\n    u\n      .combine('arg1', kTypeKeys)\n      .combine('arg2', kTypeKeys)\n      .beginSubcases()\n      .combine('op', ['min', 'max'] as const)\n      .filter(t => {\n        if (t.arg1 === t.arg2) {\n          return false;\n        }\n        const t1 = kTypes[t.arg1];\n        const t2 = kTypes[t.arg2];\n        const t1IsVector = t1 instanceof VectorType;\n        const t2IsVector = t2 instanceof VectorType;\n        if (t1IsVector !== t2IsVector) {\n          return false;\n        }\n        if (t1IsVector && t2IsVector && t1.size !== t2.size) {\n          return false;\n        }\n        return true;\n      })\n  )\n  .fn(t => {\n    const t1 = kTypes[t.params.arg1];\n    const t2 = kTypes[t.params.arg2];\n    const resTy = isConvertible(t1, t2) ? t2 : t1;\n    const enable = `${t1.requiresF16() || t2.requiresF16() ? 'enable f16;' : ''}`;\n    const min = 50;\n    const max = 100;\n    const res = t.params.op === 'min' ? min : max;\n    const v1 = t1.create(min).wgsl();\n    const v2 = t2.create(max).wgsl();\n    const resV = resTy.create(res).wgsl();\n    const expr = `${t.params.op}(${v1}, ${v2}) == ${resV}`;\n    const assertExpr = t1 instanceof VectorType ? `all(${expr})` : expr;\n    const code = `${enable}\n    const_assert ${assertExpr};`;\n    t.expectCompileResult(isConvertible(t1, t2) || isConvertible(t2, t1), code);\n  });\n"],"mappings":"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"}