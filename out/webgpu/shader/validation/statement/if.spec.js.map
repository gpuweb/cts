{"version":3,"file":"if.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","kTestTypes","g","test","desc","params","u","combine","fn","t","type","code","requires","header","value","pass","expectCompileResult","kTests","true","wgsl","paren_true","expr","paren_expr","true_else","paren_true_else","expr_else","paren_expr_else","true_else_if_true","paren_true_else_if_paren_true","true_else_if_paren_true","paren_true_else_if_true","expr_else_if_expr","paren_expr_else_if_paren_expr","expr_else_if_paren_expr","paren_expr_else_if_expr","if","block","semicolon","true_lbrace","true_rbrace","lparen_true","rparen_true","true_lparen","true_rparen","true_else_if_no_block","true_else_if","true_else_if_semicolon","true_else_if_true_lbrace","true_else_if_true_rbrace","true_else_if_lparen_true","true_else_if_rparen_true","true_else_if_true_lparen","true_else_if_true_rparen","else","else_if","true_elif","true_elsif","elif","elsif"],"sources":["../../../../../src/webgpu/shader/validation/statement/if.spec.ts"],"sourcesContent":["export const description = `Validation tests for 'if' statements'`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { kTestTypes } from './test_types.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('condition_type')\n  .desc(`Tests that an 'if' condition must be a bool type`)\n  .params(u => u.combine('type', keysOf(kTestTypes)))\n  .fn(t => {\n    const type = kTestTypes[t.params.type];\n    const code = `\n${type.requires ? `enable ${type.requires};` : ''}\n\n${type.header ?? ''}\n\nfn f() -> bool {\n  if ${type.value} {\n    return true;\n  }\n  return false;\n}\n`;\n\n    const pass = t.params.type === 'bool';\n    t.expectCompileResult(pass, code);\n  });\n\ng.test('else_condition_type')\n  .desc(`Tests that an 'else if' condition must be a bool type`)\n  .params(u => u.combine('type', keysOf(kTestTypes)))\n  .fn(t => {\n    const type = kTestTypes[t.params.type];\n    const code = `\n${type.requires ? `enable ${type.requires};` : ''}\n\n${type.header ?? ''}\n\nfn f(c : bool) -> bool {\n  if (c) {\n    return true;\n  } else if (${type.value}) {\n    return true;\n  }\n  return false;\n}\n`;\n\n    const pass = t.params.type === 'bool';\n    t.expectCompileResult(pass, code);\n  });\n\nconst kTests = {\n  true: { wgsl: `if true {}`, pass: true },\n  paren_true: { wgsl: `if (true) {}`, pass: true },\n  expr: { wgsl: `if expr {}`, pass: true },\n  paren_expr: { wgsl: `if (expr) {}`, pass: true },\n\n  true_else: { wgsl: `if true {} else {}`, pass: true },\n  paren_true_else: { wgsl: `if (true) {} else {}`, pass: true },\n  expr_else: { wgsl: `if expr {} else {}`, pass: true },\n  paren_expr_else: { wgsl: `if (expr) {} else {}`, pass: true },\n\n  true_else_if_true: { wgsl: `if true {} else if true {}`, pass: true },\n  paren_true_else_if_paren_true: { wgsl: `if (true) {} else if (true) {}`, pass: true },\n  true_else_if_paren_true: { wgsl: `if true {} else if (true) {}`, pass: true },\n  paren_true_else_if_true: { wgsl: `if (true) {} else if true {}`, pass: true },\n\n  expr_else_if_expr: { wgsl: `if expr {} else if expr {}`, pass: true },\n  paren_expr_else_if_paren_expr: { wgsl: `if (expr) {} else if (expr) {}`, pass: true },\n  expr_else_if_paren_expr: { wgsl: `if expr {} else if (expr) {}`, pass: true },\n  paren_expr_else_if_expr: { wgsl: `if (expr) {} else if expr {}`, pass: true },\n\n  if: { wgsl: `if`, pass: false },\n  block: { wgsl: `if{}`, pass: false },\n  semicolon: { wgsl: `if;`, pass: false },\n  true_lbrace: { wgsl: `if true {`, pass: false },\n  true_rbrace: { wgsl: `if true }`, pass: false },\n\n  lparen_true: { wgsl: `if (true {}`, pass: false },\n  rparen_true: { wgsl: `if )true {}`, pass: false },\n  true_lparen: { wgsl: `if true( {}`, pass: false },\n  true_rparen: { wgsl: `if true) {}`, pass: false },\n\n  true_else_if_no_block: { wgsl: `if true {} else if `, pass: false },\n  true_else_if: { wgsl: `if true {} else if {}`, pass: false },\n  true_else_if_semicolon: { wgsl: `if true {} else if ;`, pass: false },\n  true_else_if_true_lbrace: { wgsl: `if true {} else if true {`, pass: false },\n  true_else_if_true_rbrace: { wgsl: `if true {} else if true }`, pass: false },\n\n  true_else_if_lparen_true: { wgsl: `if true {} else if (true {}`, pass: false },\n  true_else_if_rparen_true: { wgsl: `if true {} else if )true {}`, pass: false },\n  true_else_if_true_lparen: { wgsl: `if true {} else if true( {}`, pass: false },\n  true_else_if_true_rparen: { wgsl: `if true {} else if true) {}`, pass: false },\n\n  else: { wgsl: `else { }`, pass: false },\n  else_if: { wgsl: `else if true { }`, pass: false },\n  true_elif: { wgsl: `if (true) { } elif (true) {}`, pass: false },\n  true_elsif: { wgsl: `if (true) { } elsif (true) {}`, pass: false },\n  elif: { wgsl: `elif (true) {}`, pass: false },\n  elsif: { wgsl: `elsif (true) {}`, pass: false },\n};\n\ng.test('parse')\n  .desc(`Test that 'if' statements are parsed correctly.`)\n  .params(u => u.combine('test', keysOf(kTests)))\n  .fn(t => {\n    const code = `\nfn f() {\n  let expr = true;\n  ${kTests[t.params.test].wgsl}\n}`;\n    t.expectCompileResult(kTests[t.params.test].pass, code);\n  });\n"],"mappings":"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"}