{"version":3,"file":"break_if.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","kTestTypes","g","test","desc","params","u","combine","fn","t","type","code","requires","header","value","pass","expectCompileResult","kTests","compound_break","src","loop_break","loop_if_break","continuing_break_if","continuing_break_if_parens","continuing_break_if_not_last","while_break","while_if_break","for_break","for_if_break","switch_case_break","switch_case_if_break","break","return_break","if_break","continuing_if_break","switch_break","stmt"],"sources":["../../../../../src/webgpu/shader/validation/statement/break_if.spec.ts"],"sourcesContent":["export const description = `Validation tests for 'break if' statements'`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { kTestTypes } from './test_types.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('condition_type')\n  .desc(`Tests that an 'break if' condition must be a bool type`)\n  .params(u => u.combine('type', keysOf(kTestTypes)))\n  .fn(t => {\n    const type = kTestTypes[t.params.type];\n    const code = `\n${type.requires ? `enable ${type.requires};` : ''}\n\n${type.header ?? ''}\n\nfn f() {\n  loop {\n    continuing {\n      break if ${type.value};\n    }\n  }\n}\n`;\n\n    const pass = t.params.type === 'bool';\n    t.expectCompileResult(pass, code);\n  });\n\nconst kTests = {\n  compound_break: {\n    src: '{ break if true; }',\n    pass: false,\n  },\n  loop_break: {\n    src: 'loop { break if true; }',\n    pass: false,\n  },\n  loop_if_break: {\n    src: 'loop { if true { break if false; } }',\n    pass: false,\n  },\n  continuing_break_if: {\n    src: 'loop { continuing { break if true; } }',\n    pass: true,\n  },\n  continuing_break_if_parens: {\n    src: 'loop { continuing { break if (true); } }',\n    pass: true,\n  },\n  continuing_break_if_not_last: {\n    src: 'loop { continuing { break if (true); let a = 4;} }',\n    pass: false,\n  },\n  while_break: {\n    src: 'while true { break if true; }',\n    pass: false,\n  },\n  while_if_break: {\n    src: 'while true { if true { break if true; } }',\n    pass: false,\n  },\n  for_break: {\n    src: 'for (;;) { break if true; }',\n    pass: false,\n  },\n  for_if_break: {\n    src: 'for (;;) { if true { break if true; } }',\n    pass: false,\n  },\n  switch_case_break: {\n    src: 'switch(1) { default: { break if true; } }',\n    pass: false,\n  },\n  switch_case_if_break: {\n    src: 'switch(1) { default: { if true { break if true; } } }',\n    pass: false,\n  },\n  break: {\n    src: 'break if true;',\n    pass: false,\n  },\n  return_break: {\n    src: 'return break if true;',\n    pass: false,\n  },\n  if_break: {\n    src: 'if true { break if true; }',\n    pass: false,\n  },\n  continuing_if_break: {\n    src: 'loop { continuing { if (true) { break if true; } } }',\n    pass: false,\n  },\n  switch_break: {\n    src: 'switch(1) { break if true; }',\n    pass: false,\n  },\n};\n\ng.test('placement')\n  .desc('Test that break if placement is validated correctly')\n  .params(u => u.combine('stmt', keysOf(kTests)))\n  .fn(t => {\n    const code = `\n@vertex\nfn vtx() -> @builtin(position) vec4f {\n  ${kTests[t.params.stmt].src}\n  return vec4f(1);\n}\n    `;\n    t.expectCompileResult(kTests[t.params.stmt].pass, code);\n  });\n"],"mappings":"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"}