{"version":3,"file":"atomics.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","test","desc","specURL","params","u","combine","fn","t","code","type","expect","expectCompileResult","kSpecifierCases","no_type","valid","missing_l_template","missing_r_template","template_comma","missing_template_param","space_in_specifier","space_as_l_template","comment","testcase","case","beginSubcases","moduleVar","functionVar","aspace","kInvalidOperations","add","load","store","deref","equality","abs","address_abs","op","comma"],"sources":["../../../../../src/webgpu/shader/validation/types/atomics.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for atomic types\n\nTests covered:\n* Base type\n* Address spaces\n* Invalid operations (non-exhaustive)\n\nNote: valid operations (e.g. atomic built-in functions) are tested in the builtin tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('type')\n  .desc('Test of the underlying atomic data type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#atomic-types')\n  .params(u =>\n    u.combine('type', [\n      'u32',\n      'i32',\n      'f32',\n      'f16',\n      'bool',\n      'vec2u',\n      'vec3i',\n      'vec4f',\n      'mat2x2f',\n      'R',\n      'S',\n      'array<u32, 1>',\n      'array<i32, 4>',\n      'array<u32>',\n      'array<i32>',\n      'atomic<u32>',\n      'atomic<i32>',\n      'sampler',\n    ] as const)\n  )\n  .fn(t => {\n    const code = `\nstruct S {\n  x : u32\n}\nstruct T {\n  x : i32\n}\nstruct R {\n  x : f32\n}\n\nstruct Test {\n  x : atomic<${t.params.type}>\n}\n`;\n\n    const expect = t.params.type === 'u32' || t.params.type === 'i32';\n    t.expectCompileResult(expect, code);\n  });\n\nconst kSpecifierCases = {\n  no_type: {\n    code: `alias T = atomic;`,\n    valid: false,\n  },\n  missing_l_template: {\n    code: `alias T = atomici32>;`,\n    valid: false,\n  },\n  missing_r_template: {\n    code: `alias T = atomic<i32;`,\n    valid: false,\n  },\n  template_comma: {\n    code: `alias T = atomic<i32,>;`,\n    valid: true,\n  },\n  missing_template_param: {\n    code: `alias T = atomic<>;`,\n    valid: false,\n  },\n  space_in_specifier: {\n    code: `alias T = atomic <i32>;`,\n    valid: true,\n  },\n  space_as_l_template: {\n    code: `alias T = atomic i32>;`,\n    valid: false,\n  },\n  comment: {\n    code: `alias T = atomic\n    /* comment */\n    <i32>;`,\n    valid: true,\n  },\n};\n\ng.test('parse')\n  .desc('Test atomic parsing')\n  .params(u => u.combine('case', keysOf(kSpecifierCases)))\n  .fn(t => {\n    const testcase = kSpecifierCases[t.params.case];\n    t.expectCompileResult(testcase.valid, testcase.code);\n  });\n\ng.test('address_space')\n  .desc('Test allowed address spaces for atomics')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#atomic-types')\n  .params(u =>\n    u\n      .combine('aspace', [\n        'storage',\n        'workgroup',\n        'storage-ro',\n        'uniform',\n        'private',\n        'function',\n        'function-let',\n      ] as const)\n      .beginSubcases()\n      .combine('type', ['i32', 'u32'] as const)\n  )\n  .fn(t => {\n    let moduleVar = ``;\n    let functionVar = '';\n    switch (t.params.aspace) {\n      case 'storage-ro':\n        moduleVar = `@group(0) @binding(0) var<storage> x : atomic<${t.params.type}>;\\n`;\n        break;\n      case 'storage':\n        moduleVar = `@group(0) @binding(0) var<storage, read_write> x : atomic<${t.params.type}>;\\n`;\n        break;\n      case 'uniform':\n        moduleVar = `@group(0) @binding(0) var<uniform> x : atomic<${t.params.type}>;\\n`;\n        break;\n      case 'workgroup':\n      case 'private':\n        moduleVar = `var<${t.params.aspace}> x : atomic<${t.params.type}>;\\n`;\n        break;\n      case 'function':\n        functionVar = `var x : atomic<${t.params.type}>;\\n`;\n        break;\n      case 'function-let':\n        functionVar = `let x : atomic<${t.params.type}>;\\n`;\n        break;\n    }\n    const code = `\n${moduleVar}\n\nfn foo() {\n  ${functionVar}\n}\n`;\n\n    const expect = t.params.aspace === 'storage' || t.params.aspace === 'workgroup';\n    t.expectCompileResult(expect, code);\n  });\n\nconst kInvalidOperations = {\n  add: `a1 + a2`,\n  load: `a1`,\n  store: `a1 = 1u`,\n  deref: `*a1 = 1u`,\n  equality: `a1 == a2`,\n  abs: `abs(a1)`,\n  address_abs: `abs(&a1)`,\n};\n\ng.test('invalid_operations')\n  .desc('Tests that a selection of invalid operations are invalid')\n  .params(u => u.combine('op', keysOf(kInvalidOperations)))\n  .fn(t => {\n    const code = `\nvar<workgroup> a1 : atomic<u32>;\nvar<workgroup> a2 : atomic<u32>;\n\nfn foo() {\n  let x : u32 = ${kInvalidOperations[t.params.op]};\n}\n`;\n\n    t.expectCompileResult(false, code);\n  });\n\ng.test('trailing_comma')\n  .desc('Test that trailing commas are accepted')\n  .params(u => u.combine('type', ['u32', 'i32'] as const).combine('comma', ['', ','] as const))\n  .fn(t => {\n    const code = `alias T = atomic<${t.params.type}${t.params.comma}>;`;\n    t.expectCompileResult(true, code);\n  });\n"],"mappings":"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"}