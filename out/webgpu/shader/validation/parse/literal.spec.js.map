{"version":3,"file":"literal.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","params","u","combine","beginSubcases","fn","t","code","val","expectCompileResult","wrapInEntryPoint","kAbstractIntNonNegative","Set","kAbstractIntNegative","kI32","kU32","kValidIntegers","kInvalidIntegers","has","kValidI32","kInvalidI32","extensionList","includes","kValidU32","kInvalidU32","kF32","kF16","kAbstractFloat","kValidFloats","kInvalidFloats","kInvalidF16s","kValidF32","kInvalidF32","kValidF16","kInvalidF16"],"sources":["../../../../../src/webgpu/shader/validation/parse/literal.spec.ts"],"sourcesContent":["export const description = `Validation tests for literals`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('bools')\n  .desc(`Test that valid bools are accepted.`)\n  .params(u => u.combine('val', ['true', 'false']).beginSubcases())\n  .fn(t => {\n    const code = `var test = ${t.params.val};`;\n    t.expectCompileResult(true, t.wrapInEntryPoint(code));\n  });\n\nconst kAbstractIntNonNegative = new Set([\n  '0x123', // hex number\n  '123', // signed number, no suffix\n  '0', // zero\n  '0x3f', // hex with 'f' as last character\n  '2147483647', // max signed int\n]);\n\nconst kAbstractIntNegative = new Set([\n  '-0x123', // hex number\n  '-123', // signed number, no suffix\n  '-0x3f', // hex with 'f' as last character\n  '-2147483647', // nagative of max signed int\n  '-2147483648', // min signed int\n]);\n\nconst kI32 = new Set([\n  '94i', // signed number\n  '2147483647i', // max signed int\n  '-2147483647i', // min parsable signed int\n  'i32(-2147483648)', // min signed int\n]);\n\nconst kU32 = new Set([\n  '42u', // unsigned number\n  '0u', // min unsigned int\n  '4294967295u', // max unsigned int\n]);\n\n{\n  const kValidIntegers = new Set([\n    ...kAbstractIntNonNegative,\n    ...kAbstractIntNegative,\n    ...kI32,\n    ...kU32,\n  ]);\n  const kInvalidIntegers = new Set([\n    '0123', // Integer does not start with zero\n    '2147483648i', // max signed int + 1\n    '-2147483649i', // min signed int - 1\n    '4294967295', // a untyped lhs will be i32, so this is too big\n    '4294967295i', // max unsigned int with i suffix\n    '4294967296u', // max unsigned int + 1\n    '-1u', // negative unsigned\n  ]);\n  g.test('abstract_int')\n    .desc(`Test that valid integers are accepted, and invalid integers are rejected.`)\n    .params(u =>\n      u.combine('val', new Set([...kValidIntegers, ...kInvalidIntegers])).beginSubcases()\n    )\n    .fn(t => {\n      const code = `var test = ${t.params.val};`;\n      t.expectCompileResult(kValidIntegers.has(t.params.val), t.wrapInEntryPoint(code));\n    });\n}\n\n{\n  const kValidI32 = new Set([...kAbstractIntNonNegative, ...kAbstractIntNegative, ...kI32]);\n  const kInvalidI32 = new Set([\n    ...kU32,\n    '2147483648', // max signed int + 1\n    '2147483648i', // max signed int + 1\n    '-2147483649', // min signed int - 1\n    '-2147483649i', // min signed int - 1\n    '1.0', // no conversion from float\n    '1.0f', // no conversion from float\n    '1.0h', // no conversion from float\n  ]);\n  g.test('i32')\n    .desc(`Test that valid signed integers are accepted, and invalid signed integers are rejected.`)\n    .params(u => u.combine('val', new Set([...kValidI32, ...kInvalidI32])).beginSubcases())\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: i32 = ${val};`;\n      const extensionList = val.includes('h') ? ['f16'] : [];\n      t.expectCompileResult(kValidI32.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n\n{\n  const kValidU32 = new Set([\n    ...kAbstractIntNonNegative,\n    ...kU32,\n    '4294967295', // max unsigned\n  ]);\n  const kInvalidU32 = new Set([\n    ...kAbstractIntNegative,\n    ...kI32,\n    '4294967296', // max unsigned int + 1\n    '4294967296u', // min unsigned int + 1\n    '-1', // min unsigned int - 1\n    '1.0', // no conversion from float\n    '1.0f', // no conversion from float\n    '1.0h', // no conversion from float\n  ]);\n  g.test('u32')\n    .desc(\n      `Test that valid unsigned integers are accepted, and invalid unsigned integers are rejected.`\n    )\n    .params(u => u.combine('val', new Set([...kValidU32, ...kInvalidU32])).beginSubcases())\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: u32 = ${val};`;\n      const extensionList = val.includes('h') ? ['f16'] : [];\n      t.expectCompileResult(kValidU32.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n\nconst kF32 = new Set([\n  '0f', // Zero float\n  '0.0f', // Zero float\n  '12.223f', // float value\n  '12.f', // .f\n  '.12f', // No leading number with a f\n  '2.4e+4f', // Positive exponent with f suffix\n  '2.4e-2f', // Negative exponent with f suffix\n  '2.e+4f', // Exponent without decimals\n  '1e-4f', // Exponennt without decimal point\n  '0x1P+4f', // Hex float no decimal\n]);\n\nconst kF16 = new Set([\n  '0h', // Zero half\n  '1h', // Half no decimal\n  '.1h', // Half no leading value\n  '1.1e2h', // Exponent half no sign\n  '1.1E+2h', // Exponent half, plus (uppercase E)\n  '2.4e-2h', // Exponent half, negative\n  '0xep2h', // Hexfloat half lower case p\n  '0xEp-2h', // Hexfloat uppcase hex value\n  '0x3p+2h', // Hex float half positive exponent\n  '0x3.2p+2h', // Hex float with decimal half\n]);\n\nconst kAbstractFloat = new Set([\n  '0.0', // Zero float without suffix\n  '.0', // Zero float without leading value\n  '12.', // No decimal points\n  '00012.', // Leading zeros allowed\n  '.12', // No leading digits\n  '1.2e2', // Exponent without sign (lowercase e)\n  '1.2E2', // Exponent without sign (uppercase e)\n  '1.2e+2', // positive exponent\n  '2.4e-2', // Negative exponent\n  '.1e-2', // Exponent without leading number\n  '0x.3', // Hex float, lowercase X\n  '0X.3', // Hex float, uppercase X\n  '0xa.fp+2', // Hex float, lowercase p\n  '0xa.fP+2', // Hex float, uppercase p\n  '0xE.fp+2', // Uppercase E (as hex, but matches non hex exponent char)\n  '0X1.fp-4', // Hex float negative exponent\n]);\n\n{\n  const kValidFloats = new Set([...kF32, ...kF16, ...kAbstractFloat]);\n  const kInvalidFloats = new Set([\n    '.f', // Must have a number\n    '.e-2', // Exponent without leading values\n    '1.e&2f', // Exponent invalid sign\n    '1.ef', // Exponent without value\n    '1.e+f', // Exponent sign no value\n    '0x.p2', // Hex float no value\n    '0x1p', // Hex float missing exponent\n    '0x1p^', // Hex float invalid exponent\n    '1.0e+999999999999f', // Too big\n    '0x1.0p+999999999999f', // Too big hex\n    '0x1.00000001pf0', // Mantissa too big\n  ]);\n  const kInvalidF16s = new Set([\n    '1.1eh', // Missing exponent value\n    '1.1e!2h', // Invalid exponent sign\n    '1.1e+h', // Missing exponent with sign\n    '1.0e+999999h', // Too large\n    '0x1.0p+999999h', // Too large hex\n    '0xf.h', // Having suffix \"h\" without \"p\" or \"P\"\n    '0x3h', // Having suffix \"h\" without \"p\" or \"P\"\n  ]);\n\n  g.test('abstract_float')\n    .desc(`Test that valid floats are accepted, and invalid floats are rejected`)\n    .params(u =>\n      u\n        .combine('val', new Set([...kValidFloats, ...kInvalidFloats, ...kInvalidF16s]))\n        .beginSubcases()\n    )\n    .fn(t => {\n      const code = `var test = ${t.params.val};`;\n      const extensionList = kF16.has(t.params.val) || kInvalidF16s.has(t.params.val) ? ['f16'] : [];\n      t.expectCompileResult(\n        kValidFloats.has(t.params.val),\n        t.wrapInEntryPoint(code, extensionList)\n      );\n    });\n}\n\n{\n  const kValidF32 = new Set([\n    ...kF32,\n    ...kAbstractFloat,\n    '1', // AbstractInt\n    '-1', // AbstractInt\n  ]);\n  const kInvalidF32 = new Set([\n    ...kF16, // no conversion\n    '1u', // unsigned\n    '1i', // signed\n    '1h', // half float\n    '.f', // Must have a number\n    '.e-2', // Exponent without leading values\n    '1.e&2f', // Exponent invalid sign\n    '1.ef', // Exponent without value\n    '1.e+f', // Exponent sign no value\n    '0x.p2', // Hex float no value\n    '0x1p', // Hex float missing exponent\n    '0x1p^', // Hex float invalid exponent\n    '1.0e+999999999999f', // Too big\n    '0x1.0p+999999999999f', // Too big hex\n    '0x1.00000001pf0', // Mantissa too big\n  ]);\n\n  g.test('f32')\n    .desc(`Test that valid floats are accepted, and invalid floats are rejected`)\n    .params(u => u.combine('val', new Set([...kValidF32, ...kInvalidF32])).beginSubcases())\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: f32 = ${val};`;\n      const extensionList = kF16.has(val) ? ['f16'] : [];\n      t.expectCompileResult(kValidF32.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n\n{\n  const kValidF16 = new Set([\n    ...kF16,\n    ...kAbstractFloat,\n    '1', // AbstractInt\n    '-1', // AbstractInt\n  ]);\n  const kInvalidF16 = new Set([\n    ...kF32,\n    '1i', // signed int\n    '1u', // unsigned int\n    '1f', // no conversion from f32 to f16\n    '1.1eh', // Missing exponent value\n    '1.1e!2h', // Invalid exponent sign\n    '1.1e+h', // Missing exponent with sign\n    '1.0e+999999h', // Too large\n    '0x1.0p+999999h', // Too large hex\n  ]);\n\n  g.test('f16')\n    .desc(\n      `\nTest that valid half floats are accepted, and invalid half floats are rejected\n`\n    )\n    .params(u => u.combine('val', new Set([...kValidF16, ...kInvalidF16])).beginSubcases())\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: f16 = ${val};`;\n      const extensionList = ['f16'];\n      t.expectCompileResult(kValidF16.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n"],"mappings":"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"}