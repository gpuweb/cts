{"version":3,"file":"semicolon.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","expectCompileResult","skipIfLanguageFeatureNotSupported"],"sources":["../../../../../src/webgpu/shader/validation/parse/semicolon.spec.ts"],"sourcesContent":["export const description = `Validation tests for semicolon placements`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('module_scope_single')\n  .desc(`Test that a semicolon can be placed at module scope.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `;`);\n  });\n\ng.test('module_scope_multiple')\n  .desc(`Test that multiple semicolons can be placed at module scope.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `;;;`);\n  });\n\ng.test('after_enable')\n  .desc(`Test that a semicolon must be placed after an enable directive.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `enable f16;`);\n    t.expectCompileResult(/* pass */ false, `enable f16`);\n  });\n\ng.test('after_requires')\n  .desc(`Test that a semicolon must be placed after a requires directive.`)\n  .fn(t => {\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    t.expectCompileResult(/* pass */ true, `requires readonly_and_readwrite_storage_textures;`);\n    t.expectCompileResult(/* pass */ false, `requires readonly_and_readwrite_storage_textures`);\n  });\n\ng.test('after_diagnostic')\n  .desc(`Test that a semicolon must be placed after a requires directive.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `diagnostic(info, derivative_uniformity);`);\n    t.expectCompileResult(/* pass */ false, `diagnostic(info, derivative_uniformity)`);\n  });\n\ng.test('after_struct_decl')\n  .desc(`Test that a semicolon can be placed after an struct declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `struct S { x : i32 };`);\n    t.expectCompileResult(/* pass */ true, `struct S { x : i32 }`);\n  });\n\ng.test('after_member')\n  .desc(`Test that a semicolon must not be placed after an struct member declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `struct S { x : i32 }`);\n    t.expectCompileResult(/* pass */ false, `struct S { x : i32; }`);\n  });\n\ng.test('after_func_decl')\n  .desc(`Test that a semicolon can be placed after a function declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() {};`);\n    t.expectCompileResult(/* pass */ true, `fn f() {}`);\n  });\n\ng.test('after_type_alias_decl')\n  .desc(`Test that a semicolon must be placed after an type alias declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `alias T = i32;`);\n    t.expectCompileResult(/* pass */ false, `alias T = i32`);\n  });\n\ng.test('after_return')\n  .desc(`Test that a semicolon must be placed after a return statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { return; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { return }`);\n  });\n\ng.test('after_call')\n  .desc(`Test that a semicolon must be placed after a function call.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { workgroupBarrier(); }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { workgroupBarrier() }`);\n  });\n\ng.test('after_module_const_decl')\n  .desc(`Test that a semicolon must be placed after a module-scope const declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `const v = 1;`);\n    t.expectCompileResult(/* pass */ false, `const v = 1`);\n  });\n\ng.test('after_fn_const_decl')\n  .desc(`Test that a semicolon must be placed after a function-scope const declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { const v = 1; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { const v = 1 }`);\n  });\n\ng.test('after_module_var_decl')\n  .desc(`Test that a semicolon must be placed after a module-scope var declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `var<private> v = 1;`);\n    t.expectCompileResult(/* pass */ false, `var<private> v = 1`);\n  });\n\ng.test('after_fn_var_decl')\n  .desc(`Test that a semicolon must be placed after a function-scope var declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { var v = 1; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { var v = 1 }`);\n  });\n\ng.test('after_let_decl')\n  .desc(`Test that a semicolon must be placed after a let declaration.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { let v = 1; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { let v = 1 }`);\n  });\n\ng.test('after_discard')\n  .desc(`Test that a semicolon must be placed after a discard statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { discard; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { discard }`);\n  });\n\ng.test('after_assignment')\n  .desc(`Test that a semicolon must be placed after an assignment statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { var v = 1; v = 2; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { var v = 1; v = 2 }`);\n  });\n\ng.test('after_fn_const_assert')\n  .desc(`Test that a semicolon must be placed after an function-scope static assert.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { const_assert(true); }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { const_assert(true) }`);\n  });\n\ng.test('function_body_single')\n  .desc(`Test that a semicolon can be placed in a function body.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { ; }`);\n  });\n\ng.test('function_body_multiple')\n  .desc(`Test that multiple semicolons can be placed in a function body.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { ;;; }`);\n  });\n\ng.test('compound_statement_single')\n  .desc(`Test that a semicolon can be placed in a compound statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { { ; } }`);\n  });\n\ng.test('compound_statement_multiple')\n  .desc(`Test that multiple semicolons can be placed in a compound statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { { ;;; } }`);\n  });\n\ng.test('after_compound_statement')\n  .desc(`Test that a semicolon can be placed after a compound statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { {} ; }`);\n  });\n\ng.test('after_if')\n  .desc(`Test that a semicolon can be placed after an if-statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { if true {} ; }`);\n  });\n\ng.test('after_if_else')\n  .desc(`Test that a semicolon can be placed after an if-else-statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { if true {} else {} ; }`);\n  });\n\ng.test('after_switch')\n  .desc(`Test that a semicolon can be placed after an switch-statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { switch 1 { default {} } ; }`);\n  });\n\ng.test('after_case')\n  .desc(`Test that a semicolon cannot be placed after a non-default switch case.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ false, `fn f() { switch 1 { case 1 {}; default {} } }`);\n    t.expectCompileResult(/* pass */ true, `fn f() { switch 1 { case 1 {} default {} } }`);\n  });\n\ng.test('after_case_break')\n  .desc(`Test that a semicolon must be placed after a case break statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ false, `fn f() { switch 1 { case 1 { break } default {} } }`);\n    t.expectCompileResult(/* pass */ true, `fn f() { switch 1 { case 1 { break; } default {} } }`);\n  });\n\ng.test('after_default_case')\n  .desc(`Test that a semicolon cannot be placed after a default switch case.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ false, `fn f() { switch 1 { default {}; } }`);\n    t.expectCompileResult(/* pass */ true, `fn f() { switch 1 { default {} } }`);\n  });\n\ng.test('after_default_case_break')\n  .desc(`Test that a semicolon cannot be placed after a default switch case.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ false, `fn f() { switch 1 { default { break } } }`);\n    t.expectCompileResult(/* pass */ true, `fn f() { switch 1 { default { break; } } }`);\n  });\n\ng.test('after_for')\n  .desc(`Test that a semicolon can be placed after a for-loop.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { for (; false;) {}; }`);\n  });\n\ng.test('after_for_break')\n  .desc(`Test that a semicolon must be placed after a for-loop break statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { for (; false;) { break; } }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { for (; false;) { break } }`);\n  });\n\ng.test('after_loop')\n  .desc(`Test that a semicolon can be placed after a loop.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { loop { break; }; }`);\n  });\n\ng.test('after_loop_break')\n  .desc(`Test that a semicolon must be placed after a loop break statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { loop { break; }; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { loop { break }; }`);\n  });\n\ng.test('after_loop_break_if')\n  .desc(`Test that a semicolon must be placed after a loop break-if statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { loop { continuing { break if true; } }; }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { loop { continuing { break if true } }; }`);\n  });\n\ng.test('after_loop_continue')\n  .desc(`Test that a semicolon must be placed after a loop continue statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { loop { if true { continue; } { break; } } }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { loop { if true { continue } { break; } } }`);\n  });\n\ng.test('after_continuing')\n  .desc(`Test that a semicolon cannot be placed after a continuing.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ false, `fn f() { loop { break; continuing{}; } }`);\n    t.expectCompileResult(/* pass */ true, `fn f() { loop { break; continuing{} } }`);\n  });\n\ng.test('after_while')\n  .desc(`Test that a semicolon cannot be placed after a while-loop.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { while false {}; }`);\n  });\n\ng.test('after_while_break')\n  .desc(`Test that a semicolon must be placed after a while break statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { while false { break; } }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { while false { break } }`);\n  });\n\ng.test('after_while_continue')\n  .desc(`Test that a semicolon must be placed after a while continue statement.`)\n  .fn(t => {\n    t.expectCompileResult(/* pass */ true, `fn f() { while false { continue; } }`);\n    t.expectCompileResult(/* pass */ false, `fn f() { while false { continue } }`);\n  });\n"],"mappings":"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"}