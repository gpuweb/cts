{"version":3,"file":"context_dependent_resolution.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","kAttributeCases","align","binding","builtin","group","id","interpolate","invariant","location","must_use","size","workgroup_size","compute","fragment","vertex","test","desc","params","u","combine","beginSubcases","fn","t","code","decl","case","expectCompileResult","kBuiltinCases","vertex_index","instance_index","position_vertex","position_fragment","front_facing","frag_depth","sample_index","sample_mask_input","sample_mask_output","local_invocation_id","local_invocation_index","global_invocation_id","workgroup_id","num_workgroups","beforeAllSubcases","wgsl","skipIf","isCompatibility","includes","kDiagnosticSeverityCases","error","warning","off","info","kDiagnosticRuleCases","derivative_uniformity","unknown_rule","unknown","rule","kEnableCases","f16","skipIfDeviceDoesNotHaveFeature","kLanguageCases","readonly_and_readwrite_storage_textures","packed_4x8_integer_dot_product","unrestricted_pointer_parameters","pointer_composite_access","hasLanguageFeature","kSwizzleCases","length","i","padEnd","kInterpolationTypeCases","attr","kInterpolationSamplingCases","kInterpolationFlatCases"],"sources":["../../../../../src/webgpu/shader/validation/decl/context_dependent_resolution.spec.ts"],"sourcesContent":["export const description = `\nTests that context dependent names do not participate in name resolution.\nThat is, a declaration named the same as a context dependent name will not interfere.\n\nContext-dependent names:\n * Attribute names\n * Built-in value names\n * Diagnostic severity control\n * Diagnostic triggering rules\n * Enable extensions\n * Language extensions\n * Swizzles\n * Interpolation type\n * Interpolation sampling\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kAttributeCases = {\n  align: `struct S { @align(16) x : u32 }`,\n  binding: `@group(0) @binding(0) var s : sampler;`,\n  builtin: `@vertex fn main() -> @builtin(position) vec4f { return vec4f(); }`,\n  // const is not writable\n  // diagnostic is a keyword\n  group: `@group(0) @binding(0) var s : sampler;`,\n  id: `@id(1) override x : i32;`,\n  interpolate: `@fragment fn main(@location(0) @interpolate(flat, either) x : i32) { }`,\n  invariant: `@fragment fn main(@builtin(position) @invariant pos : vec4f) { }`,\n  location: `@fragment fn main(@location(0) x : f32) { }`,\n  must_use: `@must_use fn foo() -> u32 { return 0; }`,\n  size: `struct S { @size(4) x : u32 }`,\n  workgroup_size: `@compute @workgroup_size(1) fn main() { }`,\n  compute: `@compute @workgroup_size(1) fn main() { }`,\n  fragment: `@fragment fn main() { }`,\n  vertex: `@vertex fn main() -> @builtin(position) vec4f { return vec4f(); }`,\n};\n\ng.test('attribute_names')\n  .desc('Tests attribute names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', keysOf(kAttributeCases))\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .fn(t => {\n    const code = `\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    ${kAttributeCases[t.params.case]}\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kBuiltinCases = {\n  vertex_index: `\n  @vertex\n  fn main(@builtin(vertex_index) idx : u32) -> @builtin(position) vec4f\n  { return vec4f(); }`,\n  instance_index: `\n  @vertex\n  fn main(@builtin(instance_index) idx : u32) -> @builtin(position) vec4f\n  { return vec4f(); }`,\n  position_vertex: `\n  @vertex fn main() -> @builtin(position) vec4f\n  { return vec4f(); }`,\n  position_fragment: `@fragment fn main(@builtin(position) pos : vec4f) { }`,\n  front_facing: `@fragment fn main(@builtin(front_facing) x : bool) { }`,\n  frag_depth: `@fragment fn main() -> @builtin(frag_depth) f32 { return 0; }`,\n  sample_index: `@fragment fn main(@builtin(sample_index) x : u32) { }`,\n  sample_mask_input: `@fragment fn main(@builtin(sample_mask) x : u32) { }`,\n  sample_mask_output: `@fragment fn main() -> @builtin(sample_mask) u32 { return 0; }`,\n  local_invocation_id: `\n  @compute @workgroup_size(1)\n  fn main(@builtin(local_invocation_id) id : vec3u) { }`,\n  local_invocation_index: `\n  @compute @workgroup_size(1)\n  fn main(@builtin(local_invocation_index) id : u32) { }`,\n  global_invocation_id: `\n  @compute @workgroup_size(1)\n  fn main(@builtin(global_invocation_id) id : vec3u) { }`,\n  workgroup_id: `\n  @compute @workgroup_size(1)\n  fn main(@builtin(workgroup_id) id : vec3u) { }`,\n  num_workgroups: `\n  @compute @workgroup_size(1)\n  fn main(@builtin(num_workgroups) id : vec3u) { }`,\n};\n\ng.test('builtin_value_names')\n  .desc('Tests builtin value names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', keysOf(kBuiltinCases))\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const wgsl = kBuiltinCases[t.params.case];\n    t.skipIf(\n      t.isCompatibility && wgsl.includes('sample_mask'),\n      'sample_mask is not supported in compatibility mode'\n    );\n    t.skipIf(\n      t.isCompatibility && wgsl.includes('sample_index'),\n      'sample_index is not supported in compatibility mode'\n    );\n  })\n  .fn(t => {\n    const code = `\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    ${kBuiltinCases[t.params.case]}\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kDiagnosticSeverityCases = {\n  error: `\n  diagnostic(error, derivative_uniformity);\n  @diagnostic(error, derivative_uniformity) fn foo() { }\n  `,\n  warning: `\n  diagnostic(warning, derivative_uniformity);\n  @diagnostic(warning, derivative_uniformity) fn foo() { }\n  `,\n  off: `\n  diagnostic(off, derivative_uniformity);\n  @diagnostic(off, derivative_uniformity) fn foo() { }\n  `,\n  info: `\n  diagnostic(info, derivative_uniformity);\n  @diagnostic(info, derivative_uniformity) fn foo() { }\n  `,\n};\n\ng.test('diagnostic_severity_names')\n  .desc('Tests diagnostic severity names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', keysOf(kDiagnosticSeverityCases))\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .fn(t => {\n    const code = `\n    ${kDiagnosticSeverityCases[t.params.case]}\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kDiagnosticRuleCases = {\n  derivative_uniformity: `\n  diagnostic(off, derivative_uniformity);\n  @diagnostic(warning, derivative_uniformity) fn foo() { }`,\n  unknown_rule: `\n  diagnostic(off, unknown_rule);\n  @diagnostic(warning, unknown_rule) fn foo() { }`,\n  unknown: `\n  diagnostic(off, unknown.rule);\n  @diagnostic(warning, unknown.rule) fn foo() { }`,\n  rule: `\n  diagnostic(off, unknown.rule);\n  @diagnostic(warning, unknown.rule) fn foo() { }`,\n};\n\ng.test('diagnostic_rule_names')\n  .desc('Tests diagnostic rule names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', keysOf(kDiagnosticRuleCases))\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .fn(t => {\n    const code = `\n    ${kDiagnosticRuleCases[t.params.case]}\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kEnableCases = {\n  f16: `enable f16;`,\n};\n\ng.test('enable_names')\n  .desc('Tests enable extension names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', keysOf(kEnableCases))\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n\n    const code = `\n    ${kEnableCases[t.params.case]}\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kLanguageCases = {\n  readonly_and_readwrite_storage_textures: `requires readonly_and_readwrite_storage_textures;`,\n  packed_4x8_integer_dot_product: `requires packed_4x8_integer_dot_product;`,\n  unrestricted_pointer_parameters: `requires unrestricted_pointer_parameters;`,\n  pointer_composite_access: `requires pointer_composite_access;`,\n};\n\ng.test('language_names')\n  .desc('Tests language extension names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', keysOf(kLanguageCases))\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .fn(t => {\n    t.skipIf(!t.hasLanguageFeature(t.params.case), 'Missing language feature');\n    const code = `\n    ${kLanguageCases[t.params.case]}\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kSwizzleCases = [\n  'x',\n  'y',\n  'z',\n  'w',\n  'xy',\n  'yxz',\n  'wxyz',\n  'xyxy',\n  'r',\n  'g',\n  'b',\n  'a',\n  'rgb',\n  'arr',\n  'bgra',\n  'agra',\n];\n\ng.test('swizzle_names')\n  .desc('Tests swizzle names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', kSwizzleCases)\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .fn(t => {\n    let code = `${t.params.decl} ${t.params.case} : u32 = 0;\\n`;\n    if (t.params.case.length === 1) {\n      for (let i = 2; i <= 4; i++) {\n        code += `${t.params.decl} ${t.params.case.padEnd(i, t.params.case[0])} : u32 = 0;\\n`;\n      }\n    }\n    code += `fn foo() {\n      var x : vec4f;\n      _ = x.${t.params.case};\n    `;\n    if (t.params.case.length === 1) {\n      for (let i = 2; i <= 4; i++) {\n        code += `_ = x.${t.params.case.padEnd(i, t.params.case[0])};\\n`;\n      }\n    }\n    code += `}\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }`;\n    t.expectCompileResult(true, code);\n  });\n\nconst kInterpolationTypeCases = ['perspective', 'linear', 'flat'];\n\ng.test('interpolation_type_names')\n  .desc('Tests interpolation type names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', kInterpolationTypeCases)\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && t.params.case === 'linear',\n      'compatibility mode does not support linear interpolation type'\n    );\n  })\n  .fn(t => {\n    const attr =\n      t.isCompatibility && t.params.case === 'flat'\n        ? `@interpolate(flat, either)`\n        : `@interpolate(${t.params.case})`;\n    const code = `\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    @fragment fn main(@location(0) ${attr} x : f32) { }\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kInterpolationSamplingCases = ['center', 'centroid', 'sample'];\n\ng.test('interpolation_sampling_names')\n  .desc('Tests interpolation type names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', kInterpolationSamplingCases)\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && t.params.case === 'sample',\n      'compatibility mode does not support sample sampling'\n    );\n  })\n  .fn(t => {\n    const code = `\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    @fragment fn main(@location(0) @interpolate(perspective, ${t.params.case}) x : f32) { }\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n\nconst kInterpolationFlatCases = ['first', 'either'] as const;\n\ng.test('interpolation_flat_names')\n  .desc('Tests interpolation type names do not use name resolution')\n  .params(u =>\n    u\n      .combine('case', kInterpolationFlatCases)\n      .beginSubcases()\n      .combine('decl', ['override', 'const', 'var<private>'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && t.params.case === 'first',\n      'compatibility mode does not support first sampling'\n    );\n  })\n  .fn(t => {\n    const code = `\n    ${t.params.decl} ${t.params.case} : u32 = 0;\n    @fragment fn main(@location(0) @interpolate(flat, ${t.params.case}) x : u32) { }\n    fn use_var() -> u32 {\n      return ${t.params.case};\n    }\n    `;\n\n    t.expectCompileResult(true, code);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,MAAM,QAAQ,wCAAwC;AAC/D,SAASC,oBAAoB,QAAQ,8BAA8B;;AAEnE,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,oBAAoB,CAAC;;AAEpD,MAAME,eAAe,GAAG;EACtBC,KAAK,EAAG,iCAAgC;EACxCC,OAAO,EAAG,wCAAuC;EACjDC,OAAO,EAAG,mEAAkE;EAC5E;EACA;EACAC,KAAK,EAAG,wCAAuC;EAC/CC,EAAE,EAAG,0BAAyB;EAC9BC,WAAW,EAAG,wEAAuE;EACrFC,SAAS,EAAG,kEAAiE;EAC7EC,QAAQ,EAAG,6CAA4C;EACvDC,QAAQ,EAAG,yCAAwC;EACnDC,IAAI,EAAG,+BAA8B;EACrCC,cAAc,EAAG,2CAA0C;EAC3DC,OAAO,EAAG,2CAA0C;EACpDC,QAAQ,EAAG,yBAAwB;EACnCC,MAAM,EAAG;AACX,CAAC;;AAEDf,CAAC,CAACgB,IAAI,CAAC,iBAAiB,CAAC;AACtBC,IAAI,CAAC,kDAAkD,CAAC;AACxDC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEtB,MAAM,CAACG,eAAe,CAAC,CAAC;AACxCoB,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB,MAAMD,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC,MAAMzB,eAAe,CAACsB,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAE;AACrC;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAMI,aAAa,GAAG;EACpBC,YAAY,EAAG;AACjB;AACA;AACA,sBAAsB;EACpBC,cAAc,EAAG;AACnB;AACA;AACA,sBAAsB;EACpBC,eAAe,EAAG;AACpB;AACA,sBAAsB;EACpBC,iBAAiB,EAAG,uDAAsD;EAC1EC,YAAY,EAAG,wDAAuD;EACtEC,UAAU,EAAG,+DAA8D;EAC3EC,YAAY,EAAG,uDAAsD;EACrEC,iBAAiB,EAAG,sDAAqD;EACzEC,kBAAkB,EAAG,gEAA+D;EACpFC,mBAAmB,EAAG;AACxB;AACA,wDAAwD;EACtDC,sBAAsB,EAAG;AAC3B;AACA,yDAAyD;EACvDC,oBAAoB,EAAG;AACzB;AACA,yDAAyD;EACvDC,YAAY,EAAG;AACjB;AACA,iDAAiD;EAC/CC,cAAc,EAAG;AACnB;AACA;AACA,CAAC;;AAED1C,CAAC,CAACgB,IAAI,CAAC,qBAAqB,CAAC;AAC1BC,IAAI,CAAC,sDAAsD,CAAC;AAC5DC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEtB,MAAM,CAAC8B,aAAa,CAAC,CAAC;AACtCP,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAuB,iBAAiB,CAAC,CAAApB,CAAC,KAAI;EACtB,MAAMqB,IAAI,GAAGhB,aAAa,CAACL,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC;EACzCH,CAAC,CAACsB,MAAM;IACNtB,CAAC,CAACuB,eAAe,IAAIF,IAAI,CAACG,QAAQ,CAAC,aAAa,CAAC;IACjD;EACF,CAAC;EACDxB,CAAC,CAACsB,MAAM;IACNtB,CAAC,CAACuB,eAAe,IAAIF,IAAI,CAACG,QAAQ,CAAC,cAAc,CAAC;IAClD;EACF,CAAC;AACH,CAAC,CAAC;AACDzB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB,MAAMD,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC,MAAME,aAAa,CAACL,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAE;AACnC;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAMwB,wBAAwB,GAAG;EAC/BC,KAAK,EAAG;AACV;AACA;AACA,GAAG;EACDC,OAAO,EAAG;AACZ;AACA;AACA,GAAG;EACDC,GAAG,EAAG;AACR;AACA;AACA,GAAG;EACDC,IAAI,EAAG;AACT;AACA;AACA;AACA,CAAC;;AAEDpD,CAAC,CAACgB,IAAI,CAAC,2BAA2B,CAAC;AAChCC,IAAI,CAAC,4DAA4D,CAAC;AAClEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEtB,MAAM,CAACkD,wBAAwB,CAAC,CAAC;AACjD3B,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB,MAAMwB,wBAAwB,CAACzB,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAE;AAC9C,MAAMH,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAM6B,oBAAoB,GAAG;EAC3BC,qBAAqB,EAAG;AAC1B;AACA,2DAA2D;EACzDC,YAAY,EAAG;AACjB;AACA,kDAAkD;EAChDC,OAAO,EAAG;AACZ;AACA,kDAAkD;EAChDC,IAAI,EAAG;AACT;AACA;AACA,CAAC;;AAEDzD,CAAC,CAACgB,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,IAAI,CAAC,wDAAwD,CAAC;AAC9DC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEtB,MAAM,CAACuD,oBAAoB,CAAC,CAAC;AAC7ChC,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB,MAAM6B,oBAAoB,CAAC9B,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAE;AAC1C,MAAMH,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAMkC,YAAY,GAAG;EACnBC,GAAG,EAAG;AACR,CAAC;;AAED3D,CAAC,CAACgB,IAAI,CAAC,cAAc,CAAC;AACnBC,IAAI,CAAC,yDAAyD,CAAC;AAC/DC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEtB,MAAM,CAAC4D,YAAY,CAAC,CAAC;AACrCrC,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACPA,CAAC,CAACqC,8BAA8B,CAAC,YAAY,CAAC;;EAE9C,MAAMpC,IAAI,GAAI;AAClB,MAAMkC,YAAY,CAACnC,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAE;AAClC,MAAMH,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAMqC,cAAc,GAAG;EACrBC,uCAAuC,EAAG,mDAAkD;EAC5FC,8BAA8B,EAAG,0CAAyC;EAC1EC,+BAA+B,EAAG,2CAA0C;EAC5EC,wBAAwB,EAAG;AAC7B,CAAC;;AAEDjE,CAAC,CAACgB,IAAI,CAAC,gBAAgB,CAAC;AACrBC,IAAI,CAAC,2DAA2D,CAAC;AACjEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEtB,MAAM,CAAC+D,cAAc,CAAC,CAAC;AACvCxC,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACPA,CAAC,CAACsB,MAAM,CAAC,CAACtB,CAAC,CAAC2C,kBAAkB,CAAC3C,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC,EAAE,0BAA0B,CAAC;EAC1E,MAAMF,IAAI,GAAI;AAClB,MAAMqC,cAAc,CAACtC,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAE;AACpC,MAAMH,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAM2C,aAAa,GAAG;AACpB,GAAG;AACH,GAAG;AACH,GAAG;AACH,GAAG;AACH,IAAI;AACJ,KAAK;AACL,MAAM;AACN,MAAM;AACN,GAAG;AACH,GAAG;AACH,GAAG;AACH,GAAG;AACH,KAAK;AACL,KAAK;AACL,MAAM;AACN,MAAM,CACP;;;AAEDnE,CAAC,CAACgB,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI,CAAC,gDAAgD,CAAC;AACtDC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAE+C,aAAa,CAAC;AAC9B9C,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,IAAIC,IAAI,GAAI,GAAED,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK,eAAc;EAC3D,IAAIH,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC0C,MAAM,KAAK,CAAC,EAAE;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B7C,IAAI,IAAK,GAAED,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC4C,MAAM,CAACD,CAAC,EAAE9C,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAE,eAAc;IACtF;EACF;EACAF,IAAI,IAAK;AACb;AACA,cAAcD,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC5B,KAAK;EACD,IAAIH,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC0C,MAAM,KAAK,CAAC,EAAE;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B7C,IAAI,IAAK,SAAQD,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC4C,MAAM,CAACD,CAAC,EAAE9C,CAAC,CAACL,MAAM,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAE,KAAI;IACjE;EACF;EACAF,IAAI,IAAK;AACb;AACA,eAAeD,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B,MAAM;EACFH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAM+C,uBAAuB,GAAG,CAAC,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC;;AAEjEvE,CAAC,CAACgB,IAAI,CAAC,0BAA0B,CAAC;AAC/BC,IAAI,CAAC,2DAA2D,CAAC;AACjEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEmD,uBAAuB,CAAC;AACxClD,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAuB,iBAAiB,CAAC,CAAApB,CAAC,KAAI;EACtBA,CAAC,CAACsB,MAAM;IACNtB,CAAC,CAACuB,eAAe,IAAIvB,CAAC,CAACL,MAAM,CAACQ,IAAI,KAAK,QAAQ;IAC/C;EACF,CAAC;AACH,CAAC,CAAC;AACDJ,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMiD,IAAI;EACRjD,CAAC,CAACuB,eAAe,IAAIvB,CAAC,CAACL,MAAM,CAACQ,IAAI,KAAK,MAAM;EACxC,4BAA2B;EAC3B,gBAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK,GAAE;EACtC,MAAMF,IAAI,GAAI;AAClB,MAAMD,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC,qCAAqC8C,IAAK;AAC1C;AACA,eAAejD,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAMiD,2BAA2B,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;;AAEpEzE,CAAC,CAACgB,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAC,2DAA2D,CAAC;AACjEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEqD,2BAA2B,CAAC;AAC5CpD,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAuB,iBAAiB,CAAC,CAAApB,CAAC,KAAI;EACtBA,CAAC,CAACsB,MAAM;IACNtB,CAAC,CAACuB,eAAe,IAAIvB,CAAC,CAACL,MAAM,CAACQ,IAAI,KAAK,QAAQ;IAC/C;EACF,CAAC;AACH,CAAC,CAAC;AACDJ,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB,MAAMD,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC,+DAA+DH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7E;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJ,MAAMkD,uBAAuB,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAU;;AAE5D1E,CAAC,CAACgB,IAAI,CAAC,0BAA0B,CAAC;AAC/BC,IAAI,CAAC,2DAA2D,CAAC;AACjEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEsD,uBAAuB,CAAC;AACxCrD,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAU;AACnE,CAAC;AACAuB,iBAAiB,CAAC,CAAApB,CAAC,KAAI;EACtBA,CAAC,CAACsB,MAAM;IACNtB,CAAC,CAACuB,eAAe,IAAIvB,CAAC,CAACL,MAAM,CAACQ,IAAI,KAAK,OAAO;IAC9C;EACF,CAAC;AACH,CAAC,CAAC;AACDJ,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB,MAAMD,CAAC,CAACL,MAAM,CAACO,IAAK,IAAGF,CAAC,CAACL,MAAM,CAACQ,IAAK;AACrC,wDAAwDH,CAAC,CAACL,MAAM,CAACQ,IAAK;AACtE;AACA,eAAeH,CAAC,CAACL,MAAM,CAACQ,IAAK;AAC7B;AACA,KAAK;;EAEDH,CAAC,CAACI,mBAAmB,CAAC,IAAI,EAAEH,IAAI,CAAC;AACnC,CAAC,CAAC"}