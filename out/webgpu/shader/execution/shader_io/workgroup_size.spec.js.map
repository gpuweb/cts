{"version":3,"file":"workgroup_size.spec.js","names":["description","makeTestGroup","iterRange","AllFeaturesMaxLimitsGPUTest","g","checkResults","sizeX","sizeY","sizeZ","numWGs","data","totalInvocations","i","wgx_data","wgy_data","wgz_data","total_data","msg","Error","undefined","test","desc","params","u","combine","beginSubcases","fn","t","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeInvocationsPerWorkgroup","device","limits","skipIf","wgx","wgy","wgz","code","pipeline","createComputePipeline","layout","compute","module","createShaderModule","entryPoint","numWorkgroups","buffer","makeBufferWithContents","Uint32Array","_i","GPUBufferUsage","STORAGE","COPY_SRC","COPY_DST","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","bufferReadback","readGPUBufferRangeTyped","srcByteOffset","type","typedLength","method","expectOK"],"sources":["../../../../../src/webgpu/shader/execution/shader_io/workgroup_size.spec.ts"],"sourcesContent":["export const description = `Test that workgroup size is set correctly`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { iterRange } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\nfunction checkResults(\n  sizeX: number,\n  sizeY: number,\n  sizeZ: number,\n  numWGs: number,\n  data: Uint32Array\n): Error | undefined {\n  const totalInvocations = sizeX * sizeY * sizeZ;\n  for (let i = 0; i < numWGs; i++) {\n    const wgx_data = data[4 * i + 0];\n    const wgy_data = data[4 * i + 1];\n    const wgz_data = data[4 * i + 2];\n    const total_data = data[4 * i + 3];\n    if (wgx_data !== sizeX) {\n      let msg = `Incorrect workgroup size x dimension for wg ${i}:\\n`;\n      msg += `- expected: ${wgx_data}\\n`;\n      msg += `- got:      ${sizeX}`;\n      return Error(msg);\n    }\n    if (wgy_data !== sizeY) {\n      let msg = `Incorrect workgroup size y dimension for wg ${i}:\\n`;\n      msg += `- expected: ${wgy_data}\\n`;\n      msg += `- got:      ${sizeY}`;\n      return Error(msg);\n    }\n    if (wgz_data !== sizeZ) {\n      let msg = `Incorrect workgroup size y dimension for wg ${i}:\\n`;\n      msg += `- expected: ${wgz_data}\\n`;\n      msg += `- got:      ${sizeZ}`;\n      return Error(msg);\n    }\n    if (total_data !== totalInvocations) {\n      let msg = `Incorrect workgroup total invocations for wg ${i}:\\n`;\n      msg += `- expected: ${total_data}\\n`;\n      msg += `- got:      ${totalInvocations}`;\n      return Error(msg);\n    }\n  }\n  return undefined;\n}\n\ng.test('workgroup_size')\n  .desc(`Test workgroup size is set correctly`)\n  .params(u =>\n    u\n      .combine('wgx', [1, 3, 4, 8, 11, 16, 51, 64, 128, 256] as const)\n      .combine('wgy', [1, 3, 4, 8, 16, 51, 64, 256] as const)\n      .combine('wgz', [1, 3, 11, 16, 128, 256] as const)\n      .beginSubcases()\n  )\n  .fn(async t => {\n    const {\n      maxComputeWorkgroupSizeX,\n      maxComputeWorkgroupSizeY,\n      maxComputeWorkgroupSizeZ,\n      maxComputeInvocationsPerWorkgroup,\n    } = t.device.limits;\n    t.skipIf(\n      t.params.wgx > maxComputeWorkgroupSizeX,\n      `workgroup size x: ${t.params.wgx} > limit: ${maxComputeWorkgroupSizeX}`\n    );\n    t.skipIf(\n      t.params.wgy > maxComputeWorkgroupSizeY,\n      `workgroup size x: ${t.params.wgy} > limit: ${maxComputeWorkgroupSizeY}`\n    );\n    t.skipIf(\n      t.params.wgz > maxComputeWorkgroupSizeZ,\n      `workgroup size x: ${t.params.wgz} > limit: ${maxComputeWorkgroupSizeZ}`\n    );\n    const totalInvocations = t.params.wgx * t.params.wgy * t.params.wgz;\n    t.skipIf(\n      totalInvocations > maxComputeInvocationsPerWorkgroup,\n      `workgroup size: ${totalInvocations} > limit: ${maxComputeInvocationsPerWorkgroup}`\n    );\n\n    const code = `\nstruct Values {\n  x : atomic<u32>,\n  y : atomic<u32>,\n  z : atomic<u32>,\n  total : atomic<u32>,\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> v : array<Values>;\n\n@compute @workgroup_size(${t.params.wgx}, ${t.params.wgy}, ${t.params.wgz})\nfn main(@builtin(local_invocation_id) lid : vec3u,\n        @builtin(workgroup_id) wgid : vec3u) {\n  atomicMax(&v[wgid.x].x, lid.x + 1);\n  atomicMax(&v[wgid.x].y, lid.y + 1);\n  atomicMax(&v[wgid.x].z, lid.z + 1);\n  atomicAdd(&v[wgid.x].total, 1);\n}`;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    const numWorkgroups = totalInvocations < 256 ? 5 : 3;\n    const buffer = t.makeBufferWithContents(\n      new Uint32Array([...iterRange(numWorkgroups * 4, _i => 0)]),\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n    );\n\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer,\n          },\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(numWorkgroups, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const bufferReadback = await t.readGPUBufferRangeTyped(buffer, {\n      srcByteOffset: 0,\n      type: Uint32Array,\n      typedLength: 4 * numWorkgroups,\n      method: 'copy',\n    });\n    const data: Uint32Array = bufferReadback.data;\n\n    t.expectOK(checkResults(t.params.wgx, t.params.wgy, t.params.wgz, numWorkgroups, data));\n  });\n"],"mappings":"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"}