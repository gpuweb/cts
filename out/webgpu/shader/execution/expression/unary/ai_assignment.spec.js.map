{"version":3,"file":"ai_assignment.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","Type","abstractIntShaderBuilder","basicExpressionBuilder","onlyConstInputSource","run","d","concrete_assignment","value","abstract_assignment","g","test","specURL","desc","params","u","combine","fn","t","cases","get","abstractInt","i32","u32"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/ai_assignment.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for assignment of AbstractInts\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../gpu_test.js';\nimport { Type } from '../../../../util/conversion.js';\nimport {\n  ShaderBuilder,\n  abstractIntShaderBuilder,\n  basicExpressionBuilder,\n  onlyConstInputSource,\n  run,\n} from '../expression.js';\n\nimport { d } from './ai_assignment.cache.js';\n\nfunction concrete_assignment(): ShaderBuilder {\n  return basicExpressionBuilder(value => `${value}`);\n}\n\nfunction abstract_assignment(): ShaderBuilder {\n  return abstractIntShaderBuilder(value => `${value}`);\n}\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('abstract')\n  .specURL('https://www.w3.org/TR/WGSL/#abstract-types')\n  .desc(\n    `\ntesting that extracting abstract ints works\n`\n  )\n  .params(u => u.combine('inputSource', onlyConstInputSource))\n  .fn(async t => {\n    const cases = await d.get('abstract');\n    await run(t, abstract_assignment(), [Type.abstractInt], Type.abstractInt, t.params, cases, 1);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#i32-builtin')\n  .desc(\n    `\nconcretizing to i32\n`\n  )\n  .params(u => u.combine('inputSource', onlyConstInputSource))\n  .fn(async t => {\n    const cases = await d.get('i32');\n    await run(t, concrete_assignment(), [Type.abstractInt], Type.i32, t.params, cases);\n  });\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#u32-builtin')\n  .desc(\n    `\nconcretizing to u32\n`\n  )\n  .params(u => u.combine('inputSource', onlyConstInputSource))\n  .fn(async t => {\n    const cases = await d.get('u32');\n    await run(t, concrete_assignment(), [Type.abstractInt], Type.u32, t.params, cases);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,+CAA+C;AAC7E,SAASC,2BAA2B,QAAQ,yBAAyB;AACrE,SAASC,IAAI,QAAQ,gCAAgC;AACrD;;EAEEC,wBAAwB;EACxBC,sBAAsB;EACtBC,oBAAoB;EACpBC,GAAG;AACE,kBAAkB;;AAEzB,SAASC,CAAC,QAAQ,0BAA0B;;AAE5C,SAASC,mBAAmBA,CAAA,EAAkB;EAC5C,OAAOJ,sBAAsB,CAAC,CAAAK,KAAK,KAAK,GAAEA,KAAM,EAAC,CAAC;AACpD;;AAEA,SAASC,mBAAmBA,CAAA,EAAkB;EAC5C,OAAOP,wBAAwB,CAAC,CAAAM,KAAK,KAAK,GAAEA,KAAM,EAAC,CAAC;AACtD;;AAEA,OAAO,MAAME,CAAC,GAAGX,aAAa,CAACC,2BAA2B,CAAC;;AAE3DU,CAAC,CAACC,IAAI,CAAC,UAAU,CAAC;AACfC,OAAO,CAAC,4CAA4C,CAAC;AACrDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEZ,oBAAoB,CAAC,CAAC;AAC3Da,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,UAAU,CAAC;EACrC,MAAMf,GAAG,CAACa,CAAC,EAAET,mBAAmB,CAAC,CAAC,EAAE,CAACR,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACoB,WAAW,EAAEH,CAAC,CAACJ,MAAM,EAAEK,KAAK,EAAE,CAAC,CAAC;AAC/F,CAAC,CAAC;;AAEJT,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,yCAAyC,CAAC;AAClDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEZ,oBAAoB,CAAC,CAAC;AAC3Da,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMf,GAAG,CAACa,CAAC,EAAEX,mBAAmB,CAAC,CAAC,EAAE,CAACN,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACqB,GAAG,EAAEJ,CAAC,CAACJ,MAAM,EAAEK,KAAK,CAAC;AACpF,CAAC,CAAC;;AAEJT,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,yCAAyC,CAAC;AAClDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEZ,oBAAoB,CAAC,CAAC;AAC3Da,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMf,GAAG,CAACa,CAAC,EAAEX,mBAAmB,CAAC,CAAC,EAAE,CAACN,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACsB,GAAG,EAAEL,CAAC,CAACJ,MAAM,EAAEK,KAAK,CAAC;AACpF,CAAC,CAAC"}