{"version":3,"file":"bitwise.spec.js","names":["description","makeTestGroup","assert","AllFeaturesMaxLimitsGPUTest","abstractIntBits","i32Bits","scalarType","u32Bits","allInputSources","onlyConstInputSource","run","abstractIntBinary","binary","compoundBinary","g","kScalarImpls","i32","builder","bits","size","u32","scalarImplForInputType","inputType","kBitwiseOrStaticPatterns","input","expected","makeBitwiseOrCases","impl","indices","Array","keys","map","BigInt","c","flatMap","i","lhs","j","rhs","result","test","specURL","desc","params","u","combine","undefined","fn","t","skipIf","type","includes","inputSource","cases","kBitwiseAndStaticPatterns","makeBitwiseAndCases","kBitwiseExclusiveOrStaticPatterns","makeBitwiseExclusiveOrCases"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/bitwise.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the bitwise binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../gpu_test.js';\nimport {\n  abstractIntBits,\n  i32Bits,\n  ScalarValue,\n  scalarType,\n  u32Bits,\n} from '../../../../util/conversion.js';\nimport { allInputSources, onlyConstInputSource, run } from '../expression.js';\n\nimport { abstractIntBinary, binary, compoundBinary } from './binary.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n/**\n * Collection of functions and values required to implement bitwise tests for a\n * specific scalar type\n */\ninterface ScalarImpl {\n  // builder is a mostly a wrapper around type builders like 'i32Bits' that\n  // handles the (number|bigint) type check.\n  builder: (bits: bigint | number) => ScalarValue;\n  size: 32 | 64;\n}\n\nconst kScalarImpls = {\n  i32: {\n    builder: (bits: bigint | number): ScalarValue => {\n      assert(typeof bits === 'number');\n      return i32Bits(bits);\n    },\n    size: 32,\n  } as ScalarImpl,\n  u32: {\n    builder: (bits: bigint | number): ScalarValue => {\n      assert(typeof bits === 'number');\n      return u32Bits(bits);\n    },\n    size: 32,\n  } as ScalarImpl,\n  'abstract-int': {\n    builder: (bits: bigint | number): ScalarValue => {\n      assert(typeof bits === 'bigint');\n      return abstractIntBits(bits);\n    },\n    size: 64,\n  } as ScalarImpl,\n};\n\n/** Wrapper for converting from input type strings to the appropriate implementation */\nfunction scalarImplForInputType(inputType: string): ScalarImpl {\n  assert(inputType === 'i32' || inputType === 'u32' || inputType === 'abstract-int');\n  return kScalarImpls[inputType];\n}\n\n/** Manually calculated bitwise-or cases used a check that the CTS test is correct */\nconst kBitwiseOrStaticPatterns = {\n  32: [\n    {\n      input: [0b00000000000000000000000000000000, 0b00000000000000000000000000000000],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b00000000000000000000000000000000],\n      expected: 0b11111111111111111111111111111111,\n    },\n    {\n      input: [0b00000000000000000000000000000000, 0b11111111111111111111111111111111],\n      expected: 0b11111111111111111111111111111111,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b11111111111111111111111111111111],\n      expected: 0b11111111111111111111111111111111,\n    },\n    {\n      input: [0b10100100010010100100010010100100, 0b00000000000000000000000000000000],\n      expected: 0b10100100010010100100010010100100,\n    },\n    {\n      input: [0b00000000000000000000000000000000, 0b10100100010010100100010010100100],\n      expected: 0b10100100010010100100010010100100,\n    },\n    {\n      input: [0b01010010001001010010001001010010, 0b10100100010010100100010010100100],\n      expected: 0b11110110011011110110011011110110,\n    },\n  ],\n  64: [\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b1111111111111111111111111111111111111111111111111111111111111111n,\n    },\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b1111111111111111111111111111111111111111111111111111111111111111n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b1111111111111111111111111111111111111111111111111111111111111111n,\n    },\n    {\n      input: [\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b1010010001001010010001001010010010100100010010100100010010100100n,\n    },\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n      ],\n      expected: 0b1010010001001010010001001010010010100100010010100100010010100100n,\n    },\n    {\n      input: [\n        0b0101001000100101001000100101001010100100010010100100010010100100n,\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n      ],\n      expected: 0b1111011001101111011001101111011010100100010010100100010010100100n,\n    },\n  ],\n};\n\n/** @returns a set of bitwise-or cases for the specific input type */\nfunction makeBitwiseOrCases(inputType: string) {\n  const impl = scalarImplForInputType(inputType);\n  const indices =\n    impl.size === 64 ? [...Array(impl.size).keys()].map(BigInt) : [...Array(impl.size).keys()];\n\n  return [\n    ...kBitwiseOrStaticPatterns[impl.size].map(c => {\n      return {\n        input: c.input.map(impl.builder),\n        expected: impl.builder(c.expected),\n      };\n    }),\n    // Permute all combinations of a single bit being set for the LHS and RHS\n    ...indices.flatMap(i => {\n      const lhs = typeof i === 'bigint' ? 1n << i : 1 << i;\n      return indices.map(j => {\n        const rhs = typeof j === 'bigint' ? 1n << j : 1 << j;\n        assert(typeof lhs === typeof rhs);\n        const result = typeof lhs === 'bigint' ? lhs | (rhs as bigint) : lhs | (rhs as number);\n        return { input: [impl.builder(lhs), impl.builder(rhs)], expected: impl.builder(result) };\n      });\n    }),\n  ];\n}\n\ng.test('bitwise_or')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 | e2: T\nT is i32, u32, abstractInt, vecN<i32>, vecN<u32>, or vecN<abstractInt>\n\nBitwise-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32', 'abstract-int'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    t.skipIf(\n      t.params.type === 'abstract-int' && !onlyConstInputSource.includes(t.params.inputSource)\n    );\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseOrCases(t.params.type);\n    const builder = t.params.type === 'abstract-int' ? abstractIntBinary('|') : binary('|');\n    await run(t, builder, [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_or_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 |= e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseOrCases(t.params.type);\n\n    await run(t, compoundBinary('|='), [type, type], type, t.params, cases);\n  });\n\n/** Manually calculated bitwise-and cases used a check that the CTS test is correct */\nconst kBitwiseAndStaticPatterns = {\n  32: [\n    {\n      input: [0b00000000000000000000000000000000, 0b00000000000000000000000000000000],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b00000000000000000000000000000000],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b00000000000000000000000000000000, 0b11111111111111111111111111111111],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b11111111111111111111111111111111],\n      expected: 0b11111111111111111111111111111111,\n    },\n    {\n      input: [0b10100100010010100100010010100100, 0b00000000000000000000000000000000],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b10100100010010100100010010100100, 0b11111111111111111111111111111111],\n      expected: 0b10100100010010100100010010100100,\n    },\n    {\n      input: [0b00000000000000000000000000000000, 0b10100100010010100100010010100100],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b10100100010010100100010010100100],\n      expected: 0b10100100010010100100010010100100,\n    },\n    {\n      input: [0b01010010001001010010001001010010, 0b01011011101101011011101101011011],\n      expected: 0b01010010001001010010001001010010,\n    },\n  ],\n  64: [\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b1111111111111111111111111111111111111111111111111111111111111111n,\n    },\n    {\n      input: [\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b1010010001001010010001001010010010100100010010100100010010100100n,\n    },\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n      ],\n      expected: 0b1010010001001010010001001010010010100100010010100100010010100100n,\n    },\n    {\n      input: [\n        0b0101001000100101001000100101001001010010001001010010001001010010n,\n        0b0101101110110101101110110101101101011011101101011011101101011011n,\n      ],\n      expected: 0b0101001000100101001000100101001001010010001001010010001001010010n,\n    },\n  ],\n};\n\n/** @returns a set of bitwise-or cases for the specific input type */\nfunction makeBitwiseAndCases(inputType: string) {\n  const impl = scalarImplForInputType(inputType);\n  const indices =\n    impl.size === 64 ? [...Array(impl.size).keys()].map(BigInt) : [...Array(impl.size).keys()];\n\n  return [\n    ...kBitwiseAndStaticPatterns[impl.size].map(c => {\n      return {\n        input: c.input.map(impl.builder),\n        expected: impl.builder(c.expected),\n      };\n    }),\n    // Permute all combinations of a single bit being set for the LHS and all but one bit set for the RHS\n    ...indices.flatMap(i => {\n      const lhs = typeof i === 'bigint' ? 1n << i : 1 << i;\n      return indices.map(j => {\n        const rhs = typeof j === 'bigint' ? 0xffffffffffffffffn ^ (1n << j) : 0xffffffff ^ (1 << j);\n        assert(typeof lhs === typeof rhs);\n        const result = typeof lhs === 'bigint' ? lhs & (rhs as bigint) : lhs & (rhs as number);\n        return { input: [impl.builder(lhs), impl.builder(rhs)], expected: impl.builder(result) };\n      });\n    }),\n  ];\n}\n\ng.test('bitwise_and')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 & e2: T\nT is i32, u32, AbstractInt, vecN<i32>, vecN<u32>, or vecN<AbstractInt>\n\nBitwise-and. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32', 'abstract-int'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    t.skipIf(\n      t.params.type === 'abstract-int' && !onlyConstInputSource.includes(t.params.inputSource)\n    );\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseAndCases(t.params.type);\n    const builder = t.params.type === 'abstract-int' ? abstractIntBinary('&') : binary('&');\n    await run(t, builder, [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_and_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 &= e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-and. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseAndCases(t.params.type);\n    await run(t, compoundBinary('&='), [type, type], type, t.params, cases);\n  });\n\n/** Manually calculated bitwise-or cases used a check that the CTS test is correct */\nconst kBitwiseExclusiveOrStaticPatterns = {\n  32: [\n    {\n      input: [0b00000000000000000000000000000000, 0b00000000000000000000000000000000],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b00000000000000000000000000000000],\n      expected: 0b11111111111111111111111111111111,\n    },\n    {\n      input: [0b00000000000000000000000000000000, 0b11111111111111111111111111111111],\n      expected: 0b11111111111111111111111111111111,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b11111111111111111111111111111111],\n      expected: 0b00000000000000000000000000000000,\n    },\n    {\n      input: [0b10100100010010100100010010100100, 0b00000000000000000000000000000000],\n      expected: 0b10100100010010100100010010100100,\n    },\n    {\n      input: [0b10100100010010100100010010100100, 0b11111111111111111111111111111111],\n      expected: 0b01011011101101011011101101011011,\n    },\n    {\n      input: [0b00000000000000000000000000000000, 0b10100100010010100100010010100100],\n      expected: 0b10100100010010100100010010100100,\n    },\n    {\n      input: [0b11111111111111111111111111111111, 0b10100100010010100100010010100100],\n      expected: 0b01011011101101011011101101011011,\n    },\n    {\n      input: [0b01010010001001010010001001010010, 0b01011011101101011011101101011011],\n      expected: 0b00001001100100001001100100001001,\n    },\n  ],\n  64: [\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b1111111111111111111111111111111111111111111111111111111111111111n,\n    },\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b1111111111111111111111111111111111111111111111111111111111111111n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b0000000000000000000000000000000000000000000000000000000000000000n,\n    },\n    {\n      input: [\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n      ],\n      expected: 0b1010010001001010010001001010010010100100010010100100010010100100n,\n    },\n    {\n      input: [\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n      ],\n      expected: 0b0101101110110101101110110101101101011011101101011011101101011011n,\n    },\n    {\n      input: [\n        0b0000000000000000000000000000000000000000000000000000000000000000n,\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n      ],\n      expected: 0b1010010001001010010001001010010010100100010010100100010010100100n,\n    },\n    {\n      input: [\n        0b1111111111111111111111111111111111111111111111111111111111111111n,\n        0b1010010001001010010001001010010010100100010010100100010010100100n,\n      ],\n      expected: 0b0101101110110101101110110101101101011011101101011011101101011011n,\n    },\n    {\n      input: [\n        0b0101001000100101001000100101001001010010001001010010001001010010n,\n        0b0101101110110101101110110101101101011011101101011011101101011011n,\n      ],\n      expected: 0b0000100110010000100110010000100100001001100100001001100100001001n,\n    },\n  ],\n};\n\n/** @returns a set of bitwise-xor cases for the specific input type */\nfunction makeBitwiseExclusiveOrCases(inputType: string) {\n  const impl = scalarImplForInputType(inputType);\n  const indices =\n    impl.size === 64 ? [...Array(impl.size).keys()].map(BigInt) : [...Array(impl.size).keys()];\n\n  return [\n    ...kBitwiseExclusiveOrStaticPatterns[impl.size].map(c => {\n      return {\n        input: c.input.map(impl.builder),\n        expected: impl.builder(c.expected),\n      };\n    }),\n    // Permute all combinations of a single bit being set for the LHS and all but one bit set for the RHS\n    ...indices.flatMap(i => {\n      const lhs = typeof i === 'bigint' ? 1n << i : 1 << i;\n      return indices.map(j => {\n        const rhs = typeof j === 'bigint' ? 0xffffffffffffffffn ^ (1n << j) : 0xffffffff ^ (1 << j);\n        assert(typeof lhs === typeof rhs);\n        const result = typeof lhs === 'bigint' ? lhs ^ (rhs as bigint) : lhs ^ (rhs as number);\n        return { input: [impl.builder(lhs), impl.builder(rhs)], expected: impl.builder(result) };\n      });\n    }),\n  ];\n}\n\ng.test('bitwise_exclusive_or')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 ^ e2: T\nT is i32, u32, abstractInt, vecN<i32>, vecN<u32>, or vecN<abstractInt>\n\nBitwise-exclusive-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32', 'abstract-int'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    t.skipIf(\n      t.params.type === 'abstract-int' && !onlyConstInputSource.includes(t.params.inputSource)\n    );\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseExclusiveOrCases(t.params.type);\n    const builder = t.params.type === 'abstract-int' ? abstractIntBinary('^') : binary('^');\n    await run(t, builder, [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_exclusive_or_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 ^= e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-exclusive-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseExclusiveOrCases(t.params.type);\n    await run(t, compoundBinary('^='), [type, type], type, t.params, cases);\n  });\n"],"mappings":"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"}