{"version":3,"file":"quadSwap.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","unreachable","kConcreteNumericScalarsAndVectors","VectorType","kWGSizes","kDataSentinel","kPredicateCases","runComputeTest","SubgroupTest","kFramebufferSizes","runFragmentTest","generateTypedInputs","getUintsPerFramebuffer","g","kTypes","kOps","swapIndex","index","op","Math","trunc","checkDataTypes","metadata","output","input","type","requiresF16","i","swapIdx","expectIdx","floor","expectShift","expect","resIdx","resShift","res","Error","uints","width","j","undefined","test","desc","params","u","combine","beginSubcases","fn","t","wgSize","skipIfDeviceDoesNotHaveFeature","enables","wgsl","toString","inputData","uintsPerOutput","checkSwapCompute","filter","bound","length","subgroup_id","id","size","quad_id","quad_index","found","other_id","other_quad_id","other_quad_index","other_subgroup_id","wgThreads","Uint32Array","predicate","testcase","cond","checkFragment","data","format","height","uintsPerRow","uintsPerTexel","coordToIndex","row","col","offset","row_is_odd","col_is_odd","max_row","max_col","expect_row","expect_col","row_output","col_output","combineWithParams","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quadSwap.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for quadSwapX, quadSwapY, and quadSwapDiagnoal.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert, unreachable } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n  Type,\n  VectorType,\n} from '../../../../../util/conversion.js';\n\nimport {\n  kWGSizes,\n  kDataSentinel,\n  kPredicateCases,\n  runComputeTest,\n  SubgroupTest,\n  kFramebufferSizes,\n  runFragmentTest,\n  generateTypedInputs,\n  getUintsPerFramebuffer,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\ntype SwapOp = 'quadSwapX' | 'quadSwapY' | 'quadSwapDiagonal';\n\nconst kOps: SwapOp[] = ['quadSwapX', 'quadSwapY', 'quadSwapDiagonal'];\n\n/**\n * Returns the swapped quad invocation id for the given op\n *\n * @param index The index in the range [0,3]\n * @param op The swap\n */\nfunction swapIndex(index: number, op: SwapOp): number {\n  assert(index === Math.trunc(index));\n  assert(index >= 0 && index <= 3);\n  switch (op) {\n    case 'quadSwapX':\n      return index ^ 1;\n    case 'quadSwapY':\n      return index ^ 2;\n    case 'quadSwapDiagonal':\n      return index ^ 3;\n  }\n  unreachable(`Unhandled op ${op}`);\n}\n\n/**\n * Checks the results of data types test\n *\n * The outputs for a given index are expected to match the input values\n * for the given swap.\n * @param metadata An unused parameter\n * @param output The output data\n * @param input The input data\n * @param op The type of swap\n * @param type The data type\n */\nfunction checkDataTypes(\n  metadata: Uint32Array, // unused\n  output: Uint32Array,\n  input: Uint32Array,\n  op: SwapOp,\n  type: Type\n): Error | undefined {\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    for (let i = 0; i < 4; i++) {\n      const swapIdx = swapIndex(i, op);\n\n      const expectIdx = Math.floor(swapIdx / 2);\n      const expectShift = swapIdx % 2 === 1;\n      let expect = input[expectIdx];\n      if (expectShift) {\n        expect >>= 16;\n      }\n      expect &= 0xffff;\n\n      const resIdx = Math.floor(i / 2);\n      const resShift = i % 2 === 1;\n      let res = output[resIdx];\n      if (resShift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[swapIndex(i, op) * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${uints * i + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types')\n  .desc('Test allowed data types')\n  .params(u => u.combine('type', keysOf(kTypes)).beginSubcases().combine('op', kOps))\n  .fn(async t => {\n    const wgSize = [4, 1, 1];\n    const type = kTypes[t.params.type];\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    if (type.requiresF16()) {\n      t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    }\n\n    let enables = `enable subgroups;\\n`;\n    if (type.requiresF16()) {\n      enables += `enable f16;`;\n    }\n    const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = ${t.params.op}(input[id]);\n}`;\n\n    const inputData = generateTypedInputs(type);\n    let uintsPerOutput = 1;\n    if (type instanceof VectorType) {\n      uintsPerOutput = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uintsPerOutput = Math.floor(uintsPerOutput / 2);\n      }\n    }\n    await runComputeTest(\n      t,\n      wgsl,\n      wgSize,\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkDataTypes(metadata, output, inputData, t.params.op, type);\n      }\n    );\n  });\n\n/**\n * Checks quad swaps in compute shaders\n *\n * Assumes that quads are linear within a subgroup.\n *\n * @param metadata An array of integers divided as follows:\n *                 * first half subgroup invocation ids\n *                 * second half subgroup sizes\n * @param output An array of integers divided as follows:\n *               * first half results of quad broadcast\n *               * second half generated unique subgroup ids\n * @param op The swap operation\n * @param filter A functor to filter active invocations\n */\nfunction checkSwapCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  op: SwapOp,\n  filter: (id: number, size: number) => boolean\n): Error | undefined {\n  const bound = Math.floor(output.length / 2);\n  for (let i = 0; i < bound; i++) {\n    const subgroup_id = output[bound + i];\n    const id = metadata[i];\n    const size = metadata[bound + i];\n    if (!filter(id, size)) {\n      if (output[i] !== kDataSentinel) {\n        return new Error(`Unexpected write for invocation ${i}`);\n      }\n      continue;\n    }\n\n    const quad_id = Math.floor(id / 4);\n    const quad_index = id % 4;\n    let found = false;\n    for (let j = 0; j < bound; j++) {\n      const other_id = metadata[j];\n      const other_quad_id = Math.floor(other_id / 4);\n      const other_quad_index = other_id % 4;\n      const other_subgroup_id = output[bound + j];\n      if (\n        subgroup_id === other_subgroup_id &&\n        quad_id === other_quad_id &&\n        quad_index === swapIndex(other_quad_index, op)\n      ) {\n        found = true;\n        if (output[i] !== j) {\n          return new Error(`Invocation ${i}: incorrect result\n- expected: ${j}\n-      got: ${output[i]}`);\n        }\n        break;\n      }\n    }\n    if (!found) {\n      return new Error(`Invocation ${i}: failed to find swapped result`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc(\n    `Tests swaps with all active invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('op', kOps)\n  )\n  .fn(async t => {\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  let b = ${t.params.op}(lid);\n  output.results[lid] = b;\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkSwapCompute(metadata, output, t.params.op, (id: number, size: number) => {\n          return true;\n        });\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc(\n    `Tests swaps with all predicated invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\nQuad operations require a fully active quad to operate correctly so several of the\npredication filters are skipped.\n  `\n  )\n  .params(u =>\n    u\n      .combine('predicate', keysOf(kPredicateCases))\n      .filter(t => {\n        return t.predicate === 'lower_half' || t.predicate === 'upper_half';\n      })\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('op', kOps)\n  )\n  .fn(async t => {\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const testcase = kPredicateCases[t.params.predicate];\n\n    const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\ndiagnostic(off, subgroup_branching);\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    let b = ${t.params.op}(lid);\n    output.results[lid] = b;\n  }\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkSwapCompute(metadata, output, t.params.op, testcase.filter);\n      }\n    );\n  });\n\n/**\n * Checks results of quad swaps in fragment shaders.\n *\n * @param data The framebuffer output\n *             * component 0 is the broadcast of the integer x position\n *             * component 1 is the broadcast of the integer y position\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n * @param broadcast The quad id being broadcast\n */\nfunction checkFragment(\n  data: Uint32Array,\n  format: GPUTextureFormat,\n  width: number,\n  height: number,\n  op: SwapOp\n): Error | undefined {\n  if (width < 3 || height < 3) {\n    return new Error(\n      `Insufficient framebuffer size [${width}w x ${height}h]. Minimum is [3w x 3h].`\n    );\n  }\n\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  const coordToIndex = (row: number, col: number) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const row_is_odd = row % 2 === 1;\n      const col_is_odd = col % 2 === 1;\n\n      // Skip checking quads that extend into potential helper invocations.\n      const max_row = row_is_odd ? row : row + 1;\n      const max_col = col_is_odd ? col : col + 1;\n      if (max_row === height - 1 || max_col === width - 1) {\n        continue;\n      }\n\n      let expect_row = row;\n      let expect_col = col;\n      switch (op) {\n        case 'quadSwapX':\n          expect_col = col_is_odd ? col - 1 : col + 1;\n          break;\n        case 'quadSwapY':\n          expect_row = row_is_odd ? row - 1 : row + 1;\n          break;\n        case 'quadSwapDiagonal':\n          expect_row = row_is_odd ? row - 1 : row + 1;\n          expect_col = col_is_odd ? col - 1 : col + 1;\n          break;\n      }\n\n      const row_output = data[offset + 1];\n      const col_output = data[offset];\n      if (expect_row !== row_output) {\n        return new Error(`Row ${row}, col ${col}: incorrect row results:\n- expected: ${expect_row}\n-      got: ${row_output}`);\n      }\n\n      if (expect_col !== col_output) {\n        return new Error(`Row ${row}, col ${col}: incorrect col results:\n- expected: ${expect_row}\n-      got: ${col_output}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active')\n  .desc(`Tests quad swaps in fragment shaders`)\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combine('op', kOps)\n      .combineWithParams([{ format: 'rgba32uint' }] as const)\n  )\n  .fn(async t => {\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<uniform> inputs : array<vec4u, 1>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n\n  var x_swap = select(1001, u32(pos.x), in_range);\n  var y_swap = select(1001, u32(pos.y), in_range);\n\n  x_swap = ${t.params.op}(x_swap);\n  y_swap = ${t.params.op}(y_swap);\n\n  return vec4u(x_swap, y_swap, 0, 0);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      new Uint32Array([0]), // unused,\n      (data: Uint32Array) => {\n        return checkFragment(\n          data,\n          t.params.format,\n          t.params.size[0],\n          t.params.size[1],\n          t.params.op\n        );\n      }\n    );\n  });\n\ng.test('fragment,split').unimplemented();\n"],"mappings":"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"}