{"version":3,"file":"textureGatherCompare.spec.js","names":["description","makeTestGroup","kCompareFunctions","isDepthTextureFormat","kDepthStencilFormats","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","kCubeSamplePointMethods","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","makeRandomDepthComparisonTexelGenerator","WGSLTextureSampleTest","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","selectDeviceForTextureFormatOrSkipTestCase","fn","stage","samplePoints","A","modeU","modeV","filt","minFilter","compare","offset","depthOrArrayLayers","width","height","minSize","minBlocks","size","descriptor","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","isCompatibility","textureBindingViewDimension","texels","texture","generator","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","textureBuiltin","arrayIndex","num","type","depthRef","hashInputs","map","coords","builtin","coordType","arrayIndexType","textureType","viewDescriptor","dimension","results","res","expectOK","skipIfTextureViewDimensionNotSupported","mode","viewDimension","addressModeW","C"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureGatherCompare.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureGatherCompare' builtin function\n\nA texture gather compare operation performs a depth comparison on four texels in a depth texture and collects the results into a single vector, as follows:\n * Find the four texels that would be used in a depth sampling operation with linear filtering, from mip level 0:\n   - Use the specified coordinate, array index (when present), and offset (when present).\n   - The texels are adjacent, forming a square, when considering their texture space coordinates (u,v).\n   - Selected texels at the texture edge, cube face edge, or cube corners are handled as in ordinary texture sampling.\n * For each texel, perform a comparison against the depth reference value, yielding a 0.0 or 1.0 value, as controlled by the comparison sampler parameters.\n * Yield the four-component vector where the components are the comparison results with the texels with relative texel coordinates as follows:\n\n   Result component  Relative texel coordinate\n    x                (umin,vmax)\n    y                (umax,vmax)\n    z                (umax,vmin)\n    w                (umin,vmin)\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompareFunctions } from '../../../../../capability_info.js';\nimport { isDepthTextureFormat, kDepthStencilFormats } from '../../../../../format_info.js';\n\nimport {\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n  makeRandomDepthComparisonTexelGenerator,\n  TextureCall,\n  vec2,\n  vec3,\n  WGSLTextureSampleTest,\n} from './texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nA: i32, u32\n\nfn textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * array_index: The 0-based array index.\n * depth_ref: The reference value to compare the sampled depth value against\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('compare', kCompareFunctions)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const {\n      format,\n      stage,\n      samplePoints,\n      A,\n      modeU,\n      modeV,\n      filt: minFilter,\n      compare,\n      offset,\n      depthOrArrayLayers,\n    } = t.params;\n\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = { width, height, depthOrArrayLayers };\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureGatherCompare',\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      depthRef: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, A, modeU, modeV, minFilter, offset],\n    }).map(({ coords, arrayIndex, depthRef, offset }) => {\n      return {\n        builtin: 'textureGatherCompare',\n        coordType: 'f',\n        coords,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        depthRef,\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d_array';\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nA: i32, u32\n\nfn textureGatherCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: A, depth_ref: f32) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * array_index: The 0-based array index.\n * depth_ref: The reference value to compare the sampled depth value against\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('mode', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('compare', kCompareFunctions)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, A, stage, samplePoints, mode, filt: minFilter, compare } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      addressModeW: kShortAddressModeToAddressMode[mode],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      textureBuiltin: 'textureGatherCompare',\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      depthRef: true,\n      hashInputs: [stage, format, samplePoints, mode, minFilter],\n    }).map(({ coords, depthRef, arrayIndex }) => {\n      return {\n        builtin: 'textureGatherCompare',\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        coordType: 'f',\n        coords,\n        depthRef,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube_array';\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nfn textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * depth_ref: The reference value to compare the sampled depth value against\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('mode', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('compare', kCompareFunctions)\n  )\n  .beforeAllSubcases(t => t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format))\n  .fn(async t => {\n    const { format, C, stage, samplePoints, mode, compare, filt: minFilter, offset } = t.params;\n\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureGatherCompare',\n      sampler,\n      descriptor,\n      offset,\n      depthRef: true,\n      hashInputs: [stage, format, C, samplePoints, mode, minFilter, compare, offset],\n    }).map(({ coords, depthRef, offset }) => {\n      return {\n        builtin: 'textureGatherCompare',\n        coordType: 'f',\n        coords,\n        depthRef,\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nfn textureGatherCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * depth_ref: The reference value to compare the sampled depth value against\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('mode', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('compare', kCompareFunctions)\n  )\n  .beforeAllSubcases(t => t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format))\n  .fn(async t => {\n    const { format, stage, samplePoints, mode, filt: minFilter, compare } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube';\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      addressModeW: kShortAddressModeToAddressMode[mode],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      depthRef: true,\n      textureBuiltin: 'textureGatherCompare',\n      hashInputs: [stage, format, samplePoints, mode, minFilter, compare],\n    }).map(({ coords, depthRef }) => {\n      return {\n        builtin: 'textureGatherCompare',\n        coordType: 'f',\n        coords,\n        depthRef,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube';\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}