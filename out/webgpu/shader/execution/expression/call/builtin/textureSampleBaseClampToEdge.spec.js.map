{"version":3,"file":"textureSampleBaseClampToEdge.spec.js","names":["description","makeTestGroup","checkCallResults","createTextureWithRandomDataAndGetTexels","createCanvasWithRandomDataAndGetTexels","doTextureCalls","generateTextureBuiltinInputs2D","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","WGSLTextureSampleTest","g","createTextureAndDataForTest","t","descriptor","isExternal","skipIf","OffscreenCanvas","texels","canvas","size","VideoFrame","videoFrame","timestamp","texture","device","importExternalTexture","source","test","specURL","desc","params","u","combine","beginSubcases","beforeAllSubcases","textureType","fn","stage","samplePoints","modeU","modeV","filt","minFilter","format","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","mipLevelCount","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","hashInputs","map","coords","builtin","coordType","viewDescriptor","results","res","expectOK","close"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleBaseClampToEdge.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for textureSampleBaseClampToEdge\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TexelView } from '../../../../../util/texture/texel_view.js';\n\nimport {\n  checkCallResults,\n  createTextureWithRandomDataAndGetTexels,\n  createCanvasWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateTextureBuiltinInputs2D,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n  TextureCall,\n  vec2,\n  WGSLTextureSampleTest,\n} from './texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\nasync function createTextureAndDataForTest(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor,\n  isExternal: boolean\n): Promise<{\n  texels: TexelView[];\n  texture: GPUTexture | GPUExternalTexture;\n  videoFrame?: VideoFrame;\n}> {\n  if (isExternal) {\n    t.skipIf(typeof OffscreenCanvas === 'undefined', 'OffscreenCanvas is not supported');\n    const { texels, canvas } = createCanvasWithRandomDataAndGetTexels(descriptor.size);\n\n    t.skipIf(typeof VideoFrame === 'undefined', 'VideoFrames are not supported');\n    const videoFrame = new VideoFrame(canvas, { timestamp: 0 });\n\n    const texture = t.device.importExternalTexture({ source: videoFrame });\n    return { texels, texture, videoFrame };\n  } else {\n    return await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  }\n}\n\ng.test('2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebaseclamptoedge')\n  .desc(\n    `\nfn textureSampleBaseClampToEdge(t: texture_2d<f32>, s: sampler, coords: vec2<f32>) -> vec4<f32>\nfn textureSampleBaseClampToEdge(t: texture_external, s: sampler, coords: vec2<f32>) -> vec4<f32>\n\n\nParameters:\n * t  The texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('textureType', ['texture_2d<f32>', 'texture_external'] as const)\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIf(\n      t.params.textureType === 'texture_external' && typeof VideoFrame === 'undefined',\n      'VideoFrames are not supported'\n    )\n  )\n  .fn(async t => {\n    const { textureType, stage, samplePoints, modeU, modeV, filt: minFilter } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      size: [8, 8],\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n\n    const isExternal = textureType === 'texture_external';\n    const { texture, texels, videoFrame } = await createTextureAndDataForTest(\n      t,\n      descriptor,\n      isExternal\n    );\n    try {\n      const sampler: GPUSamplerDescriptor = {\n        addressModeU: kShortAddressModeToAddressMode[modeU],\n        addressModeV: kShortAddressModeToAddressMode[modeV],\n        minFilter,\n        magFilter: minFilter,\n        mipmapFilter: minFilter,\n      };\n\n      const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n        method: samplePoints,\n        sampler,\n        descriptor,\n        hashInputs: [samplePoints, modeU, modeV, minFilter],\n      }).map(({ coords }) => {\n        return {\n          builtin: 'textureSampleBaseClampToEdge',\n          coordType: 'f',\n          coords,\n        };\n      });\n      const viewDescriptor = {};\n      const results = await doTextureCalls(\n        t,\n        texture,\n        viewDescriptor,\n        textureType,\n        sampler,\n        calls,\n        stage\n      );\n      const res = await checkCallResults(\n        t,\n        { texels, descriptor, viewDescriptor },\n        textureType,\n        sampler,\n        calls,\n        results,\n        stage\n      );\n      t.expectOK(res);\n    } finally {\n      videoFrame?.close();\n    }\n  });\n"],"mappings":"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"}