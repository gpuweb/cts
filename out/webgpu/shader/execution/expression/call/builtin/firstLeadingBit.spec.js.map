{"version":3,"file":"firstLeadingBit.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","i32","i32Bits","Type","u32","u32Bits","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","cfg","input","expected"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/firstLeadingBit.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'firstLeadingBit' builtin function\n\nT is u32 or vecN<u32>\n@const fn firstLeadingBit(e: T ) -> T\nFor scalar T, the result is: T(-1) if e is zero.\nOtherwise the position of the most significant 1 bit in e.\nComponent-wise when T is a vector.\n\nT is i32 or vecN<i32>\n@const fn firstLeadingBit(e: T ) -> T\nFor scalar T, the result is: -1 if e is 0 or -1.\nOtherwise the position of the most significant bit in e that is different from eâ€™s sign bit.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\nimport { i32, i32Bits, Type, u32, u32Bits } from '../../../../../util/conversion.js';\nimport { allInputSources, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    await run(t, builtin('firstLeadingBit'), [Type.u32], Type.u32, cfg, [\n      // Zero\n      { input: u32Bits(0b00000000000000000000000000000000), expected: u32(-1) },\n\n      // One\n      { input: u32Bits(0b00000000000000000000000000000001), expected: u32(0) },\n\n      // 0's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000010), expected: u32(1) },\n      { input: u32Bits(0b00000000000000000000000000000100), expected: u32(2) },\n      { input: u32Bits(0b00000000000000000000000000001000), expected: u32(3) },\n      { input: u32Bits(0b00000000000000000000000000010000), expected: u32(4) },\n      { input: u32Bits(0b00000000000000000000000000100000), expected: u32(5) },\n      { input: u32Bits(0b00000000000000000000000001000000), expected: u32(6) },\n      { input: u32Bits(0b00000000000000000000000010000000), expected: u32(7) },\n      { input: u32Bits(0b00000000000000000000000100000000), expected: u32(8) },\n      { input: u32Bits(0b00000000000000000000001000000000), expected: u32(9) },\n      { input: u32Bits(0b00000000000000000000010000000000), expected: u32(10) },\n      { input: u32Bits(0b00000000000000000000100000000000), expected: u32(11) },\n      { input: u32Bits(0b00000000000000000001000000000000), expected: u32(12) },\n      { input: u32Bits(0b00000000000000000010000000000000), expected: u32(13) },\n      { input: u32Bits(0b00000000000000000100000000000000), expected: u32(14) },\n      { input: u32Bits(0b00000000000000001000000000000000), expected: u32(15) },\n      { input: u32Bits(0b00000000000000010000000000000000), expected: u32(16) },\n      { input: u32Bits(0b00000000000000100000000000000000), expected: u32(17) },\n      { input: u32Bits(0b00000000000001000000000000000000), expected: u32(18) },\n      { input: u32Bits(0b00000000000010000000000000000000), expected: u32(19) },\n      { input: u32Bits(0b00000000000100000000000000000000), expected: u32(20) },\n      { input: u32Bits(0b00000000001000000000000000000000), expected: u32(21) },\n      { input: u32Bits(0b00000000010000000000000000000000), expected: u32(22) },\n      { input: u32Bits(0b00000000100000000000000000000000), expected: u32(23) },\n      { input: u32Bits(0b00000001000000000000000000000000), expected: u32(24) },\n      { input: u32Bits(0b00000010000000000000000000000000), expected: u32(25) },\n      { input: u32Bits(0b00000100000000000000000000000000), expected: u32(26) },\n      { input: u32Bits(0b00001000000000000000000000000000), expected: u32(27) },\n      { input: u32Bits(0b00010000000000000000000000000000), expected: u32(28) },\n      { input: u32Bits(0b00100000000000000000000000000000), expected: u32(29) },\n      { input: u32Bits(0b01000000000000000000000000000000), expected: u32(30) },\n      { input: u32Bits(0b10000000000000000000000000000000), expected: u32(31) },\n\n      // 1's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000011), expected: u32(1) },\n      { input: u32Bits(0b00000000000000000000000000000111), expected: u32(2) },\n      { input: u32Bits(0b00000000000000000000000000001111), expected: u32(3) },\n      { input: u32Bits(0b00000000000000000000000000011111), expected: u32(4) },\n      { input: u32Bits(0b00000000000000000000000000111111), expected: u32(5) },\n      { input: u32Bits(0b00000000000000000000000001111111), expected: u32(6) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32(7) },\n      { input: u32Bits(0b00000000000000000000000111111111), expected: u32(8) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32(9) },\n      { input: u32Bits(0b00000000000000000000011111111111), expected: u32(10) },\n      { input: u32Bits(0b00000000000000000000111111111111), expected: u32(11) },\n      { input: u32Bits(0b00000000000000000001111111111111), expected: u32(12) },\n      { input: u32Bits(0b00000000000000000011111111111111), expected: u32(13) },\n      { input: u32Bits(0b00000000000000000111111111111111), expected: u32(14) },\n      { input: u32Bits(0b00000000000000001111111111111111), expected: u32(15) },\n      { input: u32Bits(0b00000000000000011111111111111111), expected: u32(16) },\n      { input: u32Bits(0b00000000000000111111111111111111), expected: u32(17) },\n      { input: u32Bits(0b00000000000001111111111111111111), expected: u32(18) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32(19) },\n      { input: u32Bits(0b00000000000111111111111111111111), expected: u32(20) },\n      { input: u32Bits(0b00000000001111111111111111111111), expected: u32(21) },\n      { input: u32Bits(0b00000000011111111111111111111111), expected: u32(22) },\n      { input: u32Bits(0b00000000111111111111111111111111), expected: u32(23) },\n      { input: u32Bits(0b00000001111111111111111111111111), expected: u32(24) },\n      { input: u32Bits(0b00000011111111111111111111111111), expected: u32(25) },\n      { input: u32Bits(0b00000111111111111111111111111111), expected: u32(26) },\n      { input: u32Bits(0b00001111111111111111111111111111), expected: u32(27) },\n      { input: u32Bits(0b00011111111111111111111111111111), expected: u32(28) },\n      { input: u32Bits(0b00111111111111111111111111111111), expected: u32(29) },\n      { input: u32Bits(0b01111111111111111111111111111111), expected: u32(30) },\n      { input: u32Bits(0b11111111111111111111111111111111), expected: u32(31) },\n\n      // random after leading 1\n      { input: u32Bits(0b00000000000000000000000000000110), expected: u32(2) },\n      { input: u32Bits(0b00000000000000000000000000001101), expected: u32(3) },\n      { input: u32Bits(0b00000000000000000000000000011101), expected: u32(4) },\n      { input: u32Bits(0b00000000000000000000000000111001), expected: u32(5) },\n      { input: u32Bits(0b00000000000000000000000001101111), expected: u32(6) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32(7) },\n      { input: u32Bits(0b00000000000000000000000111101111), expected: u32(8) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32(9) },\n      { input: u32Bits(0b00000000000000000000011111110001), expected: u32(10) },\n      { input: u32Bits(0b00000000000000000000111011011101), expected: u32(11) },\n      { input: u32Bits(0b00000000000000000001101101111111), expected: u32(12) },\n      { input: u32Bits(0b00000000000000000011111111011111), expected: u32(13) },\n      { input: u32Bits(0b00000000000000000101111001110101), expected: u32(14) },\n      { input: u32Bits(0b00000000000000001101111011110111), expected: u32(15) },\n      { input: u32Bits(0b00000000000000011111111111110011), expected: u32(16) },\n      { input: u32Bits(0b00000000000000111111111110111111), expected: u32(17) },\n      { input: u32Bits(0b00000000000001111111011111111111), expected: u32(18) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32(19) },\n      { input: u32Bits(0b00000000000111110101011110111111), expected: u32(20) },\n      { input: u32Bits(0b00000000001111101111111111110111), expected: u32(21) },\n      { input: u32Bits(0b00000000011111111111010000101111), expected: u32(22) },\n      { input: u32Bits(0b00000000111111111111001111111011), expected: u32(23) },\n      { input: u32Bits(0b00000001111111011111101111111111), expected: u32(24) },\n      { input: u32Bits(0b00000011101011111011110111111011), expected: u32(25) },\n      { input: u32Bits(0b00000111111110111111111111111111), expected: u32(26) },\n      { input: u32Bits(0b00001111000000011011011110111111), expected: u32(27) },\n      { input: u32Bits(0b00011110101111011111111111111111), expected: u32(28) },\n      { input: u32Bits(0b00110110111111100111111110111101), expected: u32(29) },\n      { input: u32Bits(0b01010111111101111111011111011111), expected: u32(30) },\n      { input: u32Bits(0b11100010011110101101101110101111), expected: u32(31) },\n    ]);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    await run(t, builtin('firstLeadingBit'), [Type.i32], Type.i32, cfg, [\n      // Zero\n      { input: i32Bits(0b00000000000000000000000000000000), expected: i32(-1) },\n\n      // Negative One\n      { input: i32Bits(0b11111111111111111111111111111111), expected: i32(-1) },\n\n      // One\n      { input: i32Bits(0b00000000000000000000000000000001), expected: i32(0) },\n\n      // Positive: 0's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000010), expected: i32(1) },\n      { input: i32Bits(0b00000000000000000000000000000100), expected: i32(2) },\n      { input: i32Bits(0b00000000000000000000000000001000), expected: i32(3) },\n      { input: i32Bits(0b00000000000000000000000000010000), expected: i32(4) },\n      { input: i32Bits(0b00000000000000000000000000100000), expected: i32(5) },\n      { input: i32Bits(0b00000000000000000000000001000000), expected: i32(6) },\n      { input: i32Bits(0b00000000000000000000000010000000), expected: i32(7) },\n      { input: i32Bits(0b00000000000000000000000100000000), expected: i32(8) },\n      { input: i32Bits(0b00000000000000000000001000000000), expected: i32(9) },\n      { input: i32Bits(0b00000000000000000000010000000000), expected: i32(10) },\n      { input: i32Bits(0b00000000000000000000100000000000), expected: i32(11) },\n      { input: i32Bits(0b00000000000000000001000000000000), expected: i32(12) },\n      { input: i32Bits(0b00000000000000000010000000000000), expected: i32(13) },\n      { input: i32Bits(0b00000000000000000100000000000000), expected: i32(14) },\n      { input: i32Bits(0b00000000000000001000000000000000), expected: i32(15) },\n      { input: i32Bits(0b00000000000000010000000000000000), expected: i32(16) },\n      { input: i32Bits(0b00000000000000100000000000000000), expected: i32(17) },\n      { input: i32Bits(0b00000000000001000000000000000000), expected: i32(18) },\n      { input: i32Bits(0b00000000000010000000000000000000), expected: i32(19) },\n      { input: i32Bits(0b00000000000100000000000000000000), expected: i32(20) },\n      { input: i32Bits(0b00000000001000000000000000000000), expected: i32(21) },\n      { input: i32Bits(0b00000000010000000000000000000000), expected: i32(22) },\n      { input: i32Bits(0b00000000100000000000000000000000), expected: i32(23) },\n      { input: i32Bits(0b00000001000000000000000000000000), expected: i32(24) },\n      { input: i32Bits(0b00000010000000000000000000000000), expected: i32(25) },\n      { input: i32Bits(0b00000100000000000000000000000000), expected: i32(26) },\n      { input: i32Bits(0b00001000000000000000000000000000), expected: i32(27) },\n      { input: i32Bits(0b00010000000000000000000000000000), expected: i32(28) },\n      { input: i32Bits(0b00100000000000000000000000000000), expected: i32(29) },\n      { input: i32Bits(0b01000000000000000000000000000000), expected: i32(30) },\n\n      // Negative: 0's after leading 0\n      { input: i32Bits(0b11111111111111111111111111111110), expected: i32(0) },\n      { input: i32Bits(0b11111111111111111111111111111100), expected: i32(1) },\n      { input: i32Bits(0b11111111111111111111111111111000), expected: i32(2) },\n      { input: i32Bits(0b11111111111111111111111111110000), expected: i32(3) },\n      { input: i32Bits(0b11111111111111111111111111100000), expected: i32(4) },\n      { input: i32Bits(0b11111111111111111111111111000000), expected: i32(5) },\n      { input: i32Bits(0b11111111111111111111111110000000), expected: i32(6) },\n      { input: i32Bits(0b11111111111111111111111100000000), expected: i32(7) },\n      { input: i32Bits(0b11111111111111111111111000000000), expected: i32(8) },\n      { input: i32Bits(0b11111111111111111111110000000000), expected: i32(9) },\n      { input: i32Bits(0b11111111111111111111100000000000), expected: i32(10) },\n      { input: i32Bits(0b11111111111111111111000000000000), expected: i32(11) },\n      { input: i32Bits(0b11111111111111111110000000000000), expected: i32(12) },\n      { input: i32Bits(0b11111111111111111100000000000000), expected: i32(13) },\n      { input: i32Bits(0b11111111111111111000000000000000), expected: i32(14) },\n      { input: i32Bits(0b11111111111111110000000000000000), expected: i32(15) },\n      { input: i32Bits(0b11111111111111100000000000000000), expected: i32(16) },\n      { input: i32Bits(0b11111111111111000000000000000000), expected: i32(17) },\n      { input: i32Bits(0b11111111111110000000000000000000), expected: i32(18) },\n      { input: i32Bits(0b11111111111100000000000000000000), expected: i32(19) },\n      { input: i32Bits(0b11111111111000000000000000000000), expected: i32(20) },\n      { input: i32Bits(0b11111111110000000000000000000000), expected: i32(21) },\n      { input: i32Bits(0b11111111100000000000000000000000), expected: i32(22) },\n      { input: i32Bits(0b11111111000000000000000000000000), expected: i32(23) },\n      { input: i32Bits(0b11111110000000000000000000000000), expected: i32(24) },\n      { input: i32Bits(0b11111100000000000000000000000000), expected: i32(25) },\n      { input: i32Bits(0b11111000000000000000000000000000), expected: i32(26) },\n      { input: i32Bits(0b11110000000000000000000000000000), expected: i32(27) },\n      { input: i32Bits(0b11100000000000000000000000000000), expected: i32(28) },\n      { input: i32Bits(0b11000000000000000000000000000000), expected: i32(29) },\n      { input: i32Bits(0b10000000000000000000000000000000), expected: i32(30) },\n\n      // Positive: 1's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000011), expected: i32(1) },\n      { input: i32Bits(0b00000000000000000000000000000111), expected: i32(2) },\n      { input: i32Bits(0b00000000000000000000000000001111), expected: i32(3) },\n      { input: i32Bits(0b00000000000000000000000000011111), expected: i32(4) },\n      { input: i32Bits(0b00000000000000000000000000111111), expected: i32(5) },\n      { input: i32Bits(0b00000000000000000000000001111111), expected: i32(6) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32(7) },\n      { input: i32Bits(0b00000000000000000000000111111111), expected: i32(8) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32(9) },\n      { input: i32Bits(0b00000000000000000000011111111111), expected: i32(10) },\n      { input: i32Bits(0b00000000000000000000111111111111), expected: i32(11) },\n      { input: i32Bits(0b00000000000000000001111111111111), expected: i32(12) },\n      { input: i32Bits(0b00000000000000000011111111111111), expected: i32(13) },\n      { input: i32Bits(0b00000000000000000111111111111111), expected: i32(14) },\n      { input: i32Bits(0b00000000000000001111111111111111), expected: i32(15) },\n      { input: i32Bits(0b00000000000000011111111111111111), expected: i32(16) },\n      { input: i32Bits(0b00000000000000111111111111111111), expected: i32(17) },\n      { input: i32Bits(0b00000000000001111111111111111111), expected: i32(18) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32(19) },\n      { input: i32Bits(0b00000000000111111111111111111111), expected: i32(20) },\n      { input: i32Bits(0b00000000001111111111111111111111), expected: i32(21) },\n      { input: i32Bits(0b00000000011111111111111111111111), expected: i32(22) },\n      { input: i32Bits(0b00000000111111111111111111111111), expected: i32(23) },\n      { input: i32Bits(0b00000001111111111111111111111111), expected: i32(24) },\n      { input: i32Bits(0b00000011111111111111111111111111), expected: i32(25) },\n      { input: i32Bits(0b00000111111111111111111111111111), expected: i32(26) },\n      { input: i32Bits(0b00001111111111111111111111111111), expected: i32(27) },\n      { input: i32Bits(0b00011111111111111111111111111111), expected: i32(28) },\n      { input: i32Bits(0b00111111111111111111111111111111), expected: i32(29) },\n      { input: i32Bits(0b01111111111111111111111111111111), expected: i32(30) },\n\n      // Negative: 1's after leading 0\n      { input: i32Bits(0b11111111111111111111111111111101), expected: i32(1) },\n      { input: i32Bits(0b11111111111111111111111111111011), expected: i32(2) },\n      { input: i32Bits(0b11111111111111111111111111110111), expected: i32(3) },\n      { input: i32Bits(0b11111111111111111111111111101111), expected: i32(4) },\n      { input: i32Bits(0b11111111111111111111111111011111), expected: i32(5) },\n      { input: i32Bits(0b11111111111111111111111110111111), expected: i32(6) },\n      { input: i32Bits(0b11111111111111111111111101111111), expected: i32(7) },\n      { input: i32Bits(0b11111111111111111111111011111111), expected: i32(8) },\n      { input: i32Bits(0b11111111111111111111110111111111), expected: i32(9) },\n      { input: i32Bits(0b11111111111111111111101111111111), expected: i32(10) },\n      { input: i32Bits(0b11111111111111111111011111111111), expected: i32(11) },\n      { input: i32Bits(0b11111111111111111110111111111111), expected: i32(12) },\n      { input: i32Bits(0b11111111111111111101111111111111), expected: i32(13) },\n      { input: i32Bits(0b11111111111111111011111111111111), expected: i32(14) },\n      { input: i32Bits(0b11111111111111110111111111111111), expected: i32(15) },\n      { input: i32Bits(0b11111111111111101111111111111111), expected: i32(16) },\n      { input: i32Bits(0b11111111111111011111111111111111), expected: i32(17) },\n      { input: i32Bits(0b11111111111110111111111111111111), expected: i32(18) },\n      { input: i32Bits(0b11111111111101111111111111111111), expected: i32(19) },\n      { input: i32Bits(0b11111111111011111111111111111111), expected: i32(20) },\n      { input: i32Bits(0b11111111110111111111111111111111), expected: i32(21) },\n      { input: i32Bits(0b11111111101111111111111111111111), expected: i32(22) },\n      { input: i32Bits(0b11111111011111111111111111111111), expected: i32(23) },\n      { input: i32Bits(0b11111110111111111111111111111111), expected: i32(24) },\n      { input: i32Bits(0b11111101111111111111111111111111), expected: i32(25) },\n      { input: i32Bits(0b11111011111111111111111111111111), expected: i32(26) },\n      { input: i32Bits(0b11110111111111111111111111111111), expected: i32(27) },\n      { input: i32Bits(0b11101111111111111111111111111111), expected: i32(28) },\n      { input: i32Bits(0b11011111111111111111111111111111), expected: i32(29) },\n      { input: i32Bits(0b10111111111111111111111111111111), expected: i32(30) },\n\n      // Positive: random after leading 1\n      { input: i32Bits(0b00000000000000000000000000000110), expected: i32(2) },\n      { input: i32Bits(0b00000000000000000000000000001101), expected: i32(3) },\n      { input: i32Bits(0b00000000000000000000000000011101), expected: i32(4) },\n      { input: i32Bits(0b00000000000000000000000000111001), expected: i32(5) },\n      { input: i32Bits(0b00000000000000000000000001101111), expected: i32(6) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32(7) },\n      { input: i32Bits(0b00000000000000000000000111101111), expected: i32(8) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32(9) },\n      { input: i32Bits(0b00000000000000000000011111110001), expected: i32(10) },\n      { input: i32Bits(0b00000000000000000000111011011101), expected: i32(11) },\n      { input: i32Bits(0b00000000000000000001101101111111), expected: i32(12) },\n      { input: i32Bits(0b00000000000000000011111111011111), expected: i32(13) },\n      { input: i32Bits(0b00000000000000000101111001110101), expected: i32(14) },\n      { input: i32Bits(0b00000000000000001101111011110111), expected: i32(15) },\n      { input: i32Bits(0b00000000000000011111111111110011), expected: i32(16) },\n      { input: i32Bits(0b00000000000000111111111110111111), expected: i32(17) },\n      { input: i32Bits(0b00000000000001111111011111111111), expected: i32(18) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32(19) },\n      { input: i32Bits(0b00000000000111110101011110111111), expected: i32(20) },\n      { input: i32Bits(0b00000000001111101111111111110111), expected: i32(21) },\n      { input: i32Bits(0b00000000011111111111010000101111), expected: i32(22) },\n      { input: i32Bits(0b00000000111111111111001111111011), expected: i32(23) },\n      { input: i32Bits(0b00000001111111011111101111111111), expected: i32(24) },\n      { input: i32Bits(0b00000011101011111011110111111011), expected: i32(25) },\n      { input: i32Bits(0b00000111111110111111111111111111), expected: i32(26) },\n      { input: i32Bits(0b00001111000000011011011110111111), expected: i32(27) },\n      { input: i32Bits(0b00011110101111011111111111111111), expected: i32(28) },\n      { input: i32Bits(0b00110110111111100111111110111101), expected: i32(29) },\n      { input: i32Bits(0b01010111111101111111011111011111), expected: i32(30) },\n\n      // Negative: random after leading 0\n      { input: i32Bits(0b11111111111111111111111111111010), expected: i32(2) },\n      { input: i32Bits(0b11111111111111111111111111110110), expected: i32(3) },\n      { input: i32Bits(0b11111111111111111111111111101101), expected: i32(4) },\n      { input: i32Bits(0b11111111111111111111111111011101), expected: i32(5) },\n      { input: i32Bits(0b11111111111111111111111110111001), expected: i32(6) },\n      { input: i32Bits(0b11111111111111111111111101101111), expected: i32(7) },\n      { input: i32Bits(0b11111111111111111111111011111111), expected: i32(8) },\n      { input: i32Bits(0b11111111111111111111110111101111), expected: i32(9) },\n      { input: i32Bits(0b11111111111111111111101111111111), expected: i32(10) },\n      { input: i32Bits(0b11111111111111111111011111110001), expected: i32(11) },\n      { input: i32Bits(0b11111111111111111110111011011101), expected: i32(12) },\n      { input: i32Bits(0b11111111111111111101101101111111), expected: i32(13) },\n      { input: i32Bits(0b11111111111111111011111111011111), expected: i32(14) },\n      { input: i32Bits(0b11111111111111110101111001110101), expected: i32(15) },\n      { input: i32Bits(0b11111111111111101101111011110111), expected: i32(16) },\n      { input: i32Bits(0b11111111111111011111111111110011), expected: i32(17) },\n      { input: i32Bits(0b11111111111110111111111110111111), expected: i32(18) },\n      { input: i32Bits(0b11111111111101111111011111111111), expected: i32(19) },\n      { input: i32Bits(0b11111111111011111111111111111111), expected: i32(20) },\n      { input: i32Bits(0b11111111110111110101011110111111), expected: i32(21) },\n      { input: i32Bits(0b11111111101111101111111111110111), expected: i32(22) },\n      { input: i32Bits(0b11111111011111111111010000101111), expected: i32(23) },\n      { input: i32Bits(0b11111110111111111111001111111011), expected: i32(24) },\n      { input: i32Bits(0b11111101111111011111101111111111), expected: i32(25) },\n      { input: i32Bits(0b11111011101011111011110111111011), expected: i32(26) },\n      { input: i32Bits(0b11110111111110111111111111111111), expected: i32(27) },\n      { input: i32Bits(0b11101111000000011011011110111111), expected: i32(28) },\n      { input: i32Bits(0b11011110101111011111111111111111), expected: i32(29) },\n      { input: i32Bits(0b10110110111111100111111110111101), expected: i32(30) },\n    ]);\n  });\n"],"mappings":"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"}