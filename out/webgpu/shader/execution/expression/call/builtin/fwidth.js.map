{"version":3,"file":"fwidth.js","names":["assert","anyOf","Type","align","toComparator","runFWidthTest","t","cases","builtin","non_uniform_discard","vectorize","vectorWidth","undefined","valueStride","conversionFromInput","conversionToOutput","kUniformBufferSize","kNumCasesPerUniformBuffer","code","module","device","createShaderModule","pipeline","createRenderPipeline","layout","vertex","fragment","targets","format","width","height","limits","maxTextureDimension2D","colorAttachment","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","bytesPerRow","results","encoder","createCommandEncoder","c","length","inputBuffer","createBufferTracked","GPUBufferUsage","UNIFORM","mappedAtCreation","valuesData","Uint8Array","getMappedRange","i","v","index","inputs","input","x","copyTo","unmap","group","createBindGroup","entries","binding","resource","buffer","getBindGroupLayout","pass","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","setPipeline","setBindGroup","draw","end","outputBuffer","COPY_DST","push","copyTextureToBuffer","texture","queue","submit","finish","forEach","groupNdx","expectGPUBufferValuesPassCheck","outputData","base","numCases","Math","min","numQuads","caseNdx","tx","ty","result","f32","read","expected","endsWith","cmp","compare","matched","Error","join","type","typedLength"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/fwidth.ts"],"sourcesContent":["import { assert } from '../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf } from '../../../../../util/compare.js';\nimport { Type, Value } from '../../../../../util/conversion.js';\nimport { FPInterval } from '../../../../../util/floating_point.js';\nimport { align } from '../../../../../util/math.js';\nimport { Case } from '../../case.js';\nimport { toComparator } from '../../expectation.js';\n\n/**\n * Run a test for a fwidth builtin function.\n * @param t the GPUTest\n * @param cases list of test cases to run\n * @param builtin the builtin function to test\n * @param non_uniform_discard if true, one of each pair of invocations will discard\n * @param vectorize if defined, the vector width to use (2, 3, or 4)\n */\nexport function runFWidthTest(\n  t: GPUTest,\n  cases: Case[],\n  builtin: string,\n  non_uniform_discard: boolean,\n  vectorize?: number\n) {\n  ////////////////////////////////////////////////////////////////\n  // The four input values for a given case are distributed to across the invocations in a quad.\n  // We will populate a uniform buffer with these input values laid out sequentially:\n  // [ case0_input0, case0_input1, case0_input2, case0_input3, ...]\n  //\n  // The render pipeline a 512x2 texture. In the fragment shader, every 2x2 texels is one test case.\n  // The results are the output from the fragment shader.\n  //\n  // Consider two draw calls that test 2 cases (c0, c1).\n  //\n  // The mapping from fragment position to case input is:\n  // Quad 0: | c0_i0 | c0_i1 |     Quad 1: | c1_i0 | c1_i1 |\n  //         | c0_i2 | c0_i3 |             | c1_i2 | c1_i3 |\n  //\n  ////////////////////////////////////////////////////////////////\n\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  let vectorWidth = 1;\n  if (vectorize !== undefined) {\n    vectorWidth = vectorize;\n  }\n\n  // Determine the WGSL type to use in the shader, and the stride in bytes between values.\n  const valueStride = 16;\n  let conversionFromInput = 'input.x';\n  let conversionToOutput = `vec4f(v, 0, 0, 0)`;\n  if (vectorize) {\n    switch (vectorize) {\n      case 2:\n        conversionFromInput = 'input.xy';\n        conversionToOutput = 'vec4f(v, 0, 0)';\n        break;\n      case 3:\n        conversionFromInput = 'input.xyz';\n        conversionToOutput = 'vec4f(v, 0)';\n        break;\n      case 4:\n        conversionFromInput = 'input';\n        conversionToOutput = 'v';\n        break;\n    }\n  }\n\n  const kUniformBufferSize = 16384; // min supported by compat mode.\n  const kNumCasesPerUniformBuffer = kUniformBufferSize / 64;\n\n  // Define a vertex shader that draws a triangle over the full viewport, and a fragment shader that\n  // calls the fwidth builtin with a value loaded from that fragment's index into the storage\n  // buffer (determined using the quad index and fragment position, as described above).\n  const code = `\n@vertex\nfn vert(@builtin(vertex_index) vertex_idx: u32) -> @builtin(position) vec4f {\n  const kVertices = array(\n    vec2f( 3, -1),\n    vec2f(-1,  3),\n    vec2f(-1, -1),\n  );\n  return vec4(kVertices[vertex_idx], 0, 1);\n}\n\n@group(0) @binding(0) var<uniform> inputs : array<vec4f, ${kNumCasesPerUniformBuffer * 4}>;\n\n@fragment\nfn frag(@builtin(position) position: vec4f) -> @location(0) vec4u {\n  let t = vec2u(position.xy);\n  let inv_idx = t.x % 2 + (t.y % 2) * 2;\n  let q = t / 2;\n  let quad_idx = q.y * 256 + q.x;\n  let index = quad_idx * 4 + inv_idx;\n  let input = inputs[index];\n  ${non_uniform_discard ? 'if inv_idx == 0 { discard; }' : ''}\n  let v = ${builtin}(${conversionFromInput});\n  return bitcast<vec4u>(${conversionToOutput});\n}\n`;\n\n  // Create the render pipeline.\n  const module = t.device.createShaderModule({ code });\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module },\n    fragment: { module, targets: [{ format: 'rgba32uint' }] },\n  });\n\n  // Create a texture to use as a color attachment to receive the results;\n  const width = kNumCasesPerUniformBuffer * 2;\n  const height = 2;\n  // note: We could limit it to this size and increase height but kNumCasesPerUniformBuffer is limited to 256\n  // because we can't fit more into a single uniform buffer in compat.\n  assert(width < t.device.limits.maxTextureDimension2D);\n  const colorAttachment = t.createTextureTracked({\n    size: [width, height],\n    format: 'rgba32uint',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n  });\n  const bytesPerRow = align(width * 16, 256);\n\n  const results = [];\n  const encoder = t.device.createCommandEncoder();\n  for (let c = 0; c < cases.length; c += kNumCasesPerUniformBuffer) {\n    // Create uniform buffer to hold the inputs.\n    const inputBuffer = t.createBufferTracked({\n      size: kUniformBufferSize,\n      usage: GPUBufferUsage.UNIFORM,\n      mappedAtCreation: true,\n    });\n    const valuesData = new Uint8Array(inputBuffer.getMappedRange());\n\n    // Populate the input uniform buffer with case input values.\n    for (let i = 0; i < kNumCasesPerUniformBuffer / vectorWidth; i++) {\n      for (let v = 0; v < vectorWidth; v++) {\n        const index = c + i * vectorWidth + v;\n        if (index >= cases.length) {\n          break;\n        }\n        const inputs = cases[index].input as ReadonlyArray<Value>;\n        for (let x = 0; x < 4; x++) {\n          inputs[x].copyTo(valuesData, (i * 4 + x) * valueStride + v * 4);\n        }\n      }\n    }\n    inputBuffer.unmap();\n\n    // Create a bind group for the input buffer.\n    const group = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: { buffer: inputBuffer } }],\n      layout: pipeline.getBindGroupLayout(0),\n    });\n\n    // Submit the render pass to the device.\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, group);\n    pass.draw(3);\n    pass.end();\n\n    // Create buffer to hold the outputs.\n    const outputBuffer = t.createBufferTracked({\n      size: bytesPerRow * height,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\n    });\n    results.push(outputBuffer);\n\n    // Copy the texture to the output buffer\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: outputBuffer, bytesPerRow },\n      [colorAttachment.width, colorAttachment.height]\n    );\n  }\n  t.queue.submit([encoder.finish()]);\n\n  results.forEach((outputBuffer, groupNdx) => {\n    // Check the outputs match the expected results.\n    t.expectGPUBufferValuesPassCheck(\n      outputBuffer,\n      (outputData: Uint8Array) => {\n        const base = groupNdx * kNumCasesPerUniformBuffer;\n        const numCases = Math.min(kNumCasesPerUniformBuffer, cases.length - base);\n        const numQuads = numCases / vectorWidth;\n        for (let i = 0; i < numQuads; i++) {\n          for (let v = 0; v < vectorWidth; v++) {\n            const caseNdx = base + i * vectorWidth + v;\n            if (caseNdx >= cases.length) {\n              break;\n            }\n            const c = cases[caseNdx];\n\n            for (let x = 0; x < 4; x++) {\n              if (non_uniform_discard && x === 0) {\n                continue;\n              }\n\n              const tx = x % 2;\n              const ty = (x / 2) | 0;\n              const index = ty * bytesPerRow + i * 32 + tx * 16 + v * 4;\n              const result = Type.f32.read(outputData, index);\n\n              let expected = c.expected;\n              if (builtin.endsWith('Fine')) {\n                expected = toComparator((expected as FPInterval[])[x]);\n              } else {\n                expected = anyOf(...(expected as FPInterval[]));\n              }\n\n              const cmp = expected.compare(result);\n              if (!cmp.matched) {\n                return new Error(`\n     caseNdx: ${caseNdx} v: ${v} x: ${x}\n      inputs: (${(c.input as Value[]).join(', ')})\n    expected: ${cmp.expected}\n\n    returned: ${result}`);\n              }\n            }\n          }\n        }\n        return undefined;\n      },\n      {\n        type: Uint8Array,\n        typedLength: outputBuffer.size,\n      }\n    );\n  });\n}\n"],"mappings":"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"}