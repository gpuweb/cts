{"version":3,"file":"textureNumLevels.spec.js","names":["description","makeTestGroup","getTextureDimensionFromView","kShaderStages","kSampleTypeInfo","WGSLTextureQueryTest","getLevelSettingsAndExpected","viewType","mipLevelCount","baseMipLevel","expected","kTextureTypeToViewDimension","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","texture_type","view_type","fn","stage","sampled_type","format","skipIfTextureViewDimensionNotSupported","viewDimension","dimension","isCube","includes","width","height","depthOrArrayLayers","mipCount","texture","createTextureTracked","isCompatibility","textureBindingViewDimension","usage","GPUTextureUsage","TEXTURE_BINDING","size","code","viewDescription","executeAndExpectResult"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumLevels.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureNumLevels' builtin function\n\nReturns the number of mip levels of a texture.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { getTextureDimensionFromView } from '../../../../../util/texture/base.js';\nimport { kShaderStages } from '../../../../validation/decl/util.js';\n\nimport { kSampleTypeInfo, WGSLTextureQueryTest } from './texture_utils.js';\n\nfunction getLevelSettingsAndExpected(viewType: 'full' | 'partial', mipLevelCount: number) {\n  return viewType === 'partial'\n    ? {\n        baseMipLevel: 1,\n        mipLevelCount: 2,\n        expected: [2],\n      }\n    : {\n        baseMipLevel: 0,\n        mipLevelCount,\n        expected: [mipLevelCount],\n      };\n}\n\nconst kTextureTypeToViewDimension = {\n  texture_1d: '1d',\n  texture_2d: '2d',\n  texture_2d_array: '2d-array',\n  texture_3d: '3d',\n  texture_cube: 'cube',\n  texture_cube_array: 'cube-array',\n  texture_depth_2d: '2d',\n  texture_depth_2d_array: '2d-array',\n  texture_depth_cube: 'cube',\n  texture_depth_cube_array: 'cube-array',\n} as const;\n\nexport const g = makeTestGroup(WGSLTextureQueryTest);\n\ng.test('sampled')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlevels')\n  .desc(\n    `\nT, a sampled type.\n\nfn textureNumLevels(t: texture_1d<T>) -> u32\nfn textureNumLevels(t: texture_2d<T>) -> u32\nfn textureNumLevels(t: texture_2d_array<T>) -> u32\nfn textureNumLevels(t: texture_3d<T>) -> u32\nfn textureNumLevels(t: texture_cube<T>) -> u32\nfn textureNumLevels(t: texture_cube_array<T>) -> u32\n\nParameters\n * t The sampled array texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', [\n        'texture_1d',\n        'texture_2d',\n        'texture_2d_array',\n        'texture_3d',\n        'texture_cube',\n        'texture_cube_array',\n      ] as const)\n      .beginSubcases()\n      .combine('stage', kShaderStages)\n      .combine('sampled_type', ['f32', 'i32', 'u32'] as const)\n      .combine('view_type', ['full', 'partial'] as const)\n      // 1d textures can't have mipLevelCount > 0\n      .filter(t => t.texture_type !== 'texture_1d' || t.view_type !== 'partial')\n  )\n  .fn(t => {\n    const { stage, texture_type, sampled_type, view_type } = t.params;\n    const { format } = kSampleTypeInfo[sampled_type];\n    t.skipIfTextureViewDimensionNotSupported(kTextureTypeToViewDimension[t.params.texture_type]);\n\n    const viewDimension = kTextureTypeToViewDimension[texture_type];\n    const dimension = getTextureDimensionFromView(viewDimension);\n    const isCube = texture_type.includes('cube');\n    const width = 64;\n    const height = dimension === '1d' ? 1 : width;\n    const depthOrArrayLayers = isCube ? 6 : 1;\n    const mipCount = dimension === '1d' ? 1 : 4;\n    const texture = t.createTextureTracked({\n      format,\n      dimension,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      size: {\n        width,\n        height,\n        depthOrArrayLayers,\n      },\n      mipLevelCount: mipCount,\n    });\n\n    const code = `\n@group(0) @binding(0) var t: ${texture_type}<${sampled_type}>;\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumLevels(t);\n}\n    `;\n\n    const { baseMipLevel, mipLevelCount, expected } = getLevelSettingsAndExpected(\n      view_type,\n      mipCount\n    );\n    const viewDescription = {\n      dimension: viewDimension,\n      baseMipLevel,\n      mipLevelCount,\n    };\n\n    t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n  });\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlevels')\n  .desc(\n    `\nfn textureNumLevels(t: texture_depth_2d) -> u32\nfn textureNumLevels(t: texture_depth_2d_array) -> u32\nfn textureNumLevels(t: texture_depth_cube) -> u32\nfn textureNumLevels(t: texture_depth_cube_array) -> u32\n\nParameters\n * t The depth array texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', [\n        'texture_depth_2d',\n        'texture_depth_2d_array',\n        'texture_depth_cube',\n        'texture_depth_cube_array',\n      ] as const)\n      .combine('view_type', ['full', 'partial'] as const)\n      .beginSubcases()\n      .combine('stage', kShaderStages)\n  )\n  .fn(t => {\n    const { stage, texture_type, view_type } = t.params;\n    t.skipIfTextureViewDimensionNotSupported(kTextureTypeToViewDimension[t.params.texture_type]);\n\n    const viewDimension = kTextureTypeToViewDimension[texture_type];\n    const dimension = getTextureDimensionFromView(viewDimension);\n    const isCube = texture_type.includes('cube');\n    const width = 64;\n    const height = dimension === '1d' ? 1 : width;\n    const depthOrArrayLayers = isCube ? 6 : 1;\n    const mipCount = dimension === '1d' ? 1 : 4;\n    const texture = t.createTextureTracked({\n      format: 'depth32float',\n      dimension,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      size: {\n        width,\n        height,\n        depthOrArrayLayers,\n      },\n      mipLevelCount: mipCount,\n    });\n\n    const code = `\n@group(0) @binding(0) var t: ${texture_type};\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumLevels(t);\n}\n    `;\n\n    const { baseMipLevel, mipLevelCount, expected } = getLevelSettingsAndExpected(\n      view_type,\n      mipCount\n    );\n    const viewDescription = {\n      dimension: viewDimension,\n      baseMipLevel,\n      mipLevelCount,\n    };\n\n    t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n  });\n"],"mappings":"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"}