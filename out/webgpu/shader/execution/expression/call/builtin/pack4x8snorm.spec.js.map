{"version":3,"file":"pack4x8snorm.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","kValue","f32","pack4x8snorm","u32","vec4","Type","quantizeToF32","vectorF32Range","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","vals","vals_f32","Array","idx","input","expected","normalizeF32","n","positive","max","cases","flatMap","v","map","vec4f"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack4x8snorm.spec.ts"],"sourcesContent":["export const description = `\nConverts four normalized floating point values to 8-bit signed integers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to an 8-bit twos complement integer value\n⌊ 0.5 + 127 × min(1, max(-1, e[i])) ⌋ which is then placed in\nbits 8 × i through 8 × i + 7 of the result.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { f32, pack4x8snorm, ScalarValue, u32, vec4, Type } from '../../../../../util/conversion.js';\nimport { quantizeToF32, vectorF32Range } from '../../../../../util/math.js';\nimport { Case } from '../../case.js';\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('pack')\n  .specURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions')\n  .desc(\n    `\n@const fn pack4x8snorm(e: vec4<f32>) -> u32\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (vals: [number, number, number, number]): Case => {\n      const vals_f32 = new Array<ScalarValue>(4) as [\n        ScalarValue,\n        ScalarValue,\n        ScalarValue,\n        ScalarValue,\n      ];\n      for (const idx in vals) {\n        vals[idx] = quantizeToF32(vals[idx]);\n        vals_f32[idx] = f32(vals[idx]);\n      }\n\n      return { input: [vec4(...vals_f32)], expected: u32(pack4x8snorm(...vals)) };\n    };\n\n    // Returns a value normalized to [-1, 1].\n    const normalizeF32 = (n: number): number => {\n      return n / kValue.f32.positive.max;\n    };\n\n    const cases: Array<Case> = vectorF32Range(4).flatMap(v => {\n      return [\n        makeCase(v as [number, number, number, number]),\n        makeCase(v.map(normalizeF32) as [number, number, number, number]),\n      ];\n    });\n\n    await run(t, builtin('pack4x8snorm'), [Type.vec4f], Type.u32, t.params, cases);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,2BAA2B,QAAQ,4BAA4B;AACxE,SAASC,MAAM,QAAQ,kCAAkC;AACzD,SAASC,GAAG,EAAEC,YAAY,EAAeC,GAAG,EAAEC,IAAI,EAAEC,IAAI,QAAQ,mCAAmC;AACnG,SAASC,aAAa,EAAEC,cAAc,QAAQ,6BAA6B;;AAE3E,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGb,aAAa,CAACC,2BAA2B,CAAC;;AAE3DY,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AACXC,OAAO,CAAC,oDAAoD,CAAC;AAC7DC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACtDU,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,QAAQ,GAAGA,CAACC,IAAsC,KAAW;IACjE,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAAc,CAAC,CAKxC;;;;;;IACD,KAAK,MAAMC,GAAG,IAAIH,IAAI,EAAE;MACtBA,IAAI,CAACG,GAAG,CAAC,GAAGlB,aAAa,CAACe,IAAI,CAACG,GAAG,CAAC,CAAC;MACpCF,QAAQ,CAACE,GAAG,CAAC,GAAGvB,GAAG,CAACoB,IAAI,CAACG,GAAG,CAAC,CAAC;IAChC;;IAEA,OAAO,EAAEC,KAAK,EAAE,CAACrB,IAAI,CAAC,GAAGkB,QAAQ,CAAC,CAAC,EAAEI,QAAQ,EAAEvB,GAAG,CAACD,YAAY,CAAC,GAAGmB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7E,CAAC;;EAED;EACA,MAAMM,YAAY,GAAGA,CAACC,CAAS,KAAa;IAC1C,OAAOA,CAAC,GAAG5B,MAAM,CAACC,GAAG,CAAC4B,QAAQ,CAACC,GAAG;EACpC,CAAC;;EAED,MAAMC,KAAkB,GAAGxB,cAAc,CAAC,CAAC,CAAC,CAACyB,OAAO,CAAC,CAAAC,CAAC,KAAI;IACxD,OAAO;IACLb,QAAQ,CAACa,CAAqC,CAAC;IAC/Cb,QAAQ,CAACa,CAAC,CAACC,GAAG,CAACP,YAAY,CAAqC,CAAC,CAClE;;EACH,CAAC,CAAC;;EAEF,MAAMlB,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,cAAc,CAAC,EAAE,CAACL,IAAI,CAAC8B,KAAK,CAAC,EAAE9B,IAAI,CAACF,GAAG,EAAEgB,CAAC,CAACJ,MAAM,EAAEgB,KAAK,CAAC;AAChF,CAAC,CAAC"}