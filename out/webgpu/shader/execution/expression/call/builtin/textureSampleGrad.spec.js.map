{"version":3,"file":"textureSampleGrad.spec.js","names":["description","makeTestGroup","isTextureFormatPossiblyFilterableAsTextureF32","kAllTextureFormats","AllFeaturesMaxLimitsGPUTest","appendComponentTypeForFormatToTextureType","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","getTextureTypeForTextureViewDimension","isPotentiallyFilterableAndFillable","kCubeSamplePointMethods","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","skipIfTextureFormatNotSupportedOrNeedsFilteringAndIsUnfilterable","g","test","specURL","desc","params","u","combine","filter","t","format","filt","beginSubcases","fn","stage","samplePoints","modeU","modeV","minFilter","offset","width","height","minSize","minBlocks","descriptor","size","mipLevelCount","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","grad","hashInputs","map","coords","ddx","ddy","builtin","coordType","textureType","viewDescriptor","results","res","expectOK","dim","viewDimension","modeW","skipIfTextureFormatAndViewDimensionNotCompatible","dimension","isCompatibility","textureBindingViewDimension","addressModeW","A","depthOrArrayLayers","arrayIndex","num","type","arrayIndexType","mode","skipIfTextureViewDimensionNotSupported"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleGrad.spec.ts"],"sourcesContent":["export const description = `\nSamples a texture using explicit gradients.\n\n- TODO: test cube maps with more than one mip level.\n- TODO: Test un-encodable formats.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  isTextureFormatPossiblyFilterableAsTextureF32,\n  kAllTextureFormats,\n} from '../../../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\n\nimport {\n  appendComponentTypeForFormatToTextureType,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  getTextureTypeForTextureViewDimension,\n  isPotentiallyFilterableAndFillable,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n  SamplePointMethods,\n  skipIfTextureFormatNotSupportedOrNeedsFilteringAndIsUnfilterable,\n  TextureCall,\n  vec2,\n  vec3,\n} from './texture_utils.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isTextureFormatPossiblyFilterableAsTextureF32(t.format))\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, modeU, modeV, filt: minFilter, offset } = t.params;\n    skipIfTextureFormatNotSupportedOrNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      grad: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, modeU, modeV, minFilter, offset],\n    }).map(({ coords, offset, ddx, ddy }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        offset,\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', format);\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('dim', ['3d', 'cube'] as const)\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isTextureFormatPossiblyFilterableAsTextureF32(t.format))\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('modeW', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .filter(t => t.dim !== 'cube' || t.offset !== true)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .filter(t => t.samplePoints !== 'cube-edges' || t.dim !== '3d')\n  )\n  .fn(async t => {\n    const {\n      format,\n      dim: viewDimension,\n      stage,\n      samplePoints,\n      modeU,\n      modeV,\n      modeW,\n      filt: minFilter,\n      offset,\n    } = t.params;\n    skipIfTextureFormatNotSupportedOrNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n    t.skipIfTextureFormatAndViewDimensionNotCompatible(format, viewDimension);\n\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: viewDimension === '3d' ? '3d' : '2d',\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: viewDimension === '3d' ? 3 : 1,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      addressModeW: kShortAddressModeToAddressMode[modeW],\n      minFilter,\n      magFilter: minFilter,\n    };\n\n    const hashInputs = [\n      format,\n      viewDimension,\n      samplePoints,\n      modeU,\n      modeV,\n      modeW,\n      minFilter,\n      offset,\n    ];\n    const calls: TextureCall<vec3>[] = (\n      viewDimension === '3d'\n        ? generateTextureBuiltinInputs3D(50, {\n            method: samplePoints as SamplePointMethods,\n            sampler,\n            descriptor,\n            grad: true,\n            offset,\n            hashInputs,\n          })\n        : generateSamplePointsCube(50, {\n            method: samplePoints,\n            sampler,\n            descriptor,\n            grad: true,\n            hashInputs,\n          })\n    ).map(({ coords, offset, ddx, ddy }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        offset,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isTextureFormatPossiblyFilterableAsTextureF32(t.format))\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .fn(async t => {\n    const {\n      format,\n      stage,\n      samplePoints,\n      A,\n      modeU,\n      modeV,\n      filt: minFilter,\n      offset,\n      depthOrArrayLayers,\n    } = t.params;\n    skipIfTextureFormatNotSupportedOrNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      grad: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, A, modeU, modeV, minFilter, offset],\n    }).map(({ coords, ddx, ddy, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = 'texture_2d_array<f32>';\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isTextureFormatPossiblyFilterableAsTextureF32(t.format))\n      .combine('mode', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, A, mode, filt: minFilter } = t.params;\n    skipIfTextureFormatNotSupportedOrNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      addressModeW: kShortAddressModeToAddressMode[mode],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      grad: true,\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [stage, format, viewDimension, A, samplePoints, mode, minFilter],\n    }).map(({ coords, ddx, ddy, arrayIndex }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}