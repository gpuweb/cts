{"version":3,"file":"textureSampleGrad.spec.js","names":["description","makeTestGroup","isFilterableAsTextureF32","kAllTextureFormats","appendComponentTypeForFormatToTextureType","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","getTextureTypeForTextureViewDimension","isPotentiallyFilterableAndFillable","isSupportedViewFormatCombo","kCubeSamplePointMethods","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","skipIfNeedsFilteringAndIsUnfilterable","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","WGSLTextureSampleTest","g","test","specURL","desc","params","u","combine","filter","t","format","filt","beginSubcases","beforeAllSubcases","fn","stage","samplePoints","modeU","modeV","minFilter","offset","width","height","minSize","minBlocks","descriptor","size","mipLevelCount","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","grad","hashInputs","map","coords","ddx","ddy","builtin","coordType","textureType","viewDescriptor","results","res","expectOK","dim","viewDimension","modeW","dimension","isCompatibility","textureBindingViewDimension","addressModeW","A","depthOrArrayLayers","arrayIndex","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported","mode"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleGrad.spec.ts"],"sourcesContent":["export const description = `\nSamples a texture using explicit gradients.\n\n- TODO: test cube maps with more than one mip level.\n- TODO: Test un-encodable formats.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { isFilterableAsTextureF32, kAllTextureFormats } from '../../../../../format_info.js';\n\nimport {\n  appendComponentTypeForFormatToTextureType,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  getTextureTypeForTextureViewDimension,\n  isPotentiallyFilterableAndFillable,\n  isSupportedViewFormatCombo,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n  SamplePointMethods,\n  skipIfNeedsFilteringAndIsUnfilterable,\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable,\n  TextureCall,\n  vec2,\n  vec3,\n  WGSLTextureSampleTest,\n} from './texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isFilterableAsTextureF32(t.format))\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, modeU, modeV, filt: minFilter, offset } = t.params;\n    skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      grad: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, modeU, modeV, minFilter, offset],\n    }).map(({ coords, offset, ddx, ddy }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        offset,\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', format);\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('dim', ['3d', 'cube'] as const)\n      .filter(t => isSupportedViewFormatCombo(t.format, t.dim))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isFilterableAsTextureF32(t.format))\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('modeW', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .filter(t => t.dim !== 'cube' || t.offset !== true)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .filter(t => t.samplePoints !== 'cube-edges' || t.dim !== '3d')\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const {\n      format,\n      dim: viewDimension,\n      stage,\n      samplePoints,\n      modeU,\n      modeV,\n      modeW,\n      filt: minFilter,\n      offset,\n    } = t.params;\n    skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: viewDimension === '3d' ? '3d' : '2d',\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: viewDimension === '3d' ? 3 : 1,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      addressModeW: kShortAddressModeToAddressMode[modeW],\n      minFilter,\n      magFilter: minFilter,\n    };\n\n    const hashInputs = [\n      format,\n      viewDimension,\n      samplePoints,\n      modeU,\n      modeV,\n      modeW,\n      minFilter,\n      offset,\n    ];\n    const calls: TextureCall<vec3>[] = (\n      viewDimension === '3d'\n        ? generateTextureBuiltinInputs3D(50, {\n            method: samplePoints as SamplePointMethods,\n            sampler,\n            descriptor,\n            grad: true,\n            offset,\n            hashInputs,\n          })\n        : generateSamplePointsCube(50, {\n            method: samplePoints,\n            sampler,\n            descriptor,\n            grad: true,\n            hashInputs,\n          })\n    ).map(({ coords, offset, ddx, ddy }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        offset,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isFilterableAsTextureF32(t.format))\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const {\n      format,\n      stage,\n      samplePoints,\n      A,\n      modeU,\n      modeV,\n      filt: minFilter,\n      offset,\n      depthOrArrayLayers,\n    } = t.params;\n    skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      grad: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, A, modeU, modeV, minFilter, offset],\n    }).map(({ coords, ddx, ddy, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = 'texture_2d_array<f32>';\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .filter(t => t.filt === 'nearest' || isFilterableAsTextureF32(t.format))\n      .combine('mode', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, A, mode, filt: minFilter } = t.params;\n    skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      addressModeW: kShortAddressModeToAddressMode[mode],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      grad: true,\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [stage, format, viewDimension, A, samplePoints, mode, minFilter],\n    }).map(({ coords, ddx, ddy, arrayIndex }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}