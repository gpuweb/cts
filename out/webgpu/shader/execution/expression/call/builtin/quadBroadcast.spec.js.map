{"version":3,"file":"quadBroadcast.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","kConcreteNumericScalarsAndVectors","VectorType","kWGSizes","kDataSentinel","kPredicateCases","runComputeTest","SubgroupTest","kFramebufferSizes","runFragmentTest","generateTypedInputs","getUintsPerFramebuffer","g","kTypes","checkDataTypes","metadata","output","input","broadcast","type","requiresF16","expectIdx","Math","floor","expectShift","expect","i","index","shift","res","Error","uints","width","j","undefined","test","desc","params","u","combine","beginSubcases","fn","t","wgSize","skipIfDeviceDoesNotHaveFeature","enables","wgsl","toString","id","inputData","uintsPerOutput","checkBroadcastCompute","filter","trunc","bound","length","subgroup_id","size","quad_id","quad","other_id","other_quad_id","other_quad_index","other_subgroup_id","wgThreads","Uint32Array","predicate","testcase","cond","checkFragment","data","format","height","uintsPerRow","uintsPerTexel","coordToIndex","row","col","offset","row_is_odd","col_is_odd","max_row","max_col","expect_row","expect_col","row_broadcast","col_broadcast","combineWithParams","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quadBroadcast.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for quadBroadcast.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n  Type,\n  VectorType,\n} from '../../../../../util/conversion.js';\n\nimport {\n  kWGSizes,\n  kDataSentinel,\n  kPredicateCases,\n  runComputeTest,\n  SubgroupTest,\n  kFramebufferSizes,\n  runFragmentTest,\n  generateTypedInputs,\n  getUintsPerFramebuffer,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\n/**\n * Checks results from data types test\n *\n * The output is expected to match the input values corresponding to the\n * id being broadcast (assuming a linear mapping).\n * @param metadata An unused parameter\n * @param output The output data\n * @param input The input data\n * @param broadcast The id being broadcast\n * @param type The data type being tested\n */\nfunction checkDataTypes(\n  metadata: Uint32Array, // unused\n  output: Uint32Array,\n  input: Uint32Array,\n  broadcast: number,\n  type: Type\n): Error | undefined {\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    const expectIdx = Math.floor(broadcast / 2);\n    const expectShift = broadcast % 2 === 1;\n    let expect = input[expectIdx];\n    if (expectShift) {\n      expect >>= 16;\n    }\n    expect &= 0xffff;\n\n    for (let i = 0; i < 4; i++) {\n      const index = Math.floor(i / 2);\n      const shift = i % 2 === 1;\n      let res = output[index];\n      if (shift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[broadcast * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${i * uints + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types')\n  .desc('Test allowed data types')\n  .params(u =>\n    u\n      .combine('type', keysOf(kTypes))\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .fn(async t => {\n    const wgSize = [4, 1, 1];\n    const type = kTypes[t.params.type];\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    if (type.requiresF16()) {\n      t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    }\n\n    let enables = `enable subgroups;\\n`;\n    if (type.requiresF16()) {\n      enables += `enable f16;`;\n    }\n    const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = quadBroadcast(input[id], ${t.params.id});\n}`;\n\n    const inputData = generateTypedInputs(type);\n    let uintsPerOutput = 1;\n    if (type instanceof VectorType) {\n      uintsPerOutput = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uintsPerOutput = Math.floor(uintsPerOutput / 2);\n      }\n    }\n    await runComputeTest(\n      t,\n      wgsl,\n      wgSize,\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkDataTypes(metadata, output, inputData, t.params.id, type);\n      }\n    );\n  });\n\n/**\n * Checks quadBroadcast in compute shaders\n *\n * Assumes that quads are linear within a subgroup.\n *\n * @param metadata An array of integers divided as follows:\n *                 * first half subgroup invocation ids\n *                 * second half subgroup sizes\n * @param output An array of integers divided as follows:\n *               * first half results of quad broadcast\n *               * second half generated unique subgroup ids\n * @param broadcast The id being broadcast in the range [0, 3]\n * @param filter A functor to filter active invocations\n */\nfunction checkBroadcastCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  broadcast: number,\n  filter: (id: number, size: number) => boolean\n): Error | undefined {\n  assert(broadcast === Math.trunc(broadcast));\n  assert(broadcast >= 0 && broadcast <= 3);\n\n  const bound = Math.floor(output.length / 2);\n  for (let i = 0; i < bound; i++) {\n    const subgroup_id = output[bound + i];\n    const id = metadata[i];\n    const size = metadata[bound + i];\n    if (!filter(id, size)) {\n      if (output[i] !== kDataSentinel) {\n        return new Error(`Unexpected write for invocation ${i}`);\n      }\n      continue;\n    }\n\n    const quad_id = Math.floor(id / 4);\n    const quad = [-1, -1, -1, -1];\n    for (let j = 0; j < bound; j++) {\n      const other_id = metadata[j];\n      const other_quad_id = Math.floor(other_id / 4);\n      const other_quad_index = other_id % 4;\n      const other_subgroup_id = output[bound + j];\n      if (other_subgroup_id === subgroup_id && quad_id === other_quad_id) {\n        quad[other_quad_index] = j;\n      }\n    }\n    for (let j = 0; j < 4; j++) {\n      if (quad[j] === -1) {\n        return new Error(`Invocation ${i}: missing quad index ${j}`);\n      }\n    }\n    for (let j = 0; j < 4; j++) {\n      if (output[quad[j]] !== output[quad[broadcast]]) {\n        return new Error(`Incorrect result for quad: base invocation = ${\n          quad[broadcast]\n        }, invocation = ${quad[j]}\n- expected: ${output[quad[broadcast]]}\n-      got: ${output[quad[j]]}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc(\n    `Tests broadcast with all active invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .fn(async t => {\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  let b = quadBroadcast(lid, ${t.params.id});\n  output.results[lid] = b;\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkBroadcastCompute(metadata, output, t.params.id, (id: number, size: number) => {\n          return true;\n        });\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc(\n    `Tests broadcast with predicated invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\nQuad operations require a fully active quad to operate correctly so several of the\npredication filters are skipped.\n  `\n  )\n  .params(u =>\n    u\n      .combine('predicate', keysOf(kPredicateCases))\n      .filter(t => {\n        return t.predicate === 'lower_half' || t.predicate === 'upper_half';\n      })\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .fn(async t => {\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const testcase = kPredicateCases[t.params.predicate];\n\n    const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\ndiagnostic(off, subgroup_branching);\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    let b = quadBroadcast(lid, ${t.params.id});\n    output.results[lid] = b;\n  }\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkBroadcastCompute(metadata, output, t.params.id, testcase.filter);\n      }\n    );\n  });\n\n/**\n * Checks results of quadBroadcast in fragment shaders.\n *\n * @param data The framebuffer output\n *             * component 0 is the broadcast of the integer x position\n *             * component 1 is the broadcast of the integer y position\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n * @param broadcast The quad id being broadcast\n */\nfunction checkFragment(\n  data: Uint32Array,\n  format: GPUTextureFormat,\n  width: number,\n  height: number,\n  broadcast: number\n): Error | undefined {\n  assert(broadcast === Math.trunc(broadcast));\n  assert(broadcast >= 0 && broadcast <= 3);\n\n  if (width < 3 || height < 3) {\n    return new Error(\n      `Insufficient framebuffer size [${width}w x ${height}h]. Minimum is [3w x 3h].`\n    );\n  }\n\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  const coordToIndex = (row: number, col: number) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const row_is_odd = row % 2 === 1;\n      const col_is_odd = col % 2 === 1;\n\n      // Skip checking quads that extend into potential helper invocations.\n      const max_row = row_is_odd ? row : row + 1;\n      const max_col = col_is_odd ? col : col + 1;\n      if (max_row === height - 1 || max_col === width - 1) {\n        continue;\n      }\n\n      let expect_row = row;\n      let expect_col = col;\n      switch (broadcast) {\n        case 0:\n          expect_row = row_is_odd ? row - 1 : row;\n          expect_col = col_is_odd ? col - 1 : col;\n          break;\n        case 1:\n          expect_row = row_is_odd ? row - 1 : row;\n          expect_col = col_is_odd ? col : col + 1;\n          break;\n        case 2:\n          expect_row = row_is_odd ? row : row + 1;\n          expect_col = col_is_odd ? col - 1 : col;\n          break;\n        case 3:\n          expect_row = row_is_odd ? row : row + 1;\n          expect_col = col_is_odd ? col : col + 1;\n          break;\n      }\n\n      const row_broadcast = data[offset + 1];\n      const col_broadcast = data[offset];\n      if (expect_row !== row_broadcast) {\n        return new Error(`Row ${row}, col ${col}: incorrect row results:\n- expected: ${expect_row}\n-      got: ${row_broadcast}`);\n      }\n\n      if (expect_col !== col_broadcast) {\n        return new Error(`Row ${row}, col ${col}: incorrect col results:\n- expected: ${expect_row}\n-      got: ${col_broadcast}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active')\n  .desc(`Tests quadBroadcast in fragment shaders`)\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n      .combineWithParams([{ format: 'rgba32uint' }] as const)\n  )\n  .fn(async t => {\n    t.skipIfDeviceDoesNotHaveFeature('subgroups' as GPUFeatureName);\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<uniform> inputs : array<vec4u, 1>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n\n  var x_broadcast = select(1001, u32(pos.x), in_range);\n  var y_broadcast = select(1001, u32(pos.y), in_range);\n\n  x_broadcast = quadBroadcast(x_broadcast, ${t.params.id});\n  y_broadcast = quadBroadcast(y_broadcast, ${t.params.id});\n\n  return vec4u(x_broadcast, y_broadcast, 0, 0);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      new Uint32Array([0]), // unused,\n      (data: Uint32Array) => {\n        return checkFragment(\n          data,\n          t.params.format,\n          t.params.size[0],\n          t.params.size[1],\n          t.params.id\n        );\n      }\n    );\n  });\n\ng.test('fragment,split').unimplemented();\n"],"mappings":"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"}