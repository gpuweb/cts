{"version":3,"file":"textureLoad.spec.js","names":["description","makeTestGroup","isCompressedFloatTextureFormat","isDepthTextureFormat","isMultisampledTextureFormat","isStencilTextureFormat","kDepthStencilFormats","kAllTextureFormats","kTextureFormatInfo","textureDimensionAndFormatCompatible","GPUTest","MaxLimitsTestMixin","maxMipLevelCount","virtualMipSize","TexelFormats","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","appendComponentTypeForFormatToTextureType","kSamplePointMethods","kShortShaderStages","generateTextureBuiltinInputs1D","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","createVideoFrameWithRandomDataAndGetTexels","isFillable","normalizedCoordToTexelLoadTestCoord","descriptor","mipLevel","coordType","v","size","dimension","map","i","t","Math","abs","round","skipIfStorageTexturesNotSupportedInStage","stage","isCompatibility","skipIf","device","limits","maxStorageTexturesInFragmentStage","maxStorageTexturesInVertexStage","g","test","specURL","desc","params","u","combine","filter","format","blockHeight","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","selectDeviceForTextureFormatOrSkipTestCase","fn","C","L","samplePoints","width","minSize","minBlocks","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","calls","method","num","mipLevelCount","type","hashInputs","coords","builtin","levelType","textureType","viewDescriptor","sampler","undefined","results","res","expectOK","viewDimension","texture_type","skipIfTextureLoadNotSupportedForTextureType","skipIfMultisampleNotSupportedForFormat","S","sampleCount","sampleIndex","sampleIndexType","VideoFrame","videoFrame","importExternalTexture","source","close","combineWithParams","A","depthOrArrayLayers","height","textureBindingViewDimension","arrayIndex","arrayIndexType","hasLanguageFeature","selectDeviceOrSkipTestCase","skipIfTextureFormatNotUsableAsStorageTexture","STORAGE_BINDING"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureLoad' builtin function\n\nReads a single texel from a texture without sampling or filtering.\n\nReturns the unfiltered texel data.\n\nAn out of bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t, level)) for the corresponding element, or\n * array_index is outside the range [0, textureNumLayers(t)), or\n * level is outside the range [0, textureNumLevels(t))\n\nIf an out of bounds access occurs, the built-in function returns one of:\n * The data for some texel within bounds of the texture\n * A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures\n * 0.0 for depth textures\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  isCompressedFloatTextureFormat,\n  isDepthTextureFormat,\n  isMultisampledTextureFormat,\n  isStencilTextureFormat,\n  kDepthStencilFormats,\n  kAllTextureFormats,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible,\n} from '../../../../../format_info.js';\nimport { GPUTest, MaxLimitsTestMixin } from '../../../../../gpu_test.js';\nimport { maxMipLevelCount, virtualMipSize } from '../../../../../util/texture/base.js';\nimport { TexelFormats } from '../../../../types.js';\n\nimport {\n  TextureCall,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  appendComponentTypeForFormatToTextureType,\n  vec1,\n  vec2,\n  vec3,\n  kSamplePointMethods,\n  kShortShaderStages,\n  generateTextureBuiltinInputs1D,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  Dimensionality,\n  createVideoFrameWithRandomDataAndGetTexels,\n  ShortShaderStage,\n  isFillable,\n} from './texture_utils.js';\n\nexport function normalizedCoordToTexelLoadTestCoord<T extends Dimensionality>(\n  descriptor: GPUTextureDescriptor,\n  mipLevel: number,\n  coordType: 'i32' | 'u32',\n  v: T\n): T {\n  const size = virtualMipSize(descriptor.dimension ?? '2d', descriptor.size, mipLevel);\n  return v.map((v, i) => {\n    const t = v * size[i];\n    return coordType === 'u32' ? Math.abs(Math.round(t)) : Math.round(t);\n  }) as T;\n}\n\nfunction skipIfStorageTexturesNotSupportedInStage(t: GPUTest, stage: ShortShaderStage) {\n  if (t.isCompatibility) {\n    t.skipIf(\n      stage === 'f' && !(t.device.limits.maxStorageTexturesInFragmentStage! > 0),\n      'device does not support storage textures in fragment shaders'\n    );\n    t.skipIf(\n      stage === 'v' && !(t.device.limits.maxStorageTexturesInVertexStage! > 0),\n      'device does not support storage textures in vertex shaders'\n    );\n  }\n}\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(GPUTest));\n\ng.test('sampled_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_1d<T>, coords: C, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => textureDimensionAndFormatCompatible('1d', t.format))\n      // 1d textures can't have a height !== 1\n      .filter(t => kTextureFormatInfo[t.format].blockHeight === 1)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, C, L, samplePoints } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = [width, 1];\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '1d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }, i) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_1d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nL is i32 or u32\n\nfn textureLoad(t: texture_2d<T>, coords: vec2<C>, level: L) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => !isCompressedFloatTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_3d<T>, coords: vec3<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => textureDimensionAndFormatCompatible('3d', t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '3d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec3>[] = generateTextureBuiltinInputs3D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_3d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('multisampled')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nS is i32 or u32\n\nfn textureLoad(t: texture_multisampled_2d<T>, coords: vec2<C>, sample_index: S)-> vec4<T>\nfn textureLoad(t: texture_depth_multisampled_2d, coords: vec2<C>, sample_index: S)-> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * sample_index: The 0-based sample index of the multisampled texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('texture_type', [\n        'texture_multisampled_2d',\n        'texture_depth_multisampled_2d',\n      ] as const)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isMultisampledTextureFormat(t.format, false))\n      .filter(t => !isStencilTextureFormat(t.format))\n      // Filter out texture_depth_multisampled_2d with non-depth formats\n      .filter(\n        t =>\n          !(t.texture_type === 'texture_depth_multisampled_2d' && !isDepthTextureFormat(t.format))\n      )\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('S', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format, texture_type } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType(texture_type);\n    t.skipIfMultisampleNotSupportedForFormat(format);\n  })\n  .fn(async t => {\n    const { texture_type, format, stage, samplePoints, C, S } = t.params;\n\n    const sampleCount = 4;\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: [8, 8],\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      sampleIndex: { num: texture.sampleCount, type: S },\n      hashInputs: [stage, format, samplePoints, C, S],\n    }).map(({ coords, sampleIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        sampleIndexType: S === 'i32' ? 'i' : 'u',\n        sampleIndex,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType(texture_type, texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_depth_2d, coords: vec2<C>, level: L) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureLoadNotSupportedForTextureType('texture_depth_2d');\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n    const textureType = 'texture_depth_2d';\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_external, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIf(typeof VideoFrame === 'undefined', 'VideoFrames are not supported')\n  )\n  .fn(async t => {\n    const { stage, samplePoints, C, L } = t.params;\n\n    const size = [8, 8, 1];\n\n    // Note: external texture doesn't use this descriptor.\n    // It's used to pass to the softwareTextureRead functions.\n    const descriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      size,\n      usage: GPUTextureUsage.COPY_DST,\n    };\n\n    const { texels, videoFrame } = createVideoFrameWithRandomDataAndGetTexels(descriptor.size);\n    const texture = t.device.importExternalTexture({ source: videoFrame });\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [samplePoints, C, L],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n\n    const textureType = 'texture_external';\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n    videoFrame.close();\n  });\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d_array<T>, coords: vec2<C>, array_index: A, level: L) -> vec4<T>\nfn textureLoad(t: texture_depth_2d_array, coords: vec2<C>, array_index: A, level: L) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isFillable(t.format))\n      .combine('texture_type', ['texture_2d_array', 'texture_depth_2d_array'] as const)\n      .filter(\n        t => !(t.texture_type === 'texture_depth_2d_array' && !isDepthTextureFormat(t.format))\n      )\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combineWithParams([\n        { C: 'i32', A: 'u32', L: 'u32' },\n        { C: 'u32', A: 'u32', L: 'u32' },\n        { C: 'u32', A: 'i32', L: 'u32' },\n        { C: 'u32', A: 'u32', L: 'i32' },\n      ] as const)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format, texture_type } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType(texture_type);\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(async t => {\n    const { texture_type, format, stage, samplePoints, C, A, L, depthOrArrayLayers } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = { width, height, depthOrArrayLayers };\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      hashInputs: [stage, format, samplePoints, C, L, A],\n    }).map(({ coords, mipLevel, arrayIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        arrayIndex,\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType(texture_type, texture.format);\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_1d<format, read>, coords: C) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const [width] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = [width, 1];\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      dimension: '1d',\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_1d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 3, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_2d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_2d_array')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nA is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec2<C>, array_index: A) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, A, depthOrArrayLayers } = t.params;\n\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = { width, height, depthOrArrayLayers };\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      hashInputs: [stage, format, samplePoints, C, A],\n    }).map(({ coords, arrayIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        arrayIndex,\n      };\n    });\n    const textureType = `texture_storage_2d_array<${format}, read>`;\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n    };\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec3<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      dimension: '3d',\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec3>[] = generateTextureBuiltinInputs3D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_3d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}