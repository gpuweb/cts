{"version":3,"file":"textureLoad.spec.js","names":["description","makeTestGroup","isCompressedFloatTextureFormat","isDepthTextureFormat","kAllTextureFormats","textureDimensionAndFormatCompatible","isCompressedTextureFormat","kPossibleMultisampledTextureFormats","kDepthTextureFormats","kPossibleStorageTextureFormats","AllFeaturesMaxLimitsGPUTest","maxMipLevelCount","virtualMipSize","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","appendComponentTypeForFormatToTextureType","kSamplePointMethods","kShortShaderStages","generateTextureBuiltinInputs1D","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","createCanvasWithRandomDataAndGetTexels","isFillable","normalizedCoordToTexelLoadTestCoord","descriptor","mipLevel","coordType","v","size","dimension","map","i","t","Math","abs","round","skipIfStorageTexturesNotSupportedInStage","stage","isCompatibility","skipIf","device","limits","maxStorageTexturesInFragmentStage","maxStorageTexturesInVertexStage","g","test","specURL","desc","params","u","combine","filter","format","beginSubcases","fn","C","L","samplePoints","skipIfTextureFormatNotSupported","width","minSize","minBlocks","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","calls","method","num","mipLevelCount","type","hashInputs","coords","builtin","levelType","textureType","viewDescriptor","sampler","undefined","results","res","expectOK","viewDimension","texture_type","S","skipIfTextureLoadNotSupportedForTextureType","skipIfTextureFormatNotMultisampled","sampleCount","sampleIndex","sampleIndexType","importExternalTexture","OffscreenCanvas","canvas","videoFrame","VideoFrame","timestamp","source","createTextureTracked","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","premultipliedAlpha","close","combineWithParams","A","depthOrArrayLayers","height","textureBindingViewDimension","arrayIndex","arrayIndexType","beforeAllSubcases","skipIfLanguageFeatureNotSupported","skipIfTextureFormatNotUsableAsStorageTexture","STORAGE_BINDING","baseMipLevel","softwareTexture","unless","baseArrayLayer"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureLoad' builtin function\n\nReads a single texel from a texture without sampling or filtering.\n\nReturns the unfiltered texel data.\n\nAn out of bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t, level)) for the corresponding element, or\n * array_index is outside the range [0, textureNumLayers(t)), or\n * level is outside the range [0, textureNumLevels(t))\n\nIf an out of bounds access occurs, the built-in function returns one of:\n * The data for some texel within bounds of the texture\n * A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures\n * 0.0 for depth textures\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  isCompressedFloatTextureFormat,\n  isDepthTextureFormat,\n  kAllTextureFormats,\n  textureDimensionAndFormatCompatible,\n  isCompressedTextureFormat,\n  kPossibleMultisampledTextureFormats,\n  kDepthTextureFormats,\n  kPossibleStorageTextureFormats,\n} from '../../../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTest } from '../../../../../gpu_test.js';\nimport { maxMipLevelCount, virtualMipSize } from '../../../../../util/texture/base.js';\n\nimport {\n  TextureCall,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  appendComponentTypeForFormatToTextureType,\n  vec1,\n  vec2,\n  vec3,\n  kSamplePointMethods,\n  kShortShaderStages,\n  generateTextureBuiltinInputs1D,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  Dimensionality,\n  createCanvasWithRandomDataAndGetTexels,\n  ShortShaderStage,\n  isFillable,\n} from './texture_utils.js';\n\nexport function normalizedCoordToTexelLoadTestCoord<T extends Dimensionality>(\n  descriptor: GPUTextureDescriptor,\n  mipLevel: number,\n  coordType: 'i32' | 'u32',\n  v: T\n): T {\n  const size = virtualMipSize(descriptor.dimension ?? '2d', descriptor.size, mipLevel);\n  return v.map((v, i) => {\n    const t = v * size[i];\n    return coordType === 'u32' ? Math.abs(Math.round(t)) : Math.round(t);\n  }) as T;\n}\n\nfunction skipIfStorageTexturesNotSupportedInStage(t: GPUTest, stage: ShortShaderStage) {\n  if (t.isCompatibility) {\n    t.skipIf(\n      stage === 'f' && !(t.device.limits.maxStorageTexturesInFragmentStage! > 0),\n      'device does not support storage textures in fragment shaders'\n    );\n    t.skipIf(\n      stage === 'v' && !(t.device.limits.maxStorageTexturesInVertexStage! > 0),\n      'device does not support storage textures in vertex shaders'\n    );\n  }\n}\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('sampled_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_1d<T>, coords: C, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => textureDimensionAndFormatCompatible('1d', t.format))\n      // 1d textures can't have a height !== 1\n      .filter(t => !isCompressedTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { format, stage, C, L, samplePoints } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = [width, 1];\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '1d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }, i) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_1d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nL is i32 or u32\n\nfn textureLoad(t: texture_2d<T>, coords: vec2<C>, level: L) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => !isCompressedFloatTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_3d<T>, coords: vec3<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => textureDimensionAndFormatCompatible('3d', t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '3d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec3>[] = generateTextureBuiltinInputs3D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_3d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('multisampled')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nS is i32 or u32\n\nfn textureLoad(t: texture_multisampled_2d<T>, coords: vec2<C>, sample_index: S)-> vec4<T>\nfn textureLoad(t: texture_depth_multisampled_2d, coords: vec2<C>, sample_index: S)-> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * sample_index: The 0-based sample index of the multisampled texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('texture_type', [\n        'texture_multisampled_2d',\n        'texture_depth_multisampled_2d',\n      ] as const)\n      .combine('format', kPossibleMultisampledTextureFormats)\n      // Filter out texture_depth_multisampled_2d with non-depth formats\n      .filter(\n        t =>\n          !(t.texture_type === 'texture_depth_multisampled_2d' && !isDepthTextureFormat(t.format))\n      )\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('S', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { texture_type, format, stage, samplePoints, C, S } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType(texture_type);\n    t.skipIfTextureFormatNotMultisampled(format);\n\n    const sampleCount = 4;\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: [8, 8],\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      sampleIndex: { num: texture.sampleCount, type: S },\n      hashInputs: [stage, format, samplePoints, C, S],\n    }).map(({ coords, sampleIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        sampleIndexType: S === 'i32' ? 'i' : 'u',\n        sampleIndex,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType(texture_type, texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_depth_2d, coords: vec2<C>, level: L) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthTextureFormats)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType('texture_depth_2d');\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n    const textureType = 'texture_depth_2d';\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_external, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .beginSubcases()\n      .combine('importExternalTexture', [false, true])\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const { stage, importExternalTexture, samplePoints, C, L } = t.params;\n\n    const size = [8, 8, 1];\n\n    // Note: external texture doesn't use this descriptor.\n    // It's used to pass to the softwareTextureRead functions.\n    const descriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      size,\n      usage: GPUTextureUsage.COPY_DST,\n    };\n\n    t.skipIf(typeof OffscreenCanvas === 'undefined', 'OffscreenCanvas is not supported');\n    const { texels, canvas } = createCanvasWithRandomDataAndGetTexels(descriptor.size);\n\n    let videoFrame: VideoFrame | undefined;\n    let texture: GPUExternalTexture | GPUTexture;\n    if (importExternalTexture) {\n      t.skipIf(typeof VideoFrame === 'undefined', 'VideoFrames are not supported');\n\n      videoFrame = new VideoFrame(canvas, { timestamp: 0 });\n      texture = t.device.importExternalTexture({ source: videoFrame });\n    } else {\n      texture = t.createTextureTracked({\n        format: descriptor.format,\n        size: descriptor.size,\n        usage:\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.TEXTURE_BINDING,\n      });\n      t.queue.copyExternalImageToTexture(\n        { source: canvas },\n        { texture, premultipliedAlpha: true },\n        size\n      );\n    }\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [samplePoints, C, L],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n\n    const textureType = 'texture_external';\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n    videoFrame?.close();\n  });\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d_array<T>, coords: vec2<C>, array_index: A, level: L) -> vec4<T>\nfn textureLoad(t: texture_depth_2d_array, coords: vec2<C>, array_index: A, level: L) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kAllTextureFormats)\n      .filter(t => isFillable(t.format))\n      .combine('texture_type', ['texture_2d_array', 'texture_depth_2d_array'] as const)\n      .filter(\n        t => !(t.texture_type === 'texture_depth_2d_array' && !isDepthTextureFormat(t.format))\n      )\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combineWithParams([\n        { C: 'i32', A: 'u32', L: 'u32' },\n        { C: 'u32', A: 'u32', L: 'u32' },\n        { C: 'u32', A: 'i32', L: 'u32' },\n        { C: 'u32', A: 'u32', L: 'i32' },\n      ] as const)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .fn(async t => {\n    const { texture_type, format, stage, samplePoints, C, A, L, depthOrArrayLayers } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType(texture_type);\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = { width, height, depthOrArrayLayers };\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      hashInputs: [stage, format, samplePoints, C, L, A],\n    }).map(({ coords, mipLevel, arrayIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        arrayIndex,\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType(texture_type, texture.format);\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_1d<format, read>, coords: C) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kPossibleStorageTextureFormats)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const [width] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = [width, 1];\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      dimension: '1d',\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_1d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kPossibleStorageTextureFormats)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('baseMipLevel', [0, 1] as const)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, C, baseMipLevel } = t.params;\n\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 3, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      mipLevelCount: 3,\n    };\n    const viewDescriptor = {\n      baseMipLevel,\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const softwareTexture = { texels, descriptor, viewDescriptor };\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      softwareTexture,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_2d<${format}, read>`;\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      softwareTexture,\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_2d_array')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nA is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec2<C>, array_index: A) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kPossibleStorageTextureFormats)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n      .combine('baseMipLevel', [0, 1] as const)\n      .combine('baseArrayLayer', [0, 1] as const)\n      .unless(t => t.depthOrArrayLayers === 1 && t.baseArrayLayer !== 0)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    t.skipIf(\n      t.isCompatibility && t.params.baseArrayLayer !== 0,\n      'compatibility mode does not support array layer sub ranges'\n    );\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, A, depthOrArrayLayers, baseMipLevel, baseArrayLayer } =\n      t.params;\n\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = { width, height, depthOrArrayLayers };\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n      mipLevelCount: 3,\n    };\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n      baseMipLevel,\n      mipLevelCount: 1,\n      baseArrayLayer,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const softwareTexture = { texels, descriptor, viewDescriptor };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      softwareTexture,\n      arrayIndex: { num: texture.depthOrArrayLayers - baseArrayLayer, type: A },\n      hashInputs: [stage, format, samplePoints, C, A],\n    }).map(({ coords, arrayIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        arrayIndex,\n      };\n    });\n    const textureType = `texture_storage_2d_array<${format}, read>`;\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec3<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kPossibleStorageTextureFormats)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n    skipIfStorageTexturesNotSupportedInStage(t, stage);\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      dimension: '3d',\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec3>[] = generateTextureBuiltinInputs3D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_3d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}