{"version":3,"file":"subgroupBitwise.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","iterRange","kConcreteSignedIntegerScalarsAndVectors","kConcreteUnsignedIntegerScalarsAndVectors","scalarTypeOf","VectorType","PRNG","kWGSizes","kPredicateCases","SubgroupTest","kDataSentinel","runComputeTest","runFragmentTest","kFramebufferSizes","getUintsPerFramebuffer","g","kNumCases","kOps","kTypes","bitwise","op","v1","v2","identity","checkDataTypes","metadata","output","type","offset","expected","Map","i","Math","floor","length","group_id","expect","get","set","numEles","stride","width","inv","ele","res","Error","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","scalarTy","wgThreads","wgSize","wgsl","toString","magicOffset","Uint32Array","generateInputData","seed","num","prng","bound","min","index","uniformInt","x","bounded","val","checkBitwiseCompute","input","filter","combo","id","size","inputData","case","uintsPerOutput","testcase","predicate","cond","checkBitwiseFragment","data","format","height","uintsPerRow","uintsPerTexel","inBounds","row","col","subgroup_id","ok","anyInBounds","_","value","Boolean","subgroupInBounds","v","expected_v","combineWithParams","numInputs","subgroupMinSize","device","adapterInfo","innerTexels","skipIf","ident","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupBitwise.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for subgroupAny.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { iterRange } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteSignedIntegerScalarsAndVectors,\n  kConcreteUnsignedIntegerScalarsAndVectors,\n  scalarTypeOf,\n  Type,\n  VectorType,\n} from '../../../../../util/conversion.js';\nimport { PRNG } from '../../../../../util/prng.js';\n\nimport {\n  kWGSizes,\n  kPredicateCases,\n  SubgroupTest,\n  kDataSentinel,\n  runComputeTest,\n  runFragmentTest,\n  kFramebufferSizes,\n  getUintsPerFramebuffer,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kNumCases = 15;\nconst kOps = ['subgroupAnd', 'subgroupOr', 'subgroupXor'] as const;\nconst kTypes = objectsToRecord([\n  ...kConcreteSignedIntegerScalarsAndVectors,\n  ...kConcreteUnsignedIntegerScalarsAndVectors,\n]);\n\n/**\n * Performs the appropriate bitwise operation on v1 and v2.\n *\n * @param op The subgroup operation\n * @param v1 The first value\n * @param v2 The second value\n */\nfunction bitwise(op: 'subgroupAnd' | 'subgroupOr' | 'subgroupXor', v1: number, v2: number): number {\n  switch (op) {\n    case 'subgroupAnd':\n      return v1 & v2;\n    case 'subgroupOr':\n      return v1 | v2;\n    case 'subgroupXor':\n      return v1 ^ v2;\n  }\n}\n\n/**\n * Returns the identity value for the subgroup operations\n *\n * @param op The subgroup operation\n */\nfunction identity(op: 'subgroupAnd' | 'subgroupOr' | 'subgroupXor'): number {\n  switch (op) {\n    case 'subgroupAnd':\n      return ~0;\n    case 'subgroupOr':\n    case 'subgroupXor':\n      return 0;\n  }\n}\n\n/**\n * Checks the results for data type test\n *\n * The shader generate a unique subgroup id for each subgroup (avoiding 0).\n * The check calculates the expected result for all subgroups and then compares that\n * to the actual results.\n * @param metadata An array of integers divided as follows:\n *                 * first half subgroup invocation id\n *                 * second half unique subgroup id\n * @param output An array of output values\n * @param type The type being tested\n * @param op The subgroup operation\n * @param offset A constant offset added to subgroup invocation id to form the\n *               the input to the subgroup operation\n */\nfunction checkDataTypes(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  type: Type,\n  op: 'subgroupAnd' | 'subgroupOr' | 'subgroupXor',\n  offset: number\n): undefined | Error {\n  const expected = new Map<number, number>();\n  for (let i = 0; i < Math.floor(metadata.length / 2); i++) {\n    const group_id = metadata[i + Math.floor(metadata.length / 2)];\n    let expect = expected.get(group_id) ?? identity(op);\n    expect = bitwise(op, expect, i + offset);\n    expected.set(group_id, expect);\n  }\n\n  let numEles = 1;\n  let stride = 1;\n  if (type instanceof VectorType) {\n    numEles = type.width;\n    stride = numEles === 3 ? 4 : numEles;\n  }\n  for (let inv = 0; inv < Math.floor(output.length / stride); inv++) {\n    const group_id = metadata[inv + Math.floor(metadata.length / 2)];\n    const expect = expected.get(group_id) ?? 0;\n    for (let ele = 0; ele < numEles; ele++) {\n      const res = output[inv * stride + ele];\n      if (res !== expect) {\n        return new Error(`Invocation ${inv}, component ${ele}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types')\n  .desc('Tests allowed data types')\n  .params(u =>\n    u\n      .combine('type', keysOf(kTypes))\n      .beginSubcases()\n      .combine('wgSize', kWGSizes)\n      .combine('op', kOps)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const type = kTypes[t.params.type];\n    let numEles = 1;\n    if (type instanceof VectorType) {\n      numEles = type.width === 3 ? 4 : type.width;\n    }\n\n    const scalarTy = scalarTypeOf(type);\n\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<${type.toString()}>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  group_id : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n\n  // Record subgroup invocation id for this invocation.\n  metadata.id[lid] = id;\n\n  // Record a unique id for this subgroup (avoid 0).\n  let group_id = subgroupBroadcastFirst(lid + 1);\n  metadata.group_id[lid] = group_id;\n\n  outputs[lid] = ${t.params.op}(${type.toString()}(${scalarTy.toString()}(lid + inputs[0])));\n}`;\n\n    const magicOffset = 0x7fff000f;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      numEles,\n      new Uint32Array([magicOffset]),\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkDataTypes(metadata, output, type, t.params.op, magicOffset);\n      }\n    );\n  });\n\n/**\n * Generates randomized input data\n *\n * Case 0: All 0s\n * Case 1: All 0xffffs\n * Case 2-9: All identity values except an inverted value randomly every 32 values.\n *           All values capped to 0xffff\n * Case 10+: Random values in the range [0, 2 ** 30]\n * @param seed The PRNG seed\n * @param num The number of values to generate\n * @param identity The identity value for the operation\n */\nfunction generateInputData(seed: number, num: number, identity: number): Uint32Array {\n  const prng = new PRNG(seed);\n\n  const bound = Math.min(num, 32);\n  const index = prng.uniformInt(bound);\n\n  return new Uint32Array([\n    ...iterRange(num, x => {\n      if (seed === 0) {\n        return 0;\n      } else if (seed === 1) {\n        return 0xffff;\n      } else if (seed < 10) {\n        const bounded = x % bound;\n        let val = bounded === index ? ~identity : identity;\n        val &= 0xffff;\n        return val;\n      }\n      return prng.uniformInt(1 << 30);\n    }),\n  ]);\n}\n\n/**\n * Checks the result of compute tests\n *\n * Calculates the expected results for each subgroup and compares against\n * the actual output.\n * @param metadata An array divided as follows:\n *                 * first half: subgroup invocation id in lower 16 bits\n *                               subgroup size in upper 16 bits\n *                 * second half: unique subgroup id\n * @param output The outputs\n * @param input The input data\n * @param op The subgroup operation\n * @param filter A predicate used to filter invocations.\n */\nfunction checkBitwiseCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  input: Uint32Array,\n  op: 'subgroupAnd' | 'subgroupOr' | 'subgroupXor',\n  filter: (id: number, size: number) => boolean\n): undefined | Error {\n  const expected = new Map<number, number>();\n  for (let i = 0; i < output.length; i++) {\n    const group_id = metadata[i + output.length];\n    const combo = metadata[i];\n    const id = combo & 0xffff;\n    const size = (combo >> 16) & 0xffff;\n    if (filter(id, size)) {\n      let expect = expected.get(group_id) ?? identity(op);\n      expect = bitwise(op, expect, input[i]);\n      expected.set(group_id, expect);\n    }\n  }\n\n  for (let i = 0; i < output.length; i++) {\n    const group_id = metadata[i + output.length];\n    const combo = metadata[i];\n    const id = combo & 0xffff;\n    const size = (combo >> 16) & 0xffff;\n    const res = output[i];\n    if (filter(id, size)) {\n      const expect = expected.get(group_id) ?? 0;\n      if (res !== expect) {\n        return new Error(`Invocation ${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    } else {\n      if (res !== kDataSentinel) {\n        return new Error(`Invocation ${i}: unexpected write`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc('Test bitwise operations with randomized inputs')\n  .params(u =>\n    u\n      .combine('case', [...iterRange(kNumCases, x => x)])\n      .beginSubcases()\n      .combine('wgSize', kWGSizes)\n      .combine('op', kOps)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  id_and_size : array<u32, ${wgThreads}>,\n  group_id : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) sg_size : u32,\n) {\n\n  // Record both subgroup invocation id and subgroup size in the same u32.\n  // Subgroups sizes are in the range [4, 128] so both values fit.\n  metadata.id_and_size[lid] = id | (sg_size << 16);\n\n  // Record a unique id for this subgroup (avoid 0).\n  let group_id = subgroupBroadcastFirst(lid + 1);\n  metadata.group_id[lid] = group_id;\n\n  outputs[lid] = ${t.params.op}(inputs[lid]);\n}`;\n\n    const inputData = generateInputData(t.params.case, wgThreads, identity(t.params.op));\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkBitwiseCompute(\n          metadata,\n          output,\n          inputData,\n          t.params.op,\n          (id: number, size: number) => {\n            return true;\n          }\n        );\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc('Test that only active invocations participate')\n  .params(u =>\n    u\n      .combine('predicate', keysOf(kPredicateCases))\n      .beginSubcases()\n      .combine('wgSize', kWGSizes)\n      .combine('op', kOps)\n      .combine('case', [...iterRange(kNumCases, x => x)])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const testcase = kPredicateCases[t.params.predicate];\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\ndiagnostic(off, subgroup_branching);\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  id_and_size : array<u32, ${wgThreads}>,\n  group_id : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n\n  // Record both subgroup invocation id and subgroup size in the same u32.\n  // Subgroups sizes are in the range [4, 128] so both values fit.\n  metadata.id_and_size[lid] = id | (subgroupSize << 16);\n\n  // Record a unique id for this subgroup (avoid 0).\n  let group_id = subgroupBroadcastFirst(lid + 1);\n  metadata.group_id[lid] = group_id;\n\n  if ${testcase.cond} {\n    outputs[lid] = ${t.params.op}(inputs[lid]);\n  } else {\n    return;\n  }\n}`;\n\n    const inputData = generateInputData(t.params.case, wgThreads, identity(t.params.op));\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkBitwiseCompute(metadata, output, inputData, t.params.op, testcase.filter);\n      }\n    );\n  });\n\n/**\n * Checks bitwise ops results from a fragment shader.\n *\n * Avoids subgroups in last row or column to skip potential helper invocations.\n * @param data Framebuffer output\n *             * component 0 is result\n *             * component 1 is generated subgroup id\n * @param input An array of input data\n * @param op The subgroup operation\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n */\nfunction checkBitwiseFragment(\n  data: Uint32Array,\n  input: Uint32Array,\n  op: 'subgroupAnd' | 'subgroupOr' | 'subgroupXor',\n  format: GPUTextureFormat,\n  width: number,\n  height: number\n): Error | undefined {\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  // Determine if the subgroup should be included in the checks.\n  const inBounds = new Map<number, boolean>();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const subgroup_id = data[offset + 1];\n      if (subgroup_id === 0) {\n        return new Error(`Internal error: helper invocation at (${col}, ${row})`);\n      }\n\n      let ok = inBounds.get(subgroup_id) ?? true;\n      ok = ok && row !== height - 1 && col !== width - 1;\n      inBounds.set(subgroup_id, ok);\n    }\n  }\n\n  let anyInBounds = false;\n  for (const [_, value] of inBounds) {\n    const ok = Boolean(value);\n    anyInBounds = anyInBounds || ok;\n  }\n  if (!anyInBounds) {\n    // This variant would not reliably test behavior.\n    return undefined;\n  }\n\n  // Iteration skips subgroups in the last row or column to avoid helper\n  // invocations because it is not guaranteed whether or not they participate\n  // in the subgroup operation.\n  const expected = new Map<number, number>();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const subgroup_id = data[offset + 1];\n\n      if (subgroup_id === 0) {\n        return new Error(`Internal error: helper invocation at (${col}, ${row})`);\n      }\n\n      const subgroupInBounds = inBounds.get(subgroup_id) ?? true;\n      if (!subgroupInBounds) {\n        continue;\n      }\n\n      let v = expected.get(subgroup_id) ?? identity(op);\n      v = bitwise(op, v, input[row * width + col]);\n      expected.set(subgroup_id, v);\n    }\n  }\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const res = data[offset];\n      const subgroup_id = data[offset + 1];\n\n      if (subgroup_id === 0) {\n        // Inactive in the fragment.\n        continue;\n      }\n\n      const subgroupInBounds = inBounds.get(subgroup_id) ?? true;\n      if (!subgroupInBounds) {\n        continue;\n      }\n\n      const expected_v = expected.get(subgroup_id) ?? 0;\n      if (expected_v !== res) {\n        return new Error(`Row ${row}, col ${col}: incorrect results:\n- expected: ${expected_v}\n-      got: ${res}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active')\n  .desc('Tests bitwise operations in fragment shaders')\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combine('case', [...iterRange(kNumCases, x => x)])\n      .combine('op', kOps)\n      .combineWithParams([{ format: 'rg32uint' }] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const numInputs = t.params.size[0] * t.params.size[1];\n\n    interface SubgroupProperties extends GPUAdapterInfo {\n      subgroupMinSize: number;\n    }\n    const { subgroupMinSize } = t.device.adapterInfo as SubgroupProperties;\n    const innerTexels = (t.params.size[0] - 1) * (t.params.size[1] - 1);\n    t.skipIf(innerTexels < subgroupMinSize, 'Too few texels to be reliable');\n\n    const inputData = generateInputData(t.params.case, numInputs, identity(t.params.op));\n\n    const ident = identity(t.params.op) === 0 ? '0' : '0xffffffff';\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<uniform> inputs : array<vec4u, ${inputData.length}>;\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec2u {\n  // Generate a subgroup id based on linearized position, avoid 0.\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n  let subgroup_id = subgroupBroadcastFirst(linear + 1);\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n  let input = select(${ident}, inputs[linear].x, in_range);\n\n  let res = ${t.params.op}(input);\n  return vec2u(res, subgroup_id);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      inputData,\n      (data: Uint32Array) => {\n        return checkBitwiseFragment(\n          data,\n          inputData,\n          t.params.op,\n          t.params.format,\n          t.params.size[0],\n          t.params.size[1]\n        );\n      }\n    );\n  });\n\ng.test('fragment,split').unimplemented();\n"],"mappings":"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"}