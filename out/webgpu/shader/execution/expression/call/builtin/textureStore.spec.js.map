{"version":3,"file":"textureStore.spec.js","names":["description","makeTestGroup","unreachable","iterRange","range","isTextureFormatPossiblyStorageReadWritable","kPossibleStorageTextureFormats","AllFeaturesMaxLimitsGPUTest","ttu","kFloat32Format","kFloat16Format","numberToFloatBits","pack4x8unorm","pack4x8snorm","pack2x16unorm","pack2x16snorm","align","clamp","getTextureDimensionFromView","virtualMipSize","getTextureFormatTypeInfo","kDims","kViewDimensions","g","inputArray","format","test","desc","params","u","combine","unless","t","access","viewDimension","mipLevel","fn","stage","skipIfTextureFormatNotSupported","skipIfTextureFormatNotUsableWithStorageAccessMode","componentType","values","skipIf","isCompatibility","device","limits","maxStorageTexturesInFragmentStage","suffix","endsWith","swizzleWGSL","layerWGSL","wgsl","map","v","join","replace","length","mipMult","size","mipLevel0Size","testMipLevelSize","dimension","texture","createTextureTracked","mipLevelCount","usage","GPUTextureUsage","STORAGE_BINDING","COPY_SRC","module","createShaderModule","code","pipeline","createComputePipeline","layout","compute","createRenderPipeline","vertex","fragment","targets","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","baseMipLevel","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","renderTarget","slice","RENDER_ATTACHMENT","beginRenderPass","colorAttachments","view","loadOp","storeOp","draw","queue","submit","finish","bytesPerTexel","buffer","copyWholeTextureToNewBufferSimple","u32sPerTexel","u8sPerTexel","bytesPerRow","texelsPerRow","texelsPerSlice","getValue","i","clampedPack4x8unorm","c","min","max","clampedPack4x8snorm","startsWith","expected","Uint8Array","texelId","z","y","x","id","unit","vals","Math","floor","val","expectGPUBufferValuesEqual","Uint16Array","Uint32Array","r","b","a","round","float11","zero","one","half","float10","mapValue","skipIfDeviceDoesNotHaveFeature","numTexels","textureSize","width","height","depthOrArrayLayers","entryPoint","kWidth","getTextureSize","dim","array","texelsPerArray","textureType","indexToCoord","type","outOfBoundsValue","getMipTexels","mip","texels","filter","mipCount","texel_format","num_texels","view_texels","texture_size","mip_size","oob_value","coords","wgx_size","num_wgs_x","baseArrayLayer","arrayLayerCount","m","expectedOutput","kArrayLevels","arrayLevels","baseLevel","beforeAllSubcases","view_dim","base_texels","view_size","baseOffset"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureStore.spec.ts"],"sourcesContent":["export const description = `\nWrites a single texel to a texture.\n\nThe channel format T depends on the storage texel format F.\nSee the texel format table for the mapping of texel format to channel format.\n\nNote: An out-of-bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t)) for the corresponding element, or\n * array_index is outside the range of [0, textureNumLayers(t))\n\nIf an out-of-bounds access occurs, the built-in function should not be executed.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { unreachable, iterRange, range } from '../../../../../../common/util/util.js';\nimport {\n  isTextureFormatPossiblyStorageReadWritable,\n  kPossibleStorageTextureFormats,\n} from '../../../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\nimport * as ttu from '../../../../../texture_test_utils.js';\nimport {\n  kFloat32Format,\n  kFloat16Format,\n  numberToFloatBits,\n  pack4x8unorm,\n  pack4x8snorm,\n  pack2x16unorm,\n  pack2x16snorm,\n} from '../../../../../util/conversion.js';\nimport { align, clamp } from '../../../../../util/math.js';\nimport { getTextureDimensionFromView, virtualMipSize } from '../../../../../util/texture/base.js';\n\nimport { getTextureFormatTypeInfo } from './texture_utils.js';\n\nconst kDims = ['1d', '2d', '3d'] as const;\nconst kViewDimensions = ['1d', '2d', '2d-array', '3d'] as const;\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n// We require a few values that are out of range for a given type\n// so we can check clamping behavior.\nfunction inputArray(format: string): number[] {\n  switch (format) {\n    case 'r8snorm':\n    case 'rg8snorm':\n    case 'rgba8snorm':\n    case 'r16snorm':\n    case 'rg16snorm':\n    case 'rgba16snorm':\n      return [-1.1, 1.0, -0.6, -0.3, 0, 0.3, 0.6, 1.0, 1.1];\n    case 'r8unorm':\n    case 'rg8unorm':\n    case 'rgba8unorm':\n    case 'bgra8unorm':\n    case 'r16unorm':\n    case 'rg16unorm':\n    case 'rgba16unorm':\n      return [-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.1];\n    case 'r8uint':\n    case 'rg8uint':\n    case 'rgba8uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 256, 512];\n    case 'rgba16uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 0xffff, 0x1ffff];\n    case 'rgba32uint':\n    case 'r32uint':\n    case 'rg32uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 256, 512, 0xffffffff];\n    case 'r8sint':\n    case 'rg8sint':\n    case 'rgba8sint':\n      return [-128, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127];\n    case 'rgba16sint':\n      return [-32768, -32769, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127, 0x7fff, 0x8000];\n    case 'r32sint':\n    case 'rg32sint':\n    case 'rgba32sint':\n      return [-0x8000000, -32769, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127, 0x7ffffff];\n    case 'r16float':\n    case 'rg16float':\n    case 'rgba16float':\n    case 'rgba32float':\n    case 'r32float':\n    case 'rg32float':\n      // Stick with simple values to avoid rounding issues.\n      return [-100, -50, -32, -16, -8, -1, 0, 1, 8, 16, 32, 50, 100];\n    case 'r16uint': // [0, 65535]\n    case 'rg16uint':\n      return [0, 1000, 32768, 65535, 65536, 70000];\n    case 'r16sint': // [-32768, 32767]\n    case 'rg16sint':\n      return [-32769, -32768, -1000, 0, 1000, 32767, 32768];\n\n    case 'rgb10a2uint':\n      return [0, 500, 1023, 1024, 3, 4];\n    case 'rgb10a2unorm':\n      return [-0.1, 0, 0.5, 1.0, 1.1];\n    case 'rg11b10ufloat':\n      return [1, 0.5, 0, 1];\n    default:\n      unreachable(`unhandled format ${format}`);\n      break;\n  }\n  return [];\n}\n\ng.test('texel_formats')\n  .desc(\n    `\n    Test storage of texel formats\n\n    - test values make it through.\n    - test out of range values get clamped.\n    - test 1d, 2d, 2d-array, 3d.\n    - test all storage formats.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kPossibleStorageTextureFormats)\n      .combine('viewDimension', kViewDimensions)\n      // Note: We can't use writable storage textures in a vertex stage.\n      .combine('stage', ['compute', 'fragment'] as const)\n      .combine('access', ['write', 'read_write'] as const)\n      .unless(\n        t => t.access === 'read_write' && !isTextureFormatPossiblyStorageReadWritable(t.format)\n      )\n      .combine('mipLevel', [0, 1, 2] as const)\n      .unless(t => t.viewDimension === '1d' && t.mipLevel !== 0)\n  )\n  .fn(t => {\n    const { format, stage, access, viewDimension, mipLevel } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotUsableWithStorageAccessMode(access, format);\n\n    const { componentType } = getTextureFormatTypeInfo(format);\n    const values = inputArray(format);\n\n    t.skipIf(\n      t.isCompatibility &&\n        stage === 'fragment' &&\n        t.device.limits.maxStorageTexturesInFragmentStage! < 1,\n      'device does not support storage textures in fragment shaders'\n    );\n\n    const suffix = format.endsWith('sint') ? 'i' : format.endsWith('uint') ? 'u' : 'f';\n    const swizzleWGSL = viewDimension === '1d' ? 'x' : viewDimension === '3d' ? 'xyz' : 'xy';\n    const layerWGSL = viewDimension === '2d-array' ? ', gid.z' : '';\n    const wgsl = `\nconst range = array(${values.map(v => `${v}${suffix}`).join(',')});\n\n@group(0) @binding(0)\nvar tex : texture_storage_${viewDimension.replace('-', '_')}<${format}, ${access}>;\n\nfn setValue(gid: vec3u) {\n  let ndx = gid.x + gid.y + gid.z;\n  let vecVal = vec4(\n    range[(ndx + 0) % ${values.length}],\n    range[(ndx + 1) % ${values.length}],\n    range[(ndx + 2) % ${values.length}],\n    range[(ndx + 3) % ${values.length}],\n  );\n  var val = vec4<${componentType}>(vecVal);\n  let coord = gid.${swizzleWGSL};\n  textureStore(tex, coord${layerWGSL}, val);\n}\n\n@compute @workgroup_size(${values.length})\nfn cs(@builtin(global_invocation_id) gid : vec3u) {\n  setValue(gid);\n}\n\nstruct VOut {\n  @builtin(position) pos: vec4f,\n  @location(0) @interpolate(flat, either) z: u32,\n}\n@vertex fn vs(\n  @builtin(vertex_index) vNdx: u32,\n  @builtin(instance_index) iNdx: u32,\n) -> VOut {\n  let pos = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(pos[vNdx], 0, 1), iNdx);\n}\n\n@fragment fn fs(v: VOut) -> @location(0) vec4f {\n  setValue(vec3u(u32(v.pos.x), u32(v.pos.y), v.z));\n  return vec4f(0);\n}\n`;\n\n    // choose a size so the mipLevel we will write to is the size we want to test\n    const mipMult = 2 ** mipLevel;\n    const size = values.length * mipMult;\n    const mipLevel0Size = [\n      size,\n      viewDimension === '1d' ? 1 : size,\n      viewDimension === '2d-array' ? values.length : viewDimension === '3d' ? size : 1,\n    ] as const;\n    const testMipLevelSize = [\n      values.length,\n      viewDimension === '1d' ? 1 : values.length,\n      viewDimension === '2d-array' || viewDimension === '3d' ? values.length : 1,\n    ] as const;\n    const dimension = getTextureDimensionFromView(viewDimension);\n    const texture = t.createTextureTracked({\n      format: format as GPUTextureFormat,\n      size: mipLevel0Size,\n      mipLevelCount: viewDimension === '1d' ? 1 : 3,\n      dimension,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const module = t.device.createShaderModule({\n      code: wgsl,\n    });\n\n    const pipeline =\n      stage === 'compute'\n        ? t.device.createComputePipeline({\n            layout: 'auto',\n            compute: { module },\n          })\n        : t.device.createRenderPipeline({\n            layout: 'auto',\n            vertex: { module },\n            fragment: { module, targets: [{ format: 'rgba8unorm' }] },\n          });\n\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: format as GPUTextureFormat,\n            dimension: viewDimension,\n            baseMipLevel: mipLevel,\n            mipLevelCount: 1,\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    switch (stage) {\n      case 'compute': {\n        const pass = encoder.beginComputePass();\n        pass.setPipeline(pipeline as GPUComputePipeline);\n        pass.setBindGroup(0, bg);\n        pass.dispatchWorkgroups(...testMipLevelSize);\n        pass.end();\n        break;\n      }\n      case 'fragment': {\n        const renderTarget = t.createTextureTracked({\n          size: testMipLevelSize.slice(0, 2),\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        });\n        const pass = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        pass.setPipeline(pipeline as GPURenderPipeline);\n        pass.setBindGroup(0, bg);\n        pass.draw(3, testMipLevelSize[2]);\n        pass.end();\n        break;\n      }\n    }\n    t.queue.submit([encoder.finish()]);\n\n    let bytesPerTexel = 4;\n    switch (format) {\n      case 'r8unorm':\n      case 'r8uint':\n      case 'r8snorm':\n      case 'r8sint':\n        bytesPerTexel = 1;\n        break;\n      case 'r16unorm':\n      case 'r16uint':\n      case 'r16snorm':\n      case 'r16sint':\n      case 'r16float':\n      case 'rg8unorm':\n      case 'rg8uint':\n      case 'rg8snorm':\n      case 'rg8sint':\n        bytesPerTexel = 2;\n        break;\n      case 'rg16unorm':\n      case 'rg16uint':\n      case 'rg16snorm':\n      case 'rg16sint':\n      case 'rg16float':\n      case 'rg11b10ufloat':\n      case 'rgb10a2uint':\n      case 'rgb10a2unorm':\n        bytesPerTexel = 4;\n        break;\n      case 'rgba16unorm':\n      case 'rgba16snorm':\n      case 'rgba16uint':\n      case 'rgba16sint':\n      case 'rgba16float':\n      case 'rg32uint':\n      case 'rg32sint':\n      case 'rg32float':\n        bytesPerTexel = 8;\n        break;\n      case 'rgba32uint':\n      case 'rgba32sint':\n      case 'rgba32float':\n        bytesPerTexel = 16;\n        break;\n      default:\n        break;\n    }\n\n    const buffer = ttu.copyWholeTextureToNewBufferSimple(t, texture, mipLevel);\n    const u32sPerTexel = bytesPerTexel / 4;\n    const u8sPerTexel = bytesPerTexel;\n    const bytesPerRow = align(testMipLevelSize[0] * bytesPerTexel, 256);\n    const texelsPerRow = bytesPerRow / bytesPerTexel;\n    const texelsPerSlice = texelsPerRow * testMipLevelSize[1];\n    const getValue = (i: number) => values[i % values.length];\n    const clampedPack4x8unorm = (...v: number[]) => {\n      const c = v.map(v => clamp(v, { min: 0, max: 1 }));\n      return pack4x8unorm(c[0], c[1], c[2], c[3]);\n    };\n    const clampedPack4x8snorm = (...v: number[]) => {\n      const c = v.map(v => clamp(v, { min: -1, max: 1 }));\n      return pack4x8snorm(c[0], c[1], c[2], c[3]);\n    };\n    if (format.startsWith('r8') || format.startsWith('rg8')) {\n      const expected = new Uint8Array([\n        // iterate over each u8\n        ...iterRange(buffer.size, i => {\n          const texelId = (i / u8sPerTexel) | 0;\n          const z = (texelId / texelsPerSlice) | 0;\n          const y = ((texelId / texelsPerRow) | 0) % testMipLevelSize[1];\n          const x = texelId % texelsPerRow;\n          // buffer is padded to 256 per row so when x is out of range just return 0\n          if (x >= testMipLevelSize[0]) {\n            return 0;\n          }\n          const id = x + y + z;\n          const unit = i % u8sPerTexel;\n          switch (format) {\n            case 'r8snorm': {\n              const vals = getValue(id);\n              const c = clamp(vals, { min: -1, max: 1 });\n              return Math.floor(0.5 + 127 * c);\n            }\n            case 'r8unorm': {\n              const vals = getValue(id);\n              const c = clamp(vals, { min: 0, max: 1 });\n              return Math.floor(0.5 + 255 * c);\n            }\n            case 'r8uint': {\n              const val = clamp(getValue(id), { min: 0, max: 255 });\n              return val & 0xff;\n            }\n            case 'r8sint': {\n              const val = clamp(getValue(id), { min: -0x80, max: 0x7f });\n              return val & 0xff;\n            }\n            case 'rg8snorm': {\n              const vals = getValue(id + unit);\n              const c = clamp(vals, { min: -1, max: 1 });\n              return Math.floor(0.5 + 127 * c);\n            }\n            case 'rg8unorm': {\n              const vals = getValue(id + unit);\n              const c = clamp(vals, { min: 0, max: 1 });\n              return Math.floor(0.5 + 255 * c);\n            }\n            case 'rg8uint': {\n              const val = clamp(getValue(id + unit), { min: 0, max: 255 });\n              return val & 0xff;\n            }\n            case 'rg8sint': {\n              const val = clamp(getValue(id + unit), { min: -0x80, max: 0x7f });\n              return val & 0xff;\n            }\n            default:\n              unreachable(`unhandled format ${format}`);\n              break;\n          }\n        }),\n      ]);\n      t.expectGPUBufferValuesEqual(buffer, expected);\n    } else if (format.startsWith('r16')) {\n      const expected = new Uint16Array([\n        // iterate over each u16\n        ...iterRange(buffer.size / 2, i => {\n          const texelId = i;\n          const z = (texelId / texelsPerSlice) | 0;\n          const y = ((texelId / texelsPerRow) | 0) % testMipLevelSize[1];\n          const x = texelId % texelsPerRow;\n          // buffer is padded to 256 per row so when x is out of range just return 0\n          if (x >= testMipLevelSize[0]) {\n            return 0;\n          }\n          const id = x + y + z;\n          switch (format) {\n            case 'r16sint': {\n              const vals = clamp(getValue(id), { min: -0x8000, max: 0x7fff });\n              return vals & 0xffff;\n            }\n            case 'r16uint': {\n              const vals = clamp(getValue(id), { min: 0, max: 0xffff });\n              return vals & 0xffff;\n            }\n            case 'r16snorm': {\n              const vals = getValue(id);\n              const c = clamp(vals, { min: -1, max: 1 });\n              return Math.floor(0.5 + 32767 * c);\n            }\n            case 'r16unorm': {\n              const vals = getValue(id);\n              const c = clamp(vals, { min: 0, max: 1 });\n              return Math.floor(0.5 + 65535 * c);\n            }\n            case 'r16float': {\n              const vals = numberToFloatBits(getValue(id), kFloat16Format);\n              return vals & 0xffff;\n            }\n            default:\n              unreachable(`unhandled format ${format}`);\n              break;\n          }\n        }),\n      ]);\n      t.expectGPUBufferValuesEqual(buffer, expected);\n    } else {\n      const expected = new Uint32Array([\n        // iterate over each u32\n        ...iterRange(buffer.size / 4, i => {\n          const texelId = (i / u32sPerTexel) | 0;\n          const z = (texelId / texelsPerSlice) | 0;\n          const y = ((texelId / texelsPerRow) | 0) % testMipLevelSize[1];\n          const x = texelId % texelsPerRow;\n          // buffer is padded to 256 per row so when x is out of range just return 0\n          if (x >= testMipLevelSize[0]) {\n            return 0;\n          }\n          const id = x + y + z;\n          const unit = i % u32sPerTexel;\n          switch (format) {\n            case 'rgba8unorm': {\n              const vals = range(4, i => getValue(id + i));\n              return clampedPack4x8unorm(vals[0], vals[1], vals[2], vals[3]);\n            }\n            case 'bgra8unorm': {\n              const vals = range(4, i => getValue(id + i));\n              return clampedPack4x8unorm(vals[2], vals[1], vals[0], vals[3]);\n            }\n            case 'rgba8snorm': {\n              const vals = range(4, i => getValue(id + i));\n              return clampedPack4x8snorm(vals[0], vals[1], vals[2], vals[3]);\n            }\n            case 'r32uint':\n              return clamp(getValue(id), { min: 0, max: 0xffffffff });\n            case 'r32sint':\n              return clamp(getValue(id), { min: -0x80000000, max: 0x7fffffff });\n            case 'rg32uint':\n            case 'rgba32uint':\n              return clamp(getValue(id + unit), { min: 0, max: 0xffffffff });\n            case 'rg32sint':\n            case 'rgba32sint':\n              return clamp(getValue(id + unit), { min: -0x80000000, max: 0x7fffffff });\n            case 'rgba8uint': {\n              const vals = range(4, i => clamp(getValue(id + i), { min: 0, max: 255 }));\n              return (\n                ((vals[3] & 0xff) << 24) |\n                ((vals[2] & 0xff) << 16) |\n                ((vals[1] & 0xff) << 8) |\n                (vals[0] & 0xff)\n              );\n            }\n            case 'rgba8sint': {\n              const vals = range(4, i => clamp(getValue(id + i), { min: -0x80, max: 0x7f }));\n              return (\n                ((vals[3] & 0xff) << 24) |\n                ((vals[2] & 0xff) << 16) |\n                ((vals[1] & 0xff) << 8) |\n                (vals[0] & 0xff)\n              );\n            }\n            case 'rgba16uint': {\n              const vals = range(2, i =>\n                clamp(getValue(id + unit * 2 + i), { min: 0, max: 0xffff })\n              );\n              return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n            }\n            case 'rgba16sint': {\n              const vals = range(2, i =>\n                clamp(getValue(id + unit * 2 + i), { min: -0x8000, max: 0x7fff })\n              );\n              return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n            }\n            case 'r32float':\n            case 'rg32float':\n            case 'rgba32float': {\n              return numberToFloatBits(getValue(id + unit), kFloat32Format);\n            }\n            case 'rgba16float': {\n              const vals = range(2, i =>\n                numberToFloatBits(getValue(id + unit * 2 + i), kFloat16Format)\n              );\n              return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n            }\n\n            case 'rg16uint': {\n              const vals = range(2, i => clamp(getValue(id + i), { min: 0, max: 0xffff }));\n              return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n            }\n            case 'rg16sint': {\n              const vals = range(2, i => clamp(getValue(id + i), { min: -0x8000, max: 0x7fff }));\n              return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n            }\n            case 'rg16unorm': {\n              const vals = range(2, i => getValue(id + i));\n              return pack2x16unorm(vals[0], vals[1]);\n            }\n            case 'rg16snorm': {\n              const vals = range(2, i => getValue(id + i));\n              return pack2x16snorm(vals[0], vals[1]);\n            }\n            case 'rg16float': {\n              const vals = range(2, i => numberToFloatBits(getValue(id + i), kFloat16Format));\n              return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n            }\n            case 'rgba16unorm': {\n              const vals = range(2, i => clamp(getValue(id + unit * 2 + i), { min: 0, max: 1 }));\n              return pack2x16unorm(vals[0], vals[1]);\n            }\n            case 'rgba16snorm': {\n              const vals = range(2, i => clamp(getValue(id + unit * 2 + i), { min: -1, max: 1 }));\n              return pack2x16snorm(vals[0], vals[1]);\n            }\n            case 'rgb10a2uint': {\n              const r = Math.max(Math.min(getValue(id), 1023), 0);\n              const g = Math.max(Math.min(getValue(id + 1), 1023), 0);\n              const b = Math.max(Math.min(getValue(id + 2), 1023), 0);\n              const a = Math.max(Math.min(getValue(id + 3), 3), 0);\n              return (a << 30) | (b << 20) | (g << 10) | r;\n            }\n            case 'rgb10a2unorm': {\n              const r = Math.round(Math.max(Math.min(getValue(id), 1), 0) * 1023);\n              const g = Math.round(Math.max(Math.min(getValue(id + 1), 1), 0) * 1023);\n              const b = Math.round(Math.max(Math.min(getValue(id + 2), 1), 0) * 1023);\n              const a = Math.round(Math.max(Math.min(getValue(id + 3), 1), 0) * 3);\n              return (a << 30) | (b << 20) | (g << 10) | r;\n            }\n            case 'rg11b10ufloat': {\n              const float11 = { zero: 0, one: 0x3c0, half: 0x380 }; // 11 bits: 1, 0, 0.5\n              const float10 = { zero: 0, one: 0x1e0, half: 0x1c0 }; // 10 bits: 1, 0, 0.5\n              const mapValue = (\n                val: number,\n                { zero, one, half }: { zero: number; one: number; half: number }\n              ) => (val === 0 ? zero : val === 1 ? one : half);\n              const r = mapValue(getValue(id), float11);\n              const g = mapValue(getValue(id + 1), float11);\n              const b = mapValue(getValue(id + 2), float10);\n              return (b << 22) | (g << 11) | r;\n            }\n            default:\n              unreachable(`unhandled format ${format}`);\n              break;\n          }\n        }),\n      ]);\n      t.expectGPUBufferValuesEqual(buffer, expected);\n    }\n  });\n\ng.test('bgra8unorm_swizzle')\n  .desc('Test bgra8unorm swizzling')\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('bgra8unorm-storage');\n    const values = [\n      { r: -1.1, g: 0.6, b: 0.4, a: 1 },\n      { r: 1.1, g: 0.6, b: 0.4, a: 1 },\n      { r: 0.4, g: -1.1, b: 0.6, a: 1 },\n      { r: 0.4, g: 1.1, b: 0.6, a: 1 },\n      { r: 0.6, g: 0.4, b: -1.1, a: 1 },\n      { r: 0.6, g: 0.4, b: 1.1, a: 1 },\n      { r: 0.2, g: 0.4, b: 0.6, a: 1 },\n      { r: -0.2, g: -0.4, b: -0.6, a: 1 },\n    ];\n    let wgsl = `\n@group(0) @binding(0) var tex : texture_storage_1d<bgra8unorm, write>;\n\nconst values = array(`;\n    for (const v of values) {\n      wgsl += `vec4(${v.r},${v.g},${v.b},${v.a}),\\n`;\n    }\n    wgsl += `);\n\n@compute @workgroup_size(${values.length})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let value = values[gid.x];\n  textureStore(tex, gid.x, value);\n}`;\n\n    const numTexels = values.length;\n    const textureSize: GPUExtent3D = { width: numTexels, height: 1, depthOrArrayLayers: 1 };\n    const texture = t.createTextureTracked({\n      format: 'bgra8unorm',\n      dimension: '1d',\n      size: textureSize,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: 'bgra8unorm',\n            dimension: '1d',\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(1, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const buffer = ttu.copyWholeTextureToNewBufferSimple(t, texture, 0);\n    const expected = new Uint32Array([\n      ...iterRange(numTexels, x => {\n        const { r, g, b, a } = values[x];\n        return pack4x8unorm(b, g, r, a);\n      }),\n    ]);\n    t.expectGPUBufferValuesEqual(buffer, expected);\n  });\n\n// Texture width for dimensions >1D.\n// Sized such that mip level 2 will be at least 256 bytes/row.\nconst kWidth = 256;\n\n// Returns the texture geometry based on a given number of texels.\nfunction getTextureSize(numTexels: number, dim: GPUTextureDimension, array: number): GPUExtent3D {\n  const size: GPUExtent3D = { width: 1, height: 1, depthOrArrayLayers: 1 };\n  switch (dim) {\n    case '1d':\n      size.width = numTexels;\n      break;\n    case '2d': {\n      const texelsPerArray = numTexels / array;\n      size.width = kWidth;\n      size.height = texelsPerArray / kWidth;\n      size.depthOrArrayLayers = array;\n      break;\n    }\n    case '3d':\n      size.width = kWidth;\n      size.height = numTexels / (2 * kWidth);\n      size.depthOrArrayLayers = 2;\n      break;\n  }\n  return size;\n}\n\n// WGSL declaration type for the texture.\nfunction textureType(dim: GPUTextureDimension): string {\n  return `texture_storage_${dim}<r32uint, write>`;\n}\n\n// Defines a function to convert linear global id into a texture coordinate.\nfunction indexToCoord(dim: GPUTextureDimension, type: string): string {\n  switch (dim) {\n    case '1d':\n      return `\nfn indexToCoord(id : u32) -> ${type} {\n  return ${type}(id);\n}`;\n      break;\n    case '2d':\n      return `\nfn indexToCoord(id : u32) -> vec2<${type}> {\n  return vec2<${type}>(${type}(id % width), ${type}(id / width));\n}`;\n      break;\n    case '3d':\n      return `\nfn indexToCoord(id : u32) -> vec3<${type}> {\n  const half = numTexels / depth;\n  let half_id = id % half;\n  return vec3<${type}>(${type}(half_id % width), ${type}(half_id / width), ${type}(id / half));\n}`;\n      break;\n  }\n  return ``;\n}\n\n// Mutates 'coords' to produce an out-of-bounds value.\n// 1D workgroups are launched so 'gid.x' is the linear id.\n//\n// This code is only executed for odd global ids (gid.x % 2 == 1).\n// All the values are chosen such they will further divide the odd invocations.\nfunction outOfBoundsValue(dim: GPUTextureDimension, type: string): string {\n  switch (dim) {\n    case '1d': {\n      if (type === 'i32') {\n        return `if gid.x % 3 == 0 {\n          coords = -coords;\n        } else {\n          coords = coords + numTexels;\n        }`;\n      } else {\n        return `coords = coords + numTexels;`;\n      }\n      break;\n    }\n    case '2d': {\n      if (type === 'i32') {\n        return `if gid.x % 3 == 0 {\n          coords.x = -coords.x;\n        } else {\n          coords.y = coords.y + height;\n        }`;\n      } else {\n        return `if gid.x % 3 == 1 {\n          coords.x = coords.x + width;\n        } else {\n          coords.y = coords.y + height;\n        }`;\n      }\n      break;\n    }\n    case '3d': {\n      if (type === 'i32') {\n        return `if gid.x % 3 == 0 {\n          coords.x = -coords.x;\n        } else if gid.x % 5 == 0 {\n          coords.y = coords.y + height;\n        } else {\n          coords.z = coords.z + depth;\n        }`;\n      } else {\n        return `if gid.x % 3 == 1 {\n          coords.x = coords.x + width;\n        } else if gid.x % 5 == 1 {\n          coords.y = coords.y + height;\n        } else {\n          coords.z = 2 * depth;\n        }`;\n      }\n      break;\n    }\n  }\n  return ``;\n}\n\n// Returns the number of texels for a given mip level.\n//\n// 1D textures cannot have multiple mip levels so always return the input number of texels.\nfunction getMipTexels(numTexels: number, dim: GPUTextureDimension, mip: number): number {\n  let texels = numTexels;\n  if (mip === 0) {\n    return texels;\n  }\n  if (dim === '2d') {\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n  } else if (dim === '3d') {\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n  }\n  return texels;\n}\n\ng.test('out_of_bounds')\n  .desc('Test that textureStore on out-of-bounds coordinates have no effect')\n  .params(u =>\n    u\n      .combine('dim', kDims)\n      .combine('coords', ['i32', 'u32'] as const)\n      .combine('mipCount', [1, 2, 3] as const)\n      .combine('mip', [0, 1, 2] as const)\n      .filter(t => {\n        if (t.dim === '1d') {\n          return t.mipCount === 1 && t.mip === 0;\n        }\n        if (t.dim === '3d') {\n          return t.mipCount <= 2 && t.mip < t.mipCount;\n        }\n        return t.mip < t.mipCount;\n      })\n  )\n  .fn(t => {\n    const texel_format = 'r32uint';\n    // Chosen such that the even at higher mip counts,\n    // the texture is laid out without padding.\n    // This simplifies the checking code below.\n    //\n    // Mip level | 1d   | 2d       | 3d\n    // -----------------------------------------\n    // 0         | 4096 | 256 x 16 | 256 x 8 x 2\n    // 1         | -    | 128 x 8  | 128 x 4 x 1\n    // 2         | -    | 64  x 4  | -\n    const num_texels = 4096;\n    const view_texels = getMipTexels(num_texels, t.params.dim, t.params.mip);\n\n    const texture_size = getTextureSize(num_texels, t.params.dim, 1);\n    const mip_size = virtualMipSize(t.params.dim, texture_size, t.params.mip);\n    const texture = t.createTextureTracked({\n      format: texel_format,\n      dimension: t.params.dim,\n      size: texture_size,\n      mipLevelCount: t.params.mipCount,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const oob_value = outOfBoundsValue(t.params.dim, t.params.coords);\n    const wgx_size = 32;\n    const num_wgs_x = view_texels / wgx_size;\n\n    const wgsl = `\n@group(0) @binding(0) var tex : ${textureType(t.params.dim)};\n\nconst numTexels = ${view_texels};\nconst width = ${mip_size[0]};\nconst height = ${mip_size[1]};\nconst depth = ${mip_size[2]};\n\n${indexToCoord(t.params.dim, t.params.coords)}\n\n@compute @workgroup_size(${wgx_size})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  var coords = indexToCoord(gid.x);\n  if gid.x % 2 == 1 {\n    ${oob_value}\n  }\n  textureStore(tex, coords, vec4u(gid.x));\n}`;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: texel_format,\n            dimension: t.params.dim,\n            baseArrayLayer: 0,\n            arrayLayerCount: 1,\n            baseMipLevel: t.params.mip,\n            mipLevelCount: 1,\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(num_wgs_x, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    for (let m = 0; m < t.params.mipCount; m++) {\n      const buffer = ttu.copyWholeTextureToNewBufferSimple(t, texture, m);\n      if (m === t.params.mip) {\n        const expectedOutput = new Uint32Array([\n          ...iterRange(view_texels, x => {\n            if (x >= view_texels) {\n              return 0;\n            }\n            if (x % 2 === 1) {\n              return 0;\n            }\n            return x;\n          }),\n        ]);\n        t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n      } else {\n        const expectedOutput = new Uint32Array([\n          ...iterRange(getMipTexels(num_texels, t.params.dim, m), x => 0),\n        ]);\n        t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n      }\n    }\n  });\n\nconst kArrayLevels = 4;\n\ng.test('out_of_bounds_array')\n  .desc('Test that out-of-bounds array coordinates to textureStore have no effect')\n  .params(u =>\n    u\n      .combine('baseLevel', [0, 1, 2, 3] as const)\n      .combine('arrayLevels', [1, 2, 3, 4] as const)\n      .combine('type', ['i32', 'u32'] as const)\n      .filter(t => {\n        if (t.arrayLevels <= t.baseLevel) {\n          return false;\n        }\n        if (kArrayLevels < t.baseLevel + t.arrayLevels) {\n          return false;\n        }\n        return true;\n      })\n  )\n  .beforeAllSubcases(t => {\n    if (t.isCompatibility) {\n      t.skipIf(\n        t.params.baseLevel !== 0,\n        'view base array layer must equal 0 in compatibility mode'\n      );\n      t.skipIf(\n        t.params.arrayLevels !== kArrayLevels,\n        'view array layers must equal texture array layers in compatibility mode'\n      );\n    }\n  })\n  .fn(t => {\n    const dim = '2d';\n    const view_dim = '2d-array';\n    const texel_format = 'r32uint';\n    const width = 64;\n    const height = 64;\n    const base_texels = width * height;\n    const num_texels = base_texels * kArrayLevels;\n    const view_texels = base_texels * t.params.arrayLevels;\n    const texture_size: GPUExtent3D = { width, height, depthOrArrayLayers: kArrayLevels };\n    const view_size: GPUExtent3D = { width, height, depthOrArrayLayers: t.params.arrayLevels };\n\n    const texture = t.createTextureTracked({\n      format: texel_format,\n      dimension: dim,\n      size: texture_size,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const wgx_size = 32;\n    const num_wgs_x = num_texels / wgx_size;\n\n    let oob_value = `layer = layer + layers;`;\n    if (t.params.type === 'i32') {\n      oob_value = `if gid.x % 3 == 0 {\n        layer = -(layer + layers);\n      } else {\n        layer = layer + layers;\n      }`;\n    }\n\n    const wgsl = `\n@group(0) @binding(0) var tex : texture_storage_2d_array<r32uint, write>;\n\nconst numTexels = ${view_texels};\nconst width = ${view_size.width};\nconst height = ${view_size.height ?? 1};\nconst layers = ${view_size.depthOrArrayLayers ?? 1};\nconst layerTexels = numTexels / layers;\n\n@compute @workgroup_size(${wgx_size})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let layer_id = gid.x % layerTexels;\n  var x = ${t.params.type}(layer_id % width);\n  var y = ${t.params.type}(layer_id / width);\n  var layer = ${t.params.type}(gid.x / layerTexels);\n  if gid.x % 2 == 1 {\n    ${oob_value}\n  }\n  textureStore(tex, vec2(x, y), layer, vec4u(gid.x));\n}`;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: texel_format,\n            dimension: view_dim,\n            baseArrayLayer: t.params.baseLevel,\n            arrayLayerCount: t.params.arrayLevels,\n            baseMipLevel: 0,\n            mipLevelCount: 1,\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(num_wgs_x, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const buffer = ttu.copyWholeTextureToNewBufferSimple(t, texture, 0);\n    const expectedOutput = new Uint32Array([\n      ...iterRange(num_texels, x => {\n        const baseOffset = base_texels * t.params.baseLevel;\n        if (x < baseOffset) {\n          return 0;\n        }\n        if (base_texels * (t.params.baseLevel + t.params.arrayLevels) <= x) {\n          return 0;\n        }\n        if (x % 2 === 1) {\n          return 0;\n        }\n        return x - baseOffset;\n      }),\n    ]);\n    t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n  });\n"],"mappings":"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"}