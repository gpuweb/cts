{"version":3,"file":"textureStore.spec.js","names":["description","makeTestGroup","unreachable","iterRange","range","isTextureFormatPossiblyStorageReadWritable","kPossibleStorageTextureFormats","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","kFloat32Format","kFloat16Format","numberToFloatBits","pack4x8unorm","pack4x8snorm","align","clamp","getTextureDimensionFromView","virtualMipSize","getTextureFormatTypeInfo","kDims","kViewDimensions","g","inputArray","format","test","desc","params","u","combine","unless","t","access","viewDimension","mipLevel","fn","stage","skipIfTextureFormatNotUsableAsReadWriteStorageTexture","componentType","values","skipIf","isCompatibility","device","limits","maxStorageTexturesInFragmentStage","suffix","endsWith","swizzleWGSL","layerWGSL","wgsl","map","v","join","replace","length","mipMult","size","mipLevel0Size","testMipLevelSize","dimension","texture","createTextureTracked","mipLevelCount","usage","GPUTextureUsage","STORAGE_BINDING","COPY_SRC","module","createShaderModule","code","pipeline","createComputePipeline","layout","compute","createRenderPipeline","vertex","fragment","targets","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","baseMipLevel","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","renderTarget","slice","RENDER_ATTACHMENT","beginRenderPass","colorAttachments","view","loadOp","storeOp","draw","queue","submit","finish","bytesPerTexel","buffer","copyWholeTextureToNewBufferSimple","u32sPerTexel","bytesPerRow","texelsPerRow","texelsPerSlice","getValue","i","clampedPack4x8unorm","c","min","max","clampedPack4x8snorm","expected","Uint32Array","texelId","z","y","x","id","unit","vals","expectGPUBufferValuesEqual","skipIfDeviceDoesNotHaveFeature","r","b","a","numTexels","textureSize","width","height","depthOrArrayLayers","entryPoint","kWidth","getTextureSize","dim","array","texelsPerArray","textureType","indexToCoord","type","outOfBoundsValue","getMipTexels","mip","texels","filter","mipCount","texel_format","num_texels","view_texels","texture_size","mip_size","oob_value","coords","wgx_size","num_wgs_x","baseArrayLayer","arrayLayerCount","m","expectedOutput","kArrayLevels","arrayLevels","baseLevel","beforeAllSubcases","view_dim","base_texels","view_size","baseOffset"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureStore.spec.ts"],"sourcesContent":["export const description = `\nWrites a single texel to a texture.\n\nThe channel format T depends on the storage texel format F.\nSee the texel format table for the mapping of texel format to channel format.\n\nNote: An out-of-bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t)) for the corresponding element, or\n * array_index is outside the range of [0, textureNumLayers(t))\n\nIf an out-of-bounds access occurs, the built-in function should not be executed.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { unreachable, iterRange, range } from '../../../../../../common/util/util.js';\nimport {\n  isTextureFormatPossiblyStorageReadWritable,\n  kPossibleStorageTextureFormats,\n} from '../../../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../../../../../gpu_test.js';\nimport {\n  kFloat32Format,\n  kFloat16Format,\n  numberToFloatBits,\n  pack4x8unorm,\n  pack4x8snorm,\n} from '../../../../../util/conversion.js';\nimport { align, clamp } from '../../../../../util/math.js';\nimport { getTextureDimensionFromView, virtualMipSize } from '../../../../../util/texture/base.js';\n\nimport { getTextureFormatTypeInfo } from './texture_utils.js';\n\nconst kDims = ['1d', '2d', '3d'] as const;\nconst kViewDimensions = ['1d', '2d', '2d-array', '3d'] as const;\n\nexport const g = makeTestGroup(TextureTestMixin(AllFeaturesMaxLimitsGPUTest));\n\n// We require a few values that are out of range for a given type\n// so we can check clamping behavior.\nfunction inputArray(format: string): number[] {\n  switch (format) {\n    case 'rgba8snorm':\n      return [-1.1, 1.0, -0.6, -0.3, 0, 0.3, 0.6, 1.0, 1.1];\n    case 'rgba8unorm':\n    case 'bgra8unorm':\n      return [-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.1];\n    case 'rgba8uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 256, 512];\n    case 'rgba16uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 0xffff, 0x1ffff];\n    case 'rgba32uint':\n    case 'r32uint':\n    case 'rg32uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 256, 512, 0xffffffff];\n    case 'rgba8sint':\n      return [-128, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127];\n    case 'rgba16sint':\n      return [-32768, -32769, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127, 0x7fff, 0x8000];\n    case 'r32sint':\n    case 'rg32sint':\n    case 'rgba32sint':\n      return [-0x8000000, -32769, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127, 0x7ffffff];\n    case 'rgba16float':\n    case 'rgba32float':\n    case 'r32float':\n    case 'rg32float':\n      // Stick with simple values to avoid rounding issues.\n      return [-100, -50, -32, -16, -8, -1, 0, 1, 8, 16, 32, 50, 100];\n    default:\n      unreachable(`unhandled format ${format}`);\n      break;\n  }\n  return [];\n}\n\ng.test('texel_formats')\n  .desc(\n    `\n    Test storage of texel formats\n\n    - test values make it through.\n    - test out of range values get clamped.\n    - test 1d, 2d, 2d-array, 3d.\n    - test all storage formats.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kPossibleStorageTextureFormats)\n      .combine('viewDimension', kViewDimensions)\n      // Note: We can't use writable storage textures in a vertex stage.\n      .combine('stage', ['compute', 'fragment'] as const)\n      .combine('access', ['write', 'read_write'] as const)\n      .unless(\n        t => t.access === 'read_write' && !isTextureFormatPossiblyStorageReadWritable(t.format)\n      )\n      .combine('mipLevel', [0, 1, 2] as const)\n      .unless(t => t.viewDimension === '1d' && t.mipLevel !== 0)\n  )\n  .fn(t => {\n    const { format, stage, access, viewDimension, mipLevel } = t.params;\n    t.skipIfTextureFormatNotUsableAsReadWriteStorageTexture(format);\n\n    const { componentType } = getTextureFormatTypeInfo(format);\n    const values = inputArray(format);\n\n    t.skipIf(\n      t.isCompatibility &&\n        stage === 'fragment' &&\n        t.device.limits.maxStorageTexturesInFragmentStage! < 1,\n      'device does not support storage textures in fragment shaders'\n    );\n\n    const suffix = format.endsWith('sint') ? 'i' : format.endsWith('uint') ? 'u' : 'f';\n    const swizzleWGSL = viewDimension === '1d' ? 'x' : viewDimension === '3d' ? 'xyz' : 'xy';\n    const layerWGSL = viewDimension === '2d-array' ? ', gid.z' : '';\n    const wgsl = `\nconst range = array(${values.map(v => `${v}${suffix}`).join(',')});\n\n@group(0) @binding(0)\nvar tex : texture_storage_${viewDimension.replace('-', '_')}<${format}, ${access}>;\n\nfn setValue(gid: vec3u) {\n  let ndx = gid.x + gid.y + gid.z;\n  let vecVal = vec4(\n    range[(ndx + 0) % ${values.length}],\n    range[(ndx + 1) % ${values.length}],\n    range[(ndx + 2) % ${values.length}],\n    range[(ndx + 3) % ${values.length}],\n  );\n  var val = vec4<${componentType}>(vecVal);\n  let coord = gid.${swizzleWGSL};\n  textureStore(tex, coord${layerWGSL}, val);\n}\n\n@compute @workgroup_size(${values.length})\nfn cs(@builtin(global_invocation_id) gid : vec3u) {\n  setValue(gid);\n}\n\nstruct VOut {\n  @builtin(position) pos: vec4f,\n  @location(0) @interpolate(flat, either) z: u32,\n}\n@vertex fn vs(\n  @builtin(vertex_index) vNdx: u32,\n  @builtin(instance_index) iNdx: u32,\n) -> VOut {\n  let pos = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(pos[vNdx], 0, 1), iNdx);\n}\n\n@fragment fn fs(v: VOut) -> @location(0) vec4f {\n  setValue(vec3u(u32(v.pos.x), u32(v.pos.y), v.z));\n  return vec4f(0);\n}\n`;\n\n    // choose a size so the mipLevel we will write to is the size we want to test\n    const mipMult = 2 ** mipLevel;\n    const size = values.length * mipMult;\n    const mipLevel0Size = [\n      size,\n      viewDimension === '1d' ? 1 : size,\n      viewDimension === '2d-array' ? values.length : viewDimension === '3d' ? size : 1,\n    ] as const;\n    const testMipLevelSize = [\n      values.length,\n      viewDimension === '1d' ? 1 : values.length,\n      viewDimension === '2d-array' || viewDimension === '3d' ? values.length : 1,\n    ] as const;\n    const dimension = getTextureDimensionFromView(viewDimension);\n    const texture = t.createTextureTracked({\n      format: format as GPUTextureFormat,\n      size: mipLevel0Size,\n      mipLevelCount: viewDimension === '1d' ? 1 : 3,\n      dimension,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const module = t.device.createShaderModule({\n      code: wgsl,\n    });\n\n    const pipeline =\n      stage === 'compute'\n        ? t.device.createComputePipeline({\n            layout: 'auto',\n            compute: { module },\n          })\n        : t.device.createRenderPipeline({\n            layout: 'auto',\n            vertex: { module },\n            fragment: { module, targets: [{ format: 'rgba8unorm' }] },\n          });\n\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: format as GPUTextureFormat,\n            dimension: viewDimension,\n            baseMipLevel: mipLevel,\n            mipLevelCount: 1,\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    switch (stage) {\n      case 'compute': {\n        const pass = encoder.beginComputePass();\n        pass.setPipeline(pipeline as GPUComputePipeline);\n        pass.setBindGroup(0, bg);\n        pass.dispatchWorkgroups(...testMipLevelSize);\n        pass.end();\n        break;\n      }\n      case 'fragment': {\n        const renderTarget = t.createTextureTracked({\n          size: testMipLevelSize.slice(0, 2),\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        });\n        const pass = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        pass.setPipeline(pipeline as GPURenderPipeline);\n        pass.setBindGroup(0, bg);\n        pass.draw(3, testMipLevelSize[2]);\n        pass.end();\n        break;\n      }\n    }\n    t.queue.submit([encoder.finish()]);\n\n    let bytesPerTexel = 4;\n    switch (format) {\n      case 'rgba16uint':\n      case 'rgba16sint':\n      case 'rgba16float':\n      case 'rg32uint':\n      case 'rg32sint':\n      case 'rg32float':\n        bytesPerTexel = 8;\n        break;\n      case 'rgba32uint':\n      case 'rgba32sint':\n      case 'rgba32float':\n        bytesPerTexel = 16;\n        break;\n      default:\n        break;\n    }\n\n    const buffer = t.copyWholeTextureToNewBufferSimple(texture, mipLevel);\n    const u32sPerTexel = bytesPerTexel / 4;\n    const bytesPerRow = align(testMipLevelSize[0] * bytesPerTexel, 256);\n    const texelsPerRow = bytesPerRow / bytesPerTexel;\n    const texelsPerSlice = texelsPerRow * testMipLevelSize[1];\n    const getValue = (i: number) => values[i % values.length];\n    const clampedPack4x8unorm = (...v: number[]) => {\n      const c = v.map(v => clamp(v, { min: 0, max: 1 }));\n      return pack4x8unorm(c[0], c[1], c[2], c[3]);\n    };\n    const clampedPack4x8snorm = (...v: number[]) => {\n      const c = v.map(v => clamp(v, { min: -1, max: 1 }));\n      return pack4x8snorm(c[0], c[1], c[2], c[3]);\n    };\n    const expected = new Uint32Array([\n      // iterate over each u32\n      ...iterRange(buffer.size / 4, i => {\n        const texelId = (i / u32sPerTexel) | 0;\n        const z = (texelId / texelsPerSlice) | 0;\n        const y = ((texelId / texelsPerRow) | 0) % testMipLevelSize[1];\n        const x = texelId % texelsPerRow;\n        // buffer is padded to 256 per row so when x is out of range just return 0\n        if (x >= testMipLevelSize[0]) {\n          return 0;\n        }\n        const id = x + y + z;\n        const unit = i % u32sPerTexel;\n        switch (format) {\n          case 'rgba8unorm': {\n            const vals = range(4, i => getValue(id + i));\n            return clampedPack4x8unorm(vals[0], vals[1], vals[2], vals[3]);\n          }\n          case 'bgra8unorm': {\n            const vals = range(4, i => getValue(id + i));\n            return clampedPack4x8unorm(vals[2], vals[1], vals[0], vals[3]);\n          }\n          case 'rgba8snorm': {\n            const vals = range(4, i => getValue(id + i));\n            return clampedPack4x8snorm(vals[0], vals[1], vals[2], vals[3]);\n          }\n          case 'r32uint':\n            return clamp(getValue(id), { min: 0, max: 0xffffffff });\n          case 'r32sint':\n            return clamp(getValue(id), { min: -0x80000000, max: 0x7fffffff });\n          case 'rg32uint':\n          case 'rgba32uint':\n            return clamp(getValue(id + unit), { min: 0, max: 0xffffffff });\n          case 'rg32sint':\n          case 'rgba32sint':\n            return clamp(getValue(id + unit), { min: -0x80000000, max: 0x7fffffff });\n          case 'rgba8uint': {\n            const vals = range(4, i => clamp(getValue(id + i), { min: 0, max: 255 }));\n            return (\n              ((vals[3] & 0xff) << 24) |\n              ((vals[2] & 0xff) << 16) |\n              ((vals[1] & 0xff) << 8) |\n              (vals[0] & 0xff)\n            );\n          }\n          case 'rgba8sint': {\n            const vals = range(4, i => clamp(getValue(id + i), { min: -0x80, max: 0x7f }));\n            return (\n              ((vals[3] & 0xff) << 24) |\n              ((vals[2] & 0xff) << 16) |\n              ((vals[1] & 0xff) << 8) |\n              (vals[0] & 0xff)\n            );\n          }\n          case 'rgba16uint': {\n            const vals = range(2, i => clamp(getValue(id + unit * 2 + i), { min: 0, max: 0xffff }));\n            return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n          }\n          case 'rgba16sint': {\n            const vals = range(2, i =>\n              clamp(getValue(id + unit * 2 + i), { min: -0x8000, max: 0x7fff })\n            );\n            return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n          }\n          case 'r32float':\n          case 'rg32float':\n          case 'rgba32float': {\n            return numberToFloatBits(getValue(id + unit), kFloat32Format);\n          }\n          case 'rgba16float': {\n            const vals = range(2, i =>\n              numberToFloatBits(getValue(id + unit * 2 + i), kFloat16Format)\n            );\n            return ((vals[1] & 0xffff) << 16) | (vals[0] & 0xffff);\n          }\n          default:\n            unreachable(`unhandled format ${format}`);\n            break;\n        }\n      }),\n    ]);\n    t.expectGPUBufferValuesEqual(buffer, expected);\n  });\n\ng.test('bgra8unorm_swizzle')\n  .desc('Test bgra8unorm swizzling')\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('bgra8unorm-storage');\n    const values = [\n      { r: -1.1, g: 0.6, b: 0.4, a: 1 },\n      { r: 1.1, g: 0.6, b: 0.4, a: 1 },\n      { r: 0.4, g: -1.1, b: 0.6, a: 1 },\n      { r: 0.4, g: 1.1, b: 0.6, a: 1 },\n      { r: 0.6, g: 0.4, b: -1.1, a: 1 },\n      { r: 0.6, g: 0.4, b: 1.1, a: 1 },\n      { r: 0.2, g: 0.4, b: 0.6, a: 1 },\n      { r: -0.2, g: -0.4, b: -0.6, a: 1 },\n    ];\n    let wgsl = `\n@group(0) @binding(0) var tex : texture_storage_1d<bgra8unorm, write>;\n\nconst values = array(`;\n    for (const v of values) {\n      wgsl += `vec4(${v.r},${v.g},${v.b},${v.a}),\\n`;\n    }\n    wgsl += `);\n\n@compute @workgroup_size(${values.length})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let value = values[gid.x];\n  textureStore(tex, gid.x, value);\n}`;\n\n    const numTexels = values.length;\n    const textureSize: GPUExtent3D = { width: numTexels, height: 1, depthOrArrayLayers: 1 };\n    const texture = t.createTextureTracked({\n      format: 'bgra8unorm',\n      dimension: '1d',\n      size: textureSize,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: 'bgra8unorm',\n            dimension: '1d',\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(1, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const buffer = t.copyWholeTextureToNewBufferSimple(texture, 0);\n    const expected = new Uint32Array([\n      ...iterRange(numTexels, x => {\n        const { r, g, b, a } = values[x];\n        return pack4x8unorm(b, g, r, a);\n      }),\n    ]);\n    t.expectGPUBufferValuesEqual(buffer, expected);\n  });\n\n// Texture width for dimensions >1D.\n// Sized such that mip level 2 will be at least 256 bytes/row.\nconst kWidth = 256;\n\n// Returns the texture geometry based on a given number of texels.\nfunction getTextureSize(numTexels: number, dim: GPUTextureDimension, array: number): GPUExtent3D {\n  const size: GPUExtent3D = { width: 1, height: 1, depthOrArrayLayers: 1 };\n  switch (dim) {\n    case '1d':\n      size.width = numTexels;\n      break;\n    case '2d': {\n      const texelsPerArray = numTexels / array;\n      size.width = kWidth;\n      size.height = texelsPerArray / kWidth;\n      size.depthOrArrayLayers = array;\n      break;\n    }\n    case '3d':\n      size.width = kWidth;\n      size.height = numTexels / (2 * kWidth);\n      size.depthOrArrayLayers = 2;\n      break;\n  }\n  return size;\n}\n\n// WGSL declaration type for the texture.\nfunction textureType(dim: GPUTextureDimension): string {\n  return `texture_storage_${dim}<r32uint, write>`;\n}\n\n// Defines a function to convert linear global id into a texture coordinate.\nfunction indexToCoord(dim: GPUTextureDimension, type: string): string {\n  switch (dim) {\n    case '1d':\n      return `\nfn indexToCoord(id : u32) -> ${type} {\n  return ${type}(id);\n}`;\n      break;\n    case '2d':\n      return `\nfn indexToCoord(id : u32) -> vec2<${type}> {\n  return vec2<${type}>(${type}(id % width), ${type}(id / width));\n}`;\n      break;\n    case '3d':\n      return `\nfn indexToCoord(id : u32) -> vec3<${type}> {\n  const half = numTexels / depth;\n  let half_id = id % half;\n  return vec3<${type}>(${type}(half_id % width), ${type}(half_id / width), ${type}(id / half));\n}`;\n      break;\n  }\n  return ``;\n}\n\n// Mutates 'coords' to produce an out-of-bounds value.\n// 1D workgroups are launched so 'gid.x' is the linear id.\n//\n// This code is only executed for odd global ids (gid.x % 2 == 1).\n// All the values are chosen such they will further divide the odd invocations.\nfunction outOfBoundsValue(dim: GPUTextureDimension, type: string): string {\n  switch (dim) {\n    case '1d': {\n      if (type === 'i32') {\n        return `if gid.x % 3 == 0 {\n          coords = -coords;\n        } else {\n          coords = coords + numTexels;\n        }`;\n      } else {\n        return `coords = coords + numTexels;`;\n      }\n      break;\n    }\n    case '2d': {\n      if (type === 'i32') {\n        return `if gid.x % 3 == 0 {\n          coords.x = -coords.x;\n        } else {\n          coords.y = coords.y + height;\n        }`;\n      } else {\n        return `if gid.x % 3 == 1 {\n          coords.x = coords.x + width;\n        } else {\n          coords.y = coords.y + height;\n        }`;\n      }\n      break;\n    }\n    case '3d': {\n      if (type === 'i32') {\n        return `if gid.x % 3 == 0 {\n          coords.x = -coords.x;\n        } else if gid.x % 5 == 0 {\n          coords.y = coords.y + height;\n        } else {\n          coords.z = coords.z + depth;\n        }`;\n      } else {\n        return `if gid.x % 3 == 1 {\n          coords.x = coords.x + width;\n        } else if gid.x % 5 == 1 {\n          coords.y = coords.y + height;\n        } else {\n          coords.z = 2 * depth;\n        }`;\n      }\n      break;\n    }\n  }\n  return ``;\n}\n\n// Returns the number of texels for a given mip level.\n//\n// 1D textures cannot have multiple mip levels so always return the input number of texels.\nfunction getMipTexels(numTexels: number, dim: GPUTextureDimension, mip: number): number {\n  let texels = numTexels;\n  if (mip === 0) {\n    return texels;\n  }\n  if (dim === '2d') {\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n  } else if (dim === '3d') {\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n  }\n  return texels;\n}\n\ng.test('out_of_bounds')\n  .desc('Test that textureStore on out-of-bounds coordinates have no effect')\n  .params(u =>\n    u\n      .combine('dim', kDims)\n      .combine('coords', ['i32', 'u32'] as const)\n      .combine('mipCount', [1, 2, 3] as const)\n      .combine('mip', [0, 1, 2] as const)\n      .filter(t => {\n        if (t.dim === '1d') {\n          return t.mipCount === 1 && t.mip === 0;\n        }\n        if (t.dim === '3d') {\n          return t.mipCount <= 2 && t.mip < t.mipCount;\n        }\n        return t.mip < t.mipCount;\n      })\n  )\n  .fn(t => {\n    const texel_format = 'r32uint';\n    // Chosen such that the even at higher mip counts,\n    // the texture is laid out without padding.\n    // This simplifies the checking code below.\n    //\n    // Mip level | 1d   | 2d       | 3d\n    // -----------------------------------------\n    // 0         | 4096 | 256 x 16 | 256 x 8 x 2\n    // 1         | -    | 128 x 8  | 128 x 4 x 1\n    // 2         | -    | 64  x 4  | -\n    const num_texels = 4096;\n    const view_texels = getMipTexels(num_texels, t.params.dim, t.params.mip);\n\n    const texture_size = getTextureSize(num_texels, t.params.dim, 1);\n    const mip_size = virtualMipSize(t.params.dim, texture_size, t.params.mip);\n    const texture = t.createTextureTracked({\n      format: texel_format,\n      dimension: t.params.dim,\n      size: texture_size,\n      mipLevelCount: t.params.mipCount,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const oob_value = outOfBoundsValue(t.params.dim, t.params.coords);\n    const wgx_size = 32;\n    const num_wgs_x = view_texels / wgx_size;\n\n    const wgsl = `\n@group(0) @binding(0) var tex : ${textureType(t.params.dim)};\n\nconst numTexels = ${view_texels};\nconst width = ${mip_size[0]};\nconst height = ${mip_size[1]};\nconst depth = ${mip_size[2]};\n\n${indexToCoord(t.params.dim, t.params.coords)}\n\n@compute @workgroup_size(${wgx_size})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  var coords = indexToCoord(gid.x);\n  if gid.x % 2 == 1 {\n    ${oob_value}\n  }\n  textureStore(tex, coords, vec4u(gid.x));\n}`;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: texel_format,\n            dimension: t.params.dim,\n            baseArrayLayer: 0,\n            arrayLayerCount: 1,\n            baseMipLevel: t.params.mip,\n            mipLevelCount: 1,\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(num_wgs_x, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    for (let m = 0; m < t.params.mipCount; m++) {\n      const buffer = t.copyWholeTextureToNewBufferSimple(texture, m);\n      if (m === t.params.mip) {\n        const expectedOutput = new Uint32Array([\n          ...iterRange(view_texels, x => {\n            if (x >= view_texels) {\n              return 0;\n            }\n            if (x % 2 === 1) {\n              return 0;\n            }\n            return x;\n          }),\n        ]);\n        t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n      } else {\n        const expectedOutput = new Uint32Array([\n          ...iterRange(getMipTexels(num_texels, t.params.dim, m), x => 0),\n        ]);\n        t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n      }\n    }\n  });\n\nconst kArrayLevels = 4;\n\ng.test('out_of_bounds_array')\n  .desc('Test that out-of-bounds array coordinates to textureStore have no effect')\n  .params(u =>\n    u\n      .combine('baseLevel', [0, 1, 2, 3] as const)\n      .combine('arrayLevels', [1, 2, 3, 4] as const)\n      .combine('type', ['i32', 'u32'] as const)\n      .filter(t => {\n        if (t.arrayLevels <= t.baseLevel) {\n          return false;\n        }\n        if (kArrayLevels < t.baseLevel + t.arrayLevels) {\n          return false;\n        }\n        return true;\n      })\n  )\n  .beforeAllSubcases(t => {\n    if (t.isCompatibility) {\n      t.skipIf(\n        t.params.baseLevel !== 0,\n        'view base array layer must equal 0 in compatibility mode'\n      );\n      t.skipIf(\n        t.params.arrayLevels !== kArrayLevels,\n        'view array layers must equal texture array layers in compatibility mode'\n      );\n    }\n  })\n  .fn(t => {\n    const dim = '2d';\n    const view_dim = '2d-array';\n    const texel_format = 'r32uint';\n    const width = 64;\n    const height = 64;\n    const base_texels = width * height;\n    const num_texels = base_texels * kArrayLevels;\n    const view_texels = base_texels * t.params.arrayLevels;\n    const texture_size: GPUExtent3D = { width, height, depthOrArrayLayers: kArrayLevels };\n    const view_size: GPUExtent3D = { width, height, depthOrArrayLayers: t.params.arrayLevels };\n\n    const texture = t.createTextureTracked({\n      format: texel_format,\n      dimension: dim,\n      size: texture_size,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n\n    const wgx_size = 32;\n    const num_wgs_x = num_texels / wgx_size;\n\n    let oob_value = `layer = layer + layers;`;\n    if (t.params.type === 'i32') {\n      oob_value = `if gid.x % 3 == 0 {\n        layer = -(layer + layers);\n      } else {\n        layer = layer + layers;\n      }`;\n    }\n\n    const wgsl = `\n@group(0) @binding(0) var tex : texture_storage_2d_array<r32uint, write>;\n\nconst numTexels = ${view_texels};\nconst width = ${view_size.width};\nconst height = ${view_size.height ?? 1};\nconst layers = ${view_size.depthOrArrayLayers ?? 1};\nconst layerTexels = numTexels / layers;\n\n@compute @workgroup_size(${wgx_size})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let layer_id = gid.x % layerTexels;\n  var x = ${t.params.type}(layer_id % width);\n  var y = ${t.params.type}(layer_id / width);\n  var layer = ${t.params.type}(gid.x / layerTexels);\n  if gid.x % 2 == 1 {\n    ${oob_value}\n  }\n  textureStore(tex, vec2(x, y), layer, vec4u(gid.x));\n}`;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: texel_format,\n            dimension: view_dim,\n            baseArrayLayer: t.params.baseLevel,\n            arrayLayerCount: t.params.arrayLevels,\n            baseMipLevel: 0,\n            mipLevelCount: 1,\n          }),\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(num_wgs_x, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const buffer = t.copyWholeTextureToNewBufferSimple(texture, 0);\n    const expectedOutput = new Uint32Array([\n      ...iterRange(num_texels, x => {\n        const baseOffset = base_texels * t.params.baseLevel;\n        if (x < baseOffset) {\n          return 0;\n        }\n        if (base_texels * (t.params.baseLevel + t.params.arrayLevels) <= x) {\n          return 0;\n        }\n        if (x % 2 === 1) {\n          return 0;\n        }\n        return x - baseOffset;\n      }),\n    ]);\n    t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n  });\n"],"mappings":"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"}