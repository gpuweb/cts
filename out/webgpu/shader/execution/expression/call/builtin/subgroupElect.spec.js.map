{"version":3,"file":"subgroupElect.spec.js","names":["description","makeTestGroup","keysOf","iterRange","SubgroupTest","kFramebufferSizes","getUintsPerFramebuffer","kWGSizes","kDataSentinel","runComputeTest","runFragmentTest","kPredicateCases","g","checkCompute","metadata","output","filter","size","length","elected","i","res","id","expected","Error","undefined","test","desc","params","u","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","wgThreads","wgSize","wgsl","uintsPerOutput","Uint32Array","beginSubcases","testcase","predicate","cond","x","subgroupMaxSize","device","adapterInfo","skipIf","checkFragment","data","format","width","height","uintsPerRow","uintsPerTexel","inBounds","Map","row","col","offset","subgroup_id","ok","get","set","anyInBounds","_","value","Boolean","subgroupInBounds","toString","combineWithParams","subgroupMinSize","innerTexels","fsShader"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupElect.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for subgroupElect\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { iterRange } from '../../../../../../common/util/util.js';\n\nimport {\n  SubgroupTest,\n  kFramebufferSizes,\n  getUintsPerFramebuffer,\n  kWGSizes,\n  kDataSentinel,\n  runComputeTest,\n  runFragmentTest,\n  kPredicateCases,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\n/**\n * Checks subgroupElect compute shader results\n *\n * @param metadata An array of uint32s containing:\n *                 * subgroup_invocation_id in first half\n *                 * subgroup_size in second half\n * @param output An array of uint32s containing elect results\n * @param filter A functor to determine active invocations\n */\nfunction checkCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  filter: (id: number, size: number) => boolean\n): Error | undefined {\n  const size = metadata[output.length];\n  let elected = 129;\n  for (let i = 0; i < 128; i++) {\n    if (filter(i, size)) {\n      elected = i;\n      break;\n    }\n  }\n\n  for (let i = 0; i < output.length; i++) {\n    const res = output[i];\n    const id = metadata[i];\n    let expected = kDataSentinel;\n    if (filter(id, size)) {\n      expected = elected === id ? 1 : 0;\n    }\n    if (res !== expected) {\n      return new Error(`Invocation ${i}: incorrect result\n- expected: ${expected}\n-      got: ${res}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc('Test subgroupElect in compute shader with all active invocations')\n  .params(u => u.combine('wgSize', kWGSizes))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>; // unused\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n  @builtin(local_invocation_index) lid : u32,\n) {\n  // Force usage.\n  _ = inputs[0];\n\n  let e = subgroupElect();\n  outputs[lid] = select(0u, 1u, e);\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n}`;\n\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkCompute(metadata, output, (id: number, size: number) => {\n          return true;\n        });\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc('Test subgroupElect in compute shader with partially active invocations')\n  .params(u =>\n    u.combine('predicate', keysOf(kPredicateCases)).beginSubcases().combine('wgSize', kWGSizes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const testcase = kPredicateCases[t.params.predicate];\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>; // unused\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n  @builtin(local_invocation_index) lid : u32,\n) {\n  // Force usage.\n  _ = inputs[0];\n\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n  if ${testcase.cond} {\n    let e = subgroupElect();\n    outputs[lid] = select(0u, 1u, e);\n  } else {\n    return;\n  }\n}`;\n\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkCompute(metadata, output, testcase.filter);\n      }\n    );\n  });\n\ng.test('compute,each_invocation')\n  .desc('Test subgroupElect in compute shader to elect each possible invocation')\n  .params(u =>\n    u\n      .combine('id', [...iterRange(128, x => x)])\n      .beginSubcases()\n      .combine('wgSize', kWGSizes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    interface SubgroupProperties extends GPUAdapterInfo {\n      subgroupMaxSize: number;\n    }\n    const { subgroupMaxSize } = t.device.adapterInfo as SubgroupProperties;\n    t.skipIf(subgroupMaxSize <= t.params.id, 'No invocation selected');\n\n    const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>; // unused\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n  @builtin(local_invocation_index) lid : u32,\n) {\n  // Force usage.\n  _ = inputs[0];\n\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n  if id >= ${t.params.id} {\n    let e = subgroupElect();\n    outputs[lid] = select(0u, 1u, e);\n  } else {\n    return;\n  }\n}`;\n\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkCompute(metadata, output, (id: number, size: number) => {\n          return id >= t.params.id;\n        });\n      }\n    );\n  });\n\n/**\n * Checks subgroupElect results from a fragment shader.\n *\n * Avoids subgroups in last row or column to skip potential helper invocations.\n * @param data Framebuffer output\n *             * component 0 is result\n *             * component 1 is generated subgroup_invocation_id\n *             * component 2 is generated subgroup id\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n */\nfunction checkFragment(\n  data: Uint32Array,\n  format: GPUTextureFormat,\n  width: number,\n  height: number\n): Error | undefined {\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  // Determine if the subgroup should be included in the checks.\n  const inBounds = new Map<number, boolean>();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const subgroup_id = data[offset + 2];\n      if (subgroup_id === 0) {\n        return new Error(`Internal error: helper invocation at (${col}, ${row})`);\n      }\n\n      let ok = inBounds.get(subgroup_id) ?? true;\n      ok = ok && row !== height - 1 && col !== width - 1;\n      inBounds.set(subgroup_id, ok);\n    }\n  }\n\n  let anyInBounds = false;\n  for (const [_, value] of inBounds) {\n    const ok = Boolean(value);\n    anyInBounds = anyInBounds || ok;\n  }\n  if (!anyInBounds) {\n    // This variant would not reliably test behavior.\n    return undefined;\n  }\n\n  // Iteration skips subgroups in the last row or column to avoid helper\n  // invocations because it is not guaranteed whether or not they participate\n  // in the subgroup operation.\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const subgroup_id = data[offset + 2];\n\n      if (subgroup_id === 0) {\n        return new Error(`Internal error: helper invocation at (${col}, ${row})`);\n      }\n\n      const subgroupInBounds = inBounds.get(subgroup_id) ?? true;\n      if (!subgroupInBounds) {\n        continue;\n      }\n\n      const res = data[offset];\n      const id = data[offset + 1];\n      const expected = id === 0 ? 0x55555555 : 0xaaaaaaaa;\n      if (res !== expected) {\n        return new Error(`Row ${row}, col ${col}: incorrect result\n- expected: 0x${expected.toString(16)}\n-      got: 0x${res.toString(16)}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment')\n  .desc('Tests subgroupElect in fragment shaders')\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combineWithParams([{ format: 'rgba32uint' }] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    interface SubgroupProperties extends GPUAdapterInfo {\n      subgroupMinSize: number;\n    }\n    const { subgroupMinSize } = t.device.adapterInfo as SubgroupProperties;\n    const innerTexels = (t.params.size[0] - 1) * (t.params.size[1] - 1);\n    t.skipIf(innerTexels < subgroupMinSize, 'Too few texels to be reliable');\n\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<uniform> inputs : array<vec4u, 1>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n  @builtin(subgroup_invocation_id) id : u32,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  // Generate a subgroup id based on linearized position, avoid 0.\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n  let subgroup_id = subgroupBroadcastFirst(linear + 1);\n\n  let e = subgroupElect();\n  let res = select(0xaaaaaaaau, 0x55555555u, e);\n  return vec4u(res, id, subgroup_id, 0);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      new Uint32Array([0]), // unused,\n      (data: Uint32Array) => {\n        return checkFragment(data, t.params.format, t.params.size[0], t.params.size[1]);\n      }\n    );\n  });\n"],"mappings":"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"}