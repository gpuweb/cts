{"version":3,"file":"atomicLoad.spec.js","names":["description","makeTestGroup","keysOf","AllFeaturesMaxLimitsGPUTest","dispatchSizes","workgroupSizes","typedArrayCtor","kMapId","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","scalarType","mapId","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","arrayType","inputBuffer","createBufferTracked","size","BYTES_PER_ELEMENT","usage","GPUBufferUsage","STORAGE","COPY_SRC","mappedAtCreation","data","getMappedRange","forEach","_","i","f","unmap","outputBuffer","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expected","expectGPUBufferValuesEqual","wgNumElements","extra"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicLoad.spec.ts"],"sourcesContent":["export const description = `\nReturns the atomically loaded the value pointed to by atomic_ptr. It does not modify the object.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../../gpu_test.js';\n\nimport { dispatchSizes, workgroupSizes, typedArrayCtor, kMapId } from './harness.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('load_storage')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-load')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicLoad(atomic_ptr: ptr<AS, atomic<T>, read_write>) -> T\n\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n    const bufferNumElements = numInvocations;\n    const scalarType = t.params.scalarType;\n    const mapId = kMapId[t.params.mapId];\n\n    const wgsl = `\n      @group(0) @binding(0)\n      var<storage, read_write> input : array<atomic<${scalarType}>>;\n\n      @group(0) @binding(1)\n      var<storage, read_write> output : array<${scalarType}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n          ) {\n        let id = ${scalarType}(global_invocation_id[0]);\n        output[id] = atomicLoad(&input[id]);\n      }\n    `;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n\n    // Create input buffer with values [map_id(0)..map_id(n)]\n    const inputBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    const data = new arrayType(inputBuffer.getMappedRange());\n    data.forEach((_, i) => (data[i] = mapId.f(i, numInvocations)));\n    inputBuffer.unmap();\n\n    const outputBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: inputBuffer } },\n        { binding: 1, resource: { buffer: outputBuffer } },\n      ],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(t.params.dispatchSize);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Both input and output buffer should be the same now\n    const expected = new (typedArrayCtor(t.params.scalarType))(bufferNumElements);\n    expected.forEach((_, i) => (expected[i] = mapId.f(i, numInvocations)));\n    t.expectGPUBufferValuesEqual(inputBuffer, expected);\n    t.expectGPUBufferValuesEqual(outputBuffer, expected);\n  });\n\ng.test('load_workgroup')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-load')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicLoad(atomic_ptr: ptr<AS, atomic<T>, read_write>) -> T\n\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize;\n    const wgNumElements = numInvocations;\n    const scalarType = t.params.scalarType;\n    const dispatchSize = t.params.dispatchSize;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const wgsl =\n      `\n      var<workgroup> wg: array<atomic<${scalarType}>, ${wgNumElements}>;\n\n      // Result of each workgroup is written to output[workgroup_id.x]\n      @group(0) @binding(0)\n      var<storage, read_write> output: array<${scalarType}, ${wgNumElements * dispatchSize}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(local_invocation_index) local_invocation_index: u32,\n          @builtin(workgroup_id) workgroup_id : vec3<u32>\n          ) {\n        let id = ${scalarType}(local_invocation_index);\n        let global_id = ${scalarType}(workgroup_id.x * ${wgNumElements} + local_invocation_index);\n\n        // Initialize wg[id] with this invocations global id (mapped)\n        atomicStore(&wg[id], map_id(global_id));\n        workgroupBarrier();\n\n        // Test atomic loading of value at wg[id] and store result in output[global_id]\n        output[global_id] = atomicLoad(&wg[id]);\n      }\n      ` + extra;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n\n    const outputBuffer = t.createBufferTracked({\n      size: wgNumElements * dispatchSize * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(dispatchSize);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Expected values should be map_id(0..n)\n    const expected = new (typedArrayCtor(t.params.scalarType))(\n      wgNumElements * t.params.dispatchSize\n    );\n    expected.forEach((_, i) => (expected[i] = mapId.f(i, numInvocations)));\n\n    t.expectGPUBufferValuesEqual(outputBuffer, expected);\n  });\n"],"mappings":"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"}