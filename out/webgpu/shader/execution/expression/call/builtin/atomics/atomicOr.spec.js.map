{"version":3,"file":"atomicOr.spec.js","names":["description","makeTestGroup","keysOf","AllFeaturesMaxLimitsGPUTest","dispatchSizes","workgroupSizes","runStorageVariableTest","runWorkgroupVariableTest","kMapId","typedArrayCtor","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","Math","max","initValue","scalarType","mapId","extra","wgsl","op","expected","id","i","f","floor","wgNumElements","d","wg","subarray"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicOr.spec.ts"],"sourcesContent":["export const description = `\nAtomically read, or and store value.\n\n* Load the original value pointed to by atomic_ptr.\n* Obtains a new value by or'ing with the value v.\n* Store the new value using atomic_ptr.\n\nReturns the original value stored in the atomic object.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../../gpu_test.js';\n\nimport {\n  dispatchSizes,\n  workgroupSizes,\n  runStorageVariableTest,\n  runWorkgroupVariableTest,\n  kMapId,\n  typedArrayCtor,\n} from './harness.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('or_storage')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicOr(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T) -> T\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n\n    // Allocate an output buffer with bitsize of max invocations plus 1 for validation\n    const bufferNumElements = Math.max(1, numInvocations / 32) + 1;\n\n    // Start with all bits low, then using atomicOr to set mapped global id bit on.\n    // Note: Both WGSL and JS will shift left 1 by id modulo 32.\n    const initValue = 0;\n\n    const scalarType = t.params.scalarType;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations); // Defines map_id()\n    const op = `\n    let i = map_id(u32(id));\n      atomicOr(&output[i / 32], ${scalarType}(1) << i)\n    `;\n    const expected = new (typedArrayCtor(scalarType))(bufferNumElements);\n    for (let id = 0; id < numInvocations; ++id) {\n      const i = mapId.f(id, numInvocations);\n      expected[Math.floor(i / 32)] |= 1 << i;\n    }\n\n    runStorageVariableTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      bufferNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n\ng.test('or_workgroup')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicOr(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T) -> T\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize;\n\n    // Allocate workgroup array with bitsize of max invocations plus 1 for validation\n    const wgNumElements = Math.max(1, numInvocations / 32) + 1;\n\n    // Start with all bits low, then using atomicOr to set mapped local id bit on.\n    // Note: Both WGSL and JS will shift left 1 by id modulo 32.\n    const initValue = 0;\n\n    const scalarType = t.params.scalarType;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations); // Defines map_id()\n    const op = `\n    let i = map_id(u32(id));\n      atomicOr(&wg[i / 32], ${scalarType}(1) << i)\n    `;\n    const expected = new (typedArrayCtor(scalarType))(wgNumElements * t.params.dispatchSize);\n    for (let d = 0; d < t.params.dispatchSize; ++d) {\n      for (let id = 0; id < numInvocations; ++id) {\n        const wg = expected.subarray(d * wgNumElements);\n        const i = mapId.f(id, numInvocations);\n        wg[Math.floor(i / 32)] |= 1 << i;\n      }\n    }\n\n    runWorkgroupVariableTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      wgNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n"],"mappings":"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"}