{"version":3,"file":"atomicStore.spec.js","names":["description","makeTestGroup","keysOf","AllFeaturesMaxLimitsGPUTest","dispatchSizes","workgroupSizes","runStorageVariableTest","runWorkgroupVariableTest","typedArrayCtor","kMapId","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","mapId","extra","wgsl","scalarType","initValue","op","expected","forEach","_","i","f","wgNumElements","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","arrayType","outputBuffer","createBufferTracked","size","BYTES_PER_ELEMENT","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","outputBufferResult","readGPUBufferRangeTyped","type","typedLength","data","expected_one_of","includes","fail","d"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicStore.spec.ts"],"sourcesContent":["export const description = `\nAtomically stores the value v in the atomic object pointed to by atomic_ptr.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../../gpu_test.js';\n\nimport {\n  dispatchSizes,\n  workgroupSizes,\n  runStorageVariableTest,\n  runWorkgroupVariableTest,\n  typedArrayCtor,\n  kMapId,\n} from './harness.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('store_storage_basic')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-store')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n    const bufferNumElements = numInvocations;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const initValue = 0;\n    const op = `atomicStore(&output[id], map_id(id))`;\n    const expected = new (typedArrayCtor(t.params.scalarType))(bufferNumElements);\n    expected.forEach((_, i) => (expected[i] = mapId.f(i, numInvocations)));\n\n    runStorageVariableTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      bufferNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n\ng.test('store_workgroup_basic')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-store')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize;\n    const wgNumElements = numInvocations;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const initValue = 0;\n    const op = `atomicStore(&wg[id], map_id(global_id))`;\n    const expected = new (typedArrayCtor(t.params.scalarType))(\n      wgNumElements * t.params.dispatchSize\n    );\n    expected.forEach((_, i) => (expected[i] = mapId.f(i, numInvocations)));\n\n    runWorkgroupVariableTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      wgNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n\ng.test('store_storage_advanced')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-store')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n\nTests that multiple invocations of atomicStore to the same location returns\none of the values written.\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(async t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n    const scalarType = t.params.scalarType;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const wgsl =\n      `\n      @group(0) @binding(0)\n      var<storage, read_write> output : array<atomic<${scalarType}>>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n          ) {\n        let id = ${scalarType}(global_invocation_id[0]);\n\n        // All invocations store to the same location\n        atomicStore(&output[0], map_id(id));\n      }\n    ` + extra;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n\n    // Output buffer has only 1 element\n    const outputBuffer = t.createBufferTracked({\n      size: 1 * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(t.params.dispatchSize);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Read back the buffer\n    const outputBufferResult = (\n      await t.readGPUBufferRangeTyped(outputBuffer, {\n        type: arrayType,\n        typedLength: outputBuffer.size / arrayType.BYTES_PER_ELEMENT,\n      })\n    ).data;\n\n    // All invocations wrote to the output[0], so validate that it contains one\n    // of the possible computed values.\n    const expected_one_of = new arrayType(numInvocations);\n    expected_one_of.forEach((_, i) => (expected_one_of[i] = mapId.f(i, numInvocations)));\n\n    if (!expected_one_of.includes(outputBufferResult[0])) {\n      t.fail(\n        `Unexpected value in output[0]: '${outputBufferResult[0]}, expected value to be one of: ${expected_one_of}`\n      );\n    }\n  });\n\ng.test('store_workgroup_advanced')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-store')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n\nTests that multiple invocations of atomicStore to the same location returns\none of the values written.\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(async t => {\n    const numInvocations = t.params.workgroupSize;\n    const scalarType = t.params.scalarType;\n    const dispatchSize = t.params.dispatchSize;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const wgsl =\n      `\n      var<workgroup> wg: atomic<${scalarType}>;\n\n      // Result of each workgroup is written to output[workgroup_id.x]\n      @group(0) @binding(0)\n      var<storage, read_write> output: array<${scalarType}, ${dispatchSize}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(local_invocation_index) local_invocation_index: u32,\n          @builtin(workgroup_id) workgroup_id : vec3<u32>\n          ) {\n        let id = ${scalarType}(local_invocation_index);\n\n        // All invocations of a given dispatch store to the same location.\n        // In the end, the final value should be randomly equal to one of the ids.\n        atomicStore(&wg, map_id(id));\n\n        // Once all invocations have completed, the first one copies the result\n        // to output for this dispatch (workgroup_id.x)\n        workgroupBarrier();\n        if (local_invocation_index == 0u) {\n          output[workgroup_id.x] = atomicLoad(&wg);\n        }\n      }\n      ` + extra;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n\n    const outputBuffer = t.createBufferTracked({\n      size: dispatchSize * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(dispatchSize);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Read back the buffer\n    const outputBufferResult = (\n      await t.readGPUBufferRangeTyped(outputBuffer, {\n        type: arrayType,\n        typedLength: outputBuffer.size / arrayType.BYTES_PER_ELEMENT,\n      })\n    ).data;\n\n    // Each dispatch wrote to a single atomic workgroup var that was copied\n    // to outputBuffer[dispatch]. Validate that each value in the output buffer\n    // is one of the possible computed values.\n    const expected_one_of = new arrayType(numInvocations);\n    expected_one_of.forEach((_, i) => (expected_one_of[i] = mapId.f(i, numInvocations)));\n\n    for (let d = 0; d < dispatchSize; d++) {\n      if (!expected_one_of.includes(outputBufferResult[d])) {\n        t.fail(\n          `Unexpected value in output[d] for dispatch d '${d}': '${outputBufferResult[d]}', expected value to be one of: ${expected_one_of}`\n        );\n      }\n    }\n  });\n"],"mappings":"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"}