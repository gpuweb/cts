{"version":3,"file":"harness.js","names":["assert","workgroupSizes","dispatchSizes","onlyWorkgroupSizes","kMapId","passthrough","f","id","_max","wgsl","scalarType","remap","max","typedArrayCtor","Uint32Array","Int32Array","runStorageVariableTest","t","workgroupSize","dispatchSize","bufferNumElements","initValue","op","expected","extra","length","arrayType","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","outputBuffer","createBufferTracked","size","BYTES_PER_ELEMENT","usage","GPUBufferUsage","STORAGE","COPY_SRC","mappedAtCreation","data","getMappedRange","fill","unmap","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","label","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","runWorkgroupVariableTest","wgNumElements"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/harness.ts"],"sourcesContent":["import {\n  assert,\n  TypedArrayBufferView,\n  TypedArrayBufferViewConstructor,\n} from '../../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../../gpu_test.js';\n\n// Use these in combination.\nexport const workgroupSizes = [1, 2, 32, 64];\nexport const dispatchSizes = [1, 4, 8, 16];\n\n// Use this alone - dispatch size should be 1.\nexport const onlyWorkgroupSizes = [1, 2, 4, 8, 16, 32, 64, 128, 256];\n\nexport const kMapId = {\n  passthrough: {\n    f: (id: number, _max: number) => id,\n    wgsl: (_max: number, scalarType = 'u32') =>\n      `fn map_id(id: ${scalarType}) -> ${scalarType} { return id; }`,\n  },\n  remap: {\n    f: (id: number, max: number) => (((id >>> 0) * 14957) ^ (((id >>> 0) * 26561) >> 2)) % max,\n    wgsl: (max: number, scalarType = 'u32') =>\n      `fn map_id(id: ${scalarType}) -> ${scalarType} { return ((id * 14957) ^ ((id * 26561) >> 2)) % ${max}; }`,\n  },\n};\n\nexport function typedArrayCtor(\n  scalarType: 'u32' | 'i32'\n): TypedArrayBufferViewConstructor<Uint32Array | Int32Array> {\n  switch (scalarType) {\n    case 'u32':\n      return Uint32Array;\n    case 'i32':\n      return Int32Array;\n  }\n}\n\nexport function runStorageVariableTest({\n  t,\n  workgroupSize, // Workgroup X-size\n  dispatchSize, // Dispatch X-size\n  bufferNumElements, // Number of 32-bit elements in output buffer\n  initValue, // 32-bit initial value used to fill output buffer\n  // Atomic op source executed by the compute shader, NOTE: 'id' is global_invocation_id.x,\n  // and `output` is a storage array of atomics.\n  op,\n  expected, // Expected values array to compare against output buffer\n  extra, // Optional extra WGSL source\n}: {\n  t: GPUTest;\n  workgroupSize: number;\n  dispatchSize: number;\n  bufferNumElements: number;\n  initValue: number;\n  op: string;\n  expected: TypedArrayBufferView;\n  extra?: string;\n}) {\n  assert(expected.length === bufferNumElements, \"'expected' buffer size is incorrect\");\n\n  const scalarType = expected instanceof Uint32Array ? 'u32' : 'i32';\n  const arrayType = typedArrayCtor(scalarType);\n\n  const wgsl = `\n    @group(0) @binding(0)\n    var<storage, read_write> output : array<atomic<${scalarType}>>;\n\n    @compute @workgroup_size(${workgroupSize})\n    fn main(\n        @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n        ) {\n      let id = ${scalarType}(global_invocation_id[0]);\n      ${op};\n    }\n    ${extra || ''}\n    `;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main',\n    },\n  });\n\n  const outputBuffer = t.createBufferTracked({\n    size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    mappedAtCreation: true,\n  });\n  // Fill with initial value\n  const data = new arrayType(outputBuffer.getMappedRange());\n  data.fill(initValue);\n  outputBuffer.unmap();\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n  });\n\n  // Run the shader.\n  const encoder = t.device.createCommandEncoder({ label: 'runStorageVariableTest' });\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(dispatchSize);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(outputBuffer, expected);\n}\n\nexport function runWorkgroupVariableTest({\n  t,\n  workgroupSize, // Workgroup X-size\n  dispatchSize, // Dispatch X-size\n  wgNumElements, // Number of 32-bit elements in 'wg' array. Output buffer is sized to wgNumElements * dispatchSize.\n  initValue, // 32-bit initial value used to fill 'wg' array\n  // Atomic op source executed by the compute shader, NOTE: 'id' is local_invocation_index,\n  // `wg` is a workgroup array of atomics of size `workgroupSize`, `output` is a storage array of non-atomics of size\n  // `workgroupSize * dispatcSize` to which each dispatch of `wg` gets copied to (dispatch 0 to first workgroupSize elements,\n  // dispatch 1 to second workgroupSize elements, etc.).\n  op,\n  expected, // Expected values array to compare against output buffer\n  extra, // Optional extra WGSL source\n}: {\n  t: GPUTest;\n  workgroupSize: number;\n  dispatchSize: number;\n  wgNumElements: number;\n  initValue: number;\n  op: string;\n  expected: TypedArrayBufferView;\n  extra?: string;\n}) {\n  assert(expected.length === wgNumElements * dispatchSize, \"'expected' buffer size is incorrect\");\n\n  const scalarType = expected instanceof Uint32Array ? 'u32' : 'i32';\n  const arrayType = typedArrayCtor(scalarType);\n\n  const wgsl = `\n    var<workgroup> wg: array<atomic<${scalarType}>, ${wgNumElements}>;\n\n    // Result of each workgroup is written to output[workgroup_id.x]\n    @group(0) @binding(0)\n    var<storage, read_write> output: array<${scalarType}, ${wgNumElements * dispatchSize}>;\n\n    @compute @workgroup_size(${workgroupSize})\n    fn main(\n        @builtin(local_invocation_index) local_invocation_index: u32,\n        @builtin(workgroup_id) workgroup_id : vec3<u32>\n        ) {\n      let id = ${scalarType}(local_invocation_index);\n      let global_id = ${scalarType}(workgroup_id.x * ${wgNumElements} + local_invocation_index);\n\n      // Initialize workgroup array\n      if (local_invocation_index == 0) {\n        for (var i = 0u; i < ${wgNumElements}; i++) {\n          atomicStore(&wg[i], bitcast<${scalarType}>(${initValue}u));\n        }\n      }\n      workgroupBarrier();\n\n      ${op};\n\n      // Copy results to output buffer\n      workgroupBarrier();\n      if (local_invocation_index == 0) {\n        for (var i = 0u; i < ${wgNumElements}; i++) {\n          output[(workgroup_id.x * ${wgNumElements}) + i] = atomicLoad(&wg[i]);\n        }\n      }\n    }\n    ${extra || ''}\n    `;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main',\n    },\n  });\n\n  const outputBuffer = t.createBufferTracked({\n    size: wgNumElements * dispatchSize * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n  });\n\n  // Run the shader.\n  const encoder = t.device.createCommandEncoder({ label: 'runWorkgroupVariableTest' });\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(dispatchSize);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(outputBuffer, expected);\n}\n"],"mappings":"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"}