{"version":3,"file":"atomicCompareExchangeWeak.spec.js","names":["description","makeTestGroup","keysOf","assert","AllFeaturesMaxLimitsGPUTest","dispatchSizes","workgroupSizes","typedArrayCtor","kMapId","onlyWorkgroupSizes","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","scalarType","mapId","extra","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","arrayType","inputBuffer","createBufferTracked","size","BYTES_PER_ELEMENT","usage","GPUBufferUsage","STORAGE","COPY_SRC","mappedAtCreation","data","getMappedRange","forEach","_","i","unmap","outputBuffer","exchangedBuffer","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","outputExpected","expectGPUBufferValuesEqual","exchangedBufferResult","readGPUBufferRangeTyped","type","typedLength","inputExpected","f","wgNumElements","wgCopyBuffer","wgCopyBufferExpected","skipIf","limits","maxComputeWorkgroupSizeX","numWrites","pingPongValues","defaultValue","dataBuffer","oldValuesBuffer","fill","oldValuesBufferResult","w","offset","exchanged","subarray","oldValues","dumpValues","noExchanges","every","v","fail","filter","length","idx","findIndex","oldValue","oldValuesRest","includes"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicCompareExchangeWeak.spec.ts"],"sourcesContent":["export const description = `\nPerforms the following steps atomically:\n * Load the original value pointed to by atomic_ptr.\n * Compare the original value to the value v using an equality operation.\n * Store the value v only if the result of the equality comparison was true.\n\nReturns a two member structure, where the first member, old_value, is the original\nvalue of the atomic object and the second member, exchanged, is whether or not\nthe comparison succeeded.\n\nNote: the equality comparison may spuriously fail on some implementations.\nThat is, the second component of the result vector may be false even if the first\ncomponent of the result vector equals cmp.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../../gpu_test.js';\n\nimport {\n  dispatchSizes,\n  workgroupSizes,\n  typedArrayCtor,\n  kMapId,\n  onlyWorkgroupSizes,\n} from './harness.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('compare_exchange_weak_storage_basic')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicCompareExchangeWeak(atomic_ptr: ptr<AS, atomic<T>, read_write>, cmp: T, v: T) -> __atomic_compare_exchange_result<T>\n\nstruct __atomic_compare_exchange_result<T> {\n  old_value : T,    // old value stored in the atomic\n  exchanged : bool, // true if the exchange was done\n}\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(async t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n    const bufferNumElements = numInvocations;\n    const scalarType = t.params.scalarType;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const wgsl =\n      `\n      @group(0) @binding(0)\n      var<storage, read_write> input : array<atomic<${scalarType}>>;\n\n      @group(0) @binding(1)\n      var<storage, read_write> output : array<${scalarType}>;\n\n      @group(0) @binding(2)\n      var<storage, read_write> exchanged : array<${scalarType}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n          ) {\n        let id = ${scalarType}(global_invocation_id[0]);\n\n        // Exchange every third value\n        var comp = id + 1;\n        if (id % 3 == 0) {\n          comp = id;\n        }\n        let r = atomicCompareExchangeWeak(&input[id], comp, map_id(id * 2));\n\n        // Store results\n            output[id] = r.old_value;\n        if (r.exchanged) {\n          exchanged[id] = 1;\n        } else {\n          exchanged[id] = 0;\n        }\n      }\n    ` + extra;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n\n    // Create input buffer with values [0..n]\n    const inputBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    const data = new arrayType(inputBuffer.getMappedRange());\n    data.forEach((_, i) => (data[i] = i));\n    inputBuffer.unmap();\n\n    const outputBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const exchangedBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: inputBuffer } },\n        { binding: 1, resource: { buffer: outputBuffer } },\n        { binding: 2, resource: { buffer: exchangedBuffer } },\n      ],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(t.params.dispatchSize);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Output buffer should be the same as the initial input buffer as it contains\n    // values returned from atomicCompareExchangeWeak\n    const outputExpected = new (typedArrayCtor(t.params.scalarType))(bufferNumElements);\n    outputExpected.forEach((_, i) => (outputExpected[i] = i));\n    t.expectGPUBufferValuesEqual(outputBuffer, outputExpected);\n\n    // Read back exchanged buffer\n    const exchangedBufferResult = await t.readGPUBufferRangeTyped(exchangedBuffer, {\n      type: arrayType,\n      typedLength: exchangedBuffer.size / arrayType.BYTES_PER_ELEMENT,\n    });\n\n    // The input buffer should have been modified to a computed value for every third value,\n    // unless the comparison spuriously failed.\n    const inputExpected = new (typedArrayCtor(t.params.scalarType))(bufferNumElements);\n    inputExpected.forEach((_, i) => {\n      if (i % 3 === 0 && exchangedBufferResult.data[i]) {\n        inputExpected[i] = mapId.f(i * 2, numInvocations);\n      } else {\n        inputExpected[i] = i; // No change\n      }\n    });\n    t.expectGPUBufferValuesEqual(inputBuffer, inputExpected);\n  });\n\ng.test('compare_exchange_weak_workgroup_basic')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicCompareExchangeWeak(atomic_ptr: ptr<AS, atomic<T>, read_write>, cmp: T, v: T) -> __atomic_compare_exchange_result<T>\n\nstruct __atomic_compare_exchange_result<T> {\n  old_value : T,    // old value stored in the atomic\n  exchanged : bool, // true if the exchange was done\n}\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(async t => {\n    const numInvocations = t.params.workgroupSize;\n    const wgNumElements = numInvocations;\n    const scalarType = t.params.scalarType;\n    const dispatchSize = t.params.dispatchSize;\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n    const wgsl =\n      `\n      var<workgroup> wg: array<atomic<${scalarType}>, ${wgNumElements}>;\n\n      @group(0) @binding(0)\n      var<storage, read_write> output: array<${scalarType}, ${wgNumElements * dispatchSize}>;\n\n      @group(0) @binding(1)\n      var<storage, read_write> exchanged: array<${scalarType}, ${wgNumElements * dispatchSize}>;\n\n      // Result of each workgroup is written to output[workgroup_id.x]\n      @group(0) @binding(2)\n      var<storage, read_write> wg_copy: array<${scalarType}, ${wgNumElements * dispatchSize}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(local_invocation_index) local_invocation_index: u32,\n          @builtin(workgroup_id) workgroup_id : vec3<u32>\n          ) {\n        let id = ${scalarType}(local_invocation_index);\n        let global_id = ${scalarType}(workgroup_id.x * ${wgNumElements} + local_invocation_index);\n\n        // Initialize wg[id] with this invocations global id\n        atomicStore(&wg[id], global_id);\n\n        // Exchange every third value\n        var comp = global_id + 1;\n        if (global_id % 3 == 0) {\n          comp = global_id;\n        }\n        let r = atomicCompareExchangeWeak(&wg[id], comp, map_id(global_id * 2));\n\n        // Store results\n        output[global_id] = r.old_value;\n        if (r.exchanged) {\n          exchanged[global_id] = 1;\n        } else {\n          exchanged[global_id] = 0;\n        }\n\n        // Copy new value into wg_copy\n        wg_copy[global_id] = atomicLoad(&wg[id]);\n      }\n      ` + extra;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n\n    const outputBuffer = t.createBufferTracked({\n      size: wgNumElements * dispatchSize * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const wgCopyBuffer = t.createBufferTracked({\n      size: wgNumElements * dispatchSize * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const exchangedBuffer = t.createBufferTracked({\n      size: wgNumElements * dispatchSize * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: outputBuffer } },\n        { binding: 1, resource: { buffer: exchangedBuffer } },\n        { binding: 2, resource: { buffer: wgCopyBuffer } },\n      ],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(dispatchSize);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Output buffer should be the same as the initial wg buffer as it contains\n    // values returned from atomicCompareExchangeWeak\n    const outputExpected = new (typedArrayCtor(t.params.scalarType))(wgNumElements * dispatchSize);\n    outputExpected.forEach((_, i) => (outputExpected[i] = i));\n    t.expectGPUBufferValuesEqual(outputBuffer, outputExpected);\n\n    // Read back exchanged buffer\n    const exchangedBufferResult = await t.readGPUBufferRangeTyped(exchangedBuffer, {\n      type: arrayType,\n      typedLength: exchangedBuffer.size / arrayType.BYTES_PER_ELEMENT,\n    });\n\n    // And the wg copy buffer should have been modified to a computed value for every third value,\n    // unless the comparison spuriously failed.\n    const wgCopyBufferExpected = new (typedArrayCtor(t.params.scalarType))(\n      wgNumElements * dispatchSize\n    );\n    wgCopyBufferExpected.forEach((_, i) => {\n      if (i % 3 === 0 && exchangedBufferResult.data[i]) {\n        wgCopyBufferExpected[i] = mapId.f(i * 2, numInvocations);\n      } else {\n        wgCopyBufferExpected[i] = i; // No change\n      }\n    });\n    t.expectGPUBufferValuesEqual(wgCopyBuffer, wgCopyBufferExpected);\n  });\n\ng.test('compare_exchange_weak_storage_advanced')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicCompareExchangeWeak(atomic_ptr: ptr<AS, atomic<T>, read_write>, cmp: T, v: T) -> __atomic_compare_exchange_result<T>\n\nstruct __atomic_compare_exchange_result<T> {\n  old_value : T,    // old value stored in the atomic\n  exchanged : bool, // true if the exchange was done\n}\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', onlyWorkgroupSizes) //\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(async t => {\n    const numInvocations = t.params.workgroupSize;\n    const scalarType = t.params.scalarType;\n\n    t.skipIf(\n      numInvocations > t.device.limits.maxComputeWorkgroupSizeX,\n      `${numInvocations} > maxComputeWorkgroupSizeX(${t.device.limits.maxComputeWorkgroupSizeX})`\n    );\n\n    // Number of times each workgroup attempts to exchange the same value to the same memory address\n    const numWrites = 4;\n\n    const bufferNumElements = numInvocations * numWrites;\n    const pingPongValues = [24, 68];\n\n    const wgsl = `\n      @group(0) @binding(0)\n      var<storage, read_write> data : atomic<${scalarType}>;\n\n      @group(0) @binding(1)\n      var<storage, read_write> old_values : array<${scalarType}>;\n\n      @group(0) @binding(2)\n      var<storage, read_write> exchanged : array<${scalarType}>;\n\n      fn ping_pong_value(i: u32) -> ${scalarType} {\n        if (i % 2 == 0) {\n          return ${pingPongValues[0]};\n        } else {\n          return ${pingPongValues[1]};\n        }\n      }\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n          ) {\n        let id = ${scalarType}(global_invocation_id[0]);\n\n        // Each invocation attempts to write an alternating (ping-pong) value, once per loop.\n        // The data value is initialized with the first of the two ping-pong values.\n        // Only one invocation per loop iteration should succeed. Note the workgroupBarrier() used\n        // to synchronize each invocation in the loop.\n        // The reason we alternate is in case atomicCompareExchangeWeak spurioulsy fails:\n        // If all invocations of one iteration spuriously fail, the very next iteration will also\n        // fail since the value will not have been exchanged; however, the subsequent one will succeed\n        // (assuming not all iterations spuriously fail yet again).\n\n        for (var i = 0u; i < ${numWrites}u; i++) {\n          let compare = ping_pong_value(i);\n          let next = ping_pong_value(i + 1);\n\n          let r = atomicCompareExchangeWeak(&data, compare, next);\n\n          let slot = i * ${numInvocations}u + u32(id);\n          old_values[slot] = r.old_value;\n          if (r.exchanged) {\n            exchanged[slot] = 1;\n          } else {\n            exchanged[slot] = 0;\n          }\n\n          workgroupBarrier();\n        }\n      }\n    `;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n    const defaultValue = 99999999;\n\n    // Create single-value data buffer initialized to the first ping-pong value\n    const dataBuffer = t.createBufferTracked({\n      size: 1 * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    {\n      const data = new arrayType(dataBuffer.getMappedRange());\n      data[0] = pingPongValues[0];\n      dataBuffer.unmap();\n    }\n\n    const oldValuesBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    {\n      const data = new arrayType(oldValuesBuffer.getMappedRange());\n      data.fill(defaultValue);\n      oldValuesBuffer.unmap();\n    }\n\n    const exchangedBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    {\n      const data = new arrayType(exchangedBuffer.getMappedRange());\n      data.fill(defaultValue);\n      exchangedBuffer.unmap();\n    }\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: dataBuffer } },\n        { binding: 1, resource: { buffer: oldValuesBuffer } },\n        { binding: 2, resource: { buffer: exchangedBuffer } },\n      ],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Read back buffers\n    const oldValuesBufferResult = (\n      await t.readGPUBufferRangeTyped(oldValuesBuffer, {\n        type: arrayType,\n        typedLength: oldValuesBuffer.size / arrayType.BYTES_PER_ELEMENT,\n      })\n    ).data;\n    const exchangedBufferResult = (\n      await t.readGPUBufferRangeTyped(exchangedBuffer, {\n        type: arrayType,\n        typedLength: exchangedBuffer.size / arrayType.BYTES_PER_ELEMENT,\n      })\n    ).data;\n\n    for (let w = 0; w < numWrites; ++w) {\n      const offset = w * numInvocations;\n      const exchanged = exchangedBufferResult.subarray(offset, offset + numInvocations);\n      const oldValues = oldValuesBufferResult.subarray(offset, offset + numInvocations);\n\n      const dumpValues = () => {\n        return `\n        For write: ${w}\n        exchanged: ${exchanged}\n        oldValues: ${oldValues}`;\n      };\n\n      // Only one of the invocations should have succeeded to exchange - or none if spurious failures occured\n      const noExchanges = exchanged.every(v => v === 0);\n      if (noExchanges) {\n        // Spurious failure, all values in oldValues should be the default value\n        if (!oldValues.every(v => v === defaultValue)) {\n          t.fail(\n            `Spurious failure detected, expected only default value of ${defaultValue} in oldValues buffer.${dumpValues()}`\n          );\n          return;\n        }\n      } else {\n        // Only one invocation should have exchanged its value\n        if (exchanged.filter(v => v === 1).length !== 1) {\n          t.fail(`More than one invocation exchanged its value.${dumpValues()}`);\n          return;\n        }\n\n        // Get its index\n        const idx = exchanged.findIndex(v => v === 1);\n        assert(idx !== -1);\n\n        // Its output should contain the old value after exchange\n        const oldValue = pingPongValues[w % 2];\n        if (oldValues[idx] !== oldValue) {\n          t.fail(\n            `oldValues[${idx}] expected to contain old value from exchange: ${oldValue}.${dumpValues()}'`\n          );\n          return;\n        }\n\n        // The rest of oldValues should either contain the old value or the newly exchanged value,\n        // depending on whether they executed atomicCompareExchangWeak before or after invocation 'idx'.\n        const oldValuesRest = oldValues.filter((_, i) => i !== idx);\n        if (!oldValuesRest.every(v => pingPongValues.includes(v))) {\n          t.fail(\n            `Values in oldValues buffer should be one of '${pingPongValues}', except at index '${idx} where it is '${oldValue}'.${dumpValues()}`\n          );\n          return;\n        }\n      }\n    }\n  });\n\ng.test('compare_exchange_weak_workgroup_advanced')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicCompareExchangeWeak(atomic_ptr: ptr<AS, atomic<T>, read_write>, cmp: T, v: T) -> __atomic_compare_exchange_result<T>\n\nstruct __atomic_compare_exchange_result<T> {\n  old_value : T,    // old value stored in the atomic\n  exchanged : bool, // true if the exchange was done\n}\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', onlyWorkgroupSizes) //\n      .combine('scalarType', ['u32', 'i32'] as const)\n  )\n  .fn(async t => {\n    const numInvocations = t.params.workgroupSize;\n    const scalarType = t.params.scalarType;\n\n    t.skipIf(\n      numInvocations > t.device.limits.maxComputeWorkgroupSizeX,\n      `${numInvocations} > maxComputeWorkgroupSizeX(${t.device.limits.maxComputeWorkgroupSizeX})`\n    );\n\n    // Number of times each workgroup attempts to exchange the same value to the same memory address\n    const numWrites = 4;\n\n    const bufferNumElements = numInvocations * numWrites;\n    const pingPongValues = [24, 68];\n\n    const wgsl = `\n      var<workgroup> wg: atomic<${scalarType}>;\n\n      @group(0) @binding(0)\n      var<storage, read_write> old_values : array<${scalarType}>;\n\n      @group(0) @binding(1)\n      var<storage, read_write> exchanged : array<${scalarType}>;\n\n      fn ping_pong_value(i: u32) -> ${scalarType} {\n        if (i % 2 == 0) {\n          return ${pingPongValues[0]};\n        } else {\n          return ${pingPongValues[1]};\n        }\n      }\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n        @builtin(local_invocation_index) local_invocation_index: u32,\n        @builtin(workgroup_id) workgroup_id : vec3<u32>\n        ) {\n          let id = ${scalarType}(local_invocation_index);\n\n        // Each invocation attempts to write an alternating (ping-pong) value, once per loop.\n        // The input value is initialized with the first of the two ping-pong values.\n        // Only one invocation per loop iteration should succeed. Note the workgroupBarrier() used\n        // to synchronize each invocation in the loop.\n        // The reason we alternate is in case atomicCompareExchangeWeak spurioulsy fails:\n        // If all invocations of one iteration spuriously fail, the very next iteration will also\n        // fail since the value will not have been exchanged; however, the subsequent one will succeed\n        // (assuming not all iterations spuriously fail yet again).\n\n        // Initialize wg\n        if (local_invocation_index == 0) {\n          atomicStore(&wg, ${pingPongValues[0]});\n        }\n        workgroupBarrier();\n\n        for (var i = 0u; i < ${numWrites}u; i++) {\n          let compare = ping_pong_value(i);\n          let next = ping_pong_value(i + 1);\n\n          let r = atomicCompareExchangeWeak(&wg, compare, next);\n\n          let slot = i * ${numInvocations}u + u32(id);\n          old_values[slot] = r.old_value;\n          if (r.exchanged) {\n            exchanged[slot] = 1;\n          } else {\n            exchanged[slot] = 0;\n          }\n\n          workgroupBarrier();\n        }\n      }\n    `;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const arrayType = typedArrayCtor(scalarType);\n    const defaultValue = 99999999;\n\n    const oldValuesBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    {\n      const data = new arrayType(oldValuesBuffer.getMappedRange());\n      data.fill(defaultValue);\n      oldValuesBuffer.unmap();\n    }\n\n    const exchangedBuffer = t.createBufferTracked({\n      size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation: true,\n    });\n    {\n      const data = new arrayType(exchangedBuffer.getMappedRange());\n      data.fill(defaultValue);\n      exchangedBuffer.unmap();\n    }\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: oldValuesBuffer } },\n        { binding: 1, resource: { buffer: exchangedBuffer } },\n      ],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Read back buffers\n    const oldValuesBufferResult = (\n      await t.readGPUBufferRangeTyped(oldValuesBuffer, {\n        type: arrayType,\n        typedLength: oldValuesBuffer.size / arrayType.BYTES_PER_ELEMENT,\n      })\n    ).data;\n    const exchangedBufferResult = (\n      await t.readGPUBufferRangeTyped(exchangedBuffer, {\n        type: arrayType,\n        typedLength: exchangedBuffer.size / arrayType.BYTES_PER_ELEMENT,\n      })\n    ).data;\n\n    for (let w = 0; w < numWrites; ++w) {\n      const offset = w * numInvocations;\n      const exchanged = exchangedBufferResult.subarray(offset, offset + numInvocations);\n      const oldValues = oldValuesBufferResult.subarray(offset, offset + numInvocations);\n\n      const dumpValues = () => {\n        return `\n        For write: ${w}\n        exchanged: ${exchanged}\n        oldValues: ${oldValues}`;\n      };\n\n      // Only one of the invocations should have succeeded to exchange - or none if spurious failures occured\n      const noExchanges = exchanged.every(v => v === 0);\n      if (noExchanges) {\n        // Spurious failure, all values in oldValues should be the default value\n        if (!oldValues.every(v => v === defaultValue)) {\n          t.fail(\n            `Spurious failure detected, expected only default value of ${defaultValue} in oldValues buffer.${dumpValues()}`\n          );\n          return;\n        }\n      } else {\n        // Only one invocation should have exchanged its value\n        if (exchanged.filter(v => v === 1).length !== 1) {\n          t.fail(`More than one invocation exchanged its value.${dumpValues()}`);\n          return;\n        }\n\n        // Get its index\n        const idx = exchanged.findIndex(v => v === 1);\n        assert(idx !== -1);\n\n        // Its output should contain the old value after exchange\n        const oldValue = pingPongValues[w % 2];\n        if (oldValues[idx] !== oldValue) {\n          t.fail(\n            `oldValues[${idx}] expected to contain old value from exchange: ${oldValue}.${dumpValues()}'`\n          );\n          return;\n        }\n\n        // The rest of oldValues should either contain the old value or the newly exchanged value,\n        // depending on whether they executed atomicCompareExchangWeak before or after invocation 'idx'.\n        const oldValuesRest = oldValues.filter((_, i) => i !== idx);\n        if (!oldValuesRest.every(v => pingPongValues.includes(v))) {\n          t.fail(\n            `Values in oldValues buffer should be one of '${pingPongValues}', except at index '${idx} where it is '${oldValue}'.${dumpValues()}`\n          );\n          return;\n        }\n      }\n    }\n  });\n"],"mappings":"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"}