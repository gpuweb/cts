{"version":3,"file":"dot4I8Packed.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","Type","i32","u32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","cfg","dot4I8Packed","e1","e2","result","i","e1_i","e2_i","testInputs","makeCase","x","y","input","expected","cases","flatMap","v"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/dot4I8Packed.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'dot4I8Packed' builtin function\n\n@const fn dot4I8Packed(e1: u32 ,e2: u32) -> i32\ne1 and e2 are interpreted as vectors with four 8-bit signed integer components. Return the signed\ninteger dot product of these two vectors. Each component is sign-extended to i32 before performing\nthe multiply, and then the add operations are done in WGSL i32 with wrapping behaviour.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\nimport { Type, i32, u32 } from '../../../../../util/conversion.js';\nimport { Case } from '../../case.js';\nimport { allInputSources, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('basic')\n  .specURL('https://www.w3.org/TR/WGSL/#dot4I8Packed-builtin')\n  .desc(\n    `\n@const fn dot4I8Packed(e1: u32, e2: u32) -> i32\n  `\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cfg: Config = t.params;\n\n    const dot4I8Packed = (e1: number, e2: number) => {\n      let result = 0;\n      for (let i = 0; i < 4; ++i) {\n        let e1_i = (e1 >> (i * 8)) & 0xff;\n        if (e1_i >= 128) {\n          e1_i -= 256;\n        }\n        let e2_i = (e2 >> (i * 8)) & 0xff;\n        if (e2_i >= 128) {\n          e2_i -= 256;\n        }\n        result += e1_i * e2_i;\n      }\n      return result;\n    };\n\n    const testInputs = [\n      // dot({0, 0, 0, 0}, {0, 0, 0, 0})\n      [0, 0],\n      // dot({127, 127, 127, 127}, {127, 127, 127, 127})\n      [0x7f7f7f7f, 0x7f7f7f7f],\n      // dot({-128, -128, -128, -128}, {-128, -128, -128, -128})\n      [0x80808080, 0x80808080],\n      // dot({127, 127, 127, 127}, {-128, -128, -128, -128})\n      [0x7f7f7f7f, 0x80808080],\n      // dot({1, 2, 3, 4}, {5, 6, 7, 8})\n      [0x01020304, 0x05060708],\n      // dot({1, 2, 3, 4}, {-1, -2, -3, -4})\n      [0x01020304, 0xfffefdfc],\n      // dot({-5, -6, -7, -8}, {5, 6, 7, 8})\n      [0xfbfaf9f8, 0x05060708],\n      // dot({-9, -10, -11, -12}, {-13, -14, -15, -16})\n      [0xf7f6f5f4, 0xf3f2f1f0],\n    ] as const;\n\n    const makeCase = (x: number, y: number): Case => {\n      return { input: [u32(x), u32(y)], expected: i32(dot4I8Packed(x, y)) };\n    };\n    const cases: Array<Case> = testInputs.flatMap(v => {\n      return [makeCase(...(v as [number, number]))];\n    });\n\n    await run(t, builtin('dot4I8Packed'), [Type.u32, Type.u32], Type.i32, cfg, cases);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,2BAA2B,QAAQ,4BAA4B;AACxE,SAASC,IAAI,EAAEC,GAAG,EAAEC,GAAG,QAAQ,mCAAmC;;AAElE,SAASC,eAAe,EAAUC,GAAG,QAAQ,qBAAqB;;AAElE,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGR,aAAa,CAACC,2BAA2B,CAAC;;AAE3DO,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACZC,OAAO,CAAC,kDAAkD,CAAC;AAC3DC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACtDU,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,GAAW,GAAGD,CAAC,CAACJ,MAAM;;EAE5B,MAAMM,YAAY,GAAGA,CAACC,EAAU,EAAEC,EAAU,KAAK;IAC/C,IAAIC,MAAM,GAAG,CAAC;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;MAC1B,IAAIC,IAAI,GAAIJ,EAAE,IAAKG,CAAC,GAAG,CAAE,GAAI,IAAI;MACjC,IAAIC,IAAI,IAAI,GAAG,EAAE;QACfA,IAAI,IAAI,GAAG;MACb;MACA,IAAIC,IAAI,GAAIJ,EAAE,IAAKE,CAAC,GAAG,CAAE,GAAI,IAAI;MACjC,IAAIE,IAAI,IAAI,GAAG,EAAE;QACfA,IAAI,IAAI,GAAG;MACb;MACAH,MAAM,IAAIE,IAAI,GAAGC,IAAI;IACvB;IACA,OAAOH,MAAM;EACf,CAAC;;EAED,MAAMI,UAAU,GAAG;EACjB;EACA,CAAC,CAAC,EAAE,CAAC,CAAC;EACN;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC,CAChB;;;EAEV,MAAMC,QAAQ,GAAGA,CAACC,CAAS,EAAEC,CAAS,KAAW;IAC/C,OAAO,EAAEC,KAAK,EAAE,CAACzB,GAAG,CAACuB,CAAC,CAAC,EAAEvB,GAAG,CAACwB,CAAC,CAAC,CAAC,EAAEE,QAAQ,EAAE3B,GAAG,CAACe,YAAY,CAACS,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC;EACD,MAAMG,KAAkB,GAAGN,UAAU,CAACO,OAAO,CAAC,CAAAC,CAAC,KAAI;IACjD,OAAO,CAACP,QAAQ,CAAC,GAAIO,CAAsB,CAAC,CAAC;EAC/C,CAAC,CAAC;;EAEF,MAAM3B,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,cAAc,CAAC,EAAE,CAACL,IAAI,CAACE,GAAG,EAAEF,IAAI,CAACE,GAAG,CAAC,EAAEF,IAAI,CAACC,GAAG,EAAEc,GAAG,EAAEc,KAAK,CAAC;AACnF,CAAC,CAAC"}