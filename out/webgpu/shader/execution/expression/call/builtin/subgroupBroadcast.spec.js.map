{"version":3,"file":"subgroupBroadcast.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","iterRange","kConcreteNumericScalarsAndVectors","VectorType","kWGSizes","runComputeTest","kDataSentinel","generateTypedInputs","kPredicateCases","runFragmentTest","getUintsPerFramebuffer","SubgroupTest","kFramebufferSizes","g","kDataTypes","checkDataTypes","metadata","output","input","id","type","requiresF16","i","expectIdx","Math","floor","expectShift","expect","resIdx","resShift","res","Error","uints","width","j","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","features","push","selectDeviceOrSkipTestCase","fn","wgSize","enables","broadcast","wgsl","toString","inputData","uintsPerOutput","wgThreads","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","device","limits","skipIf","first","inputId","values","inputBuffer","makeBufferWithContents","Uint32Array","GPUBufferUsage","COPY_SRC","STORAGE","trackForCleanup","outputBuffer","x","COPY_DST","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","Array","fill","expectGPUBufferValuesEqual","checkCompute","numInvs","filter","broadcastedId","size","mapping","Map","sizes","seen","get","set","key","value","Number","predicate","testcase","subgroupMinSize","subgroupMaxSize","adapterInfo","cond","checkFragment","data","format","height","uintsPerRow","uintsPerTexel","coordToIndex","row","col","inBounds","offset","bound","s","linear","ok","Boolean","combineWithParams","innerTexels","texels","fsShader","length"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupBroadcast.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for subgroupBroadcast and subgroupBroadcastFirst\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { iterRange } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n  Type,\n  VectorType,\n} from '../../../../../util/conversion.js';\n\nimport {\n  kWGSizes,\n  runComputeTest,\n  kDataSentinel,\n  generateTypedInputs,\n  kPredicateCases,\n  runFragmentTest,\n  getUintsPerFramebuffer,\n  SubgroupTest,\n  kFramebufferSizes,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kDataTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\n/**\n * Checks the results of the data types test\n *\n * The outputs for a given index are expected to match the input values\n * for the given broadcast.\n * @param metadata An unused parameter\n * @param output The output data\n * @param id The broadcast id\n * @param type The data type\n */\nfunction checkDataTypes(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  input: Uint32Array,\n  id: number,\n  type: Type\n): Error | undefined {\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    for (let i = 0; i < 4; i++) {\n      const expectIdx = Math.floor(id / 2);\n      const expectShift = id % 2 === 1;\n      let expect = input[expectIdx];\n      if (expectShift) {\n        expect >>= 16;\n      }\n      expect &= 0xffff;\n\n      const resIdx = Math.floor(i / 2);\n      const resShift = i % 2 === 1;\n      let res = output[resIdx];\n      if (resShift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[id * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${uints * i + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types')\n  .desc('Tests broadcast of data types')\n  .params(u =>\n    u\n      .combine('type', keysOf(kDataTypes))\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    const features: GPUFeatureName[] = ['subgroups' as GPUFeatureName];\n    const type = kDataTypes[t.params.type];\n    if (type.requiresF16()) {\n      features.push('shader-f16');\n    }\n    t.selectDeviceOrSkipTestCase(features);\n  })\n  .fn(async t => {\n    const wgSize = [4, 1, 1];\n    const type = kDataTypes[t.params.type];\n    let enables = 'enable subgroups;\\n';\n    if (type.requiresF16()) {\n      enables += 'enable f16;\\n';\n    }\n\n    const broadcast =\n      t.params.id === 0\n        ? `subgroupBroadcastFirst(input[id])`\n        : `subgroupBroadcast(input[id], ${t.params.id})`;\n\n    const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage, read_write> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage.\n  _ = metadata[0];\n\n  output[id] = ${broadcast};\n}`;\n\n    const inputData = generateTypedInputs(type);\n    let uintsPerOutput = 1;\n    if (type instanceof VectorType) {\n      uintsPerOutput = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uintsPerOutput = Math.floor(uintsPerOutput / 2);\n      }\n    }\n    await runComputeTest(\n      t,\n      wgsl,\n      wgSize,\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkDataTypes(metadata, output, inputData, t.params.id, type);\n      }\n    );\n  });\n\ng.test('workgroup_uniform_load')\n  .desc('Tests a workgroup uniform load equivalent')\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .beginSubcases()\n      .combine('inputId', [1, 2, 3] as const)\n      .combine('first', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(t => {\n    // Compatibility mode has lower workgroup limits.\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const {\n      maxComputeInvocationsPerWorkgroup,\n      maxComputeWorkgroupSizeX,\n      maxComputeWorkgroupSizeY,\n      maxComputeWorkgroupSizeZ,\n    } = t.device.limits;\n    t.skipIf(\n      maxComputeInvocationsPerWorkgroup < wgThreads ||\n        maxComputeWorkgroupSizeX < t.params.wgSize[0] ||\n        maxComputeWorkgroupSizeY < t.params.wgSize[1] ||\n        maxComputeWorkgroupSizeZ < t.params.wgSize[2],\n      'Workgroup size too large'\n    );\n\n    const broadcast = t.params.first ? `subgroupBroadcastFirst(v)` : `subgroupBroadcast(v, 0)`;\n\n    const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_branching);\n\nvar<workgroup> wgmem : u32;\n\n@group(0) @binding(0)\nvar<storage, read> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(@builtin(subgroup_invocation_id) id : u32,\n        @builtin(local_invocation_index) lid : u32) {\n  if (lid == ${t.params.inputId}) {\n    wgmem = inputs[lid];\n  }\n  workgroupBarrier();\n  var v = 0u;\n  if (id == 0) {\n    v = wgmem;\n  }\n  v = ${broadcast};\n  output[lid] = v;\n}`;\n\n    const values = [1, 13, 33, 125];\n    const inputBuffer = t.makeBufferWithContents(\n      new Uint32Array(values),\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n    );\n    t.trackForCleanup(inputBuffer);\n\n    const outputBuffer = t.makeBufferWithContents(\n      new Uint32Array([...iterRange(wgThreads, x => 0)]),\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n    );\n    t.trackForCleanup(outputBuffer);\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: inputBuffer,\n          },\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: outputBuffer,\n          },\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(1, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const expect = Array(wgThreads);\n    expect.fill(values[t.params.inputId]);\n    t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expect));\n  });\n\n/**\n * Checks the results of broadcast in compute shaders.\n *\n * @param metadata An array of uint32s\n *                 * first half is subgroup_invocation_id\n *                 * second half is subgroup_size\n * @param output An array uint32s containing the broadcast results\n * @param numInvs The number of invocations\n * @param broadcast The broadcast invocation (or 'first' to indicate the lowest active)\n * @param filter A functor indicating whether the invocation participates in the broadcast\n */\nfunction checkCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  numInvs: number,\n  broadcast: number | 'first',\n  filter: (id: number, size: number) => boolean\n): Error | undefined {\n  let broadcastedId = broadcast;\n  if (broadcast === 'first') {\n    // Subgroup size is uniform in compute shaders so any will do.\n    const size = metadata[numInvs];\n    for (let i = 0; i < size; i++) {\n      if (filter(i, size)) {\n        broadcastedId = i;\n        break;\n      }\n    }\n  }\n\n  const mapping = new Map<number, number>();\n  const sizes = new Map<number, number>();\n  for (let i = 0; i < numInvs; i++) {\n    const id = metadata[i];\n    const size = metadata[i + numInvs];\n\n    const res = output[i];\n\n    if (filter(id, size)) {\n      let seen = mapping.get(res) ?? 0;\n      seen++;\n      mapping.set(res, seen);\n\n      if (broadcastedId === id) {\n        sizes.set(res, size);\n        if (res !== i) {\n          return new Error(`Invocation ${i}: incorrect result:\n- expected: ${i}\n-      got: ${res}`);\n        }\n      }\n    } else {\n      if (res !== kDataSentinel) {\n        return new Error(`Invocation ${i}: unexpected write (${res})`);\n      }\n    }\n  }\n\n  for (const [key, value] of mapping) {\n    const id = Number(key);\n    const seen = Number(value);\n    const size = sizes.get(id) ?? 0;\n    if (size < seen) {\n      return new Error(`Unexpected number of invocations for subgroup ${id}\n- expected: ${size}\n-      got: ${seen}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc('Test broadcasts in compute shaders with all active invocations')\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .beginSubcases()\n      // Only values < 4 are used because it is a dynamic error to broadcast an inactive invocation.\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const broadcast =\n      t.params.id === 0\n        ? `subgroupBroadcastFirst(input[lid])`\n        : `subgroupBroadcast(input[lid], ${t.params.id})`;\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata: Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n\n  output[lid] = ${broadcast};\n}`;\n\n    const inputData = new Uint32Array([...iterRange(wgThreads, x => x)]);\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkCompute(\n          metadata,\n          output,\n          wgThreads,\n          t.params.id,\n          (id: number, size: number) => {\n            return true;\n          }\n        );\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc(`Test broadcasts with only some active invocations`)\n  .params(u =>\n    u\n      .combine('predicate', keysOf(kPredicateCases))\n      .filter(t => {\n        // This case would be UB\n        return t.predicate !== 'upper_half';\n      })\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n      .combine('wgSize', kWGSizes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const testcase = kPredicateCases[t.params.predicate];\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    interface SubgroupProperties extends GPUAdapterInfo {\n      subgroupMinSize: number;\n      subgroupMaxSize: number;\n    }\n    const { subgroupMinSize, subgroupMaxSize } = t.device.adapterInfo as SubgroupProperties;\n    for (let size = subgroupMinSize; size <= subgroupMaxSize; size *= 2) {\n      t.skipIf(!testcase.filter(t.params.id, size), 'Skipping potential undefined behavior');\n    }\n\n    const broadcast =\n      t.params.id === 0\n        ? `subgroupBroadcastFirst(input[lid])`\n        : `subgroupBroadcast(input[lid], ${t.params.id})`;\n\n    const wgsl = `\nenable subgroups;\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata: Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    output[lid] = ${broadcast};\n  } else {\n    return;\n  }\n}`;\n\n    const inputData = new Uint32Array([...iterRange(wgThreads, x => x)]);\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkCompute(metadata, output, wgThreads, t.params.id, testcase.filter);\n      }\n    );\n  });\n\ng.test('broadcastFirst,split')\n  .desc(`Test broadcastFirst with only some active invocations`)\n  .params(u =>\n    u.combine('predicate', keysOf(kPredicateCases)).beginSubcases().combine('wgSize', kWGSizes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const testcase = kPredicateCases[t.params.predicate];\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata: Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    output[lid] = subgroupBroadcastFirst(input[lid]);\n  } else {\n    return;\n  }\n}`;\n\n    const inputData = new Uint32Array([...iterRange(wgThreads, x => x)]);\n    const uintsPerOutput = 1;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkCompute(metadata, output, wgThreads, 'first', testcase.filter);\n      }\n    );\n  });\n\n/**\n * Check broadcasts in fragment shaders\n *\n * Only checks subgroups where no invocation is in the last row\n * or column to avoid helper invocations.\n * @param data The framebuffer output\n *             * component 0 is the broadcast result\n *             * component 1 is the subgroup_invocation_id\n *             * component 2 is the subgroup_size\n * @param format The framebuffer format\n * @param width The framebuffer width\n * @param height The framebuffer height\n * @param broadcast The id being broadcast\n */\nfunction checkFragment(\n  data: Uint32Array,\n  format: GPUTextureFormat,\n  width: number,\n  height: number,\n  broadcast: number\n): Error | undefined {\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  const coordToIndex = (row: number, col: number) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  const inBounds = new Map<number, boolean>();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = coordToIndex(row, col);\n\n      const res = data[offset];\n\n      let bound = inBounds.get(res) ?? true;\n      bound = bound && row < height - 1 && col < height - 1;\n      inBounds.set(res, bound);\n    }\n  }\n\n  const seen = new Map<number, number>();\n  const sizes = new Map<number, number>();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = coordToIndex(row, col);\n\n      const res = data[offset];\n      const bound = inBounds.get(res) ?? true;\n      if (!bound) {\n        continue;\n      }\n\n      const id = data[offset + 1];\n      const size = data[offset + 2];\n\n      let s = seen.get(res) ?? 0;\n      s++;\n      seen.set(res, s);\n\n      if (id === broadcast) {\n        const linear = row * width + col;\n        if (res !== linear) {\n          return new Error(`Row ${row}, col ${col}: incorrect broadcast\n- expected: ${linear}\n-      got: ${res}`);\n        }\n\n        sizes.set(res, size);\n      }\n    }\n  }\n\n  for (const [key, value] of inBounds) {\n    const id = Number(key);\n    const ok = Boolean(value);\n    if (ok) {\n      const size = sizes.get(id) ?? 0;\n      const seen = sizes.get(id) ?? 0;\n      if (size < seen) {\n        return new Error(`Unexpected number of invocations for subgroup ${id}\n- expected: ${size}\n-      got: ${seen}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment')\n  .desc('Test broadcast in fragment shaders')\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n      .combineWithParams([{ format: 'rgba32uint' }] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const innerTexels = (t.params.size[0] - 1) * (t.params.size[1] - 1);\n    interface SubgroupProperties extends GPUAdapterInfo {\n      subgroupMaxSize: number;\n    }\n    const { subgroupMaxSize } = t.device.adapterInfo as SubgroupProperties;\n    t.skipIf(innerTexels < subgroupMaxSize, 'Too few texels to be reliable');\n\n    const broadcast =\n      t.params.id === 0\n        ? `subgroupBroadcastFirst(input[linear].x)`\n        : `subgroupBroadcast(input[linear].x, ${t.params.id})`;\n    const texels = t.params.size[0] * t.params.size[1];\n    const inputData = new Uint32Array([...iterRange(texels, x => x)]);\n\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<uniform> input : array<vec4u, ${inputData.length}>;\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) size : u32,\n) -> @location(0) vec4u {\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  return vec4u(${broadcast}, id, size, linear);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      inputData,\n      (data: Uint32Array) => {\n        return checkFragment(\n          data,\n          t.params.format,\n          t.params.size[0],\n          t.params.size[1],\n          t.params.id\n        );\n      }\n    );\n  });\n"],"mappings":"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"}