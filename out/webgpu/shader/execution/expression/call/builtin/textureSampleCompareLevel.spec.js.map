{"version":3,"file":"textureSampleCompareLevel.spec.js","names":["description","makeTestGroup","kCompareFunctions","isDepthTextureFormat","kDepthStencilFormats","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","kCubeSamplePointMethods","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","makeRandomDepthComparisonTexelGenerator","WGSLTextureSampleTest","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","fn","stage","samplePoints","modeU","modeV","filt","minFilter","compare","offset","skipIfTextureFormatNotSupported","size","minSize","minBlocks","descriptor","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","mipLevelCount","texels","texture","generator","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","textureBuiltin","derivatives","depthRef","hashInputs","map","coords","derivativeMult","arrayIndex","builtin","coordType","textureType","viewDescriptor","results","res","expectOK","mode","viewDimension","isCompatibility","textureBindingViewDimension","addressModeW","dimension","A","depthOrArrayLayers","width","height","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleCompareLevel.spec.ts"],"sourcesContent":["export const description = `\nSamples a depth texture and compares the sampled depth values against a reference value.\n\nThe textureSampleCompareLevel function is the same as textureSampleCompare, except that:\n\n * textureSampleCompareLevel always samples texels from mip level 0.\n   * The function does not compute derivatives.\n   * There is no requirement for textureSampleCompareLevel to be invoked in uniform control flow.\n * textureSampleCompareLevel may be invoked in any shader stage.\n\n- TODO: test un-encodable formats.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompareFunctions } from '../../../../../capability_info.js';\nimport { isDepthTextureFormat, kDepthStencilFormats } from '../../../../../format_info.js';\n\nimport {\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n  makeRandomDepthComparisonTexelGenerator,\n  TextureCall,\n  vec2,\n  vec3,\n  WGSLTextureSampleTest,\n} from './texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecomparelevel')\n  .desc(\n    `\nfn textureSampleCompareLevel(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32\nfn textureSampleCompareLevel(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * depth_ref The reference value to compare the sampled depth value against.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('compare', kCompareFunctions)\n  )\n  .fn(async t => {\n    const {\n      format,\n      stage,\n      samplePoints,\n      modeU,\n      modeV,\n      filt: minFilter,\n      compare,\n      offset,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const size = chooseTextureSize({ minSize: 16, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureSampleCompareLevel',\n      sampler,\n      descriptor,\n      derivatives: true,\n      depthRef: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, modeU, modeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, arrayIndex, depthRef, offset }) => {\n      return {\n        builtin: 'textureSampleCompareLevel',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        depthRef,\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecomparelevel')\n  .desc(\n    `\nfn textureSampleCompareLevel(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * depth_ref The reference value to compare the sampled depth value against.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('mode', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('compare', kCompareFunctions)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, mode, filt: minFilter, compare } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const viewDimension: GPUTextureViewDimension = 'cube';\n    const size = chooseTextureSize({ minSize: 16, minBlocks: 2, format, viewDimension });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: change to 3\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      addressModeW: kShortAddressModeToAddressMode[mode],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      depthRef: true,\n      textureBuiltin: 'textureSampleCompareLevel',\n      hashInputs: [stage, format, samplePoints, mode, minFilter, compare],\n    }).map(({ coords, derivativeMult, depthRef }) => {\n      return {\n        builtin: 'textureSampleCompareLevel',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        depthRef,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube';\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('arrayed_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecomparelevel')\n  .desc(\n    `\nA is i32 or u32\n\nfn textureSampleCompareLevel(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32) -> f32\nfn textureSampleCompareLevel(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * array_index: The 0-based texture array index to sample.\n * depth_ref The reference value to compare the sampled depth value against.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('modeU', kShortAddressModes)\n      .combine('modeV', kShortAddressModes)\n      .combine('offset', [false, true] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('compare', kCompareFunctions)\n      .combine('depthOrArrayLayers', [1, 8] as const)\n  )\n  .fn(async t => {\n    const {\n      format,\n      stage,\n      samplePoints,\n      A,\n      modeU,\n      modeV,\n      filt: minFilter,\n      compare,\n      offset,\n      depthOrArrayLayers,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const [width, height] = chooseTextureSize({ minSize: 16, minBlocks: 4, format });\n    const size = { width, height, depthOrArrayLayers };\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureSampleCompareLevel',\n      sampler,\n      descriptor,\n      derivatives: true,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      depthRef: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, A, modeU, modeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, arrayIndex, depthRef, offset }) => {\n      return {\n        builtin: 'textureSampleCompareLevel',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        depthRef,\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d_array';\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('arrayed_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecomparelevel')\n  .desc(\n    `\nA is i32 or u32\n\nfn textureSampleCompareLevel(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: A, depth_ref: f32) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * array_index: The 0-based texture array index to sample.\n * depth_ref The reference value to compare the sampled depth value against.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      .combine('filt', ['nearest', 'linear'] as const)\n      .combine('mode', kShortAddressModes)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('compare', kCompareFunctions)\n  )\n  .fn(async t => {\n    const { format, A, stage, samplePoints, mode, filt: minFilter, compare } = t.params;\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n    t.skipIfTextureFormatNotSupported(t.params.format);\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n      generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare),\n    });\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: kShortAddressModeToAddressMode[mode],\n      addressModeV: kShortAddressModeToAddressMode[mode],\n      addressModeW: kShortAddressModeToAddressMode[mode],\n      compare,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      textureBuiltin: 'textureSampleCompareLevel',\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      depthRef: true,\n      hashInputs: [stage, format, samplePoints, mode, minFilter],\n    }).map(({ coords, derivativeMult, depthRef, arrayIndex }) => {\n      return {\n        builtin: 'textureSampleCompareLevel',\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        depthRef,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube_array';\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}