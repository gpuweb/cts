{"version":3,"file":"textureDimensions.spec.js","names":["description","makeTestGroup","getBlockInfoForTextureFormat","isDepthTextureFormat","isStencilTextureFormat","isTextureFormatPossiblyMultisampled","isTextureFormatPossiblyStorageReadWritable","kAllTextureFormats","kDepthTextureFormats","kPossibleStorageTextureFormats","sampleTypeForFormatAndAspect","textureDimensionAndFormatCompatible","align","kShaderStages","WGSLTextureQueryTest","g","kMaxMipsForTest","kMaxSamplesForTest","kAllViewDimensions","aspectsForFormat","format","samplesForFormat","textureMipCount","params","samples","undefined","textureDimensionsForViewDimensions","dimensions","baseMipLevel","out","i","push","textureDimensionsLevel","viewDimensions","filter","dim","testValues","kMinLen","kNumCubeFaces","formatInfo","bw","blockWidth","bh","blockHeight","mip","kMultipleA","kMultipleB","kMultipleC","w","size","expected","h","d","l","run","t","stage","texture","viewDescriptor","textureType","levelArg","values","outputType","length","wgsl","executeAndExpectResult","dimensionsValidForStorage","test","specURL","desc","u","combine","expand","beginSubcases","fn","skipIfTextureFormatNotSupported","skipIfTextureViewDimensionNotSupported","skipIfTextureFormatNotMultisampled","createTextureTracked","dimension","isCompatibility","textureBindingViewDimension","usage","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","sampleCount","mipLevelCount","aspect","wgslSampledTextureType","base","replace","sampleType","unless","wgslDepthTextureType","access","skipIfNoStorageTexturesInStage","skipIfTextureFormatNotUsableAsStorageTexture","STORAGE_BINDING","wgslStorageTextureType","importExternalTexture","width","height","skipIf","OffscreenCanvas","canvas","getContext","videoFrame","VideoFrame","timestamp","device","source","COPY_DST","queue","copyExternalImageToTexture"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureDimensions.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureDimensions' builtin function\n\nThe dimensions of the texture in texels.\nFor textures based on cubes, the results are the dimensions of each face of the cube.\nCube faces are square, so the x and y components of the result are equal.\nIf level is outside the range [0, textureNumLevels(t)) then any valid value for the return type may be returned.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  getBlockInfoForTextureFormat,\n  isDepthTextureFormat,\n  isStencilTextureFormat,\n  isTextureFormatPossiblyMultisampled,\n  isTextureFormatPossiblyStorageReadWritable,\n  kAllTextureFormats,\n  kDepthTextureFormats,\n  kPossibleStorageTextureFormats,\n  sampleTypeForFormatAndAspect,\n  textureDimensionAndFormatCompatible,\n} from '../../../../../format_info.js';\nimport { align } from '../../../../../util/math.js';\nimport { kShaderStages, ShaderStage } from '../../../../validation/decl/util.js';\n\nimport { WGSLTextureQueryTest } from './texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureQueryTest);\n\n/// The maximum number of texture mipmap levels to test.\n/// Keep this small to reduce memory and test permutations.\nconst kMaxMipsForTest = 3;\n\n/// The maximum number of texture samples to test.\nconst kMaxSamplesForTest = 4;\n\n/// All the possible GPUTextureViewDimensions.\nconst kAllViewDimensions: readonly GPUTextureViewDimension[] = [\n  '1d',\n  '2d',\n  '2d-array',\n  '3d',\n  'cube',\n  'cube-array',\n] as const;\n\n/** @returns the aspects to test for the given format */\nfunction aspectsForFormat(format: GPUTextureFormat): readonly GPUTextureAspect[] {\n  if (isDepthTextureFormat(format) && isStencilTextureFormat(format)) {\n    return ['depth-only', 'stencil-only'];\n  }\n  return ['all'];\n}\n\n/** @returns the sample counts to test for the given format */\nfunction samplesForFormat(format: GPUTextureFormat): readonly number[] {\n  return isTextureFormatPossiblyMultisampled(format) ? [1, kMaxSamplesForTest] : [1];\n}\n\n/**\n * @returns a list of number of texture mipmap levels to test, given the format, view dimensions and\n * number of samples.\n */\nfunction textureMipCount(params: {\n  format: GPUTextureFormat;\n  dimensions: GPUTextureViewDimension;\n  samples?: number;\n}): readonly number[] {\n  if (params.samples !== undefined && params.samples !== 1) {\n    // https://www.w3.org/TR/webgpu/#texture-creation\n    // If descriptor.sampleCount > 1: descriptor.mipLevelCount must be 1.\n    return [1];\n  }\n  if (textureDimensionsForViewDimensions(params.dimensions) === '1d') {\n    // https://www.w3.org/TR/webgpu/#dom-gputexturedimension-2d\n    // Only \"2d\" textures may have mipmaps, be multisampled, use a compressed or depth/stencil\n    // format, and be used as a render attachment.\n    return [1];\n  }\n  return [1, kMaxMipsForTest];\n}\n\n/**\n * @returns a list of GPUTextureViewDescriptor.baseMipLevel to test, give the texture mipmap count.\n */\nfunction baseMipLevel(params: { textureMipCount: number }): readonly number[] {\n  const out: number[] = [];\n  for (let i = 0; i < params.textureMipCount; i++) {\n    out.push(i);\n  }\n  return out;\n}\n\n/**\n * @returns the argument values for the textureDimensions() `level` parameter to test.\n * An `undefined` represents a call to textureDimensions() without the level argument.\n */\nfunction textureDimensionsLevel(params: {\n  samples?: number;\n  textureMipCount: number;\n  baseMipLevel: number;\n}): readonly (number | undefined)[] {\n  if (params.samples !== undefined && params.samples > 1) {\n    return [undefined]; // textureDimensions() overload with `level` not available.\n  }\n  const out: (number | undefined)[] = [undefined];\n  for (let i = 0; i < params.textureMipCount - params.baseMipLevel; i++) {\n    out.push(i);\n  }\n  return out;\n}\n\n/** @returns the GPUTextureViewDimensions to test for the format and number of samples */\nfunction viewDimensions(params: {\n  format: GPUTextureFormat;\n  samples?: number;\n}): readonly GPUTextureViewDimension[] {\n  if (params.samples !== undefined && params.samples > 1) {\n    // https://www.w3.org/TR/webgpu/#dom-gputexturedimension-2d\n    // Only 2d textures can be multisampled\n    return ['2d'];\n  }\n\n  return kAllViewDimensions.filter(dim =>\n    textureDimensionAndFormatCompatible(textureDimensionsForViewDimensions(dim), params.format)\n  );\n}\n\n/** @returns the GPUTextureDimension for the GPUTextureViewDimension */\nfunction textureDimensionsForViewDimensions(dim: GPUTextureViewDimension): GPUTextureDimension {\n  switch (dim) {\n    case '1d':\n      return '1d';\n    case '2d':\n    case '2d-array':\n    case 'cube':\n    case 'cube-array':\n      return '2d';\n    case '3d':\n      return '3d';\n  }\n}\n\n/** TestValues holds the texture size and expected return value of textureDimensions() */\ntype TestValues = {\n  /** The value to pass to GPUTextureDescriptor.size, when creating the texture */\n  size: number[];\n  /** The expected result of calling textureDimensions() */\n  expected: number[];\n};\n\n/** @returns The TestValues to use for the given texture dimensions and format */\nfunction testValues(params: {\n  dimensions: GPUTextureViewDimension;\n  format: GPUTextureFormat;\n  baseMipLevel: number;\n  textureDimensionsLevel?: number;\n}): TestValues {\n  // The minimum dimension length, given the number of mipmap levels that are being tested.\n  const kMinLen = 1 << kMaxMipsForTest;\n  const kNumCubeFaces = 6;\n\n  const formatInfo = getBlockInfoForTextureFormat(params.format);\n  const bw = formatInfo.blockWidth;\n  const bh = formatInfo.blockHeight;\n  let mip = params.baseMipLevel;\n  if (params.textureDimensionsLevel !== undefined) {\n    mip += params.textureDimensionsLevel;\n  }\n\n  // Magic constants to multiply the minimum texture dimensions with, to provide\n  // different dimension values in the test. These could be parameterized, but\n  // these are currently fixed to reduce the number of test parameterizations.\n  const kMultipleA = 2;\n  const kMultipleB = 3;\n  const kMultipleC = 4;\n\n  switch (params.dimensions) {\n    case '1d': {\n      const w = align(kMinLen, bw) * kMultipleA;\n      return { size: [w], expected: [w >>> mip] };\n    }\n    case '2d': {\n      const w = align(kMinLen, bw) * kMultipleA;\n      const h = align(kMinLen, bh) * kMultipleB;\n      return { size: [w, h], expected: [w >>> mip, h >>> mip] };\n    }\n    case '2d-array': {\n      const w = align(kMinLen, bw) * kMultipleC;\n      const h = align(kMinLen, bh) * kMultipleB;\n      return { size: [w, h, 4], expected: [w >>> mip, h >>> mip] };\n    }\n    case '3d': {\n      const w = align(kMinLen, bw) * kMultipleA;\n      const h = align(kMinLen, bh) * kMultipleB;\n      const d = kMinLen * kMultipleC;\n      return {\n        size: [w, h, d],\n        expected: [w >>> mip, h >>> mip, d >>> mip],\n      };\n    }\n    case 'cube': {\n      const l = align(kMinLen, bw) * align(kMinLen, bh) * kMultipleB;\n      return {\n        size: [l, l, kNumCubeFaces],\n        expected: [l >>> mip, l >>> mip],\n      };\n    }\n    case 'cube-array': {\n      const l = align(kMinLen, bw) * align(kMinLen, bh) * kMultipleC;\n      return {\n        size: [l, l, kNumCubeFaces * 3],\n        expected: [l >>> mip, l >>> mip],\n      };\n    }\n  }\n}\n\n/**\n * Builds a shader module with the texture view bound to the WGSL texture with the given WGSL type,\n * which calls textureDimensions(), assigning the result to an output buffer.\n * This shader is executed with a compute shader, and the output buffer is compared to\n * `values.expected`.\n */\nfunction run(\n  t: WGSLTextureQueryTest,\n  stage: ShaderStage,\n  texture: GPUTexture | GPUExternalTexture,\n  viewDescriptor: GPUTextureViewDescriptor | undefined,\n  textureType: string,\n  levelArg: number | undefined,\n  values: TestValues\n) {\n  const outputType = values.expected.length > 1 ? `vec${values.expected.length}u` : 'u32';\n  const wgsl = `\n@group(0) @binding(0) var texture : ${textureType};\n\nfn getValue() -> ${outputType} {\n  return ${\n    levelArg !== undefined\n      ? `textureDimensions(texture, ${levelArg})`\n      : 'textureDimensions(texture)'\n  };\n}\n`;\n  t.executeAndExpectResult(stage, wgsl, texture, viewDescriptor, values.expected);\n}\n\n/** @returns true if the GPUTextureViewDimension is valid for a storage texture */\nfunction dimensionsValidForStorage(dimensions: GPUTextureViewDimension) {\n  switch (dimensions) {\n    case '1d':\n    case '2d':\n    case '2d-array':\n    case '3d':\n      return true;\n    default:\n      return false;\n  }\n}\n\ng.test('sampled_and_multisampled')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nT: f32, i32, u32\n\nfn textureDimensions(t: texture_1d<T>) -> u32\nfn textureDimensions(t: texture_1d<T>, level: u32) -> u32\nfn textureDimensions(t: texture_2d<T>) -> vec2<u32>\nfn textureDimensions(t: texture_2d<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_2d_array<T>) -> vec2<u32>\nfn textureDimensions(t: texture_2d_array<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_3d<T>) -> vec3<u32>\nfn textureDimensions(t: texture_3d<T>, level: u32) -> vec3<u32>\nfn textureDimensions(t: texture_cube<T>) -> vec2<u32>\nfn textureDimensions(t: texture_cube<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_cube_array<T>) -> vec2<u32>\nfn textureDimensions(t: texture_cube_array<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_multisampled_2d<T>)-> vec2<u32>\n\nParameters:\n * t: the sampled texture\n * level:\n   - The mip level, with level 0 containing a full size version of the texture.\n   - If omitted, the dimensions of level 0 are returned.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kAllTextureFormats)\n      .expand('aspect', u => aspectsForFormat(u.format))\n      .expand('samples', u => samplesForFormat(u.format))\n      .beginSubcases()\n      .combine('stage', kShaderStages)\n      .expand('dimensions', viewDimensions)\n      .expand('textureMipCount', textureMipCount)\n      .expand('baseMipLevel', baseMipLevel)\n      .expand('textureDimensionsLevel', textureDimensionsLevel)\n  )\n  .fn(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.skipIfTextureViewDimensionNotSupported(t.params.dimensions);\n    if (t.params.samples > 1) {\n      t.skipIfTextureFormatNotMultisampled(t.params.format);\n    }\n    const values = testValues(t.params);\n    const texture = t.createTextureTracked({\n      size: values.size,\n      dimension: textureDimensionsForViewDimensions(t.params.dimensions),\n      ...(t.isCompatibility && { textureBindingViewDimension: t.params.dimensions }),\n      usage:\n        t.params.samples === 1\n          ? GPUTextureUsage.TEXTURE_BINDING\n          : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      format: t.params.format,\n      sampleCount: t.params.samples,\n      mipLevelCount: t.params.textureMipCount,\n    });\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: t.params.dimensions,\n      aspect: t.params.aspect,\n      baseMipLevel: t.params.baseMipLevel,\n    };\n\n    function wgslSampledTextureType(): string {\n      const base = t.params.samples !== 1 ? 'texture_multisampled' : 'texture';\n      const dimensions = t.params.dimensions.replace('-', '_');\n      const sampleType = sampleTypeForFormatAndAspect(t.params.format, t.params.aspect);\n      switch (sampleType) {\n        case 'depth':\n        case 'float':\n        case 'unfilterable-float':\n          return `${base}_${dimensions}<f32>`;\n        case 'uint':\n          return `${base}_${dimensions}<u32>`;\n        case 'sint':\n          return `${base}_${dimensions}<i32>`;\n      }\n    }\n\n    run(\n      t,\n      t.params.stage,\n      texture,\n      viewDescriptor,\n      wgslSampledTextureType(),\n      t.params.textureDimensionsLevel,\n      values\n    );\n  });\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nfn textureDimensions(t: texture_depth_2d) -> vec2<u32>\nfn textureDimensions(t: texture_depth_2d, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_2d_array) -> vec2<u32>\nfn textureDimensions(t: texture_depth_2d_array, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube_array) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube_array, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_multisampled_2d)-> vec2<u32>\n\nParameters:\n * t: the depth or multisampled texture\n * level:\n   - The mip level, with level 0 containing a full size version of the texture.\n   - If omitted, the dimensions of level 0 are returned.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthTextureFormats)\n      .expand('aspect', u => aspectsForFormat(u.format))\n      .unless(u => u.aspect === 'stencil-only')\n      .expand('samples', u => samplesForFormat(u.format))\n      .beginSubcases()\n      .combine('stage', kShaderStages)\n      .expand('dimensions', viewDimensions)\n      .expand('textureMipCount', textureMipCount)\n      .expand('baseMipLevel', baseMipLevel)\n      .expand('textureDimensionsLevel', textureDimensionsLevel)\n  )\n  .fn(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.skipIfTextureViewDimensionNotSupported(t.params.dimensions);\n    const values = testValues(t.params);\n    const texture = t.createTextureTracked({\n      size: values.size,\n      dimension: textureDimensionsForViewDimensions(t.params.dimensions),\n      ...(t.isCompatibility && { textureBindingViewDimension: t.params.dimensions }),\n      usage:\n        t.params.samples === 1\n          ? GPUTextureUsage.TEXTURE_BINDING\n          : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      format: t.params.format,\n      sampleCount: t.params.samples,\n      mipLevelCount: t.params.textureMipCount,\n    });\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: t.params.dimensions,\n      aspect: t.params.aspect,\n      baseMipLevel: t.params.baseMipLevel,\n    };\n\n    function wgslDepthTextureType(): string {\n      const base = t.params.samples !== 1 ? 'texture_depth_multisampled' : 'texture_depth';\n      const dimensions = t.params.dimensions.replace('-', '_');\n      return `${base}_${dimensions}`;\n    }\n\n    run(\n      t,\n      t.params.stage,\n      texture,\n      viewDescriptor,\n      wgslDepthTextureType(),\n      t.params.textureDimensionsLevel,\n      values\n    );\n  });\n\ng.test('storage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nF: rgba8unorm\n   rgba8snorm\n   rgba8uint\n   rgba8sint\n   rgba16uint\n   rgba16sint\n   rgba16float\n   r32uint\n   r32sint\n   r32float\n   rg32uint\n   rg32sint\n   rg32float\n   rgba32uint\n   rgba32sint\n   rgba32float\nA: read, write, read_write\n\nfn textureDimensions(t: texture_storage_1d<F,A>) -> u32\nfn textureDimensions(t: texture_storage_2d<F,A>) -> vec2<u32>\nfn textureDimensions(t: texture_storage_2d_array<F,A>) -> vec2<u32>\nfn textureDimensions(t: texture_storage_3d<F,A>) -> vec3<u32>\n\nParameters:\n * t: the storage texture\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kPossibleStorageTextureFormats)\n      .expand('aspect', u => aspectsForFormat(u.format))\n      .beginSubcases()\n      .combine('stage', kShaderStages)\n      .combine('access', ['read', 'write', 'read_write'] as const)\n      // vertex stage can not use writable storage.\n      .unless(t => t.stage === 'vertex' && t.access !== 'read')\n      // Only some formats support read_write\n      .unless(\n        t => !isTextureFormatPossiblyStorageReadWritable(t.format) && t.access === 'read_write'\n      )\n      .expand('dimensions', u => viewDimensions(u).filter(dimensionsValidForStorage))\n      .expand('textureMipCount', textureMipCount)\n      .expand('baseMipLevel', baseMipLevel)\n  )\n  .fn(t => {\n    t.skipIfNoStorageTexturesInStage(t.params.stage);\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n\n    const values = testValues(t.params);\n    const texture = t.createTextureTracked({\n      size: values.size,\n      dimension: textureDimensionsForViewDimensions(t.params.dimensions),\n      usage: GPUTextureUsage.STORAGE_BINDING,\n      format: t.params.format,\n      mipLevelCount: t.params.textureMipCount,\n    });\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: t.params.dimensions,\n      aspect: t.params.aspect,\n      mipLevelCount: 1,\n      baseMipLevel: t.params.baseMipLevel,\n    };\n\n    function wgslStorageTextureType(): string {\n      const dimensions = t.params.dimensions.replace('-', '_');\n      return `texture_storage_${dimensions}<${t.params.format}, ${t.params.access}>`;\n    }\n\n    run(t, t.params.stage, texture, viewDescriptor, wgslStorageTextureType(), undefined, values);\n  });\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nfn textureDimensions(t: texture_external) -> vec2<u32>\n\nParameters:\n * t: the external texture\n`\n  )\n  .params(u =>\n    u\n      .beginSubcases()\n      .combine('stage', kShaderStages)\n      .combine('importExternalTexture', [false, true])\n      .combine('width', [8, 16, 24] as const)\n      .combine('height', [8, 16, 24] as const)\n  )\n  .fn(t => {\n    const { stage, importExternalTexture, width, height } = t.params;\n    const size = [width, height];\n\n    t.skipIf(typeof OffscreenCanvas === 'undefined', 'OffscreenCanvas is not supported');\n    const canvas = new OffscreenCanvas(width, height);\n\n    // We have to make a context so that VideoFrame and copyExternalImageToTexture accept the canvas.\n    canvas.getContext('2d');\n    let texture: GPUExternalTexture | GPUTexture;\n    let videoFrame: VideoFrame | undefined;\n    if (importExternalTexture) {\n      t.skipIf(typeof VideoFrame === 'undefined', 'VideoFrames are not supported');\n\n      videoFrame = new VideoFrame(canvas, { timestamp: 0 });\n      texture = t.device.importExternalTexture({ source: videoFrame });\n    } else {\n      texture = t.createTextureTracked({\n        format: 'rgba8unorm',\n        size,\n        usage:\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.TEXTURE_BINDING,\n      });\n      t.queue.copyExternalImageToTexture({ source: canvas }, { texture }, size);\n    }\n\n    run(t, stage, texture, undefined, 'texture_external', undefined, {\n      size,\n      expected: size,\n    });\n  });\n"],"mappings":"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"}