{"version":3,"file":"insertBits.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","i32Bits","Type","u32","u32Bits","vec2","vec3","vec4","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","cfg","scalarType","signed","i32","T","width","vec","V","x","y","z","w","undefined","all_1","all_0","low_1","low_0","high_1","high_0","pattern","cases","input","expected","inputSource","push"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/insertBits.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'insertBits' builtin function\n\nS is i32 or u32\nT is S or vecN<S>\n@const fn insertBits(e: T, newbits:T, offset: u32, count: u32) -> T  Sets bits in an integer.\n\nWhen T is a scalar type, then:\n  w is the bit width of T\n  o = min(offset,w)\n  c = min(count, w - o)\n\nThe result is e if c is 0.\nOtherwise, bits o..o+c-1 of the result are copied from bits 0..c-1 of newbits.\nOther bits of the result are copied from e.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\nimport { i32Bits, Type, u32, u32Bits, vec2, vec3, vec4 } from '../../../../../util/conversion.js';\nimport { allInputSources, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('integer')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`integer tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('signed', [false, true])\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    const scalarType = t.params.signed ? Type.i32 : Type.u32;\n    const T = t.params.width === 1 ? scalarType : Type.vec(t.params.width, scalarType);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      if (t.params.signed) {\n        switch (t.params.width) {\n          case 1:\n            return i32Bits(x);\n          case 2:\n            return vec2(i32Bits(x), i32Bits(y));\n          case 3:\n            return vec3(i32Bits(x), i32Bits(y), i32Bits(z));\n          default:\n            return vec4(i32Bits(x), i32Bits(y), i32Bits(z), i32Bits(w));\n        }\n      } else {\n        switch (t.params.width) {\n          case 1:\n            return u32Bits(x);\n          case 2:\n            return vec2(u32Bits(x), u32Bits(y));\n          case 3:\n            return vec3(u32Bits(x), u32Bits(y), u32Bits(z));\n          default:\n            return vec4(u32Bits(x), u32Bits(y), u32Bits(z), u32Bits(w));\n        }\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const low_0 = V(0b11111111111111111111111111111110);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const high_0 = V(0b01111111111111111111111111111111);\n    const pattern = V(\n      0b10001001010100100010010100100010,\n      0b11001110001100111000110011100011,\n      0b10101010101010101010101010101010,\n      0b01010101010101010101010101010101\n    );\n\n    const cases = [\n      { input: [all_0, all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_0, all_1, u32(0), u32(32)], expected: all_1 },\n      { input: [all_1, all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, all_1, u32(0), u32(1)], expected: low_1 },\n      { input: [all_1, all_0, u32(0), u32(1)], expected: low_0 },\n      { input: [all_0, all_1, u32(31), u32(1)], expected: high_1 },\n      { input: [all_1, all_0, u32(31), u32(1)], expected: high_0 },\n      { input: [all_0, all_1, u32(1), u32(10)], expected: V(0b00000000000000000000011111111110) },\n      { input: [all_1, all_0, u32(1), u32(10)], expected: V(0b11111111111111111111100000000001) },\n      { input: [all_0, all_1, u32(2), u32(5)], expected: V(0b00000000000000000000000001111100) },\n      { input: [all_1, all_0, u32(2), u32(5)], expected: V(0b11111111111111111111111110000011) },\n\n      // Patterns\n      { input: [all_0, pattern, u32(0), u32(32)], expected: pattern },\n      { input: [all_1, pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [all_0, pattern, u32(1), u32(31)],\n        expected: V(\n          0b00010010101001000100101001000100,\n          0b10011100011001110001100111000110,\n          0b01010101010101010101010101010100,\n          0b10101010101010101010101010101010\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(1), u32(31)],\n        expected: V(\n          0b00010010101001000100101001000101,\n          0b10011100011001110001100111000111,\n          0b01010101010101010101010101010101,\n          0b10101010101010101010101010101011\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(18)],\n        expected: V(\n          0b10001001010010001000000000000000,\n          0b11100011001110001100000000000000,\n          0b10101010101010101000000000000000,\n          0b01010101010101010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(18)],\n        expected: V(\n          0b10001001010010001011111111111111,\n          0b11100011001110001111111111111111,\n          0b10101010101010101011111111111111,\n          0b01010101010101010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(7)],\n        expected: V(\n          0b00000000000010001000000000000000,\n          0b00000000000110001100000000000000,\n          0b00000000000010101000000000000000,\n          0b00000000000101010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(7)],\n        expected: V(\n          0b11111111111010001011111111111111,\n          0b11111111111110001111111111111111,\n          0b11111111111010101011111111111111,\n          0b11111111111101010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000001000000000000000,\n          0b00000000000000001100000000000000,\n          0b00000000000000101000000000000000,\n          0b00000000000000010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(4)],\n        expected: V(\n          0b11111111111111001011111111111111,\n          0b11111111111111001111111111111111,\n          0b11111111111111101011111111111111,\n          0b11111111111111010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(3)],\n        expected: V(\n          0b00000000000000001000000000000000,\n          0b00000000000000001100000000000000,\n          0b00000000000000001000000000000000,\n          0b00000000000000010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(3)],\n        expected: V(\n          0b11111111111111101011111111111111,\n          0b11111111111111101111111111111111,\n          0b11111111111111101011111111111111,\n          0b11111111111111110111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(18), u32(3)],\n        expected: V(\n          0b00000000000010000000000000000000,\n          0b00000000000011000000000000000000,\n          0b00000000000010000000000000000000,\n          0b00000000000101000000000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(18), u32(3)],\n        expected: V(\n          0b11111111111010111111111111111111,\n          0b11111111111011111111111111111111,\n          0b11111111111010111111111111111111,\n          0b11111111111101111111111111111111\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(1), u32(31)],\n        expected: V(\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000001,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000001\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(1), u32(31)],\n        expected: V(\n          0b11111111111111111111111111111110,\n          0b11111111111111111111111111111111,\n          0b11111111111111111111111111111110,\n          0b11111111111111111111111111111111\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000010010100100010,\n          0b00000000000000000000110011100011,\n          0b00000000000000000010101010101010,\n          0b00000000000000000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(18)],\n        expected: V(\n          0b11111111111111111110010100100010,\n          0b11111111111111111100110011100011,\n          0b11111111111111111110101010101010,\n          0b11111111111111111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(7)],\n        expected: V(\n          0b10001001010000000010010100100010,\n          0b11001110001000000000110011100011,\n          0b10101010101000000010101010101010,\n          0b01010101010000000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(7)],\n        expected: V(\n          0b10001001010111111110010100100010,\n          0b11001110001111111100110011100011,\n          0b10101010101111111110101010101010,\n          0b01010101010111111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(4)],\n        expected: V(\n          0b10001001010100000010010100100010,\n          0b11001110001100000000110011100011,\n          0b10101010101010000010101010101010,\n          0b01010101010101000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(4)],\n        expected: V(\n          0b10001001010100111110010100100010,\n          0b11001110001100111100110011100011,\n          0b10101010101010111110101010101010,\n          0b01010101010101111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(3)],\n        expected: V(\n          0b10001001010100100010010100100010,\n          0b11001110001100100000110011100011,\n          0b10101010101010100010101010101010,\n          0b01010101010101000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(3)],\n        expected: V(\n          0b10001001010100111110010100100010,\n          0b11001110001100111100110011100011,\n          0b10101010101010111110101010101010,\n          0b01010101010101011101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(18), u32(3)],\n        expected: V(\n          0b10001001010000100010010100100010,\n          0b11001110001000111000110011100011,\n          0b10101010101000101010101010101010,\n          0b01010101010000010101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(18), u32(3)],\n        expected: V(\n          0b10001001010111100010010100100010,\n          0b11001110001111111000110011100011,\n          0b10101010101111101010101010101010,\n          0b01010101010111010101010101010101\n        ),\n      },\n      {\n        input: [pattern, pattern, u32(18), u32(3)],\n        expected: V(\n          0b10001001010010100010010100100010,\n          0b11001110001011111000110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n      {\n        input: [pattern, pattern, u32(14), u32(7)],\n        expected: V(\n          0b10001001010010001010010100100010,\n          0b11001110001110001100110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n\n      // Zero count\n      { input: [pattern, all_1, u32(0), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(1), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(2), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(31), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(32), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(0), u32(0)], expected: pattern },\n    ];\n\n    if (t.params.inputSource !== 'const') {\n      cases.push(\n        ...[\n          // Start overflow\n          { input: [all_0, pattern, u32(50), u32(3)], expected: all_0 },\n          { input: [all_1, pattern, u32(50), u32(3)], expected: all_1 },\n          { input: [pattern, pattern, u32(50), u32(3)], expected: pattern },\n\n          // End overflow\n          { input: [all_0, pattern, u32(0), u32(99)], expected: pattern },\n          { input: [all_1, pattern, u32(0), u32(99)], expected: pattern },\n          { input: [all_0, low_1, u32(31), u32(99)], expected: high_1 },\n          {\n            input: [pattern, pattern, u32(20), u32(99)],\n            expected: V(\n              0b01010010001000100010010100100010,\n              0b11001110001100111000110011100011,\n              0b10101010101010101010101010101010,\n              0b01010101010101010101010101010101\n            ),\n          },\n        ]\n      );\n    }\n\n    await run(t, builtin('insertBits'), [T, T, Type.u32, Type.u32], T, cfg, cases);\n  });\n"],"mappings":"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"}