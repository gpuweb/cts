{"version":3,"file":"workgroupUniformLoad.spec.js","names":["description","makeTestGroup","keysOf","iterRange","AllFeaturesMaxLimitsGPUTest","checkElementsEqualGenerated","g","kTypes","bool","store_val","expected","Uint32Array","host_type","to_host","x","u32","vec4u","mat3x2f","Float32Array","SimpleStruct","decls","ComplexStruct","test","specURL","desc","params","u","combine","fn","t","type","wgsize_x","wgsize","wgsize_y","num_invocations","num_words_per_invocation","length","total_host_words","skipIf","device","limits","maxComputeInvocationsPerWorkgroup","load","code","pipeline","createComputePipeline","layout","compute","module","createShaderModule","entryPoint","outputBuffer","makeBufferWithContents","_i","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesPassCheck","data","i","Number","constructor","typedLength"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/workgroupUniformLoad.spec.ts"],"sourcesContent":["export const description = `\nExecutes a control barrier synchronization function that affects memory and atomic operations in the workgroup address space.\n`;\n\n// NOTE: The control barrier executed by this builtin is tested in the memory_model tests.\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../common/util/data_tables.js';\nimport {\n  TypedArrayBufferView,\n  TypedArrayBufferViewConstructor,\n  iterRange,\n} from '../../../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../../../gpu_test.js';\nimport { checkElementsEqualGenerated } from '../../../../../util/check_contents.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ninterface TypeConfig {\n  // The value to store the workgroup variable.\n  store_val: string;\n  // The expected values once the variable has been copied back to the host.\n  expected: TypedArrayBufferView;\n  // The type used for the host-visible buffer, if different from the workgroup variable.\n  host_type?: string;\n  // A type conversion function, if the types are different.\n  to_host?: (x: string) => string;\n  // Any additional module-scope declarations needed by the type.\n  decls?: string;\n}\n\n// A list of types configurations used for the workgroup variable.\nconst kTypes: Record<string, TypeConfig> = {\n  bool: {\n    store_val: `true`,\n    expected: new Uint32Array([1]),\n    host_type: 'u32',\n    to_host: (x: string) => `u32(${x})`,\n  },\n  u32: {\n    store_val: `42`,\n    expected: new Uint32Array([42]),\n  },\n  vec4u: {\n    store_val: `vec4u(42, 1, 0xffffffff, 777)`,\n    expected: new Uint32Array([42, 1, 0xffffffff, 777]),\n  },\n  mat3x2f: {\n    store_val: `mat3x2(42, 1, 65536, -42, -1, -65536)`,\n    expected: new Float32Array([42, 1, 65536, -42, -1, -65536]),\n  },\n  'array<u32, 4>': {\n    store_val: `array(42, 1, 0xffffffff, 777)`,\n    expected: new Uint32Array([42, 1, 0xffffffff, 777]),\n  },\n  SimpleStruct: {\n    decls: 'struct SimpleStruct { a: u32, b: u32, c: u32, d: u32, }',\n    store_val: `SimpleStruct(42, 1, 0xffffffff, 777)`,\n    expected: new Uint32Array([42, 1, 0xffffffff, 777]),\n  },\n  ComplexStruct: {\n    decls: `struct Inner { v: vec4u, }\n            struct ComplexStruct {\n              a: array<Inner, 4>,\n              @size(28) b: vec4u,\n              c: u32\n            }\n            const v = vec4(42, 1, 0xffffffff, 777);\n            const rhs = ComplexStruct(\n              array(Inner(v.xyzw), Inner(v.yzwx), Inner(v.zwxy), Inner(v.wxyz)),\n              v.xzxz,\n              0x12345678,\n              );`,\n    store_val: `rhs`,\n    expected: new Uint32Array([\n      // v.xyzw\n      42, 1, 0xffffffff, 777,\n      // v.yzwx\n      1, 0xffffffff, 777, 42,\n      // v.zwxy\n      0xffffffff, 777, 42, 1,\n      // v.wxyz\n      777, 42, 1, 0xffffffff,\n      // v.xzxz\n      42, 0xffffffff, 42, 0xffffffff,\n      // 12 bytes of padding\n      0xdeadbeef, 0xdeadbeef, 0xdeadbeef, 0x12345678,\n    ]),\n  },\n};\n\ng.test('types')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#workgroupUniformLoad-builtin')\n  .desc(\n    `Test that the result of a workgroupUniformLoad is the value previously stored to the workgroup variable, for a variety of types.\n    `\n  )\n  .params(u =>\n    u.combine('type', keysOf(kTypes)).combine('wgsize', [\n      [1, 1],\n      [3, 7],\n      [1, 128],\n      [16, 16],\n    ])\n  )\n  .fn(t => {\n    const type = kTypes[t.params.type];\n    const wgsize_x = t.params.wgsize[0];\n    const wgsize_y = t.params.wgsize[1];\n    const num_invocations = wgsize_x * wgsize_y;\n    const num_words_per_invocation = type.expected.length;\n    const total_host_words = num_invocations * num_words_per_invocation;\n\n    t.skipIf(\n      num_invocations > t.device.limits.maxComputeInvocationsPerWorkgroup,\n      `num_invocations (${num_invocations}) > maxComputeInvocationsPerWorkgroup (${t.device.limits.maxComputeInvocationsPerWorkgroup})`\n    );\n\n    let load = `workgroupUniformLoad(&wgvar)`;\n    if (type.to_host) {\n      load = type.to_host(load);\n    }\n\n    // Construct a shader that stores a value to workgroup variable and then loads it using\n    // workgroupUniformLoad() in every invocation, copying the results back to a storage buffer.\n    const code = `\n    ${type.decls ? type.decls : ''}\n\n    @group(0) @binding(0) var<storage, read_write> buffer : array<${\n      type.host_type ? type.host_type : t.params.type\n    }, ${num_invocations}>;\n\n    var<workgroup> wgvar : ${t.params.type};\n\n    @compute @workgroup_size(${wgsize_x}, ${wgsize_y})\n    fn main(@builtin(local_invocation_index) lid: u32) {\n      if (lid == ${num_invocations - 1}) {\n        wgvar = ${type.store_val};\n      }\n      buffer[lid] = ${load};\n    }\n    `;\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code }),\n        entryPoint: 'main',\n      },\n    });\n\n    // Allocate a buffer and fill it with 0xdeadbeef values.\n    const outputBuffer = t.makeBufferWithContents(\n      new Uint32Array([...iterRange(total_host_words, _i => 0xdeadbeef)]),\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    // Check that the output matches the expected values for each invocation.\n    t.expectGPUBufferValuesPassCheck(\n      outputBuffer,\n      data =>\n        checkElementsEqualGenerated(data, i => {\n          return Number(type.expected[i % num_words_per_invocation]);\n        }),\n      {\n        type: type.expected.constructor as TypedArrayBufferViewConstructor,\n        typedLength: total_host_words,\n      }\n    );\n  });\n"],"mappings":"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"}