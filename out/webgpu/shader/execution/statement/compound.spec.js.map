{"version":3,"file":"compound.spec.js","names":["description","makeTestGroup","keysOf","AllFeaturesMaxLimitsGPUTest","g","runStatementTest","t","ty","values","wgsl_main","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","maxOutputValues","outputBuffer","createBufferTracked","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","kTests","uses","src","shadowed","gone","test","desc","params","u","combine","fn","Int32Array","case"],"sources":["../../../../../src/webgpu/shader/execution/statement/compound.spec.ts"],"sourcesContent":["export const description = `\nCompound statement execution.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n/**\n * Builds, runs then checks the output of a statement shader test.\n *\n * @param t The test object\n * @param ty The WGSL scalar type to be written\n * @param values The expected output values of type ty\n * @param wgsl_main The body of the WGSL entry point.\n */\nexport function runStatementTest(\n  t: GPUTest,\n  ty: string,\n  values: TypedArrayBufferView,\n  wgsl_main: string\n) {\n  const wgsl = `\nstruct Outputs {\n  data  : array<${ty}>,\n};\nvar<private> count: u32 = 0;\n\n@group(0) @binding(1) var<storage, read_write> outputs : Outputs;\n\nfn put(value : ${ty}) {\n  outputs.data[count] = value;\n  count += 1;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  _ = &outputs;\n  ${wgsl_main}\n}\n`;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main',\n    },\n  });\n\n  const maxOutputValues = 1000;\n  const outputBuffer = t.createBufferTracked({\n    size: 4 * (1 + maxOutputValues),\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 1, resource: { buffer: outputBuffer } }],\n  });\n\n  // Run the shader.\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(outputBuffer, values);\n}\n\n// Consider a declaration X of identifier 'x' inside a compound statement.\n// Check the value of 'x' at various places relative to X:\n//     a { b; X=c; d; { e; } } f;\n\nconst kTests = {\n  uses: {\n    // Observe values without conflicting declarations.\n    src: `let x = 1;\n          put(x);\n          {\n            put(x);\n            let x = x+1;  // The declaration in question\n            put(x);\n            {\n              put(x);\n            }\n            put(x);\n          }\n          put(x);`,\n    values: [1, 1, 2, 2, 2, 1],\n  },\n  shadowed: {\n    // Observe values when shadowed\n    src: `let x = 1;\n          put(x);\n          {\n            put(x);\n            let x = x+1;  // The declaration in question\n            put(x);\n            {\n              let x = x+1;  // A shadow\n              put(x);\n            }\n            put(x);\n          }\n          put(x);`,\n    values: [1, 1, 2, 3, 2, 1],\n  },\n  gone: {\n    // The declaration goes out of scope.\n    src: `{\n            let x = 2;  // The declaration in question\n            put(x);\n          }\n          let x = 1;\n          put(x);`,\n    values: [2, 1],\n  },\n} as const;\n\ng.test('decl')\n  .desc('Tests the value of a declared value in a compound statment.')\n  .params(u => u.combine('case', keysOf(kTests)))\n  .fn(t => {\n    runStatementTest(\n      t,\n      'i32',\n      new Int32Array(kTests[t.params.case].values),\n      kTests[t.params.case].src\n    );\n  });\n"],"mappings":"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"}