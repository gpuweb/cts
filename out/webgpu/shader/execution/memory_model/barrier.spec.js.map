{"version":3,"file":"barrier.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","MemoryModelTester","kAccessValueTypes","buildTestShader","MemoryType","TestType","buildResultShader","ResultType","g","memoryModelTestParams","workgroupSize","testingWorkgroups","maxWorkgroups","shufflePct","barrierPct","memStressPct","memStressIterations","memStressStoreFirstPct","memStressStoreSecondPct","preStressPct","preStressIterations","preStressStoreFirstPct","preStressStoreSecondPct","scratchMemorySize","stressLineSize","stressTargetLines","stressStrategyBalancePct","permuteFirst","permuteSecond","memStride","aliasedMemory","numBehaviors","kMemTypes","NonAtomicStorageClass","NonAtomicWorkgroupClass","NonAtomicTextureClass","storageMemoryBarrierStoreLoadTestCode","textureMemoryBarrierStoreLoadTestCode","workgroupMemoryBarrierStoreLoadTestCode","workgroupUniformLoadMemoryBarrierStoreLoadTestCode","storageMemoryBarrierLoadStoreTestCode","textureMemoryBarrierLoadStoreTestCode","workgroupMemoryBarrierLoadStoreTestCode","workgroupUniformLoadMemoryBarrierLoadStoreTestCode","storageMemoryBarrierStoreStoreTestCode","textureMemoryBarrierStoreStoreTestCode","workgroupMemoryBarrierStoreStoreTestCode","workgroupUniformLoadMemoryBarrierStoreStoreTestCode","getTestCode","p","accessPair","memType","normalBarrier","test","desc","params","u","combine","beforeAllSubcases","t","skipIf","accessValueType","fn","skipIfDeviceDoesNotHaveFeature","hasLanguageFeature","resultCode","testShader","IntraWorkgroup","resultShader","TwoBehavior","memModelTester","run"],"sources":["../../../../../src/webgpu/shader/execution/memory_model/barrier.spec.ts"],"sourcesContent":["export const description = `\nTests for non-atomic memory synchronization within a workgroup in the presence of a WebGPU barrier`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\n\nimport {\n  MemoryModelTestParams,\n  MemoryModelTester,\n  kAccessValueTypes,\n  buildTestShader,\n  MemoryType,\n  TestType,\n  buildResultShader,\n  ResultType,\n} from './memory_model_setup.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n// A reasonable parameter set, determined heuristically.\nconst memoryModelTestParams: MemoryModelTestParams = {\n  workgroupSize: 256,\n  testingWorkgroups: 512,\n  maxWorkgroups: 1024,\n  shufflePct: 100,\n  barrierPct: 100,\n  memStressPct: 100,\n  memStressIterations: 1024,\n  memStressStoreFirstPct: 50,\n  memStressStoreSecondPct: 50,\n  preStressPct: 100,\n  preStressIterations: 1024,\n  preStressStoreFirstPct: 50,\n  preStressStoreSecondPct: 50,\n  scratchMemorySize: 2048,\n  stressLineSize: 64,\n  stressTargetLines: 2,\n  stressStrategyBalancePct: 50,\n  permuteFirst: 109,\n  permuteSecond: 419,\n  memStride: 4,\n  aliasedMemory: false,\n  numBehaviors: 2,\n};\n\n// The three kinds of non-atomic accesses tested.\n//  rw: read -> barrier -> write\n//  wr: write -> barrier -> read\n//  ww: write -> barrier -> write\ntype AccessPair = 'rw' | 'wr' | 'ww';\n\n// Test the non-atomic memory types.\nconst kMemTypes = [\n  MemoryType.NonAtomicStorageClass,\n  MemoryType.NonAtomicWorkgroupClass,\n  MemoryType.NonAtomicTextureClass,\n] as const;\n\nconst storageMemoryBarrierStoreLoadTestCode = `\n  test_locations.value[x_0] = 1;\n  storageBarrier();\n  let r0 = u32(test_locations.value[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\nconst textureMemoryBarrierStoreLoadTestCode = `\n  textureStore(texture_locations, indexToCoord(x_0), vec4u(1));\n  textureBarrier();\n  let r0 = textureLoad(texture_locations, indexToCoord(x_1)).x;\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\nconst workgroupMemoryBarrierStoreLoadTestCode = `\n  wg_test_locations[x_0] = 1;\n  workgroupBarrier();\n  let r0 = u32(wg_test_locations[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\nconst workgroupUniformLoadMemoryBarrierStoreLoadTestCode = `\n  wg_test_locations[x_0] = 1;\n  _ = workgroupUniformLoad(&placeholder_wg_var);\n  let r0 = u32(wg_test_locations[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\nconst storageMemoryBarrierLoadStoreTestCode = `\n  let r0 = u32(test_locations.value[x_0]);\n  storageBarrier();\n  test_locations.value[x_1] = 1;\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n`;\n\nconst textureMemoryBarrierLoadStoreTestCode = `\n  let r0 = textureLoad(texture_locations, indexToCoord(x_0)).x;\n  textureBarrier();\n  textureStore(texture_locations, indexToCoord(x_1), vec4u(1));\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n`;\n\nconst workgroupMemoryBarrierLoadStoreTestCode = `\n  let r0 = u32(wg_test_locations[x_0]);\n  workgroupBarrier();\n  wg_test_locations[x_1] = 1;\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n`;\n\nconst workgroupUniformLoadMemoryBarrierLoadStoreTestCode = `\n  let r0 = u32(wg_test_locations[x_0]);\n  _ = workgroupUniformLoad(&placeholder_wg_var);\n  wg_test_locations[x_1] = 1;\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n`;\n\nconst storageMemoryBarrierStoreStoreTestCode = `\n  test_locations.value[x_0] = 1;\n  storageBarrier();\n  test_locations.value[x_1] = 2;\n`;\n\nconst textureMemoryBarrierStoreStoreTestCode = `\n  textureStore(texture_locations, indexToCoord(x_0), vec4u(1));\n  textureBarrier();\n  textureStore(texture_locations, indexToCoord(x_1), vec4u(2));\n  textureBarrier();\n  test_locations.value[x_1] = textureLoad(texture_locations, indexToCoord(x_1)).x;\n`;\n\nconst workgroupMemoryBarrierStoreStoreTestCode = `\n  wg_test_locations[x_0] = 1;\n  workgroupBarrier();\n  wg_test_locations[x_1] = 2;\n  workgroupBarrier();\n  test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + x_1] = wg_test_locations[x_1];\n`;\n\nconst workgroupUniformLoadMemoryBarrierStoreStoreTestCode = `\n  wg_test_locations[x_0] = 1;\n  _ = workgroupUniformLoad(&placeholder_wg_var);\n  wg_test_locations[x_1] = 2;\n  _ = workgroupUniformLoad(&placeholder_wg_var);\n  test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + x_1] = wg_test_locations[x_1];\n`;\n\nfunction getTestCode(p: {\n  memType: MemoryType;\n  accessPair: AccessPair;\n  normalBarrier: boolean;\n}): string {\n  switch (p.accessPair) {\n    case 'rw': {\n      switch (p.memType) {\n        case MemoryType.NonAtomicStorageClass:\n          return storageMemoryBarrierLoadStoreTestCode;\n        case MemoryType.NonAtomicTextureClass:\n          return textureMemoryBarrierLoadStoreTestCode;\n        default:\n          return p.normalBarrier\n            ? workgroupMemoryBarrierLoadStoreTestCode\n            : workgroupUniformLoadMemoryBarrierLoadStoreTestCode;\n      }\n    }\n    case 'wr': {\n      switch (p.memType) {\n        case MemoryType.NonAtomicStorageClass:\n          return storageMemoryBarrierStoreLoadTestCode;\n        case MemoryType.NonAtomicTextureClass:\n          return textureMemoryBarrierStoreLoadTestCode;\n        default:\n          return p.normalBarrier\n            ? workgroupMemoryBarrierStoreLoadTestCode\n            : workgroupUniformLoadMemoryBarrierStoreLoadTestCode;\n      }\n    }\n    case 'ww': {\n      switch (p.memType) {\n        case MemoryType.NonAtomicStorageClass:\n          return storageMemoryBarrierStoreStoreTestCode;\n        case MemoryType.NonAtomicTextureClass:\n          return textureMemoryBarrierStoreStoreTestCode;\n        default:\n          return p.normalBarrier\n            ? workgroupMemoryBarrierStoreStoreTestCode\n            : workgroupUniformLoadMemoryBarrierStoreStoreTestCode;\n      }\n    }\n  }\n}\n\ng.test('workgroup_barrier_store_load')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes a non-atomic write and read on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force an invocation\n    after the barrier to read a write from an invocation before the barrier.\n    `\n  )\n  .params(u =>\n    u\n      .combine('accessValueType', kAccessValueTypes)\n      .combine('memType', kMemTypes)\n      .combine('accessPair', ['wr'] as const)\n      .combine('normalBarrier', [true, false] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      !t.params.normalBarrier && t.params.memType !== MemoryType.NonAtomicWorkgroupClass,\n      'workgroupUniformLoad does not have storage memory semantics'\n    );\n    t.skipIf(\n      t.params.memType === MemoryType.NonAtomicTextureClass && t.params.accessValueType === 'f16',\n      'textures do not support f16 access'\n    );\n  })\n  .fn(async t => {\n    if (t.params.accessValueType === 'f16') {\n      t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    }\n    t.skipIf(\n      t.params.memType === MemoryType.NonAtomicTextureClass &&\n        !t.hasLanguageFeature('readonly_and_readwrite_storage_textures'),\n      'requires RW storage textures feature'\n    );\n\n    const resultCode = `\n      if (r0 == 1u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (r0 == 0u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    let testShader = buildTestShader(\n      getTestCode(t.params),\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    if (!t.params.normalBarrier) {\n      testShader += '\\nvar<workgroup> placeholder_wg_var : u32;\\n';\n    }\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader,\n      t.params.accessValueType,\n      t.params.memType === MemoryType.NonAtomicTextureClass\n    );\n    await memModelTester.run(15, 1);\n  });\n\ng.test('workgroup_barrier_load_store')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes a non-atomic write and read on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force an invocation\n    before the barrier to not read the write from an invocation after the barrier.\n    `\n  )\n  .params(u =>\n    u\n      .combine('accessValueType', kAccessValueTypes)\n      .combine('memType', kMemTypes)\n      .combine('accessPair', ['rw'] as const)\n      .combine('normalBarrier', [true, false] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      !t.params.normalBarrier && t.params.memType !== MemoryType.NonAtomicWorkgroupClass,\n      'workgroupUniformLoad does not have storage memory semantics'\n    );\n    t.skipIf(\n      t.params.memType === MemoryType.NonAtomicTextureClass && t.params.accessValueType === 'f16',\n      'textures do not support f16 access'\n    );\n  })\n  .fn(async t => {\n    if (t.params.accessValueType === 'f16') {\n      t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    }\n    t.skipIf(\n      t.params.memType === MemoryType.NonAtomicTextureClass &&\n        !t.hasLanguageFeature('readonly_and_readwrite_storage_textures'),\n      'requires RW storage textures feature'\n    );\n\n    const resultCode = `\n      if (r0 == 0u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (r0 == 1u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    let testShader = buildTestShader(\n      getTestCode(t.params),\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    if (!t.params.normalBarrier) {\n      testShader += '\\nvar<workgroup> placeholder_wg_var : u32;\\n';\n    }\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader,\n      t.params.accessValueType,\n      t.params.memType === MemoryType.NonAtomicTextureClass\n    );\n    await memModelTester.run(12, 1);\n  });\n\ng.test('workgroup_barrier_store_store')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes non-atomic writes on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force the value in memory\n    to be the result of the write after the barrier, not the write before.\n    `\n  )\n  .params(u =>\n    u\n      .combine('accessValueType', kAccessValueTypes)\n      .combine('memType', kMemTypes)\n      .combine('accessPair', ['ww'] as const)\n      .combine('normalBarrier', [true, false] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      !t.params.normalBarrier && t.params.memType !== MemoryType.NonAtomicWorkgroupClass,\n      'workgroupUniformLoad does not have storage memory semantics'\n    );\n    t.skipIf(\n      t.params.memType === MemoryType.NonAtomicTextureClass && t.params.accessValueType === 'f16',\n      'textures do not support f16 access'\n    );\n  })\n  .fn(async t => {\n    if (t.params.accessValueType === 'f16') {\n      t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    }\n    t.skipIf(\n      t.params.memType === MemoryType.NonAtomicTextureClass &&\n        !t.hasLanguageFeature('readonly_and_readwrite_storage_textures'),\n      'requires RW storage textures feature'\n    );\n\n    const resultCode = `\n      if (mem_x_0 == 2u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (mem_x_0 == 1u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    let testShader = buildTestShader(\n      getTestCode(t.params),\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    if (!t.params.normalBarrier) {\n      testShader += '\\nvar<workgroup> placeholder_wg_var : u32;\\n';\n    }\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader,\n      t.params.accessValueType,\n      t.params.memType === MemoryType.NonAtomicTextureClass\n    );\n    await memModelTester.run(10, 1);\n  });\n"],"mappings":"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"}