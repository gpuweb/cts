{"version":3,"file":"texture_intra_invocation_coherence.spec.js","names":["description","makeTestGroup","unreachable","iterRange","kPossibleReadWriteStorageTextureFormats","UniqueFeaturesOrLimitsGPUTest","PRNG","kDimensions","g","indexToCoord","dim","textureType","format","t","textureStore","index","code","textureLoad","texel","getTextureSize","numTexels","size","width","height","depthOrArrayLayers","test","desc","params","u","combine","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","fn","skipIfLanguageFeatureNotSupported","skipIfTextureFormatNotSupported","skipIfTextureFormatNotUsableAsReadWriteStorageTexture","wgx","wgy","device","limits","maxComputeInvocationsPerWorkgroup","num_wgs_x","num_wgs_y","invocations","num_writes_per_invocation","seed","indexOf","length","prng","num_write_indices","write_indices","Uint32Array","x","write_masks","i","remaining","swapIdx","randomU32","tmp","mask","num_read_indices","read_indices","readIdx","write_index_buffer","makeBufferWithContents","GPUBufferUsage","COPY_SRC","STORAGE","read_index_buffer","write_mask_buffer","output_buffer","createBufferTracked","usage","COPY_DST","texture_size","texture","createTextureTracked","dimension","GPUTextureUsage","STORAGE_BINDING","pipeline","createComputePipeline","layout","compute","module","createShaderModule","entryPoint","bg0","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","mipLevelCount","arrayLayerCount","bg1","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectedOutput","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/shader/execution/memory_model/texture_intra_invocation_coherence.spec.ts"],"sourcesContent":["export const description = `\nTest that read/write storage textures are coherent within an invocation.\n\nEach invocation is assigned several random writing indices and a single\nread index from among those. Writes are randomly predicated (except the\none corresponding to the read). Checks that an invocation can read data\nit has written to the texture previously.\nDoes not test coherence between invocations\n\nSome platform (e.g. Metal) require a fence call to make writes visible\nto reads performed by the same invocation. These tests attempt to ensure\nWebGPU implementations emit correct fence calls.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable, iterRange } from '../../../../common/util/util.js';\nimport { kPossibleReadWriteStorageTextureFormats } from '../../../format_info.js';\nimport { UniqueFeaturesOrLimitsGPUTest } from '../../../gpu_test.js';\nimport { PRNG } from '../../../util/prng.js';\n\nconst kDimensions: GPUTextureViewDimension[] = ['1d', '2d', '2d-array', '3d'];\n\n// MAINTENANCE_TODO: Switch this to AllFeaturesMaxLimitsGPUTest\n// Currently the test breaks if switch as it asks for a texture larger\n// than the max size.\nexport const g = makeTestGroup(UniqueFeaturesOrLimitsGPUTest);\n\nfunction indexToCoord(dim: GPUTextureViewDimension): string {\n  switch (dim) {\n    case '1d': {\n      return `\nfn indexToCoord(idx : u32) -> u32 {\n  return idx;\n}`;\n    }\n    case '2d':\n    case '2d-array': {\n      return `\nfn indexToCoord(idx : u32) -> vec2u {\n  return vec2u(idx % (wgx * num_wgs_x), idx / (wgx * num_wgs_x));\n}`;\n    }\n    case '3d': {\n      return `\nfn indexToCoord(idx : u32) -> vec3u {\n  return vec3u(idx % (wgx * num_wgs_x), idx / (wgx * num_wgs_x), 0);\n}`;\n    }\n    default: {\n      unreachable(`unhandled dimension: ${dim}`);\n    }\n  }\n  return ``;\n}\n\nfunction textureType(format: GPUTextureFormat, dim: GPUTextureViewDimension): string {\n  let t = `texture_storage_`;\n  switch (dim) {\n    case '1d': {\n      t += '1d';\n      break;\n    }\n    case '2d': {\n      t += '2d';\n      break;\n    }\n    case '2d-array': {\n      t += '2d_array';\n      break;\n    }\n    case '3d': {\n      t += '3d';\n      break;\n    }\n    default: {\n      unreachable(`unhandled dim: ${dim}`);\n    }\n  }\n  t += `<${format}, read_write>`;\n  return t;\n}\n\nfunction textureStore(dim: GPUTextureViewDimension, index: string): string {\n  let code = `textureStore(t, indexToCoord(${index}), `;\n  if (dim === '2d-array') {\n    code += `0, `;\n  }\n  code += `texel)`;\n  return code;\n}\n\nfunction textureLoad(dim: GPUTextureViewDimension, format: GPUTextureFormat): string {\n  let code = `textureLoad(t, indexToCoord(read_index[global_index])`;\n  if (dim === '2d-array') {\n    code += `, 0`;\n  }\n  code += `).x`;\n  if (format !== 'r32uint') {\n    code = `u32(${code})`;\n  }\n  return code;\n}\n\nfunction texel(format: GPUTextureFormat): string {\n  switch (format) {\n    case 'r32uint': {\n      return 'vec4u(global_index,0,0,0)';\n    }\n    case 'r32sint': {\n      return 'vec4i(i32(global_index),0,0,0)';\n    }\n    case 'r32float': {\n      return 'vec4f(f32(global_index),0,0,0)';\n    }\n    default: {\n      unreachable('unhandled format: ${format}');\n    }\n  }\n  return '';\n}\n\nfunction getTextureSize(numTexels: number, dim: GPUTextureViewDimension): GPUExtent3D {\n  const size: GPUExtent3D = { width: 1, height: 1, depthOrArrayLayers: 1 };\n  switch (dim) {\n    case '1d': {\n      size.width = numTexels;\n      break;\n    }\n    case '2d':\n    case '2d-array':\n    case '3d': {\n      size.width = numTexels / 2;\n      size.height = numTexels / 2;\n      // depthOrArrayLayers defaults to 1\n      break;\n    }\n    default: {\n      unreachable(`unhandled dim: ${dim}`);\n    }\n  }\n  return size;\n}\n\ng.test('texture_intra_invocation_coherence')\n  .desc(`Tests writes from an invocation are visible to reads from the same invocation`)\n  .params(u =>\n    u.combine('format', kPossibleReadWriteStorageTextureFormats).combine('dim', kDimensions)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.skipIfTextureFormatNotUsableAsReadWriteStorageTexture(t.params.format);\n\n    const wgx = 16;\n    const wgy = t.device.limits.maxComputeInvocationsPerWorkgroup / wgx;\n    const num_wgs_x = 2;\n    const num_wgs_y = 2;\n    const invocations = wgx * wgy * num_wgs_x * num_wgs_y;\n    const num_writes_per_invocation = 4;\n\n    const code = `\nrequires readonly_and_readwrite_storage_textures;\n\n@group(0) @binding(0)\nvar t : ${textureType(t.params.format, t.params.dim)};\n\n@group(1) @binding(0)\nvar<storage> write_indices : array<vec4u>;\n\n@group(1) @binding(1)\nvar<storage> read_index : array<u32>;\n\n@group(1) @binding(2)\nvar<storage> write_mask : array<vec4u>;\n\n@group(1) @binding(3)\nvar<storage, read_write> output : array<u32>;\n\nconst wgx = ${wgx}u;\nconst wgy = ${wgy}u;\nconst num_wgs_x = ${num_wgs_x}u;\nconst num_wgs_y = ${num_wgs_y}u;\n\n${indexToCoord(t.params.dim)}\n\n@compute @workgroup_size(wgx, wgy, 1)\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let global_index = gid.x + gid.y * num_wgs_x * wgx;\n\n  let write_index = write_indices[global_index];\n  let mask = write_mask[global_index];\n  let texel = ${texel(t.params.format)};\n\n  if mask.x != 0 {\n    ${textureStore(t.params.dim, 'write_index.x')};\n  }\n  if mask.y != 0 {\n    ${textureStore(t.params.dim, 'write_index.y')};\n  }\n  if mask.z != 0 {\n    ${textureStore(t.params.dim, 'write_index.z')};\n  }\n  if mask.w != 0 {\n    ${textureStore(t.params.dim, 'write_index.w')};\n  }\n  output[global_index] = ${textureLoad(t.params.dim, t.params.format)};\n}`;\n\n    // To get a variety of testing, seed the random number generator based on which case this is.\n    // This means subcases will not execute the same code.\n    const seed =\n      kPossibleReadWriteStorageTextureFormats.indexOf(t.params.format) *\n        kPossibleReadWriteStorageTextureFormats.length +\n      kDimensions.indexOf(t.params.dim);\n    const prng = new PRNG(seed);\n\n    const num_write_indices = invocations * num_writes_per_invocation;\n    const write_indices = new Uint32Array([...iterRange(num_write_indices, x => x)]);\n    const write_masks = new Uint32Array([...iterRange(num_write_indices, x => 0)]);\n    // Shuffle the indices.\n    for (let i = 0; i < num_write_indices; i++) {\n      const remaining = num_write_indices - i;\n      const swapIdx = (prng.randomU32() % remaining) + i;\n      const tmp = write_indices[swapIdx];\n      write_indices[swapIdx] = write_indices[i];\n      write_indices[i] = tmp;\n\n      // Assign random write masks\n      const mask = prng.randomU32() % 2;\n      write_masks[i] = mask;\n    }\n    const num_read_indices = invocations;\n    const read_indices = new Uint32Array(num_read_indices);\n    for (let i = 0; i < num_read_indices; i++) {\n      // Pick a random index from index from this invocation's writes to read from.\n      // Ensure that write is not masked out.\n      const readIdx = prng.randomU32() % num_writes_per_invocation;\n      read_indices[i] = write_indices[num_writes_per_invocation * i + readIdx];\n      write_masks[num_writes_per_invocation * i + readIdx] = 1;\n    }\n\n    // Buffers\n    const write_index_buffer = t.makeBufferWithContents(\n      write_indices,\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n    );\n    const read_index_buffer = t.makeBufferWithContents(\n      read_indices,\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n    );\n    const write_mask_buffer = t.makeBufferWithContents(\n      write_masks,\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n    );\n    const output_buffer = t.createBufferTracked({\n      size: invocations * 4,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n    });\n\n    // Texture\n    const texture_size = getTextureSize(invocations * num_writes_per_invocation, t.params.dim);\n    const texture = t.createTextureTracked({\n      format: t.params.format,\n      dimension: t.params.dim === '2d-array' ? '2d' : (t.params.dim as GPUTextureDimension),\n      size: texture_size,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n    });\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    const bg0 = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: texture.createView({\n            format: t.params.format,\n            dimension: t.params.dim,\n            mipLevelCount: 1,\n            arrayLayerCount: 1,\n          }),\n        },\n      ],\n    });\n    const bg1 = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(1),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: write_index_buffer,\n          },\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: read_index_buffer,\n          },\n        },\n        {\n          binding: 2,\n          resource: {\n            buffer: write_mask_buffer,\n          },\n        },\n        {\n          binding: 3,\n          resource: {\n            buffer: output_buffer,\n          },\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg0);\n    pass.setBindGroup(1, bg1);\n    pass.dispatchWorkgroups(num_wgs_x, num_wgs_y, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const expectedOutput = new Uint32Array([...iterRange(num_read_indices, x => x)]);\n    t.expectGPUBufferValuesEqual(output_buffer, expectedOutput);\n  });\n"],"mappings":"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"}