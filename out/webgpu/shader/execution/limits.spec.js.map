{"version":3,"file":"limits.spec.js","names":["description","makeTestGroup","keysOf","iterRange","AllFeaturesMaxLimitsGPUTest","checkElementsEqualGenerated","g","kMaxStructMembers","kMaxCompositeNestingDepth","kMaxBraceNestingDepth","kMaxFunctionParameters","kMaxSwitchCaseSelectors","kMaxPrivateStorageSize","kMaxFunctionStorageSize","kMaxConstArrayElements","runShaderTest","t","wgsl","input","expected","constants","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","outputBuffer","makeBufferWithContents","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesPassCheck","data","type","Uint32Array","typedLength","length","test","desc","fn","m","_i","s","b","i","p","kArrayElements","bool","size","to_u32","x","u32","vec4u","params","u","combine","elements","Math","floor","maxSize","limits","maxComputeWorkgroupStorageSize","expr"],"sources":["../../../../src/webgpu/shader/execution/limits.spec.ts"],"sourcesContent":["export const description = `Execution tests for WGSL limits.`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { keysOf } from '../../../common/util/data_tables.js';\nimport { iterRange } from '../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTest } from '../../gpu_test.js';\nimport { CheckElementsGenerator, checkElementsEqualGenerated } from '../../util/check_contents.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n// The limits that we test.\nconst kMaxStructMembers = 1023;\nconst kMaxCompositeNestingDepth = 15;\nconst kMaxBraceNestingDepth = 127;\nconst kMaxFunctionParameters = 255;\nconst kMaxSwitchCaseSelectors = 1023;\nconst kMaxPrivateStorageSize = 8192;\nconst kMaxFunctionStorageSize = 8192;\nconst kMaxConstArrayElements = 2047;\n\n/**\n * Run a shader and check that the buffer output matches expectations.\n *\n * @param t The test object\n * @param wgsl The shader source\n * @param input The initial buffer contents\n * @param expected The expected buffer contents after running the shader\n * @param constants The optional pipeline overridable constant values\n */\nfunction runShaderTest(\n  t: GPUTest,\n  wgsl: string,\n  input: Uint32Array,\n  expected: CheckElementsGenerator,\n  constants?: Record<string, GPUPipelineConstantValue>\n): void {\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main',\n      constants,\n    },\n  });\n\n  // Allocate a buffer and copy the input values to it.\n  const outputBuffer = t.makeBufferWithContents(\n    input,\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  );\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n  });\n\n  // Run the shader.\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  // Check that the output matches the expected values.\n  t.expectGPUBufferValuesPassCheck(\n    outputBuffer,\n    data => checkElementsEqualGenerated(data, expected),\n    {\n      type: Uint32Array,\n      typedLength: input.length,\n    }\n  );\n}\n\ng.test('struct_members')\n  .desc(`Test that structures with the maximum number of members are supported.`)\n  .fn(t => {\n    let code = `struct S {`;\n    for (let m = 0; m < kMaxStructMembers; m++) {\n      code += `  m${m}: u32,\\n`;\n    }\n    code += `}\n\n    @group(0) @binding(0) var<storage, read_write> buffer : S;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      buffer = S();\n    }\n    `;\n\n    runShaderTest(\n      t,\n      code,\n      new Uint32Array([...iterRange(kMaxStructMembers, _i => 0xdeadbeef)]),\n      _i => 0\n    );\n  });\n\ng.test('nesting_depth_composite_struct')\n  .desc(`Test that composite types can be nested up to the maximum level.`)\n  .fn(t => {\n    let code = `struct S0 { a : u32 }\\n`;\n    for (let s = 1; s < kMaxCompositeNestingDepth; s++) {\n      code += `struct S${s} { a : S${s - 1} }\\n`;\n    }\n    code += `\n    @group(0) @binding(0) var<storage, read_write> buffer : S${kMaxCompositeNestingDepth - 1};\n\n    @compute @workgroup_size(1)\n    fn main() {\n      buffer = S${kMaxCompositeNestingDepth - 1}();\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([0xdeadbeef]), _i => 0);\n  });\n\ng.test('nesting_depth_composite_array')\n  .desc(`Test that composite types can be nested up to the maximum level.`)\n  .fn(t => {\n    let type = ``;\n    for (let m = 0; m < kMaxCompositeNestingDepth; m++) {\n      type += `array<`;\n    }\n    type += 'u32';\n    for (let m = 0; m < kMaxCompositeNestingDepth; m++) {\n      type += `, 1>`;\n    }\n\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : ${type};\n\n    @compute @workgroup_size(1)\n    fn main() {\n      buffer = ${type}();\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([0xdeadbeef]), _i => 0);\n  });\n\ng.test('nesting_depth_braces')\n  .desc(`Test that brace-enclosed statements can be nested up to the maximum level.`)\n  .fn(t => {\n    let code = `@group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${kMaxBraceNestingDepth}>;\n    @compute @workgroup_size(1)\n\n    fn main() {\n    `;\n    // Note: We subtract one from the spec value to account for the function body, and another one\n    // for the nested statement itself.\n    for (let b = 0; b < kMaxBraceNestingDepth - 2; b++) {\n      code += `  {\\n`;\n    }\n    code += `    buffer[0] = 42;\\n`;\n    for (let b = 0; b < kMaxBraceNestingDepth - 2; b++) {\n      code += `  }\\n`;\n    }\n    code += `\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(kMaxBraceNestingDepth, i => i)]), i => {\n      return i === 0 ? 42 : i;\n    });\n  });\n\ng.test('function_parameters')\n  .desc(`Test that functions can have the maximum number of parameters.`)\n  .fn(t => {\n    let code = `@group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${kMaxFunctionParameters}>;\n\n    fn bar(`;\n    for (let p = 0; p < kMaxFunctionParameters; p++) {\n      code += `p${p}: u32, `;\n    }\n    code += `) {`;\n\n    for (let p = 0; p < kMaxFunctionParameters; p++) {\n      code += `buffer[${p}] = p${p};\\n`;\n    }\n\n    code += `}\n\n    @compute @workgroup_size(1)\n    fn main() {\n      bar(`;\n    for (let p = 0; p < kMaxFunctionParameters; p++) {\n      code += `${p}, `;\n    }\n    code += `);\n    }\n    `;\n\n    runShaderTest(\n      t,\n      code,\n      new Uint32Array([...iterRange(kMaxFunctionParameters, _i => 0xdeadbeef)]),\n      i => i\n    );\n  });\n\ng.test('switch_case_selectors')\n  .desc(\n    `Test that switch statements can have the maximum number of case selectors in separate clauses.`\n  )\n  .fn(t => {\n    let code = `@group(0) @binding(0) var<storage, read_write> buffer : array<u32, 2>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      switch (buffer[0]) {\n        default {}`;\n    for (let s = 0; s < kMaxSwitchCaseSelectors - 1; s++) {\n      code += `\n        case ${s} { buffer[1] = ${s}; }`;\n    }\n    code += `\n      };\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([42, 0xdeadbeef]), _i => 42);\n  });\n\ng.test('switch_case_selectors_same_clause')\n  .desc(\n    `Test that switch statements can have the maximum number of case selectors in the same clause.`\n  )\n  .fn(t => {\n    let code = `@group(0) @binding(0) var<storage, read_write> buffer : array<u32, 2>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      switch (buffer[0]) {\n        default {}\n        case `;\n    for (let s = 0; s < kMaxSwitchCaseSelectors - 1; s++) {\n      code += `${s}, `;\n    }\n    code += ` { buffer[1] = 42; }\n      };\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([999, 0xdeadbeef]), i => {\n      return i === 0 ? 999 : 42;\n    });\n  });\n\n// A list of types used for array elements.\nconst kArrayElements = {\n  bool: {\n    size: 4,\n    to_u32: (x: string) => `u32(${x})`,\n  },\n  u32: {\n    size: 4,\n    to_u32: (x: string) => x,\n  },\n  vec4u: {\n    size: 16,\n    to_u32: (x: string) => `dot(${x}, ${x})`,\n  },\n};\n\ng.test('private_array_byte_size')\n  .desc(`Test that arrays in the private address space up to the maximum size are supported.`)\n  .params(u => u.combine('type', keysOf(kArrayElements)))\n  .fn(t => {\n    const type = kArrayElements[t.params.type];\n    const elements = Math.floor(kMaxPrivateStorageSize / type.size);\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${elements}>;\n\n    var<private> arr : array<${t.params.type}, ${elements}>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      for (var i = 0; i < ${elements}; i++) {\n        buffer[i] = ${type.to_u32('arr[i]')};\n      }\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(elements, _i => 0xdeadbeef)]), _i => 0);\n  });\n\ng.test('private_array_combined_byte_size')\n  .desc(`Test the combined sizes of variables in the private address space.`)\n  .params(u => u.combine('type', keysOf(kArrayElements)))\n  .fn(t => {\n    const type = kArrayElements[t.params.type];\n    const elements = Math.floor(kMaxPrivateStorageSize / type.size / 4);\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${elements}>;\n\n    var<private> arr1 : array<${t.params.type}, ${elements}>;\n    var<private> arr2 : array<${t.params.type}, ${elements}>;\n    var<private> arr3 : array<${t.params.type}, ${elements}>;\n    var<private> arr4 : array<${t.params.type}, ${elements}>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      for (var i = 0; i < ${elements}; i++) {\n        buffer[i] = ${type.to_u32('arr1[i]')} + ${type.to_u32('arr2[i]')} +\n                    ${type.to_u32('arr3[i]')} + ${type.to_u32('arr4[i]')};\n      }\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(elements, _i => 0xdeadbeef)]), _i => 0);\n  });\n\ng.test('function_array_byte_size')\n  .desc(`Test that arrays in the function address space up to the maximum size are supported.`)\n  .params(u => u.combine('type', keysOf(kArrayElements)))\n  .fn(t => {\n    const type = kArrayElements[t.params.type];\n    const elements = Math.floor(kMaxFunctionStorageSize / type.size);\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${elements}>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      var arr : array<${t.params.type}, ${elements}>;\n      for (var i = 0; i < ${elements}; i++) {\n        buffer[i] = ${type.to_u32('arr[i]')};\n      }\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(elements, _i => 0xdeadbeef)]), _i => 0);\n  });\n\ng.test('function_variable_combined_byte_size')\n  .desc(`Test the combined sizes of variables in the function address space.`)\n  .params(u => u.combine('type', keysOf(kArrayElements)))\n  .fn(t => {\n    const type = kArrayElements[t.params.type];\n    const elements = Math.floor(kMaxFunctionStorageSize / type.size / 4);\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${elements}>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      var arr1 : array<${t.params.type}, ${elements}>;\n      var arr2 : array<${t.params.type}, ${elements}>;\n      var arr3 : array<${t.params.type}, ${elements}>;\n      var arr4 : array<${t.params.type}, ${elements}>;\n      for (var i = 0; i < ${elements}; i++) {\n        buffer[i] = ${type.to_u32('arr1[i]')} + ${type.to_u32('arr2[i]')} +\n                    ${type.to_u32('arr3[i]')} + ${type.to_u32('arr4[i]')};\n      }\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(elements, _i => 0xdeadbeef)]), _i => 0);\n  });\n\ng.test('workgroup_array_byte_size')\n  .desc(`Test that arrays in the workgroup address space up to the maximum size are supported.`)\n  .params(u => u.combine('type', keysOf(kArrayElements)))\n  .fn(t => {\n    const maxSize = t.device.limits.maxComputeWorkgroupStorageSize;\n    const type = kArrayElements[t.params.type];\n    const elements = Math.floor(maxSize / type.size);\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${elements}>;\n\n    var<workgroup> arr : array<${t.params.type}, ${elements}>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      for (var i = 0; i < ${elements}; i++) {\n        buffer[i] = ${type.to_u32('arr[i]')};\n      }\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(elements, _i => 0xdeadbeef)]), _i => 0);\n  });\n\ng.test('workgroup_array_byte_size_override')\n  .desc(`Test that arrays in the workgroup address space up to the maximum size are supported.`)\n  .params(u => u.combine('type', keysOf(kArrayElements)))\n  .fn(t => {\n    const maxSize = t.device.limits.maxComputeWorkgroupStorageSize;\n    const type = kArrayElements[t.params.type];\n    const elements = Math.floor(maxSize / type.size);\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : array<u32, ${elements}>;\n\n    // Set the default element count far too large, which we later override with a valid value.\n    override elements = ${elements} * 1000;\n    var<workgroup> arr : array<${t.params.type}, elements>;\n\n    @compute @workgroup_size(1)\n    fn main() {\n      for (var i = 0; i < ${elements}; i++) {\n        buffer[i] = ${type.to_u32('arr[i]')};\n      }\n    }\n    `;\n\n    runShaderTest(t, code, new Uint32Array([...iterRange(elements, _i => 0xdeadbeef)]), _i => 0, {\n      elements,\n    });\n  });\n\ng.test('const_array_elements')\n  .desc(`Test that constant array expressions with the maximum number of elements are supported.`)\n  .fn(t => {\n    const type = `array<u32, ${kMaxConstArrayElements}>`;\n\n    let expr = `${type}(`;\n    for (let i = 0; i < kMaxConstArrayElements; i++) {\n      expr += `${i}, `;\n    }\n    expr += `)`;\n\n    const code = `\n    @group(0) @binding(0) var<storage, read_write> buffer : ${type};\n\n    @compute @workgroup_size(1)\n    fn main() {\n      buffer = ${expr};\n    }\n    `;\n\n    runShaderTest(\n      t,\n      code,\n      new Uint32Array([...iterRange(kMaxConstArrayElements, _i => 0xdeadbeef)]),\n      i => i\n    );\n  });\n"],"mappings":"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"}