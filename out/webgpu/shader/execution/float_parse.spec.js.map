{"version":3,"file":"float_parse.spec.js","names":["description","makeTestGroup","keysOf","iterRange","AllFeaturesMaxLimitsGPUTest","g","runShaderTest","t","wgsl","expected","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","outputBuffer","makeBufferWithContents","Float32Array","length","_i","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","kTestFloats","small_pos_zero_exp","src","result","small_pos_non_zero_exp","pos_exp_neg_result","no_exp","large_number_small_exp","test","desc","params","u","combine","fn","data","value"],"sources":["../../../../src/webgpu/shader/execution/float_parse.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for float parsing cases\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { keysOf } from '../../../common/util/data_tables.js';\nimport { iterRange } from '../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n/**\n * Run a shader and check that the buffer output matches expectations.\n *\n * @param t The test object\n * @param wgsl The shader source\n * @param expected The array of expected values after running the shader\n */\nfunction runShaderTest(t: GPUTest, wgsl: string, expected: Float32Array): void {\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main',\n    },\n  });\n\n  // Allocate a buffer and fill it with 0xdeadbeef words.\n  const outputBuffer = t.makeBufferWithContents(\n    new Float32Array([...iterRange(expected.length, _i => 0xdeadbeef)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  );\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n  });\n\n  // Run the shader.\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  // Check that only the non-padding bytes were modified.\n  t.expectGPUBufferValuesEqual(outputBuffer, expected);\n}\n\nconst kTestFloats = {\n  small_pos_zero_exp: {\n    src:\n      '0.' +\n      '00000000000000000000000000000000000000000000000000' + //  50\n      '00000000000000000000000000000000000000000000000000' + // 100\n      '00000000000000000000000000000000000000000000000000' + // 150\n      '00000000000000000000000000000000000000000000000000' + // 200\n      '00000000000000000000000000000000000000000000000000' + // 250\n      '00000000000000000000000000000000000000000000000000' + // 300\n      '00000000000000000000000000000000000000000000000000' + // 350\n      '1e+0',\n    result: 0.0,\n  },\n  small_pos_non_zero_exp: {\n    src:\n      '0.' +\n      '00000000000000000000000000000000000000000000000000' + //  50\n      '00000000000000000000000000000000000000000000000000' + // 100\n      '00000000000000000000000000000000000000000000000000' + // 150\n      '00000000000000000000000000000000000000000000000000' + // 200\n      '00000000000000000000000000000000000000000000000000' + // 250\n      '00000000000000000000000000000000000000000000000000' + // 300\n      '00000000000000000000000000000000000000000000000000' + // 350\n      '1e+10',\n    result: 0.0,\n  },\n  pos_exp_neg_result: {\n    src:\n      '0.' +\n      '00000000000000000000000000000000000000000000000000' + //  50\n      '00000000000000000000000000000000000000000000000000' + // 100\n      '00000000000000000000000000000000000000000000000000' + // 150\n      '00000000000000000000000000000000000000000000000000' + // 200\n      '00000000000000000000000000000000000000000000000000' + // 250\n      '00000000000000000000000000000000000000000000000000' + // 300\n      '00000000000000000000000000000000000000000000000000' + // 350\n      '1e+300',\n    result: 1e-51,\n  },\n  no_exp: {\n    src:\n      '0.' +\n      '00000000000000000000000000000000000000000000000000' + //  50\n      '00000000000000000000000000000000000000000000000000' + // 100\n      '00000000000000000000000000000000000000000000000000' + // 150\n      '00000000000000000000000000000000000000000000000000' + // 200\n      '00000000000000000000000000000000000000000000000000' + // 250\n      '00000000000000000000000000000000000000000000000000' + // 300\n      '00000000000000000000000000000000000000000000000000' + // 350\n      '1',\n    result: 0.0,\n  },\n  large_number_small_exp: {\n    src:\n      '1' +\n      '00000000000000000000000000000000000000000000000000' + //  50\n      '00000000000000000000000000000000000000000000000000' + // 100\n      '.0e-350',\n    result: 1e-251,\n  },\n};\n\ng.test('valid')\n  .desc(`Test that floats are parsed correctly`)\n  .params(u => u.combine('value', keysOf(kTestFloats)))\n  .fn(t => {\n    const data = kTestFloats[t.params.value];\n    const wgsl = `\n      struct S {\n        val: f32,\n      }\n      @group(0) @binding(0) var<storage, read_write> buffer : S;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        buffer = S(${data.src});\n      }\n    `;\n    runShaderTest(t, wgsl, new Float32Array([data.result]));\n  });\n"],"mappings":"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"}