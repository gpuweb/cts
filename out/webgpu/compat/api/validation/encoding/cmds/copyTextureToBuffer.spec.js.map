{"version":3,"file":"copyTextureToBuffer.spec.js","names":["description","makeTestGroup","getBlockInfoForColorTextureFormat","kCompressedTextureFormats","align","CompatibilityTest","g","test","desc","params","u","combine","fn","t","format","skipIfTextureFormatNotSupported","info","textureSize","blockWidth","blockHeight","texture","createTextureTracked","size","usage","GPUTextureUsage","COPY_SRC","bytesPerRow","bytesPerBlock","buffer","createBufferTracked","GPUBufferUsage","COPY_DST","encoder","device","createCommandEncoder","copyTextureToBuffer","expectGPUErrorInCompatibilityMode","finish"],"sources":["../../../../../../../src/webgpu/compat/api/validation/encoding/cmds/copyTextureToBuffer.spec.ts"],"sourcesContent":["export const description = `\nTests limitations of copyTextureToBuffer in compat mode.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  getBlockInfoForColorTextureFormat,\n  kCompressedTextureFormats,\n} from '../../../../../format_info.js';\nimport { align } from '../../../../../util/math.js';\nimport { CompatibilityTest } from '../../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('compressed')\n  .desc(`Tests that you can not call copyTextureToBuffer with compressed textures in compat mode.`)\n  .params(u => u.combine('format', kCompressedTextureFormats))\n  .fn(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const info = getBlockInfoForColorTextureFormat(format);\n\n    const textureSize = [info.blockWidth, info.blockHeight, 1];\n    const texture = t.createTextureTracked({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const bytesPerRow = align(info.bytesPerBlock, 256);\n\n    const buffer = t.createBufferTracked({\n      size: bytesPerRow,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToBuffer({ texture }, { buffer, bytesPerRow }, textureSize);\n    t.expectGPUErrorInCompatibilityMode('validation', () => {\n      encoder.finish();\n    });\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF;EACEC,iCAAiC;EACjCC,yBAAyB;AACpB,+BAA+B;AACtC,SAASC,KAAK,QAAQ,6BAA6B;AACnD,SAASC,iBAAiB,QAAQ,mCAAmC;;AAErE,OAAO,MAAMC,CAAC,GAAGL,aAAa,CAACI,iBAAiB,CAAC;;AAEjDC,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI,CAAE,0FAAyF,CAAC;AAChGC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAER,yBAAyB,CAAC,CAAC;AAC3DS,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;EAC3BI,CAAC,CAACE,+BAA+B,CAACD,MAAM,CAAC;;EAEzC,MAAME,IAAI,GAAGd,iCAAiC,CAACY,MAAM,CAAC;;EAEtD,MAAMG,WAAW,GAAG,CAACD,IAAI,CAACE,UAAU,EAAEF,IAAI,CAACG,WAAW,EAAE,CAAC,CAAC;EAC1D,MAAMC,OAAO,GAAGP,CAAC,CAACQ,oBAAoB,CAAC;IACrCC,IAAI,EAAEL,WAAW;IACjBH,MAAM;IACNS,KAAK,EAAEC,eAAe,CAACC;EACzB,CAAC,CAAC;;EAEF,MAAMC,WAAW,GAAGtB,KAAK,CAACY,IAAI,CAACW,aAAa,EAAE,GAAG,CAAC;;EAElD,MAAMC,MAAM,GAAGf,CAAC,CAACgB,mBAAmB,CAAC;IACnCP,IAAI,EAAEI,WAAW;IACjBH,KAAK,EAAEO,cAAc,CAACC;EACxB,CAAC,CAAC;;EAEF,MAAMC,OAAO,GAAGnB,CAAC,CAACoB,MAAM,CAACC,oBAAoB,CAAC,CAAC;EAC/CF,OAAO,CAACG,mBAAmB,CAAC,EAAEf,OAAO,CAAC,CAAC,EAAE,EAAEQ,MAAM,EAAEF,WAAW,CAAC,CAAC,EAAET,WAAW,CAAC;EAC9EJ,CAAC,CAACuB,iCAAiC,CAAC,YAAY,EAAE,MAAM;IACtDJ,OAAO,CAACK,MAAM,CAAC,CAAC;EAClB,CAAC,CAAC;AACJ,CAAC,CAAC"}