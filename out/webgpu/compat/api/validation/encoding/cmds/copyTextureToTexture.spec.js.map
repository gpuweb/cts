{"version":3,"file":"copyTextureToTexture.spec.js","names":["description","makeTestGroup","getBlockInfoForColorTextureFormat","getBlockInfoForTextureFormat","kCompressedTextureFormats","kPossibleMultisampledTextureFormats","CompatibilityTest","g","test","desc","params","u","combine","fn","t","format","skipIfTextureFormatNotSupported","blockWidth","blockHeight","srcTexture","createTextureTracked","size","usage","GPUTextureUsage","COPY_SRC","dstTexture","COPY_DST","encoder","device","createCommandEncoder","copyTextureToTexture","texture","expectGPUErrorInCompatibilityMode","finish","skipIfTextureFormatNotMultisampled","sampleCount","RENDER_ATTACHMENT"],"sources":["../../../../../../../src/webgpu/compat/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"sourcesContent":["export const description = `\nTests limitations of copyTextureToTextures in compat mode.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  getBlockInfoForColorTextureFormat,\n  getBlockInfoForTextureFormat,\n  kCompressedTextureFormats,\n  kPossibleMultisampledTextureFormats,\n} from '../../../../../format_info.js';\nimport { CompatibilityTest } from '../../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('compressed')\n  .desc(`Tests that you can not call copyTextureToTexture with compressed textures in compat mode.`)\n  .params(u => u.combine('format', kCompressedTextureFormats))\n  .fn(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const { blockWidth, blockHeight } = getBlockInfoForColorTextureFormat(format);\n\n    const srcTexture = t.createTextureTracked({\n      size: [blockWidth, blockHeight, 1],\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const dstTexture = t.createTextureTracked({\n      size: [blockWidth, blockHeight, 1],\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture({ texture: srcTexture }, { texture: dstTexture }, [\n      blockWidth,\n      blockHeight,\n      1,\n    ]);\n    t.expectGPUErrorInCompatibilityMode('validation', () => {\n      encoder.finish();\n    });\n  });\n\ng.test('multisample')\n  .desc(`Test that you can not call copyTextureToTexture with multisample textures in compat mode.`)\n  .params(u => u.combine('format', kPossibleMultisampledTextureFormats))\n  .fn(t => {\n    const { format } = t.params;\n    const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(format);\n\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotMultisampled(format);\n\n    const srcTexture = t.createTextureTracked({\n      size: [blockWidth, blockHeight, 1],\n      format,\n      sampleCount: 4,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dstTexture = t.createTextureTracked({\n      size: [blockWidth, blockHeight, 1],\n      format,\n      sampleCount: 4,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture({ texture: srcTexture }, { texture: dstTexture }, [\n      blockWidth,\n      blockHeight,\n      1,\n    ]);\n    t.expectGPUErrorInCompatibilityMode('validation', () => {\n      encoder.finish();\n    });\n  });\n"],"mappings":"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"}