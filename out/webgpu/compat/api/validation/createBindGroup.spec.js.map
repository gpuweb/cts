{"version":3,"file":"createBindGroup.spec.js","names":["description","makeTestGroup","kTextureDimensions","kTextureViewDimensions","effectiveViewDimensionForTexture","getTextureDimensionFromView","CompatibilityTest","g","isTextureBindingViewDimensionCompatibleWithDimension","dimension","textureBindingViewDimension","isValidViewDimensionForDimension","depthOrArrayLayers","viewDimension","undefined","isValidDimensionForDepthOrArrayLayers","isValidViewDimensionForDepthOrArrayLayers","getEffectiveTextureBindingViewDimension","test","desc","params","u","combine","filter","fn","t","texture","createTextureTracked","size","format","usage","GPUTextureUsage","TEXTURE_BINDING","effectiveTextureBindingViewDimension","effectiveViewDimension","layout","device","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","resource","createView","shouldError","expectValidationErrorInCompatibilityMode","createBindGroup"],"sources":["../../../../../src/webgpu/compat/api/validation/createBindGroup.spec.ts"],"sourcesContent":["export const description = `\nTests that, in compat mode, the dimension of a view is compatible with a texture's textureBindingViewDimension.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureDimensions, kTextureViewDimensions } from '../../../capability_info.js';\nimport {\n  effectiveViewDimensionForTexture,\n  getTextureDimensionFromView,\n} from '../../../util/texture/base.js';\nimport { CompatibilityTest } from '../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\nfunction isTextureBindingViewDimensionCompatibleWithDimension(\n  dimension: GPUTextureDimension = '2d',\n  textureBindingViewDimension: GPUTextureViewDimension = '2d'\n) {\n  return getTextureDimensionFromView(textureBindingViewDimension) === dimension;\n}\n\nfunction isValidViewDimensionForDimension(\n  dimension: GPUTextureDimension | undefined,\n  depthOrArrayLayers: number,\n  viewDimension: GPUTextureViewDimension | undefined\n) {\n  if (viewDimension === undefined) {\n    return true;\n  }\n\n  switch (dimension) {\n    case '1d':\n      return viewDimension === '1d';\n    case '2d':\n    case undefined:\n      switch (viewDimension) {\n        case undefined:\n        case '2d':\n        case '2d-array':\n          return true;\n        case 'cube':\n          return depthOrArrayLayers === 6;\n        case 'cube-array':\n          return depthOrArrayLayers % 6 === 0;\n        default:\n          return false;\n      }\n      break;\n    case '3d':\n      return viewDimension === '3d';\n  }\n}\n\nfunction isValidDimensionForDepthOrArrayLayers(\n  dimension: GPUTextureDimension | undefined,\n  depthOrArrayLayers: number\n) {\n  switch (dimension) {\n    case '1d':\n      return depthOrArrayLayers === 1;\n    default:\n      return true;\n  }\n}\n\nfunction isValidViewDimensionForDepthOrArrayLayers(\n  viewDimension: GPUTextureViewDimension | undefined,\n  depthOrArrayLayers: number\n) {\n  switch (viewDimension) {\n    case '2d':\n      return depthOrArrayLayers === 1;\n    case 'cube':\n      return depthOrArrayLayers === 6;\n    case 'cube-array':\n      return depthOrArrayLayers % 6 === 0;\n    default:\n      return true;\n  }\n  return viewDimension === 'cube';\n}\n\nfunction getEffectiveTextureBindingViewDimension(\n  dimension: GPUTextureDimension | undefined,\n  depthOrArrayLayers: number,\n  textureBindingViewDimension: GPUTextureViewDimension | undefined\n) {\n  if (textureBindingViewDimension) {\n    return textureBindingViewDimension;\n  }\n\n  switch (dimension) {\n    case '1d':\n      return '1d';\n    case '2d':\n    case undefined:\n      return depthOrArrayLayers > 1 ? '2d-array' : '2d';\n      break;\n    case '3d':\n      return '3d';\n  }\n}\n\ng.test('viewDimension_matches_textureBindingViewDimension')\n  .desc(\n    `\n    Tests that, in compat mode, the dimension of a view is compatible with a texture's textureBindingViewDimension\n    when used as a TEXTURE_BINDING.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('dimension', [...kTextureDimensions, undefined])\n      .combine('textureBindingViewDimension', [...kTextureViewDimensions, undefined])\n      .combine('viewDimension', [...kTextureViewDimensions, undefined])\n      .combine('depthOrArrayLayers', [1, 2, 6])\n      .filter(\n        ({ dimension, textureBindingViewDimension, depthOrArrayLayers, viewDimension }) =>\n          textureBindingViewDimension !== 'cube-array' &&\n          viewDimension !== 'cube-array' &&\n          isTextureBindingViewDimensionCompatibleWithDimension(\n            dimension,\n            textureBindingViewDimension\n          ) &&\n          isValidViewDimensionForDimension(dimension, depthOrArrayLayers, viewDimension) &&\n          isValidViewDimensionForDepthOrArrayLayers(\n            textureBindingViewDimension,\n            depthOrArrayLayers\n          ) &&\n          isValidDimensionForDepthOrArrayLayers(dimension, depthOrArrayLayers)\n      )\n  )\n  .fn(t => {\n    const { dimension, textureBindingViewDimension, viewDimension, depthOrArrayLayers } = t.params;\n\n    const texture = t.createTextureTracked({\n      size: [1, 1, depthOrArrayLayers],\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      ...(dimension && { dimension }),\n      ...(textureBindingViewDimension && { textureBindingViewDimension }),\n    });\n\n    const effectiveTextureBindingViewDimension = getEffectiveTextureBindingViewDimension(\n      dimension,\n      texture.depthOrArrayLayers,\n      textureBindingViewDimension\n    );\n\n    const effectiveViewDimension = getEffectiveTextureBindingViewDimension(\n      dimension,\n      texture.depthOrArrayLayers,\n      viewDimension\n    );\n\n    const layout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          texture: {\n            viewDimension: effectiveViewDimensionForTexture(texture, viewDimension),\n          },\n        },\n      ],\n    });\n\n    const resource = texture.createView({ dimension: viewDimension });\n    const shouldError = effectiveTextureBindingViewDimension !== effectiveViewDimension;\n\n    t.expectValidationErrorInCompatibilityMode(() => {\n      t.device.createBindGroup({\n        layout,\n        entries: [{ binding: 0, resource }],\n      });\n    }, shouldError);\n  });\n"],"mappings":"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"}