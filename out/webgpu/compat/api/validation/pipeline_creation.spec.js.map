{"version":3,"file":"pipeline_creation.spec.js","names":["description","makeTestGroup","keysOf","kShortShaderStages","kShortShaderStageToShaderStage","CompatibilityTest","g","kDepthCases","textureSampleWith2DF32","sampleWGSL","textureType","viewDimension","textureSampleWithDepth2D","textureSampleWithDepthCube","textureSampleWithDepth2DArray","textureSampleWithOffsetWithDepth2D","textureSampleWithOffsetWithDepth2DArray","textureSampleLevelWithDepth2D","textureSampleLevelWithDepthCube","textureSampleLevelWithDepth2DArray","textureSampleLevelWithOffsetWithDepth2D","textureSampleLevelWithOffsetWithDepth2DArray","textureGatherWithDepth2D","textureGatherWithDepthCube","textureGatherWithDepth2DArray","textureGatherWithOffsetWithDepth2D","textureGatherWithOffsetDepth2DArray","test","desc","params","u","combine","filter","t","depthCase","startsWith","stage","fn","shortStage","async","usageWGSL","module","device","createShaderModule","code","bindGroupLayout0","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","FRAGMENT","COMPUTE","texture","sampleType","includes","multisampled","bindGroupLayout1","sampler","type","layout","createPipelineLayout","bindGroupLayouts","success","isCompatibility","doCreateComputePipelineTest","compute","doCreateRenderPipelineTest","vertex","fragment","targets","format","numCombosToNumber","maxCombos","numCombos","m","exec","parseInt","numNonSampledToNumber","maxTextures","numNonSampled","combineWithParams","pass","numExternal","useSame","map","p","stages","flat","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage","limits","maxTexturesPerStage","Math","min","numCombinations","numNonSampledTextures","textureDeclarations","samplerDeclarations","usages","bindGroupLayoutEntries","numStages","visibilityByStage","addTextureDeclaration","push","addSamplerDeclaration","addExternalTextureDeclaration","id","externalTexture","count","s","length","et","eBinding","sBinding","join"],"sources":["../../../../../src/webgpu/compat/api/validation/pipeline_creation.spec.ts"],"sourcesContent":["export const description = `\nTests that createComputePipeline(async), and createRenderPipeline(async)\nreject pipelines that are invalid in compat mode\n\n- test that depth textures can not be used with non-comparison samplers\n\nTODO:\n- test that a shader that has more than min(maxSamplersPerShaderStage, maxSampledTexturesPerShaderStage)\n  texture+sampler combinations generates a validation error.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport {\n  kShortShaderStages,\n  kShortShaderStageToShaderStage,\n} from '../../../shader/execution/expression/call/builtin/texture_utils.js';\nimport { CompatibilityTest } from '../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\nconst kDepthCases = {\n  textureSampleWith2DF32: {\n    sampleWGSL: 'textureSample(t, s, vec2f(0))', // should pass\n    textureType: 'texture_2d<f32>',\n    viewDimension: '2d',\n  },\n  textureSampleWithDepth2D: {\n    sampleWGSL: 'textureSample(t, s, vec2f(0))',\n    textureType: 'texture_depth_2d',\n    viewDimension: '2d',\n  },\n  textureSampleWithDepthCube: {\n    sampleWGSL: 'textureSample(t, s, vec3f(0))',\n    textureType: 'texture_depth_cube',\n    viewDimension: 'cube',\n  },\n  textureSampleWithDepth2DArray: {\n    sampleWGSL: 'textureSample(t, s, vec2f(0), 0)',\n    textureType: 'texture_depth_2d_array',\n    viewDimension: '2d-array',\n  },\n  textureSampleWithOffsetWithDepth2D: {\n    sampleWGSL: 'textureSample(t, s, vec2f(0), vec2i(0, 0))',\n    textureType: 'texture_depth_2d',\n    viewDimension: '2d',\n  },\n  textureSampleWithOffsetWithDepth2DArray: {\n    sampleWGSL: 'textureSample(t, s, vec2f(0), 0, vec2i(0, 0))',\n    textureType: 'texture_depth_2d_array',\n    viewDimension: '2d-array',\n  },\n  textureSampleLevelWithDepth2D: {\n    sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0)',\n    textureType: 'texture_depth_2d',\n    viewDimension: '2d',\n  },\n  textureSampleLevelWithDepthCube: {\n    sampleWGSL: 'textureSampleLevel(t, s, vec3f(0), 0)',\n    textureType: 'texture_depth_cube',\n    viewDimension: 'cube',\n  },\n  textureSampleLevelWithDepth2DArray: {\n    sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, 0)',\n    textureType: 'texture_depth_2d_array',\n    viewDimension: '2d-array',\n  },\n  textureSampleLevelWithOffsetWithDepth2D: {\n    sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, vec2i(0, 0))',\n    textureType: 'texture_depth_2d',\n    viewDimension: '2d',\n  },\n  textureSampleLevelWithOffsetWithDepth2DArray: {\n    sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, 0, vec2i(0, 0))',\n    textureType: 'texture_depth_2d_array',\n    viewDimension: '2d-array',\n  },\n  textureGatherWithDepth2D: {\n    sampleWGSL: 'textureGather(t, s, vec2f(0))',\n    textureType: 'texture_depth_2d',\n    viewDimension: '2d',\n  },\n  textureGatherWithDepthCube: {\n    sampleWGSL: 'textureGather(t, s, vec3f(0))',\n    textureType: 'texture_depth_cube',\n    viewDimension: 'cube',\n  },\n  textureGatherWithDepth2DArray: {\n    sampleWGSL: 'textureGather(t, s, vec2f(0), 0)',\n    textureType: 'texture_depth_2d_array',\n    viewDimension: '2d-array',\n  },\n  textureGatherWithOffsetWithDepth2D: {\n    sampleWGSL: 'textureGather(t, s, vec2f(0), vec2i(0, 0))',\n    textureType: 'texture_depth_2d',\n    viewDimension: '2d',\n  },\n  textureGatherWithOffsetDepth2DArray: {\n    sampleWGSL: 'textureGather(t, s, vec2f(0), 0, vec2i(0, 0))',\n    textureType: 'texture_depth_2d_array',\n    viewDimension: '2d-array',\n  },\n} as const;\n\ng.test('depth_textures')\n  .desc('Tests that depth textures can not be used with non-comparison samplers in compat mode.')\n  .params(u =>\n    u //\n      .combine('depthCase', keysOf(kDepthCases))\n      .combine('stage', kShortShaderStages)\n      .filter(\n        t => kDepthCases[t.depthCase].sampleWGSL.startsWith('textureGather') || t.stage === 'f'\n      )\n      .combine('async', [false, true] as const)\n  )\n  .fn(t => {\n    const { depthCase, stage: shortStage, async } = t.params;\n    const { sampleWGSL, textureType, viewDimension } = kDepthCases[depthCase];\n    const stage = kShortShaderStageToShaderStage[shortStage];\n\n    const usageWGSL = `_ = ${sampleWGSL};`;\n    const module = t.device.createShaderModule({\n      code: `\n        @group(0) @binding(0) var t: ${textureType};\n        @group(1) @binding(0) var s: sampler;\n\n        // make sure it's fine such a combination exists but it's not used.\n        fn unused() {\n          ${usageWGSL};\n        }\n\n        @vertex fn vs() -> @builtin(position) vec4f {\n            ${stage === 'vertex' ? usageWGSL : ''}\n            return vec4f(0);\n        }\n\n        @fragment fn fs() -> @location(0) vec4f {\n            ${stage === 'fragment' ? usageWGSL : ''}\n            return vec4f(0);\n        }\n\n        @compute @workgroup_size(1) fn cs() {\n            ${stage === 'compute' ? usageWGSL : ''};\n        }\n      `,\n    });\n\n    const bindGroupLayout0 = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n          texture: {\n            sampleType: textureType.includes('depth') ? 'depth' : 'float',\n            viewDimension,\n            multisampled: false,\n          },\n        },\n      ],\n    });\n\n    const bindGroupLayout1 = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n          sampler: {\n            type: 'non-filtering',\n          },\n        },\n      ],\n    });\n\n    const layout = t.device.createPipelineLayout({\n      bindGroupLayouts: [bindGroupLayout0, bindGroupLayout1],\n    });\n\n    const success = !t.isCompatibility || textureType === 'texture_2d<f32>';\n    switch (stage) {\n      case 'compute':\n        t.doCreateComputePipelineTest(async, success, {\n          layout,\n          compute: {\n            module,\n          },\n        });\n        break;\n      case 'fragment':\n      case 'vertex':\n        t.doCreateRenderPipelineTest(async, success, {\n          layout,\n          vertex: {\n            module,\n          },\n          fragment: {\n            module,\n            targets: [{ format: 'rgba8unorm' }],\n          },\n        });\n        break;\n    }\n  });\n\nfunction numCombosToNumber(maxCombos: number, numCombos: string): number {\n  const m = /^max([+-]?)(\\d+)$/.exec(numCombos);\n  if (m) {\n    if (m[1] === '+') {\n      return maxCombos + parseInt(m[2]);\n    } else if (m[1] === '-') {\n      return maxCombos - parseInt(m[2]);\n    } else {\n      return maxCombos;\n    }\n  }\n  return parseInt(numCombos);\n}\n\nfunction numNonSampledToNumber(maxTextures: number, numNonSampled: '0' | '1' | 'max') {\n  switch (numNonSampled) {\n    case '0':\n      return 0;\n    case '1':\n      return 1;\n    case 'max':\n      return maxTextures;\n  }\n}\n\ng.test('texture_sampler_combos')\n  .desc(\n    `\nTest that you can not use more texture+sampler combos than\nmin(maxSamplersPerShaderStage, maxSampledTexturesPerShaderStage)\nin compatibility mode.\n\nThe spec, copy and pasted here:\n\nmaxCombinationsPerStage = min(maxSampledTexturesPerShaderStage, maxSamplersPerShaderStage)\nfor each stage of the pipeline:\n  sum = 0\n  for each texture binding in the pipeline layout which is visible to that stage:\n    sum += max(1, number of texture sampler combos for that texture binding)\n  for each external texture binding in the pipeline layout which is visible to that stage:\n    sum += 1 // for LUT texture + LUT sampler\n    sum += 3 * max(1, number of external_texture sampler combos) // for Y+U+V\n  if sum > maxCombinationsPerStage\n    generate a validation error.\n\n`\n  )\n  .params(u =>\n    // prettier-ignore\n    u\n      .combineWithParams([\n        ...([\n          { pass: true,  numCombos: 'max',   numNonSampled: '1',   numExternal: 0, useSame: false },\n          { pass: false, numCombos: 'max+1', numNonSampled: '1',   numExternal: 0, useSame: false },\n          { pass: true,  numCombos: '1',     numNonSampled: 'max', numExternal: 0, useSame: false },\n          { pass: false, numCombos: '2',     numNonSampled: 'max', numExternal: 0, useSame: false },\n          { pass: true,  numCombos: 'max-4', numNonSampled: '0',   numExternal: 1, useSame: false },\n          { pass: false, numCombos: 'max-3', numNonSampled: '0',   numExternal: 1, useSame: false },\n          { pass: true,  numCombos: 'max-8', numNonSampled: '0',   numExternal: 2, useSame: false },\n          { pass: false, numCombos: 'max-7', numNonSampled: '0',   numExternal: 2, useSame: false },\n          { pass: true,  numCombos: 'max-7', numNonSampled: '0',   numExternal: 2, useSame: true },\n          { pass: false, numCombos: 'max-6', numNonSampled: '0',   numExternal: 2, useSame: true },\n        ] as const).map(p => ([{ ...p, stages: 'vertex' }, { ...p, stages: 'fragment' }, { ...p, stages: 'compute' }] as const)).flat(),\n        {   pass: true,  numCombos: 'max',   numNonSampled: '1',   numExternal: 0, useSame: false, stages: 'vertex,fragment' },\n      ] as const)\n      .combine('async', [false, true] as const)\n  )\n  .fn(t => {\n    const { device } = t;\n    const { pass, stages, numCombos, numNonSampled, numExternal, useSame, async } = t.params;\n    const { maxSampledTexturesPerShaderStage, maxSamplersPerShaderStage } = device.limits;\n\n    const maxTexturesPerStage = maxSampledTexturesPerShaderStage - numExternal * 3;\n    const maxCombos = Math.min(maxSampledTexturesPerShaderStage, maxSamplersPerShaderStage);\n    const numCombinations = numCombosToNumber(maxCombos, numCombos);\n    const numNonSampledTextures = numNonSampledToNumber(\n      maxSampledTexturesPerShaderStage,\n      numNonSampled\n    );\n\n    const textureDeclarations: string[][] = [[], []];\n    const samplerDeclarations: string[][] = [[], []];\n    const usages: string[][] = [[], []];\n    const bindGroupLayoutEntries: GPUBindGroupLayoutEntry[][] = [[], [], [], []];\n    const numStages = stages === 'compute' ? 1 : 2;\n    const visibilityByStage =\n      stages === 'compute'\n        ? [GPUShaderStage.COMPUTE]\n        : [GPUShaderStage.VERTEX, GPUShaderStage.FRAGMENT];\n\n    const addTextureDeclaration = (stage: number, binding: number) => {\n      textureDeclarations[stage].push(\n        `@group(${stage * 2}) @binding(${binding}) var t${stage}_${binding}: texture_2d<f32>;`\n      );\n      bindGroupLayoutEntries[stage * 2].push({\n        binding,\n        visibility: visibilityByStage[stage],\n        texture: {},\n      });\n    };\n\n    const addSamplerDeclaration = (stage: number, binding: number) => {\n      samplerDeclarations[stage].push(\n        `@group(${stage * 2 + 1}) @binding(${binding}) var s${stage}_${binding}: sampler;`\n      );\n      bindGroupLayoutEntries[stage * 2 + 1].push({\n        binding,\n        visibility: visibilityByStage[stage],\n        sampler: {},\n      });\n    };\n\n    const addExternalTextureDeclaration = (stage: number, binding: number, id: number) => {\n      textureDeclarations[stage].push(\n        `@group(${stage * 2}) @binding(${binding}) var e${stage}_${id}: texture_external;`\n      );\n      bindGroupLayoutEntries[stage * 2].push({\n        binding,\n        visibility: visibilityByStage[stage],\n        externalTexture: {},\n      });\n    };\n\n    for (let stage = 0; stage < numStages; ++stage) {\n      let count = 0;\n      for (let t = 0; count < numCombinations && t < maxTexturesPerStage; ++t) {\n        addTextureDeclaration(stage, t);\n        for (let s = 0; count < numCombinations && s < maxSamplersPerShaderStage; ++s) {\n          if (t === 0) {\n            addSamplerDeclaration(stage, s);\n          }\n          usages[stage].push(\n            `  c += textureSampleLevel(t${stage}_${t}, s${stage}_${s}, vec2f(0), 0);`\n          );\n          ++count;\n        }\n      }\n\n      for (let t = 0; t < numNonSampledTextures; ++t) {\n        if (t >= textureDeclarations[stage].length) {\n          addTextureDeclaration(stage, t);\n        }\n        usages[stage].push(`  c += textureLoad(t${stage}_${t}, vec2u(0), 0);`);\n      }\n\n      for (let t = 0; t < numExternal; ++t) {\n        if (t === 0 || !useSame) {\n          const et = textureDeclarations[stage].length + t;\n          addExternalTextureDeclaration(stage, et, t);\n        }\n        const eBinding = useSame ? 0 : t;\n        const sBinding = useSame ? t : 0;\n        usages[stage].push(\n          `  c += textureSampleBaseClampToEdge(e${stage}_${eBinding}, s${stage}_${sBinding}, vec2f(0));`\n        );\n      }\n    }\n\n    const code = `\n${textureDeclarations[0].join('\\n')}\n${textureDeclarations[1].join('\\n')}\n\n${samplerDeclarations[0].join('\\n')}\n${samplerDeclarations[1].join('\\n')}\n\nfn usage0() -> vec4f {\n  var c: vec4f;\n  ${usages[0].join('\\n')}\n  return c;\n}\n\nfn usage1() -> vec4f {\n  var c: vec4f;\n  ${usages[1].join('\\n')}\n  return c;\n}\n\n@vertex fn vs() -> @builtin(position) vec4f {\n  _ = ${stages.includes('vertex') ? 'usage0()' : 'vec4f(0)'};\n  return vec4f(0);\n}\n\n@fragment fn fs() -> @location(0) vec4f {\n  return ${stages.includes('fragment') ? 'usage1()' : 'vec4f(0)'};\n}\n\n@compute @workgroup_size(1) fn cs() {\n  _ = usage0();\n}\n\n`;\n\n    // MAINTENANCE_TODO: remove this. It's only needed because of a bug in dawn\n    // with auto layouts.\n    const layout = device.createPipelineLayout({\n      bindGroupLayouts: bindGroupLayoutEntries.map(entries =>\n        device.createBindGroupLayout({ entries })\n      ),\n    });\n\n    const module = device.createShaderModule({ code });\n    if (stages === 'compute') {\n      t.doCreateComputePipelineTest(async, pass || !t.isCompatibility, {\n        layout,\n        compute: { module },\n      });\n    } else {\n      t.doCreateRenderPipelineTest(async, pass || !t.isCompatibility, {\n        layout,\n        vertex: { module },\n        fragment: { module, targets: [{ format: 'rgba8unorm' }] },\n      });\n    }\n  });\n"],"mappings":"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"}