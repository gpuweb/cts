{"version":3,"file":"createTexture.spec.js","names":["description","makeTestGroup","kTextureDimensions","kTextureViewDimensions","kCompatModeUnsupportedStorageTextureFormats","kDifferentBaseFormatTextureFormats","getBlockInfoForTextureFormat","getBaseFormatForTextureFormat","getTextureDimensionFromView","CompatibilityTest","g","test","desc","fn","t","expectGPUErrorInCompatibilityMode","createTextureTracked","size","format","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","params","u","combine","dimension","textureBindingViewDimension","depthOrArrayLayers","shouldError","skipIfTextureFormatNotSupported","info","baseFormat","formatPairs","blockWidth","blockHeight","STORAGE_BINDING"],"sources":["../../../../../../src/webgpu/compat/api/validation/texture/createTexture.spec.ts"],"sourcesContent":["export const description = `\nTests that you can not use bgra8unorm-srgb in compat mode.\nTests that textureBindingViewDimension must compatible with texture dimension\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kTextureDimensions, kTextureViewDimensions } from '../../../../capability_info.js';\nimport {\n  kCompatModeUnsupportedStorageTextureFormats,\n  kDifferentBaseFormatTextureFormats,\n  getBlockInfoForTextureFormat,\n  getBaseFormatForTextureFormat,\n} from '../../../../format_info.js';\nimport { getTextureDimensionFromView } from '../../../../util/texture/base.js';\nimport { CompatibilityTest } from '../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('unsupportedTextureFormats')\n  .desc(`Tests that you can not create a bgra8unorm-srgb texture in compat mode.`)\n  .fn(t => {\n    t.expectGPUErrorInCompatibilityMode(\n      'validation',\n      () =>\n        t.createTextureTracked({\n          size: [1, 1, 1],\n          format: 'bgra8unorm-srgb',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n        }),\n      true\n    );\n  });\n\ng.test('unsupportedTextureViewFormats')\n  .desc(\n    `Tests that you can not create a bgra8unorm texture with a bgra8unorm-srgb viewFormat in compat mode.`\n  )\n  .fn(t => {\n    t.expectGPUErrorInCompatibilityMode(\n      'validation',\n      () =>\n        t.createTextureTracked({\n          size: [1, 1, 1],\n          format: 'bgra8unorm',\n          viewFormats: ['bgra8unorm-srgb'],\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n        }),\n      true\n    );\n  });\n\ng.test('invalidTextureBindingViewDimension')\n  .desc(\n    `Tests that you can not specify a textureBindingViewDimension that is incompatible with the texture's dimension.`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', kTextureDimensions)\n      .combine('textureBindingViewDimension', kTextureViewDimensions)\n  )\n  .fn(t => {\n    const { dimension, textureBindingViewDimension } = t.params;\n    const depthOrArrayLayers =\n      dimension === '1d' ||\n      textureBindingViewDimension === '1d' ||\n      textureBindingViewDimension === '2d'\n        ? 1\n        : 6;\n    const shouldError = getTextureDimensionFromView(textureBindingViewDimension) !== dimension;\n    t.expectGPUErrorInCompatibilityMode(\n      'validation',\n      () => {\n        t.createTextureTracked({\n          size: [1, 1, depthOrArrayLayers],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n          dimension,\n          textureBindingViewDimension,\n        } as GPUTextureDescriptor); // MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\n      },\n      shouldError\n    );\n  });\n\ng.test('depthOrArrayLayers_incompatible_with_textureBindingViewDimension')\n  .desc(\n    `Tests\n    * if textureBindingViewDimension is '2d' then depthOrArrayLayers must be 1\n    * if textureBindingViewDimension is 'cube' then depthOrArrayLayers must be 6\n    `\n  )\n  .params(u =>\n    u //\n      .combine('textureBindingViewDimension', ['2d', 'cube'])\n      .combine('depthOrArrayLayers', [1, 3, 6, 12])\n  )\n  .fn(t => {\n    const { textureBindingViewDimension, depthOrArrayLayers } = t.params;\n    const shouldError =\n      (textureBindingViewDimension === '2d' && depthOrArrayLayers !== 1) ||\n      (textureBindingViewDimension === 'cube' && depthOrArrayLayers !== 6);\n    t.expectGPUErrorInCompatibilityMode(\n      'validation',\n      () => {\n        t.createTextureTracked({\n          size: [1, 1, depthOrArrayLayers],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n          textureBindingViewDimension,\n        } as GPUTextureDescriptor); // MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\n      },\n      shouldError\n    );\n  });\n\ng.test('format_reinterpretation')\n  .desc(\n    `\n    Tests that you can not request different view formats when creating a texture.\n    For example, rgba8unorm can not be viewed as rgba8unorm-srgb\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', kDifferentBaseFormatTextureFormats)\n  )\n  .fn(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const info = getBlockInfoForTextureFormat(format);\n    const baseFormat = getBaseFormatForTextureFormat(format);\n\n    const formatPairs = [\n      { format, viewFormats: [baseFormat] },\n      { format: baseFormat, viewFormats: [format] },\n      { format, viewFormats: [format, baseFormat] },\n      { format: baseFormat, viewFormats: [format, baseFormat] },\n    ];\n    for (const { format, viewFormats } of formatPairs) {\n      t.expectGPUErrorInCompatibilityMode(\n        'validation',\n        () => {\n          t.createTextureTracked({\n            size: [info.blockWidth, info.blockHeight],\n            format,\n            viewFormats,\n            usage: GPUTextureUsage.TEXTURE_BINDING,\n          });\n        },\n        true\n      );\n    }\n  });\n\ng.test('unsupportedStorageTextureFormats')\n  .desc(`Tests that you can not create unsupported storage texture formats in compat mode.`)\n  .params(u => u.combine('format', kCompatModeUnsupportedStorageTextureFormats))\n  .fn(t => {\n    const { format } = t.params;\n    t.expectGPUErrorInCompatibilityMode(\n      'validation',\n      () =>\n        t.createTextureTracked({\n          size: [1, 1, 1],\n          format,\n          usage: GPUTextureUsage.STORAGE_BINDING,\n        }),\n      true\n    );\n  });\n"],"mappings":"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"}