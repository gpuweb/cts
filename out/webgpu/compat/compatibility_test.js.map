{"version":3,"file":"compatibility_test.js","names":["AllFeaturesMaxLimitsValidationTest","CompatibilityTest","init","expectValidationErrorInCompatibilityMode","fn","shouldError","expectValidationError","isCompatibility","expectGPUErrorInCompatibilityMode","filter","expectGPUError"],"sources":["../../../src/webgpu/compat/compatibility_test.ts"],"sourcesContent":["import { AllFeaturesMaxLimitsValidationTest } from '../api/validation/validation_test.js';\n\nexport class CompatibilityTest extends AllFeaturesMaxLimitsValidationTest {\n  override async init() {\n    await super.init();\n  }\n\n  /**\n   * Expect a validation error inside the callback.\n   * except when not in compat mode.\n   *\n   * Tests should always do just one WebGPU call in the callback, to make sure that's what's tested.\n   */\n  expectValidationErrorInCompatibilityMode(fn: () => void, shouldError: boolean = true): void {\n    this.expectValidationError(fn, this.isCompatibility && shouldError);\n  }\n\n  /**\n   * Expect the specified WebGPU error to be generated when running the provided function\n   * except when not in compat mode.\n   */\n  expectGPUErrorInCompatibilityMode<R>(\n    filter: GPUErrorFilter,\n    fn: () => R,\n    shouldError: boolean = true\n  ): R {\n    return this.expectGPUError(filter, fn, this.isCompatibility && shouldError);\n  }\n}\n"],"mappings":";;GAAA,SAASA,kCAAkC,QAAQ,sCAAsC,CAEzF,OAAO,MAAMC,iBAAiB,SAASD,kCAAkC,CAAC;EACxE,MAAeE,IAAIA,CAAA,EAAG;IACpB,MAAM,KAAK,CAACA,IAAI,CAAC,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,wCAAwCA,CAACC,EAAc,EAAEC,WAAoB,GAAG,IAAI,EAAQ;IAC1F,IAAI,CAACC,qBAAqB,CAACF,EAAE,EAAE,IAAI,CAACG,eAAe,IAAIF,WAAW,CAAC;EACrE;;EAEA;AACF;AACA;AACA;EACEG,iCAAiCA;EAC/BC,MAAsB;EACtBL,EAAW;EACXC,WAAoB,GAAG,IAAI;EACxB;IACH,OAAO,IAAI,CAACK,cAAc,CAACD,MAAM,EAAEL,EAAE,EAAE,IAAI,CAACG,eAAe,IAAIF,WAAW,CAAC;EAC7E;AACF"}