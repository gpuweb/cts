{"version":3,"file":"primitive_topology.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","kRTSize","kColorFormat","kValidPixelColor","Uint8Array","kInvalidPixelColor","Point2D","constructor","x","y","z","w","toNDC","getMidpoint","a","b","getCentroid","c","VertexLocations","getPointTestLocations","expectedColor","testLocations","location","push","coord","exp","getLineTestLocations","getPrimitiveRestartLineTestLocations","getLineStripTestLocations","getTriangleListTestLocations","getTriangleStripTestLocations","getDefaultTestLocations","topology","primitiveRestart","invalidateLastInList","maybeInvalidateLast","locations","map","tl","i","length","generateVertexBuffer","vertexLocations","vertexCoords","Float32Array","point","kDefaultDrawCount","PrimitiveTopologyTest","makeAttachmentTexture","createTextureTracked","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","run","indirect","drawCount","colorAttachment","encoder","device","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","clearValue","r","g","loadOp","storeOp","stripIndexFormat","undefined","setPipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","BYTES_PER_ELEMENT","attributes","offset","shaderLocation","fragment","targets","primitive","vertexBuffer","makeBufferWithContents","GPUBufferUsage","VERTEX","setVertexBuffer","indexBuffer","Uint32Array","INDEX","setIndexBuffer","drawIndexedIndirect","INDIRECT","drawIndexed","drawIndirect","draw","end","queue","submit","finish","expectSinglePixelComparisonsAreOkInTexture","texture","topologies","test","desc","params","u","combine","unless","p","fn","t","expand"],"sources":["../../../../../src/webgpu/api/operation/render_pipeline/primitive_topology.spec.ts"],"sourcesContent":["export const description = `Test primitive topology rendering.\n\nDraw a primitive using 6 vertices with each topology and check if the pixel is covered.\n\nVertex sequence and coordinates are the same for each topology:\n  - Vertex buffer = [v1, v2, v3, v4, v5, v6]\n  - Topology = [point-list, line-list, line-strip, triangle-list, triangle-strip]\n\nTest locations are framebuffer coordinates:\n  - Pixel value { valid: green, invalid: black, format: 'rgba8unorm'}\n  - Test point is valid if the pixel value equals the covered pixel value at the test location.\n  - Primitive restart occurs for strips (line-strip and triangle-strip) between [v3, v4].\n\n  Topology: point-list         Valid test location(s)           Invalid test location(s)\n\n       v2    v4     v6         Every vertex.                    Line-strip locations.\n                                                                Triangle-list locations.\n                                                                Triangle-strip locations.\n\n   v1     v3     v5\n\n  Topology: line-list (3 lines)\n\n       v2    v4     v6         Center of three line segments:   Line-strip locations.\n      *      *      *          {v1,V2}, {v3,v4}, and {v4,v5}.   Triangle-list locations.\n     *      *      *                                            Triangle-strip locations.\n    *      *      *\n   v1     v3     v5\n\n  Topology: line-strip (5 lines)\n\n       v2    v4     v6\n       **    **     *\n      *  *  *  *   *           Line-list locations              Triangle-list locations.\n     *    **     **          + Center of two line segments:     Triangle-strip locations.\n    v1    v3     v5            {v2,v3} and {v4,v5}.\n                                                                With primitive restart:\n                                                                Line segment {v3, v4}.\n\n  Topology: triangle-list (2 triangles)\n\n      v2       v4    v6\n      **        ******         Center of two triangle(s):       Triangle-strip locations.\n     ****        ****          {v1,v2,v3} and {v4,v5,v6}.\n    ******        **\n   v1     v3      v5\n\n  Topology: triangle-strip (4 triangles)\n\n      v2        v4      v6\n      ** ****** ** ******      Triangle-list locations          None.\n     **** **** **** ****     + Center of two triangle(s):\n    ****** ** ****** **        {v2,v3,v4} and {v3,v4,v5}.       With primitive restart:\n   v1       v3        v5                                        Triangle {v2, v3, v4}\n                                                                and {v3, v4, v5}.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { PerPixelComparison } from '../../../util/texture/texture_ok.js';\n\nconst kRTSize: number = 56;\nconst kColorFormat = 'rgba8unorm';\nconst kValidPixelColor = new Uint8Array([0x00, 0xff, 0x00, 0xff]); // green\nconst kInvalidPixelColor = new Uint8Array([0x00, 0x00, 0x00, 0x00]); // black\n\nclass Point2D {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.z = 0;\n    this.w = 1;\n  }\n\n  toNDC(): Point2D {\n    // NDC coordinate space is y-up, so we negate the y mapping.\n    // To ensure the resulting vertex in NDC will be placed at the center of the pixel, we\n    // must offset by the pixel coordinates or 0.5.\n    return new Point2D((2 * (this.x + 0.5)) / kRTSize - 1, (-2 * (this.y + 0.5)) / kRTSize + 1);\n  }\n\n  static getMidpoint(a: Point2D, b: Point2D) {\n    return new Point2D((a.x + b.x) / 2, (a.y + b.y) / 2);\n  }\n\n  static getCentroid(a: Point2D, b: Point2D, c: Point2D) {\n    return new Point2D((a.x + b.x + c.x) / 3, (a.y + b.y + c.y) / 3);\n  }\n}\n\ntype TestLocation = PerPixelComparison<Uint8Array>;\n\nconst VertexLocations = [\n  new Point2D(8, 24), // v1\n  new Point2D(16, 8), // v2\n  new Point2D(24, 24), // v3\n  new Point2D(32, 8), // v4\n  new Point2D(40, 24), // v5\n  new Point2D(48, 8), // v6\n];\n\nfunction getPointTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Test points are always equal to vertex locations.\n  const testLocations: TestLocation[] = [];\n  for (const location of VertexLocations) {\n    testLocations.push({ coord: location, exp: expectedColor });\n  }\n  return testLocations;\n}\n\nfunction getLineTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 3 line segments\n  return [\n    {\n      // Line {v1, v2}\n      coord: Point2D.getMidpoint(VertexLocations[0], VertexLocations[1]),\n      exp: expectedColor,\n    },\n    {\n      // Line {v3, v4}\n      coord: Point2D.getMidpoint(VertexLocations[2], VertexLocations[3]),\n      exp: expectedColor,\n    },\n    {\n      // Line {v5, v6}\n      coord: Point2D.getMidpoint(VertexLocations[4], VertexLocations[5]),\n      exp: expectedColor,\n    },\n  ];\n}\n\nfunction getPrimitiveRestartLineTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 2 line segments\n  return [\n    {\n      // Line {v1, v2}\n      coord: Point2D.getMidpoint(VertexLocations[0], VertexLocations[1]),\n      exp: expectedColor,\n    },\n    {\n      // Line {v5, v6}\n      coord: Point2D.getMidpoint(VertexLocations[4], VertexLocations[5]),\n      exp: expectedColor,\n    },\n  ];\n}\n\nfunction getLineStripTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 2 line segments\n  return [\n    {\n      // Line {v2, v3}\n      coord: Point2D.getMidpoint(VertexLocations[1], VertexLocations[2]),\n      exp: expectedColor,\n    },\n    {\n      // Line {v4, v5}\n      coord: Point2D.getMidpoint(VertexLocations[3], VertexLocations[4]),\n      exp: expectedColor,\n    },\n  ];\n}\n\nfunction getTriangleListTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Center of two triangles\n  return [\n    {\n      // Triangle {v1, v2, v3}\n      coord: Point2D.getCentroid(VertexLocations[0], VertexLocations[1], VertexLocations[2]),\n      exp: expectedColor,\n    },\n    {\n      // Triangle {v4, v5, v6}\n      coord: Point2D.getCentroid(VertexLocations[3], VertexLocations[4], VertexLocations[5]),\n      exp: expectedColor,\n    },\n  ];\n}\n\nfunction getTriangleStripTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Center of two triangles\n  return [\n    {\n      // Triangle {v2, v3, v4}\n      coord: Point2D.getCentroid(VertexLocations[1], VertexLocations[2], VertexLocations[3]),\n      exp: expectedColor,\n    },\n    {\n      // Triangle {v3, v4, v5}\n      coord: Point2D.getCentroid(VertexLocations[2], VertexLocations[3], VertexLocations[4]),\n      exp: expectedColor,\n    },\n  ];\n}\n\nfunction getDefaultTestLocations({\n  topology,\n  primitiveRestart = false,\n  invalidateLastInList = false,\n}: {\n  topology: GPUPrimitiveTopology;\n  primitiveRestart?: boolean;\n  invalidateLastInList?: boolean;\n}) {\n  function maybeInvalidateLast(locations: TestLocation[]) {\n    if (!invalidateLastInList) return locations;\n\n    return locations.map((tl, i) => {\n      if (i === locations.length - 1) {\n        return {\n          coord: tl.coord,\n          exp: kInvalidPixelColor,\n        };\n      } else {\n        return tl;\n      }\n    });\n  }\n\n  let testLocations: TestLocation[];\n  switch (topology) {\n    case 'point-list':\n      testLocations = [\n        ...getPointTestLocations(kValidPixelColor),\n        ...getLineStripTestLocations(kInvalidPixelColor),\n        ...getTriangleListTestLocations(kInvalidPixelColor),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'line-list':\n      testLocations = [\n        ...maybeInvalidateLast(getLineTestLocations(kValidPixelColor)),\n        ...getLineStripTestLocations(kInvalidPixelColor),\n        ...getTriangleListTestLocations(kInvalidPixelColor),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'line-strip':\n      testLocations = [\n        ...(primitiveRestart\n          ? getPrimitiveRestartLineTestLocations(kValidPixelColor)\n          : getLineTestLocations(kValidPixelColor)),\n        ...getLineStripTestLocations(kValidPixelColor),\n        ...getTriangleListTestLocations(kInvalidPixelColor),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'triangle-list':\n      testLocations = [\n        ...maybeInvalidateLast(getTriangleListTestLocations(kValidPixelColor)),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'triangle-strip':\n      testLocations = [\n        ...getTriangleListTestLocations(kValidPixelColor),\n        ...getTriangleStripTestLocations(primitiveRestart ? kInvalidPixelColor : kValidPixelColor),\n      ];\n      break;\n  }\n  return testLocations;\n}\n\nfunction generateVertexBuffer(vertexLocations: Point2D[]): Float32Array {\n  const vertexCoords = new Float32Array(vertexLocations.length * 4);\n  for (let i = 0; i < vertexLocations.length; i++) {\n    const point = vertexLocations[i].toNDC();\n    vertexCoords[i * 4 + 0] = point.x;\n    vertexCoords[i * 4 + 1] = point.y;\n    vertexCoords[i * 4 + 2] = point.z;\n    vertexCoords[i * 4 + 3] = point.w;\n  }\n  return vertexCoords;\n}\n\nconst kDefaultDrawCount = 6;\nclass PrimitiveTopologyTest extends TextureTestMixin(AllFeaturesMaxLimitsGPUTest) {\n  makeAttachmentTexture(): GPUTexture {\n    return this.createTextureTracked({\n      format: kColorFormat,\n      size: { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n  }\n\n  run({\n    topology,\n    indirect,\n    testLocations,\n    primitiveRestart = false,\n    drawCount = kDefaultDrawCount,\n  }: {\n    topology: GPUPrimitiveTopology;\n    indirect: boolean;\n    testLocations: TestLocation[];\n    primitiveRestart?: boolean;\n    drawCount?: number;\n  }): void {\n    const colorAttachment = this.makeAttachmentTexture();\n\n    // Color load operator will clear color attachment to zero.\n    const encoder = this.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    let stripIndexFormat = undefined;\n    if (topology === 'triangle-strip' || topology === 'line-strip') {\n      stripIndexFormat = 'uint32' as const;\n    }\n\n    // Draw a primitive using 6 vertices based on the type.\n    // Pixels are generated based on vertex position.\n    // If point, 1 pixel is generated at each vertex location.\n    // Otherwise, >1 pixels could be generated.\n    // Output color is solid green.\n    renderPass.setPipeline(\n      this.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: this.device.createShaderModule({\n            code: `\n              @vertex fn main(\n                @location(0) pos : vec4<f32>\n                ) -> @builtin(position) vec4<f32> {\n                return pos;\n              }`,\n          }),\n          entryPoint: 'main',\n          buffers: [\n            {\n              arrayStride: 4 * Float32Array.BYTES_PER_ELEMENT,\n              attributes: [\n                {\n                  format: 'float32x4',\n                  offset: 0,\n                  shaderLocation: 0,\n                },\n              ],\n            },\n          ],\n        },\n        fragment: {\n          module: this.device.createShaderModule({\n            code: `\n              @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: kColorFormat }],\n        },\n        primitive: {\n          topology,\n          stripIndexFormat,\n        },\n      })\n    );\n\n    // Create vertices for the primitive in a vertex buffer and bind it.\n    const vertexCoords = generateVertexBuffer(VertexLocations);\n    const vertexBuffer = this.makeBufferWithContents(vertexCoords, GPUBufferUsage.VERTEX);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n\n    // Restart the strip between [v3, <restart>, v4].\n    if (primitiveRestart) {\n      const indexBuffer = this.makeBufferWithContents(\n        new Uint32Array([0, 1, 2, -1, 3, 4, 5]),\n        GPUBufferUsage.INDEX\n      );\n      renderPass.setIndexBuffer(indexBuffer, 'uint32');\n\n      if (indirect) {\n        renderPass.drawIndexedIndirect(\n          this.makeBufferWithContents(\n            new Uint32Array([drawCount + 1, 1, 0, 0, 0]),\n            GPUBufferUsage.INDIRECT\n          ),\n          0\n        );\n      } else {\n        renderPass.drawIndexed(drawCount + 1); // extra index for restart\n      }\n    } else {\n      if (indirect) {\n        renderPass.drawIndirect(\n          this.makeBufferWithContents(\n            new Uint32Array([drawCount, 1, 0, 0]),\n            GPUBufferUsage.INDIRECT\n          ),\n          0\n        );\n      } else {\n        renderPass.draw(drawCount);\n      }\n    }\n\n    renderPass.end();\n\n    this.device.queue.submit([encoder.finish()]);\n    this.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, testLocations);\n  }\n}\n\nexport const g = makeTestGroup(PrimitiveTopologyTest);\n\nconst topologies: GPUPrimitiveTopology[] = [\n  'point-list',\n  'line-list',\n  'line-strip',\n  'triangle-list',\n  'triangle-strip',\n];\n\ng.test('basic')\n  .desc(\n    `Compute test locations for valid and invalid pixels for each topology.\n  If the primitive covers the pixel, the color value will be |kValidPixelColor|.\n  Otherwise, a non-covered pixel will be |kInvalidPixelColor|.\n\n  Params:\n    - topology= {...all topologies}\n    - indirect= {true, false}\n    - primitiveRestart= { true, false } - always false for non-strip topologies\n  `\n  )\n  .params(u =>\n    u //\n      .combine('topology', topologies)\n      .combine('indirect', [false, true])\n      .combine('primitiveRestart', [false, true])\n      .unless(\n        p => p.primitiveRestart && p.topology !== 'line-strip' && p.topology !== 'triangle-strip'\n      )\n  )\n  .fn(t => {\n    t.run({\n      ...t.params,\n      testLocations: getDefaultTestLocations(t.params),\n    });\n  });\n\ng.test('unaligned_vertex_count')\n  .desc(\n    `Test that drawing with a number of vertices that's not a multiple of the vertices a given primitive list topology is not an error. The last primitive is not drawn.\n\n    Params:\n    - topology= {line-list, triangle-list}\n    - indirect= {true, false}\n    - drawCount - number of vertices to draw. A value smaller than the test's default of ${kDefaultDrawCount}.\n                   One smaller for line-list. One or two smaller for triangle-list.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('topology', ['line-list', 'triangle-list'] as const)\n      .combine('indirect', [false, true])\n      .expand('drawCount', function* (p) {\n        switch (p.topology) {\n          case 'line-list':\n            yield kDefaultDrawCount - 1;\n            break;\n          case 'triangle-list':\n            yield kDefaultDrawCount - 1;\n            yield kDefaultDrawCount - 2;\n            break;\n        }\n      })\n  )\n  .fn(t => {\n    const testLocations = getDefaultTestLocations({ ...t.params, invalidateLastInList: true });\n    t.run({\n      ...t.params,\n      testLocations,\n    });\n  });\n"],"mappings":"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"}