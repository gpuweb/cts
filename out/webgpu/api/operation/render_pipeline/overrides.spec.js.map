{"version":3,"file":"overrides.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","F","ExpectShaderOutputWithConstants","isAsync","format","expected","vertex","fragment","renderTarget","createTextureTracked","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","descriptor","layout","primitive","topology","frontFace","cullMode","promise","device","createRenderPipelineAsync","Promise","resolve","createRenderPipeline","pipeline","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","r","kClearValueResult","R","g","G","b","B","a","A","loadOp","storeOp","setPipeline","draw","end","queue","submit","finish","expectSingleColor","exp","kDefaultValueResult","kFullScreenTriangleVertexShader","kFullScreenTriangleFragmentShader","test","desc","params","u","combine","beginSubcases","combineWithParams","vertexConstants","fragmentConstants","xright","ytop","fn","t","module","createShaderModule","code","entryPoint","constants","targets","kPrecisionTestFormat","expected0","vertexConstants0","fragmentConstants0","expected1","vertexConstants1","fragmentConstants1","vertexModule","fragmentModule","createPipelineFn","pipeline0","pipeline1","renderTarget0","renderTarget1","pass0","pass1","C","D"],"sources":["../../../../../src/webgpu/api/operation/render_pipeline/overrides.spec.ts"],"sourcesContent":["export const description = `\nTesting render pipeline using overridable constants in vertex stage and fragment stage.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport { PerTexelComponent } from '../../../util/texture/texel_data.js';\n\nclass F extends AllFeaturesMaxLimitsGPUTest {\n  async ExpectShaderOutputWithConstants(\n    isAsync: boolean,\n    format: GPUTextureFormat,\n    expected: PerTexelComponent<number>,\n    vertex: GPUVertexState,\n    fragment: GPUFragmentState\n  ) {\n    const renderTarget = this.createTextureTracked({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const descriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex,\n      fragment,\n      primitive: {\n        topology: 'triangle-list',\n        frontFace: 'ccw',\n        cullMode: 'back',\n      },\n    };\n\n    const promise = isAsync\n      ? this.device.createRenderPipelineAsync(descriptor)\n      : Promise.resolve(this.device.createRenderPipeline(descriptor));\n\n    const pipeline = await promise;\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: {\n            r: kClearValueResult.R,\n            g: kClearValueResult.G,\n            b: kClearValueResult.B,\n            a: kClearValueResult.A,\n          },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: expected,\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kClearValueResult = { R: 0.2, G: 0.4, B: 0.6, A: 0.8 };\nconst kDefaultValueResult = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n\nconst kFullScreenTriangleVertexShader = `\noverride xright: f32 = 3.0;\noverride ytop: f32 = 3.0;\n\n@vertex fn main(\n    @builtin(vertex_index) VertexIndex : u32\n    ) -> @builtin(position) vec4<f32> {\n    var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n        vec2<f32>(-1.0,  ytop),\n        vec2<f32>(-1.0,  -ytop),\n        vec2<f32>(xright, 0.0));\n    return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n}\n`;\n\nconst kFullScreenTriangleFragmentShader = `\noverride R: f32 = 1.0;\noverride G: f32 = 1.0;\noverride B: f32 = 1.0;\noverride A: f32 = 1.0;\n\n@fragment fn main()\n    -> @location(0) vec4<f32> {\n    return vec4<f32>(R, G, B, A);\n}\n`;\n\ng.test('basic')\n  .desc(\n    `Test that either correct constants override values or default values when no constants override value are provided at pipeline creation time are used correctly in vertex and fragment shader.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [true, false])\n      .beginSubcases()\n      .combineWithParams([\n        {\n          expected: kDefaultValueResult,\n          vertexConstants: {},\n          fragmentConstants: {},\n        },\n        {\n          expected: kClearValueResult,\n          vertexConstants: {\n            xright: -3.0,\n          } as Record<string, GPUPipelineConstantValue>,\n          fragmentConstants: {},\n        },\n        {\n          expected: kClearValueResult,\n          vertexConstants: {\n            ytop: -3.0,\n          } as Record<string, GPUPipelineConstantValue>,\n          fragmentConstants: {},\n        },\n        {\n          expected: kDefaultValueResult,\n          vertexConstants: {\n            xright: 4.0,\n            ytop: 4.0,\n          } as Record<string, GPUPipelineConstantValue>,\n          fragmentConstants: {},\n        },\n        {\n          expected: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n          vertexConstants: {},\n          fragmentConstants: { R: 0.0, B: 0.0 } as Record<string, GPUPipelineConstantValue>,\n        },\n        {\n          expected: { R: 0.0, G: 0.0, B: 0.0, A: 0.0 },\n          vertexConstants: {},\n          fragmentConstants: { R: 0.0, G: 0.0, B: 0.0, A: 0.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n        },\n      ])\n  )\n  .fn(async t => {\n    const format = 'bgra8unorm';\n    await t.ExpectShaderOutputWithConstants(\n      t.params.isAsync,\n      format,\n      t.params.expected,\n      {\n        module: t.device.createShaderModule({\n          code: kFullScreenTriangleVertexShader,\n        }),\n        entryPoint: 'main',\n        constants: t.params.vertexConstants,\n      },\n      {\n        module: t.device.createShaderModule({\n          code: kFullScreenTriangleFragmentShader,\n        }),\n        entryPoint: 'main',\n        constants: t.params.fragmentConstants,\n        targets: [{ format }],\n      }\n    );\n  });\n\nconst kPrecisionTestFormat = 'rgba32float';\ng.test('precision')\n  .desc(`Test that the float number precision is preserved for constants`)\n  .params(u =>\n    u\n      .combine('isAsync', [true, false])\n      .beginSubcases()\n      .combineWithParams([\n        {\n          expected: { R: 3.14159, G: 1.0, B: 1.0, A: 1.0 },\n          vertexConstants: {},\n          fragmentConstants: { R: 3.14159 } as Record<string, GPUPipelineConstantValue>,\n        },\n        {\n          expected: { R: 3.141592653589793, G: 1.0, B: 1.0, A: 1.0 },\n          vertexConstants: {},\n          fragmentConstants: { R: 3.141592653589793 } as Record<string, GPUPipelineConstantValue>,\n        },\n      ])\n  )\n  .fn(async t => {\n    const format = kPrecisionTestFormat;\n    await t.ExpectShaderOutputWithConstants(\n      t.params.isAsync,\n      format,\n      t.params.expected,\n      {\n        module: t.device.createShaderModule({\n          code: kFullScreenTriangleVertexShader,\n        }),\n        entryPoint: 'main',\n        constants: t.params.vertexConstants,\n      },\n      {\n        module: t.device.createShaderModule({\n          code: kFullScreenTriangleFragmentShader,\n        }),\n        entryPoint: 'main',\n        constants: t.params.fragmentConstants,\n        targets: [{ format }],\n      }\n    );\n  });\n\ng.test('shared_shader_module')\n  .desc(\n    `Test that when the same module is shared by different pipelines, the constant values are still being used correctly.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [true, false])\n      .beginSubcases()\n      .combineWithParams([\n        {\n          expected0: kClearValueResult,\n          vertexConstants0: {\n            xright: -3.0,\n          } as Record<string, GPUPipelineConstantValue>,\n          fragmentConstants0: {},\n\n          expected1: kDefaultValueResult,\n          vertexConstants1: {},\n          fragmentConstants1: {},\n        },\n        {\n          expected0: { R: 0.0, G: 0.0, B: 0.0, A: 0.0 },\n          vertexConstants0: {},\n          fragmentConstants0: { R: 0.0, G: 0.0, B: 0.0, A: 0.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n\n          expected1: kDefaultValueResult,\n          vertexConstants1: {},\n          fragmentConstants1: {},\n        },\n        {\n          expected0: { R: 1.0, G: 0.0, B: 1.0, A: 0.0 },\n          vertexConstants0: {},\n          fragmentConstants0: { R: 1.0, G: 0.0, B: 1.0, A: 0.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n\n          expected1: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n          vertexConstants1: {},\n          fragmentConstants1: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n        },\n      ])\n  )\n  .fn(async t => {\n    const format = 'bgra8unorm';\n    const vertexModule = t.device.createShaderModule({\n      code: kFullScreenTriangleVertexShader,\n    });\n\n    const fragmentModule = t.device.createShaderModule({\n      code: kFullScreenTriangleFragmentShader,\n    });\n\n    const createPipelineFn = async (\n      vertexConstants: Record<string, GPUPipelineConstantValue>,\n      fragmentConstants: Record<string, GPUPipelineConstantValue>\n    ) => {\n      const descriptor: GPURenderPipelineDescriptor = {\n        layout: 'auto',\n        vertex: {\n          module: vertexModule,\n          entryPoint: 'main',\n          constants: vertexConstants,\n        },\n        fragment: {\n          module: fragmentModule,\n          entryPoint: 'main',\n          targets: [{ format }],\n          constants: fragmentConstants,\n        },\n        primitive: {\n          topology: 'triangle-list',\n          frontFace: 'ccw',\n          cullMode: 'back',\n        },\n      };\n\n      return t.params.isAsync\n        ? t.device.createRenderPipelineAsync(descriptor)\n        : t.device.createRenderPipeline(descriptor);\n    };\n\n    const pipeline0 = await createPipelineFn(\n      t.params.vertexConstants0,\n      t.params.fragmentConstants0\n    );\n    const pipeline1 = await createPipelineFn(\n      t.params.vertexConstants1,\n      t.params.fragmentConstants1\n    );\n\n    const renderTarget0 = t.createTextureTracked({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const renderTarget1 = t.createTextureTracked({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n\n    const pass0 = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget0.createView(),\n          clearValue: {\n            r: kClearValueResult.R,\n            g: kClearValueResult.G,\n            b: kClearValueResult.B,\n            a: kClearValueResult.A,\n          },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass0.setPipeline(pipeline0);\n    pass0.draw(3);\n    pass0.end();\n\n    const pass1 = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget1.createView(),\n          clearValue: {\n            r: kClearValueResult.R,\n            g: kClearValueResult.G,\n            b: kClearValueResult.B,\n            a: kClearValueResult.A,\n          },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass1.setPipeline(pipeline1);\n    pass1.draw(3);\n    pass1.end();\n\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget0, format, {\n      size: [1, 1, 1],\n      exp: t.params.expected0,\n    });\n    t.expectSingleColor(renderTarget1, format, {\n      size: [1, 1, 1],\n      exp: t.params.expected1,\n    });\n  });\n\ng.test('multi_entry_points')\n  .desc(\n    `Test that when the same module is shared by vertex and fragment shader, the constant values are still being used correctly.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [true, false])\n      .beginSubcases()\n      .combineWithParams([\n        {\n          expected: { R: 0.8, G: 0.4, B: 0.2, A: 1.0 },\n          vertexConstants: { A: 4.0, B: 4.0 } as Record<string, GPUPipelineConstantValue>,\n          fragmentConstants: { A: 0.8, B: 0.4, C: 0.2, D: 1.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n        },\n        {\n          expected: { R: 0.8, G: 0.4, B: 0.2, A: 1.0 },\n          vertexConstants: {},\n          fragmentConstants: { A: 0.8, B: 0.4, C: 0.2, D: 1.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n        },\n        {\n          expected: kClearValueResult,\n          vertexConstants: { A: -3.0 },\n          fragmentConstants: { A: 0.8, B: 0.4, C: 0.2, D: 1.0 } as Record<\n            string,\n            GPUPipelineConstantValue\n          >,\n        },\n      ])\n  )\n  .fn(async t => {\n    const format = 'bgra8unorm';\n    const module = t.device.createShaderModule({\n      code: `\n      override A: f32 = 3.0;\n      override B: f32 = 3.0;\n      override C: f32;\n      override D: f32;\n\n      @vertex fn vertexMain(\n          @builtin(vertex_index) VertexIndex : u32\n          ) -> @builtin(position) vec4<f32> {\n          var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n              vec2<f32>(-1.0,  A),\n              vec2<f32>(-1.0,  -A),\n              vec2<f32>(B, 0.0));\n          return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n      }\n\n      @fragment fn fragmentMain()\n          -> @location(0) vec4<f32> {\n          return vec4<f32>(A, B, C, D);\n      }\n      `,\n    });\n    await t.ExpectShaderOutputWithConstants(\n      t.params.isAsync,\n      format,\n      t.params.expected,\n      {\n        module,\n        entryPoint: 'vertexMain',\n        constants: t.params.vertexConstants,\n      },\n      {\n        module,\n        entryPoint: 'fragmentMain',\n        constants: t.params.fragmentConstants,\n        targets: [{ format }],\n      }\n    );\n  });\n"],"mappings":"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"}