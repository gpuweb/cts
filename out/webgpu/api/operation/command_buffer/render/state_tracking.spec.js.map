{"version":3,"file":"state_tracking.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","TexelView","VertexAndIndexStateTrackingTest","GetRenderPipelineForTest","arrayStride","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","buffers","attributes","format","offset","shaderLocation","fragment","targets","primitive","topology","kVertexAttributeSize","g","test","desc","fn","t","indexBuffer","makeBufferWithContents","Uint16Array","GPUBufferUsage","INDEX","kVertexAttributesCount","vertexBuffer","createBufferTracked","usage","VERTEX","size","mappedAtCreation","vertexAttributes","getMappedRange","kPositions","kColors","Uint8Array","i","length","baseOffset","vertexPosition","Float32Array","vertexColor","set","lastOffset","lastVertexPosition","lastVertexColor","unmap","renderPipeline","outputTextureSize","outputTexture","createTextureTracked","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setVertexBuffer","setIndexBuffer","drawIndexed","end","queue","submit","finish","expectTexelViewComparisonIsOkInTexture","texture","fromTexelsAsBytes","coord","x","draw","renderPipeline1","renderPipeline2","kPointsCount","kAttributeStride","positionBuffer","colorBuffer","fragmentState","kExpectedColors","subarray"],"sources":["../../../../../../src/webgpu/api/operation/command_buffer/render/state_tracking.spec.ts"],"sourcesContent":["export const description = `\nEnsure state is set correctly. Tries to stress state caching (setting different states multiple\ntimes in different orders) for setIndexBuffer and setVertexBuffer.\nEquivalent tests for setBindGroup and setPipeline are in programmable/state_tracking.spec.ts.\nEquivalent tests for viewport/scissor/blend/reference are in render/dynamic_state.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../../../../gpu_test.js';\nimport { TexelView } from '../../../../util/texture/texel_view.js';\n\nclass VertexAndIndexStateTrackingTest extends TextureTestMixin(AllFeaturesMaxLimitsGPUTest) {\n  GetRenderPipelineForTest(arrayStride: number): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n        struct Inputs {\n          @location(0) vertexPosition : f32,\n          @location(1) vertexColor : vec4<f32>,\n        };\n        struct Outputs {\n          @builtin(position) position : vec4<f32>,\n          @location(0) color : vec4<f32>,\n        };\n        @vertex\n        fn main(input : Inputs)-> Outputs {\n          var outputs : Outputs;\n          outputs.position =\n            vec4<f32>(input.vertexPosition, 0.5, 0.0, 1.0);\n          outputs.color = input.vertexColor;\n          return outputs;\n        }`,\n        }),\n        entryPoint: 'main',\n        buffers: [\n          {\n            arrayStride,\n            attributes: [\n              {\n                format: 'float32',\n                offset: 0,\n                shaderLocation: 0,\n              },\n              {\n                format: 'unorm8x4',\n                offset: 4,\n                shaderLocation: 1,\n              },\n            ],\n          },\n        ],\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `\n        struct Input {\n          @location(0) color : vec4<f32>\n        };\n        @fragment\n        fn main(input : Input) -> @location(0) vec4<f32> {\n          return input.color;\n        }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n  }\n\n  kVertexAttributeSize = 8;\n}\n\nexport const g = makeTestGroup(VertexAndIndexStateTrackingTest);\n\ng.test('set_index_buffer_without_changing_buffer')\n  .desc(\n    `\n  Test that setting index buffer states (index format, offset, size) multiple times in different\n  orders still keeps the correctness of each draw call.\n`\n  )\n  .fn(t => {\n    // Initialize the index buffer with 5 uint16 indices (0, 1, 2, 3, 4).\n    const indexBuffer = t.makeBufferWithContents(\n      new Uint16Array([0, 1, 2, 3, 4]),\n      GPUBufferUsage.INDEX\n    );\n\n    // Initialize the vertex buffer with required vertex attributes (position: f32, color: f32x4)\n    // Note that the maximum index in the test is 0x10000.\n    const kVertexAttributesCount = 0x10000 + 1;\n    const vertexBuffer = t.createBufferTracked({\n      usage: GPUBufferUsage.VERTEX,\n      size: t.kVertexAttributeSize * kVertexAttributesCount,\n      mappedAtCreation: true,\n    });\n    const vertexAttributes = vertexBuffer.getMappedRange();\n    const kPositions = [-0.8, -0.4, 0.0, 0.4, 0.8, -0.4];\n    const kColors = [\n      new Uint8Array([255, 0, 0, 255]),\n      new Uint8Array([255, 255, 255, 255]),\n      new Uint8Array([0, 0, 255, 255]),\n      new Uint8Array([255, 0, 255, 255]),\n      new Uint8Array([0, 255, 255, 255]),\n      new Uint8Array([0, 255, 0, 255]),\n    ];\n    // Set vertex attributes at index {0..4} in Uint16.\n    // Note that the vertex attribute at index 1 will not be used.\n    for (let i = 0; i < kPositions.length - 1; ++i) {\n      const baseOffset = t.kVertexAttributeSize * i;\n      const vertexPosition = new Float32Array(vertexAttributes, baseOffset, 1);\n      vertexPosition[0] = kPositions[i];\n      const vertexColor = new Uint8Array(vertexAttributes, baseOffset + 4, 4);\n      vertexColor.set(kColors[i]);\n    }\n    // Set vertex attributes at index 0x10000.\n    const lastOffset = t.kVertexAttributeSize * (kVertexAttributesCount - 1);\n    const lastVertexPosition = new Float32Array(vertexAttributes, lastOffset, 1);\n    lastVertexPosition[0] = kPositions[kPositions.length - 1];\n    const lastVertexColor = new Uint8Array(vertexAttributes, lastOffset + 4, 4);\n    lastVertexColor.set(kColors[kColors.length - 1]);\n\n    vertexBuffer.unmap();\n\n    const renderPipeline = t.GetRenderPipelineForTest(t.kVertexAttributeSize);\n\n    const outputTextureSize = [kPositions.length - 1, 1, 1];\n    const outputTexture = t.createTextureTracked({\n      format: 'rgba8unorm',\n      size: outputTextureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: outputTexture.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(renderPipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n\n    // 1st draw: indexFormat = 'uint32', offset = 0, size = 4 (index value: 0x10000)\n    renderPass.setIndexBuffer(indexBuffer, 'uint32', 0, 4);\n    renderPass.drawIndexed(1);\n\n    // 2nd draw: indexFormat = 'uint16', offset = 0, size = 4 (index value: 0)\n    renderPass.setIndexBuffer(indexBuffer, 'uint16', 0, 4);\n    renderPass.drawIndexed(1);\n\n    // 3rd draw: indexFormat = 'uint16', offset = 4, size = 2 (index value: 2)\n    renderPass.setIndexBuffer(indexBuffer, 'uint16', 0, 2);\n    renderPass.setIndexBuffer(indexBuffer, 'uint16', 4, 2);\n    renderPass.drawIndexed(1);\n\n    // 4th draw: indexformat = 'uint16', offset = 6, size = 4 (index values: 3, 4)\n    renderPass.setIndexBuffer(indexBuffer, 'uint16', 6, 2);\n    renderPass.setIndexBuffer(indexBuffer, 'uint16', 6, 4);\n    renderPass.drawIndexed(2);\n\n    renderPass.end();\n    t.queue.submit([encoder.finish()]);\n\n    t.expectTexelViewComparisonIsOkInTexture(\n      { texture: outputTexture },\n      TexelView.fromTexelsAsBytes('rgba8unorm', coord =>\n        coord.x === 1 ? kColors[kPositions.length - 1] : kColors[coord.x]\n      ),\n      outputTextureSize\n    );\n  });\n\ng.test('set_vertex_buffer_without_changing_buffer')\n  .desc(\n    `\n  Test that setting vertex buffer states (offset, size) multiple times in different orders still\n  keeps the correctness of each draw call.\n  - Tries several different sequences of setVertexBuffer+draw commands, each of which draws vertices\n    in all 4 output pixels, and check they were drawn correctly.\n`\n  )\n  .fn(t => {\n    const kPositions = [-0.875, -0.625, -0.375, -0.125, 0.125, 0.375, 0.625, 0.875];\n    const kColors = [\n      new Uint8Array([255, 0, 0, 255]),\n      new Uint8Array([0, 255, 0, 255]),\n      new Uint8Array([0, 0, 255, 255]),\n      new Uint8Array([51, 0, 0, 255]),\n      new Uint8Array([0, 51, 0, 255]),\n      new Uint8Array([0, 0, 51, 255]),\n      new Uint8Array([255, 0, 255, 255]),\n      new Uint8Array([255, 255, 0, 255]),\n    ];\n\n    // Initialize the vertex buffer with required vertex attributes (position: f32, color: f32x4)\n    const kVertexAttributesCount = 8;\n    const vertexBuffer = t.createBufferTracked({\n      usage: GPUBufferUsage.VERTEX,\n      size: t.kVertexAttributeSize * kVertexAttributesCount,\n      mappedAtCreation: true,\n    });\n    const vertexAttributes = vertexBuffer.getMappedRange();\n    for (let i = 0; i < kPositions.length; ++i) {\n      const baseOffset = t.kVertexAttributeSize * i;\n      const vertexPosition = new Float32Array(vertexAttributes, baseOffset, 1);\n      vertexPosition[0] = kPositions[i];\n      const vertexColor = new Uint8Array(vertexAttributes, baseOffset + 4, 4);\n      vertexColor.set(kColors[i]);\n    }\n\n    vertexBuffer.unmap();\n\n    const renderPipeline = t.GetRenderPipelineForTest(t.kVertexAttributeSize);\n\n    const outputTextureSize = [kPositions.length, 1, 1];\n    const outputTexture = t.createTextureTracked({\n      format: 'rgba8unorm',\n      size: outputTextureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: outputTexture.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(renderPipeline);\n\n    // Change 'size' in setVertexBuffer()\n    renderPass.setVertexBuffer(0, vertexBuffer, 0, t.kVertexAttributeSize);\n    renderPass.setVertexBuffer(0, vertexBuffer, 0, t.kVertexAttributeSize * 2);\n    renderPass.draw(2);\n\n    // Change 'offset' in setVertexBuffer()\n    renderPass.setVertexBuffer(\n      0,\n      vertexBuffer,\n      t.kVertexAttributeSize * 2,\n      t.kVertexAttributeSize * 2\n    );\n    renderPass.draw(2);\n\n    // Change 'size' again in setVertexBuffer()\n    renderPass.setVertexBuffer(\n      0,\n      vertexBuffer,\n      t.kVertexAttributeSize * 4,\n      t.kVertexAttributeSize * 2\n    );\n    renderPass.setVertexBuffer(\n      0,\n      vertexBuffer,\n      t.kVertexAttributeSize * 4,\n      t.kVertexAttributeSize * 4\n    );\n    renderPass.draw(4);\n\n    renderPass.end();\n    t.queue.submit([encoder.finish()]);\n\n    t.expectTexelViewComparisonIsOkInTexture(\n      { texture: outputTexture },\n      TexelView.fromTexelsAsBytes('rgba8unorm', coord => kColors[coord.x]),\n      outputTextureSize\n    );\n  });\n\ng.test('change_pipeline_before_and_after_vertex_buffer')\n  .desc(\n    `\n  Test that changing the pipeline {before,after} the vertex buffers still keeps the correctness of\n  each draw call (In D3D12, the vertex buffer stride is part of SetVertexBuffer instead of the\n  pipeline.)\n`\n  )\n  .fn(t => {\n    const kPositions = [-0.8, -0.4, 0.0, 0.4, 0.8, 0.9];\n    const kColors = [\n      new Uint8Array([255, 0, 0, 255]),\n      new Uint8Array([255, 255, 255, 255]),\n      new Uint8Array([0, 255, 0, 255]),\n      new Uint8Array([0, 0, 255, 255]),\n      new Uint8Array([255, 0, 255, 255]),\n      new Uint8Array([0, 255, 255, 255]),\n    ];\n\n    // Initialize the vertex buffer with required vertex attributes (position: f32, color: f32x4)\n    const vertexBuffer = t.createBufferTracked({\n      usage: GPUBufferUsage.VERTEX,\n      size: t.kVertexAttributeSize * kPositions.length,\n      mappedAtCreation: true,\n    });\n    // Note that kPositions[1], kColors[1], kPositions[5] and kColors[5] are not used.\n    const vertexAttributes = vertexBuffer.getMappedRange();\n    for (let i = 0; i < kPositions.length; ++i) {\n      const baseOffset = t.kVertexAttributeSize * i;\n      const vertexPosition = new Float32Array(vertexAttributes, baseOffset, 1);\n      vertexPosition[0] = kPositions[i];\n      const vertexColor = new Uint8Array(vertexAttributes, baseOffset + 4, 4);\n      vertexColor.set(kColors[i]);\n    }\n    vertexBuffer.unmap();\n\n    // Create two render pipelines with different vertex attribute strides\n    const renderPipeline1 = t.GetRenderPipelineForTest(t.kVertexAttributeSize);\n    const renderPipeline2 = t.GetRenderPipelineForTest(t.kVertexAttributeSize * 2);\n\n    const kPointsCount = kPositions.length - 1;\n    const outputTextureSize = [kPointsCount, 1, 1];\n    const outputTexture = t.createTextureTracked({\n      format: 'rgba8unorm',\n      size: outputTextureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: outputTexture.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    // Update render pipeline before setVertexBuffer. The applied vertex attribute stride should be\n    // 2 * kVertexAttributeSize.\n    renderPass.setPipeline(renderPipeline1);\n    renderPass.setPipeline(renderPipeline2);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.draw(2);\n\n    // Update render pipeline after setVertexBuffer. The applied vertex attribute stride should be\n    // kVertexAttributeSize.\n    renderPass.setVertexBuffer(0, vertexBuffer, 3 * t.kVertexAttributeSize);\n    renderPass.setPipeline(renderPipeline1);\n    renderPass.draw(2);\n\n    renderPass.end();\n\n    t.queue.submit([encoder.finish()]);\n\n    t.expectTexelViewComparisonIsOkInTexture(\n      { texture: outputTexture },\n      TexelView.fromTexelsAsBytes('rgba8unorm', coord =>\n        coord.x === 1 ? new Uint8Array([0, 0, 0, 255]) : kColors[coord.x]\n      ),\n      outputTextureSize\n    );\n  });\n\ng.test('set_vertex_buffer_but_not_used_in_draw')\n  .desc(\n    `\n  Test that drawing after having set vertex buffer slots not used by the pipeline works correctly.\n  - In the test there are 2 draw calls in the render pass. The first draw call uses 2 vertex buffers\n    (position and color), and the second draw call only uses 1 vertex buffer (for color, the vertex\n    position is defined as constant values in the vertex shader). The test verifies if both of these\n    two draw calls work correctly.\n  `\n  )\n  .fn(t => {\n    const kPositions = new Float32Array([-0.75, -0.25]);\n    const kColors = new Uint8Array([255, 0, 0, 255, 0, 255, 0, 255]);\n\n    // Initialize the vertex buffers with required vertex attributes (position: f32, color: f32x4)\n    const kAttributeStride = 4;\n    const positionBuffer = t.makeBufferWithContents(kPositions, GPUBufferUsage.VERTEX);\n    const colorBuffer = t.makeBufferWithContents(kColors, GPUBufferUsage.VERTEX);\n\n    const fragmentState: GPUFragmentState = {\n      module: t.device.createShaderModule({\n        code: `\n      struct Input {\n        @location(0) color : vec4<f32>\n      };\n      @fragment\n      fn main(input : Input) -> @location(0) vec4<f32> {\n        return input.color;\n      }`,\n      }),\n      entryPoint: 'main',\n      targets: [{ format: 'rgba8unorm' }],\n    };\n\n    // Create renderPipeline1 that uses both positionBuffer and colorBuffer.\n    const renderPipeline1 = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n        struct Inputs {\n          @location(0) vertexColor : vec4<f32>,\n          @location(1) vertexPosition : f32,\n        };\n        struct Outputs {\n          @builtin(position) position : vec4<f32>,\n          @location(0) color : vec4<f32>,\n        };\n        @vertex\n        fn main(input : Inputs)-> Outputs {\n          var outputs : Outputs;\n          outputs.position =\n            vec4<f32>(input.vertexPosition, 0.5, 0.0, 1.0);\n          outputs.color = input.vertexColor;\n          return outputs;\n        }`,\n        }),\n        entryPoint: 'main',\n        buffers: [\n          {\n            arrayStride: kAttributeStride,\n            attributes: [\n              {\n                format: 'unorm8x4',\n                offset: 0,\n                shaderLocation: 0,\n              },\n            ],\n          },\n          {\n            arrayStride: kAttributeStride,\n            attributes: [\n              {\n                format: 'float32',\n                offset: 0,\n                shaderLocation: 1,\n              },\n            ],\n          },\n        ],\n      },\n      fragment: fragmentState,\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderPipeline2 = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n        struct Inputs {\n          @builtin(vertex_index) vertexIndex : u32,\n          @location(0) vertexColor : vec4<f32>,\n        };\n        struct Outputs {\n          @builtin(position) position : vec4<f32>,\n          @location(0) color : vec4<f32>,\n        };\n        @vertex\n        fn main(input : Inputs)-> Outputs {\n          var kPositions = array<f32, 2> (0.25, 0.75);\n          var outputs : Outputs;\n          outputs.position =\n              vec4(kPositions[input.vertexIndex], 0.5, 0.0, 1.0);\n          outputs.color = input.vertexColor;\n          return outputs;\n        }`,\n        }),\n        entryPoint: 'main',\n        buffers: [\n          {\n            arrayStride: kAttributeStride,\n            attributes: [\n              {\n                format: 'unorm8x4',\n                offset: 0,\n                shaderLocation: 0,\n              },\n            ],\n          },\n        ],\n      },\n      fragment: fragmentState,\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const kPointsCount = 4;\n    const outputTextureSize = [kPointsCount, 1, 1];\n    const outputTexture = t.createTextureTracked({\n      format: 'rgba8unorm',\n      size: [kPointsCount, 1, 1],\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: outputTexture.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    renderPass.setVertexBuffer(0, colorBuffer);\n    renderPass.setVertexBuffer(1, positionBuffer);\n    renderPass.setPipeline(renderPipeline1);\n    renderPass.draw(2);\n\n    renderPass.setPipeline(renderPipeline2);\n    renderPass.draw(2);\n\n    renderPass.end();\n\n    t.queue.submit([encoder.finish()]);\n\n    const kExpectedColors = [\n      kColors.subarray(0, 4),\n      kColors.subarray(4),\n      kColors.subarray(0, 4),\n      kColors.subarray(4),\n    ];\n\n    t.expectTexelViewComparisonIsOkInTexture(\n      { texture: outputTexture },\n      TexelView.fromTexelsAsBytes('rgba8unorm', coord => kExpectedColors[coord.x]),\n      outputTextureSize\n    );\n  });\n\ng.test('set_index_buffer_before_non_indexed_draw')\n  .desc(\n    `\n  Test that setting / not setting the index buffer does not impact a non-indexed draw.\n  `\n  )\n  .fn(t => {\n    const kPositions = [-0.75, -0.25, 0.25, 0.75];\n    const kColors = [\n      new Uint8Array([255, 0, 0, 255]),\n      new Uint8Array([0, 255, 0, 255]),\n      new Uint8Array([0, 0, 255, 255]),\n      new Uint8Array([255, 0, 255, 255]),\n    ];\n\n    // Initialize the vertex buffer with required vertex attributes (position: f32, color: f32x4)\n    const vertexBuffer = t.createBufferTracked({\n      usage: GPUBufferUsage.VERTEX,\n      size: t.kVertexAttributeSize * kPositions.length,\n      mappedAtCreation: true,\n    });\n    const vertexAttributes = vertexBuffer.getMappedRange();\n    for (let i = 0; i < kPositions.length; ++i) {\n      const baseOffset = t.kVertexAttributeSize * i;\n      const vertexPosition = new Float32Array(vertexAttributes, baseOffset, 1);\n      vertexPosition[0] = kPositions[i];\n      const vertexColor = new Uint8Array(vertexAttributes, baseOffset + 4, 4);\n      vertexColor.set(kColors[i]);\n    }\n    vertexBuffer.unmap();\n\n    // Initialize the index buffer with 2 uint16 indices (2, 3).\n    const indexBuffer = t.makeBufferWithContents(new Uint16Array([2, 3]), GPUBufferUsage.INDEX);\n\n    const renderPipeline = t.GetRenderPipelineForTest(t.kVertexAttributeSize);\n\n    const kPointsCount = 4;\n    const outputTextureSize = [kPointsCount, 1, 1];\n    const outputTexture = t.createTextureTracked({\n      format: 'rgba8unorm',\n      size: [kPointsCount, 1, 1],\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: outputTexture.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    // The first draw call is an indexed one (the third and fourth color are involved)\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.setIndexBuffer(indexBuffer, 'uint16');\n    renderPass.setPipeline(renderPipeline);\n    renderPass.drawIndexed(2);\n\n    // The second draw call is a non-indexed one (the first and second color are involved)\n    renderPass.draw(2);\n\n    renderPass.end();\n\n    t.queue.submit([encoder.finish()]);\n\n    t.expectTexelViewComparisonIsOkInTexture(\n      { texture: outputTexture },\n      TexelView.fromTexelsAsBytes('rgba8unorm', coord => kColors[coord.x]),\n      outputTextureSize\n    );\n  });\n"],"mappings":"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"}