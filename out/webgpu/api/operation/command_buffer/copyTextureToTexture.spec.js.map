{"version":3,"file":"copyTextureToTexture.spec.js","names":["description","makeTestGroup","assert","ErrorWithExtra","memcpy","kBufferSizeAlignment","kMinDynamicBufferOffsetAlignment","kTextureDimensions","depthStencilFormatAspectSize","getBaseFormatForTextureFormat","getBlockInfoForColorTextureFormat","isCompressedTextureFormat","isDepthTextureFormat","isRegularTextureFormat","isStencilTextureFormat","kCompressedTextureFormats","kDepthStencilFormats","kRegularTextureFormats","textureFormatAndDimensionPossiblyCompatible","textureFormatsAreViewCompatible","AllFeaturesMaxLimitsGPUTest","ttu","checkElementsEqual","align","physicalMipSize","DataArrayGenerator","kBytesPerRowAlignment","dataBytesForCopyOrFail","TexelView","findFailedPixels","dataGenerator","F","getInitialDataPerMipLevel","dimension","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidth","blockHeight","blocksPerSubresource","width","height","byteSize","depthOrArrayLayers","generateView","getInitialStencilDataPerMipLevel","aspectBytesPerBlock","doCopyTextureToTextureTest","srcTextureSize","dstTextureSize","srcFormat","dstFormat","copyBoxOffsets","srcCopyLevel","dstCopyLevel","skipIfTextureFormatNotSupported","skipIfCopyTextureToTextureNotSupportedForFormat","skipIfTextureFormatAndDimensionNotCompatible","extraTextureUsageFlags","isCompatibility","GPUTextureUsage","TEXTURE_BINDING","mipLevelCount","srcTextureDesc","size","usage","COPY_SRC","COPY_DST","srcTexture","createTextureTracked","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","device","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","minDepth","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","appliedSize","encoder","createCommandEncoder","copyTextureToTexture","origin","submit","finish","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","expectedTexture","expectedData","Uint8Array","updateLinearTextureDataSubBox","src","dataLayout","offset","data","dest","expectTexturesToMatchByRendering","dstBufferDesc","GPUBufferUsage","dstBuffer","createBufferTracked","copyTextureToBuffer","buffer","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","bytesInRow","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","start","length","dst","expectGPUBufferValuesPassCheck","vals","srcByteOffset","type","typedLength","regularDstFormat","checkByTextureFormat","actual","zero","actTexelView","fromTextureDataByReference","subrectOrigin","subrectSize","expTexelView","failedPixelsMessage","maxFractionalDiff","undefined","msg","initializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","verifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","expectGPUBufferValuesEqual","getRenderPipelineForT2TCopyWithDepthTests","bindGroupLayout","hasColorAttachment","depthStencil","renderPipelineDescriptor","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","targets","createRenderPipeline","getBindGroupLayoutForT2TCopyWithDepthTests","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","minBindingSize","hasDynamicOffset","getBindGroupForT2TCopyWithDepthTests","totalCopyArrayLayers","uniformBufferSize","uniformBufferData","Float32Array","i","uniformBuffer","makeBufferWithContents","UNIFORM","createBindGroup","resource","initializeDepthAspect","depthFormat","renderPipeline","depthWriteEnabled","depthCompare","bindGroup","hasStencil","srcCopyLayer","renderPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","baseArrayLayer","arrayLayerCount","baseMipLevel","depthClearValue","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","setBindGroup","setPipeline","draw","end","verifyDepthAspect","outputColorTexture","RENDER_ATTACHMENT","dstCopyLayer","clearValue","r","g","b","a","loadOp","storeOp","expectSingleColor","exp","R","G","B","A","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","test","desc","params","u","combine","filter","srcBaseFormat","dstBaseFormat","beginSubcases","expandWithParams","p","param","unless","fn","t","textureSizeInBlocks","srcBlockWidth","srcBlockHeight","dstBlockWidth","dstBlockHeight","paramsSubcasesOnly","combineWithParams","copyBoxOffset","skipIf","kColorFormat","kSampleCount","sampleCount","renderPipelineForInit","multisample","count","initEncoder","renderPassForInit","copyEncoder","renderPipelineForValidation","getBindGroupLayout","expectedOutputTexture","validationEncoder","renderPassForValidation","vertexState","encoderForInit","renderPipelineForVerify","multisampledColorTexture","colorTextureAsResolveTarget","encoderForVerify","renderPassForVerify","resolveTarget","unimplemented"],"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"sourcesContent":["export const description = `copyTextureToTexture operation tests`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, ErrorWithExtra, memcpy } from '../../../../common/util/util.js';\nimport {\n  kBufferSizeAlignment,\n  kMinDynamicBufferOffsetAlignment,\n  kTextureDimensions,\n} from '../../../capability_info.js';\nimport {\n  ColorTextureFormat,\n  DepthStencilFormat,\n  depthStencilFormatAspectSize,\n  getBaseFormatForTextureFormat,\n  getBlockInfoForColorTextureFormat,\n  isCompressedTextureFormat,\n  isDepthTextureFormat,\n  isRegularTextureFormat,\n  isStencilTextureFormat,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kRegularTextureFormats,\n  RegularTextureFormat,\n  textureFormatAndDimensionPossiblyCompatible,\n  textureFormatsAreViewCompatible,\n} from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport * as ttu from '../../../texture_test_utils.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { DataArrayGenerator } from '../../../util/texture/data_generation.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { findFailedPixels } from '../../../util/texture/texture_ok.js';\n\nconst dataGenerator = new DataArrayGenerator();\n\nclass F extends AllFeaturesMaxLimitsGPUTest {\n  getInitialDataPerMipLevel(\n    dimension: GPUTextureDimension,\n    textureSize: Required<GPUExtent3DDict>,\n    format: ColorTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, dimension, mipLevel);\n    const { bytesPerBlock, blockWidth, blockHeight } = getBlockInfoForColorTextureFormat(format);\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidth) * (textureSizeAtLevel.height / blockHeight);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  getInitialStencilDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: DepthStencilFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n      aspectBytesPerBlock *\n      textureSizeAtLevel.width *\n      textureSizeAtLevel.height *\n      textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  doCopyTextureToTextureTest(\n    dimension: GPUTextureDimension,\n    srcTextureSize: Required<GPUExtent3DDict>,\n    dstTextureSize: Required<GPUExtent3DDict>,\n    srcFormat: ColorTextureFormat,\n    dstFormat: ColorTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: Required<GPUExtent3DDict>;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    this.skipIfTextureFormatNotSupported(srcFormat, dstFormat);\n    this.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n    this.skipIfTextureFormatAndDimensionNotCompatible(srcFormat, dimension);\n    this.skipIfTextureFormatAndDimensionNotCompatible(dstFormat, dimension);\n\n    // If we're in compatibility mode and it's a compressed texture\n    // then we need to render the texture to test the results of the copy.\n    const extraTextureUsageFlags =\n      isCompressedTextureFormat(dstFormat) && this.isCompatibility\n        ? GPUTextureUsage.TEXTURE_BINDING\n        : 0;\n    const mipLevelCount = dimension === '1d' ? 1 : 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: srcTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount,\n    };\n    const srcTexture = this.createTextureTracked(srcTextureDesc);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: dstTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | extraTextureUsageFlags,\n      mipLevelCount,\n    };\n    const dstTexture = this.createTextureTracked(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.getInitialDataPerMipLevel(\n      dimension,\n      srcTextureSize,\n      srcFormat,\n      srcCopyLevel\n    );\n    const srcTextureSizeAtLevel = physicalMipSize(\n      srcTextureSize,\n      srcFormat,\n      dimension,\n      srcCopyLevel\n    );\n    const { bytesPerBlock, blockWidth, blockHeight } = getBlockInfoForColorTextureFormat(srcFormat);\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(\n      dstTextureSize,\n      dstFormat,\n      dimension,\n      dstCopyLevel\n    );\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n    const minDepth = Math.min(\n      srcTextureSizeAtLevel.depthOrArrayLayers,\n      dstTextureSizeAtLevel.depthOrArrayLayers\n    );\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.srcOffset.z, minDepth),\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.dstOffset.z, minDepth),\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n        copyBoxOffsets.copyExtent.width * blockWidth -\n        Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height * blockHeight -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth = Math.max(\n      0,\n      minDepth +\n        copyBoxOffsets.copyExtent.depthOrArrayLayers -\n        Math.max(appliedSrcOffset.z, appliedDstOffset.z)\n    );\n    assert(appliedCopyDepth >= 0);\n\n    const appliedSize = {\n      width: appliedCopyWidth,\n      height: appliedCopyHeight,\n      depthOrArrayLayers: appliedCopyDepth,\n    };\n\n    {\n      const encoder = this.device.createCommandEncoder();\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n        { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n        appliedSize\n      );\n      this.device.queue.submit([encoder.finish()]);\n    }\n\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n\n    if (isCompressedTextureFormat(dstTexture.format) && this.isCompatibility) {\n      assert(textureFormatsAreViewCompatible(this.device, srcFormat, dstFormat));\n      // compare by rendering. We need the expected texture to match\n      // the dstTexture so we'll create a texture where we supply\n      // all of the data in JavaScript.\n      const expectedTexture = this.createTextureTracked({\n        size: [dstTexture.width, dstTexture.height, dstTexture.depthOrArrayLayers],\n        mipLevelCount: dstTexture.mipLevelCount,\n        format: dstTexture.format,\n        usage: dstTexture.usage,\n      });\n      const expectedData = new Uint8Array(dstBufferSize);\n\n      // Execute the equivalent of `copyTextureToTexture`, copying\n      // from `initialSrcData` to `expectedData`.\n      ttu.updateLinearTextureDataSubBox(this, dstFormat, appliedSize, {\n        src: {\n          dataLayout: {\n            bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n            rowsPerImage: srcBlockRowsPerImage,\n            offset: 0,\n          },\n          origin: appliedSrcOffset,\n          data: initialSrcData,\n        },\n        dest: {\n          dataLayout: {\n            bytesPerRow: dstBlocksPerRow * bytesPerBlock,\n            rowsPerImage: dstBlockRowsPerImage,\n            offset: 0,\n          },\n          origin: appliedDstOffset,\n          data: expectedData,\n        },\n      });\n\n      // Upload `expectedData` to `expectedTexture`. If `copyTextureToTexture`\n      // worked then the contents of `dstTexture` should match `expectedTexture`\n      this.queue.writeTexture(\n        { texture: expectedTexture, mipLevel: dstCopyLevel },\n        expectedData,\n        {\n          bytesPerRow: dstBlocksPerRow * bytesPerBlock,\n          rowsPerImage: dstBlockRowsPerImage,\n        },\n        dstTextureSizeAtLevel\n      );\n\n      ttu.expectTexturesToMatchByRendering(\n        this,\n        dstTexture,\n        expectedTexture,\n        dstCopyLevel,\n        appliedDstOffset,\n        appliedSize\n      );\n      return;\n    }\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.createBufferTracked(dstBufferDesc);\n\n    {\n      const encoder = this.device.createCommandEncoder();\n      encoder.copyTextureToBuffer(\n        { texture: dstTexture, mipLevel: dstCopyLevel },\n        {\n          buffer: dstBuffer,\n          bytesPerRow: bytesPerDstAlignedBlockRow,\n          rowsPerImage: dstBlockRowsPerImage,\n        },\n        dstTextureSizeAtLevel\n      );\n      this.device.queue.submit([encoder.finish()]);\n    }\n\n    // Fill expectedUint8DataWithPadding with the expected data of dstTexture. The other values in\n    // expectedUint8DataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedUint8DataWithPadding = new Uint8Array(dstBufferSize);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n    const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    if (isCompressedTextureFormat(dstFormat)) {\n      this.expectGPUBufferValuesPassCheck(\n        dstBuffer,\n        vals => checkElementsEqual(vals, expectedUint8DataWithPadding),\n        {\n          srcByteOffset: 0,\n          type: Uint8Array,\n          typedLength: expectedUint8DataWithPadding.length,\n        }\n      );\n      return;\n    }\n\n    assert(isRegularTextureFormat(dstFormat));\n    const regularDstFormat = dstFormat as RegularTextureFormat;\n\n    // Verify the content of the whole subresource of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    const checkByTextureFormat = (actual: Uint8Array) => {\n      const zero = { x: 0, y: 0, z: 0 };\n\n      const actTexelView = TexelView.fromTextureDataByReference(regularDstFormat, actual, {\n        bytesPerRow: bytesInRow,\n        rowsPerImage: dstBlockRowsPerImage,\n        subrectOrigin: zero,\n        subrectSize: dstTextureSizeAtLevel,\n      });\n      const expTexelView = TexelView.fromTextureDataByReference(\n        regularDstFormat,\n        expectedUint8DataWithPadding,\n        {\n          bytesPerRow: bytesInRow,\n          rowsPerImage: dstBlockRowsPerImage,\n          subrectOrigin: zero,\n          subrectSize: dstTextureSizeAtLevel,\n        }\n      );\n\n      const failedPixelsMessage = findFailedPixels(\n        regularDstFormat,\n        zero,\n        dstTextureSizeAtLevel,\n        { actTexelView, expTexelView },\n        {\n          maxFractionalDiff: 0,\n        }\n      );\n\n      if (failedPixelsMessage !== undefined) {\n        const msg = 'Texture level had unexpected contents:\\n' + failedPixelsMessage;\n        return new ErrorWithExtra(msg, () => ({\n          expTexelView,\n          actTexelView,\n        }));\n      }\n\n      return undefined;\n    };\n\n    this.expectGPUBufferValuesPassCheck(dstBuffer, checkByTextureFormat, {\n      srcByteOffset: 0,\n      type: Uint8Array,\n      typedLength: expectedUint8DataWithPadding.length,\n    });\n  }\n\n  initializeStencilAspect(\n    sourceTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  verifyStencilAspect(\n    destinationTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B',\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.createBufferTracked({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([encoder.finish()]);\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n\n  getRenderPipelineForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    hasColorAttachment: boolean,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    const renderPipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              copyLayer: f32\n            };\n            @group(0) @binding(0) var<uniform> param: Params;\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var depthValue = 0.5 + 0.2 * sin(param.copyLayer);\n              var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                  vec3<f32>(-1.0,  1.0, depthValue),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>( 1.0, -1.0, depthValue));\n              return vec4<f32>(pos[VertexIndex], 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    };\n    if (hasColorAttachment) {\n      renderPipelineDescriptor.fragment = {\n        module: this.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      };\n    }\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  getBindGroupLayoutForT2TCopyWithDepthTests(): GPUBindGroupLayout {\n    return this.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {\n            type: 'uniform',\n            minBindingSize: 4,\n            hasDynamicOffset: true,\n          },\n        },\n      ],\n    });\n  }\n\n  getBindGroupForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    totalCopyArrayLayers: number\n  ): GPUBindGroup {\n    // Prepare the uniform buffer that contains all the copy layers to generate different depth\n    // values for different copy layers.\n    assert(totalCopyArrayLayers > 0);\n    const uniformBufferSize = kMinDynamicBufferOffsetAlignment * (totalCopyArrayLayers - 1) + 4;\n    const uniformBufferData = new Float32Array(uniformBufferSize / 4);\n    for (let i = 1; i < totalCopyArrayLayers; ++i) {\n      uniformBufferData[(kMinDynamicBufferOffsetAlignment / 4) * i] = i;\n    }\n    const uniformBuffer = this.makeBufferWithContents(\n      uniformBufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM\n    );\n    return this.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            size: 4,\n          },\n        },\n      ],\n    });\n  }\n\n  /** Initialize the depth aspect of sourceTexture with draw calls */\n  initializeDepthAspect(\n    sourceTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'always' and depthWriteEnabled == true\n    // for the initializations of the depth attachment.\n    const bindGroupLayout = this.getBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.getRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, false, {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n    });\n    const bindGroup = this.getBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const hasStencil = isStencilTextureFormat(sourceTexture.format);\n    const encoder = this.device.createCommandEncoder();\n    for (let srcCopyLayer = 0; srcCopyLayer < copySize[2]; ++srcCopyLayer) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: sourceTexture.createView({\n            baseArrayLayer: srcCopyLayer + srcCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: srcCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthClearValue: 0.0,\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          stencilLoadOp: hasStencil ? 'load' : undefined,\n          stencilStoreOp: hasStencil ? 'store' : undefined,\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [srcCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    this.queue.submit([encoder.finish()]);\n  }\n\n  verifyDepthAspect(\n    destinationTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'equal' and depthWriteEnabled == false\n    // for the comparison of the depth attachment.\n    const bindGroupLayout = this.getBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.getRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, true, {\n      format: depthFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n    });\n    const bindGroup = this.getBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const outputColorTexture = this.createTextureTracked({\n      format: 'rgba8unorm',\n      size: copySize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n    const hasStencil = isStencilTextureFormat(destinationTexture.format);\n    const encoder = this.device.createCommandEncoder();\n    for (let dstCopyLayer = 0; dstCopyLayer < copySize[2]; ++dstCopyLayer) {\n      // If the depth value is not expected, the color of outputColorTexture will remain Red after\n      // the render pass.\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: outputColorTexture.createView({\n              baseArrayLayer: dstCopyLayer,\n              arrayLayerCount: 1,\n            }),\n            clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n        depthStencilAttachment: {\n          view: destinationTexture.createView({\n            baseArrayLayer: dstCopyLayer + dstCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: dstCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadOp: 'load',\n          depthStoreOp: 'store',\n          stencilLoadOp: hasStencil ? 'load' : undefined,\n          stencilStoreOp: hasStencil ? 'store' : undefined,\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [dstCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    this.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(outputColorTexture, 'rgba8unorm', {\n      size: copySize,\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n  // From (0, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (blockWidth, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 1, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (0, blockHeight) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 1, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block column of both source and destination texture.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block row of both source and destination texture.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 },\n  },\n] as const;\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n  // Copy the whole array slices from the source texture to the destination texture.\n  // The copy extent will cover the whole subresource of either source or the\n  // destination texture\n  ...kCopyBoxOffsetsForWholeDepth,\n\n  // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n] as const;\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = getBaseFormatForTextureFormat(srcFormat);\n        const dstBaseFormat = getBaseFormatForTextureFormat(dstFormat);\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureFormatAndDimensionPossiblyCompatible(dimension, srcFormat) &&\n          textureFormatAndDimensionPossiblyCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .expandWithParams(p => {\n        const params = [\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 },\n          },\n        ];\n        if (p.dimension === '1d') {\n          for (const param of params) {\n            param.srcTextureSize.height = 1;\n            param.dstTextureSize.height = 1;\n          }\n        }\n\n        return params;\n      })\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffsets.copyExtent.height !== 0 ||\n            p.copyBoxOffsets.srcOffset.y !== 0 ||\n            p.copyBoxOffsets.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(t => {\n    const {\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.doCopyTextureToTextureTest(\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = getBaseFormatForTextureFormat(srcFormat);\n        const dstBaseFormat = getBaseFormatForTextureFormat(dstFormat);\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4 blocks\n        { src: { width: 15, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n        // of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 15, height: 8 } },\n        // The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4 blocks\n        { src: { width: 16, height: 13 }, dst: { width: 16, height: 8 } },\n        // The virtual height of the destination texture at mipmap level 2 (13) is not a\n        // multiple of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 13 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    t.skipIfTextureFormatAndDimensionNotCompatible(srcFormat, dimension);\n    t.skipIfTextureFormatAndDimensionNotCompatible(dstFormat, dimension);\n    t.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n    const { blockWidth: srcBlockWidth, blockHeight: srcBlockHeight } =\n      getBlockInfoForColorTextureFormat(srcFormat);\n    const { blockWidth: dstBlockWidth, blockHeight: dstBlockHeight } =\n      getBlockInfoForColorTextureFormat(dstFormat);\n\n    t.doCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = getBaseFormatForTextureFormat(srcFormat);\n        const dstBaseFormat = getBaseFormatForTextureFormat(dstFormat);\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureFormatAndDimensionPossiblyCompatible(dimension, srcFormat) &&\n          textureFormatAndDimensionPossiblyCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n          dstTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(t => {\n    const {\n      dimension,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.doCopyTextureToTextureTest(\n      dimension,\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = getBaseFormatForTextureFormat(srcFormat);\n        const dstBaseFormat = getBaseFormatForTextureFormat(dstFormat);\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 2, height: 2 }, dst: { width: 2, height: 2 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    const { blockWidth: srcBlockWidth, blockHeight: srcBlockHeight } =\n      getBlockInfoForColorTextureFormat(srcFormat);\n    const { blockWidth: dstBlockWidth, blockHeight: dstBlockHeight } =\n      getBlockInfoForColorTextureFormat(dstFormat);\n\n    t.doCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_sized')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - For each texture dimension.\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combineWithParams([\n        { dimension: '1d', textureSize: { width: 32, height: 1, depthOrArrayLayers: 1 } },\n        { dimension: '2d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n        { dimension: '3d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n      ] as const)\n      .combine('copyBoxOffset', [\n        // copyExtent.width === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && srcOffset.x === textureWidth\n        {\n          srcOffset: { x: 64, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && dstOffset.x === textureWidth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 64, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && srcOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 32, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && dstOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 32, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 5 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 5 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n      ])\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffset.copyExtent.height !== 0 ||\n            p.copyBoxOffset.srcOffset.y !== 0 ||\n            p.copyBoxOffset.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(t => {\n    const { dimension, textureSize, copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcFormat = 'rgba8unorm';\n    const dstFormat = 'rgba8unorm';\n\n    t.doCopyTextureToTextureTest(\n      dimension,\n      textureSize,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('copy_depth_stencil')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with depth and stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n\n  For all the texture formats with depth aspect:\n  - Initialize the depth aspect of the source texture with a draw call\n  - Copy the depth aspect from the source texture into the destination texture\n  - Validate the content in the destination texture with the depth comparison function 'equal'\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('srcTextureSize', [\n        { width: 32, height: 16, depthOrArrayLayers: 1 },\n        { width: 32, height: 16, depthOrArrayLayers: 4 },\n        { width: 24, height: 48, depthOrArrayLayers: 5 },\n      ])\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n      .combine('srcCopyBaseArrayLayer', [0, 1])\n      .combine('dstCopyBaseArrayLayer', [0, 1])\n      .filter(t => {\n        return (\n          t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n          t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer\n        );\n      })\n  )\n  .fn(t => {\n    const {\n      format,\n      srcTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n      srcCopyBaseArrayLayer,\n      dstCopyBaseArrayLayer,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const copySize: [number, number, number] = [\n      srcTextureSize.width >> srcCopyLevel,\n      srcTextureSize.height >> srcCopyLevel,\n      srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer),\n    ];\n    const sourceTexture = t.createTextureTracked({\n      format,\n      size: srcTextureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: srcCopyLevel + 1,\n    });\n    const destinationTexture = t.createTextureTracked({\n      format,\n      size: [\n        copySize[0] << dstCopyLevel,\n        copySize[1] << dstCopyLevel,\n        srcTextureSize.depthOrArrayLayers,\n      ] as const,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: dstCopyLevel + 1,\n    });\n\n    let initialStencilData: undefined | Uint8Array = undefined;\n    if (isStencilTextureFormat(format)) {\n      initialStencilData = t.getInitialStencilDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n      t.initializeStencilAspect(\n        sourceTexture,\n        initialStencilData,\n        srcCopyLevel,\n        srcCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (isDepthTextureFormat(format)) {\n      t.initializeDepthAspect(sourceTexture, format, srcCopyLevel, srcCopyBaseArrayLayer, copySize);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      {\n        texture: destinationTexture,\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      copySize\n    );\n    t.queue.submit([encoder.finish()]);\n\n    if (isStencilTextureFormat(format)) {\n      assert(initialStencilData !== undefined);\n      t.verifyStencilAspect(\n        destinationTexture,\n        initialStencilData,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (isDepthTextureFormat(format)) {\n      t.verifyDepthAspect(\n        destinationTexture,\n        format,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n  });\n\ng.test('copy_multisampled_color')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled color formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Compare every sub-pixel of source texture and destination texture in another render pass:\n    - If they are different, then output RED; otherwise output GREEN\n  - Verify the pixels in the output texture are all GREEN.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(t => {\n    t.skipIf(t.isCompatibility, 'multisample textures are not copyable in compatibility mode');\n    const textureSize = [32, 16, 1] as const;\n    const kColorFormat = 'rgba8unorm';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.createTextureTracked({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const destinationTexture = t.createTextureTracked({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n\n    // Initialize sourceTexture with a draw call.\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0)\n              );\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.3, 0.5, 0.8, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const initEncoder = t.device.createCommandEncoder();\n    const renderPassForInit = initEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: sourceTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(3);\n    renderPassForInit.end();\n    t.queue.submit([initEncoder.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify if all the sub-pixel values at the same location of sourceTexture and\n    // destinationTexture are equal.\n    const renderPipelineForValidation = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n              vec2<f32>(-1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>( 1.0, -1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @group(0) @binding(0) var sourceTexture : texture_multisampled_2d<f32>;\n          @group(0) @binding(1) var destinationTexture : texture_multisampled_2d<f32>;\n          @fragment\n          fn main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {\n            var coord_in_vec2 = vec2<i32>(i32(coord_in.x), i32(coord_in.y));\n            for (var sampleIndex = 0; sampleIndex < ${kSampleCount};\n              sampleIndex = sampleIndex + 1) {\n              var sourceSubPixel : vec4<f32> =\n                textureLoad(sourceTexture, coord_in_vec2, sampleIndex);\n              var destinationSubPixel : vec4<f32> =\n                textureLoad(destinationTexture, coord_in_vec2, sampleIndex);\n              if (!all(sourceSubPixel == destinationSubPixel)) {\n                return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n              }\n            }\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: renderPipelineForValidation.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: sourceTexture.createView(),\n        },\n        {\n          binding: 1,\n          resource: destinationTexture.createView(),\n        },\n      ],\n    });\n    const expectedOutputTexture = t.createTextureTracked({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const validationEncoder = t.device.createCommandEncoder();\n    const renderPassForValidation = validationEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: expectedOutputTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForValidation.setPipeline(renderPipelineForValidation);\n    renderPassForValidation.setBindGroup(0, bindGroup);\n    renderPassForValidation.draw(6);\n    renderPassForValidation.end();\n    t.queue.submit([validationEncoder.finish()]);\n\n    t.expectSingleColor(expectedOutputTexture, 'rgba8unorm', {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n\ng.test('copy_multisampled_depth')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled depth formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Validate the content in the destination texture with the depth comparison function 'equal'.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .params(u =>\n    u.combine('format', kDepthStencilFormats).filter(t => isDepthTextureFormat(t.format))\n  )\n  .fn(t => {\n    const { format } = t.params;\n\n    t.skipIf(t.isCompatibility, 'multisample textures are not copyable in compatibility mode');\n    t.skipIfTextureFormatNotSupported(format);\n\n    const textureSize = [32, 16, 1] as const;\n    const kSampleCount = 4;\n\n    const sourceTexture = t.createTextureTracked({\n      format,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const destinationTexture = t.createTextureTracked({\n      format,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n\n    const vertexState: GPUVertexState = {\n      module: t.device.createShaderModule({\n        code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n            var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0,  1.0, 0.5),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>( 1.0, -1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }`,\n      }),\n      entryPoint: 'main',\n    };\n\n    // Initialize the depth aspect of source texture with a draw call\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: vertexState,\n      depthStencil: {\n        format,\n        depthCompare: 'always',\n        depthWriteEnabled: true,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n\n    const encoderForInit = t.device.createCommandEncoder();\n    const renderPassForInit = encoderForInit.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: sourceTexture.createView(),\n        depthClearValue: 0.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n        ...(isStencilTextureFormat(format) && {\n          stencilLoadOp: 'clear',\n          stencilStoreOp: 'store',\n        }),\n      },\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(6);\n    renderPassForInit.end();\n    t.queue.submit([encoderForInit.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify the depth values in destinationTexture are what we expected with\n    // depthCompareFunction == 'equal' and depthWriteEnabled == false in the render pipeline\n    const kColorFormat = 'rgba8unorm';\n    const renderPipelineForVerify = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: vertexState,\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @fragment\n          fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      depthStencil: {\n        format,\n        depthCompare: 'equal',\n        depthWriteEnabled: false,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const multisampledColorTexture = t.createTextureTracked({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const colorTextureAsResolveTarget = t.createTextureTracked({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoderForVerify = t.device.createCommandEncoder();\n    const renderPassForVerify = encoderForVerify.beginRenderPass({\n      colorAttachments: [\n        {\n          view: multisampledColorTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'discard',\n          resolveTarget: colorTextureAsResolveTarget.createView(),\n        },\n      ],\n      depthStencilAttachment: {\n        view: destinationTexture.createView(),\n        depthLoadOp: 'load',\n        depthStoreOp: 'store',\n        ...(isStencilTextureFormat(format) && {\n          stencilLoadOp: 'clear',\n          stencilStoreOp: 'store',\n        }),\n      },\n    });\n    renderPassForVerify.setPipeline(renderPipelineForVerify);\n    renderPassForVerify.draw(6);\n    renderPassForVerify.end();\n    t.queue.submit([encoderForVerify.finish()]);\n\n    t.expectSingleColor(colorTextureAsResolveTarget, kColorFormat, {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n\ng.test('copy_multisampled_stencil')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled stencil formats.\n    `\n  )\n  .unimplemented();\n"],"mappings":"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"}