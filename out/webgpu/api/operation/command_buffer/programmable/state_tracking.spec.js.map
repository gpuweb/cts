{"version":3,"file":"state_tracking.spec.js","names":["description","makeTestGroup","GPUConst","MaxLimitsTestMixin","kProgrammableEncoderTypes","ProgrammableStateTest","g","kBufferUsage","BufferUsage","COPY_SRC","COPY_DST","STORAGE","UNIFORM","test","desc","params","u","combine","beginSubcases","a","b","out","fn","t","encoderType","groupIndices","type","skipIfNeedsStorageBuffersInFragmentStageAndHaveNone","pipeline","createBindingStatePipeline","inputType","makeBufferWithContents","Int32Array","bindGroups","createBindGroup","encoder","validateFinishAndSubmit","createEncoderForStateTest","setPipeline","setBindGroup","dispatchOrDraw","expectGPUBufferValuesEqual","setOrder","bindingName","combineWithParams","setBefore","setAfter","ab","badOut","c","pipelineA","pipelineB","outA","outB","createEncoder","attachmentInfo","colorFormats"],"sources":["../../../../../../src/webgpu/api/operation/command_buffer/programmable/state_tracking.spec.ts"],"sourcesContent":["export const description = `\nEnsure state is set correctly. Tries to stress state caching (setting different states multiple\ntimes in different orders) for setBindGroup and setPipeline.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { MaxLimitsTestMixin } from '../../../../gpu_test.js';\nimport { kProgrammableEncoderTypes } from '../../../../util/command_buffer_maker.js';\n\nimport { ProgrammableStateTest } from './programmable_state_test.js';\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(ProgrammableStateTest));\n\nconst kBufferUsage =\n  GPUConst.BufferUsage.COPY_SRC |\n  GPUConst.BufferUsage.COPY_DST |\n  GPUConst.BufferUsage.STORAGE |\n  GPUConst.BufferUsage.UNIFORM;\n\ng.test('bind_group_indices')\n  .desc(\n    `\n    Test that bind group indices can be declared in any order, regardless of their order in the shader.\n    - Test places the value of buffer a - buffer b into the out buffer, then reads the result.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .beginSubcases()\n      .combine('type', ['storage', 'uniform'] as const)\n      .combine('groupIndices', [\n        { a: 0, b: 1, out: 2 },\n        { a: 1, b: 2, out: 0 },\n        { a: 2, b: 0, out: 1 },\n        { a: 0, b: 2, out: 1 },\n        { a: 2, b: 1, out: 0 },\n        { a: 1, b: 0, out: 2 },\n      ])\n  )\n  .fn(t => {\n    const { encoderType, groupIndices, type } = t.params;\n    t.skipIfNeedsStorageBuffersInFragmentStageAndHaveNone(type, encoderType);\n\n    const pipeline = t.createBindingStatePipeline(\n      encoderType,\n      groupIndices,\n      type,\n      'a.value - b.value'\n    );\n\n    const inputType: GPUBufferBindingType = type === 'storage' ? 'read-only-storage' : 'uniform';\n    const out = t.makeBufferWithContents(new Int32Array([0]), kBufferUsage);\n    const bindGroups = {\n      a: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([3]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      b: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([2]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      out:\n        encoderType === 'compute pass' || type === 'storage'\n          ? t.createBindGroup(out, 'storage', encoderType)\n          : null,\n    };\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoderForStateTest(\n      type,\n      out,\n      encoderType\n    );\n\n    t.setPipeline(encoder, pipeline);\n    encoder.setBindGroup(groupIndices.a, bindGroups.a);\n    encoder.setBindGroup(groupIndices.b, bindGroups.b);\n    encoder.setBindGroup(groupIndices.out, bindGroups.out);\n    t.dispatchOrDraw(encoder);\n    validateFinishAndSubmit(true, true);\n\n    t.expectGPUBufferValuesEqual(out, new Int32Array([1]));\n  });\n\ng.test('bind_group_order')\n  .desc(\n    `\n    Test that the order in which you set the bind groups doesn't matter.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .beginSubcases()\n      .combine('type', ['storage', 'uniform'] as const)\n      .combine('setOrder', [\n        ['a', 'b', 'out'],\n        ['b', 'out', 'a'],\n        ['out', 'a', 'b'],\n        ['b', 'a', 'out'],\n        ['a', 'out', 'b'],\n        ['out', 'b', 'a'],\n      ] as const)\n  )\n  .fn(t => {\n    const { encoderType, setOrder, type } = t.params;\n    t.skipIfNeedsStorageBuffersInFragmentStageAndHaveNone(type, encoderType);\n\n    const groupIndices = { a: 0, b: 1, out: 2 };\n    const pipeline = t.createBindingStatePipeline(\n      encoderType,\n      groupIndices,\n      type,\n      'a.value - b.value'\n    );\n\n    const out = t.makeBufferWithContents(new Int32Array([0]), kBufferUsage);\n    const inputType: GPUBufferBindingType = type === 'storage' ? 'read-only-storage' : 'uniform';\n    const bindGroups = {\n      a: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([3]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      b: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([2]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      out:\n        encoderType === 'compute pass' || type === 'storage'\n          ? t.createBindGroup(out, 'storage', encoderType)\n          : null,\n    };\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoderForStateTest(\n      type,\n      out,\n      encoderType\n    );\n    t.setPipeline(encoder, pipeline);\n\n    for (const bindingName of setOrder) {\n      encoder.setBindGroup(groupIndices[bindingName], bindGroups[bindingName]);\n    }\n\n    t.dispatchOrDraw(encoder);\n    validateFinishAndSubmit(true, true);\n\n    t.expectGPUBufferValuesEqual(out, new Int32Array([1]));\n  });\n\ng.test('bind_group_before_pipeline')\n  .desc(\n    `\n    Test that setting bind groups prior to setting the pipeline is still valid.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .beginSubcases()\n      .combine('type', ['storage', 'uniform'] as const)\n      .combineWithParams([\n        { setBefore: ['a', 'b'], setAfter: ['out'] },\n        { setBefore: ['a'], setAfter: ['b', 'out'] },\n        { setBefore: ['out', 'b'], setAfter: ['a'] },\n        { setBefore: ['a', 'b', 'out'], setAfter: [] },\n      ] as const)\n  )\n  .fn(t => {\n    const { encoderType, type, setBefore, setAfter } = t.params;\n    t.skipIfNeedsStorageBuffersInFragmentStageAndHaveNone(type, encoderType);\n\n    const groupIndices = { a: 0, b: 1, out: 2 };\n    const pipeline = t.createBindingStatePipeline(\n      encoderType,\n      groupIndices,\n      type,\n      'a.value - b.value'\n    );\n\n    const out = t.makeBufferWithContents(new Int32Array([0]), kBufferUsage);\n    const inputType: GPUBufferBindingType = type === 'storage' ? 'read-only-storage' : 'uniform';\n    const bindGroups = {\n      a: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([3]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      b: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([2]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      out:\n        encoderType === 'compute pass' || type === 'storage'\n          ? t.createBindGroup(out, 'storage', encoderType)\n          : null,\n    };\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoderForStateTest(\n      type,\n      out,\n      encoderType\n    );\n\n    for (const bindingName of setBefore) {\n      encoder.setBindGroup(groupIndices[bindingName], bindGroups[bindingName]);\n    }\n\n    t.setPipeline(encoder, pipeline);\n\n    for (const bindingName of setAfter) {\n      encoder.setBindGroup(groupIndices[bindingName], bindGroups[bindingName]);\n    }\n\n    t.dispatchOrDraw(encoder);\n    validateFinishAndSubmit(true, true);\n\n    t.expectGPUBufferValuesEqual(out, new Int32Array([1]));\n  });\n\ng.test('one_bind_group_multiple_slots')\n  .desc(\n    `\n    Test that a single bind group may be bound to more than one slot.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .beginSubcases()\n      .combine('type', ['storage', 'uniform'] as const)\n  )\n  .fn(t => {\n    const { encoderType, type } = t.params;\n    t.skipIfNeedsStorageBuffersInFragmentStageAndHaveNone(type, encoderType);\n\n    const pipeline = t.createBindingStatePipeline(\n      encoderType,\n      { a: 0, b: 1, out: 2 },\n      type,\n      'a.value - b.value'\n    );\n\n    const out = t.makeBufferWithContents(new Int32Array([1]), kBufferUsage);\n    const inputType: GPUBufferBindingType = type === 'storage' ? 'read-only-storage' : 'uniform';\n    const bindGroups = {\n      ab: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([3]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      out:\n        encoderType === 'compute pass' || type === 'storage'\n          ? t.createBindGroup(out, 'storage', encoderType)\n          : null,\n    };\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoderForStateTest(\n      type,\n      out,\n      encoderType\n    );\n    t.setPipeline(encoder, pipeline);\n\n    encoder.setBindGroup(0, bindGroups.ab);\n    encoder.setBindGroup(1, bindGroups.ab);\n    encoder.setBindGroup(2, bindGroups.out);\n\n    t.dispatchOrDraw(encoder);\n    validateFinishAndSubmit(true, true);\n\n    t.expectGPUBufferValuesEqual(out, new Int32Array([0]));\n  });\n\ng.test('bind_group_multiple_sets')\n  .desc(\n    `\n    Test that the last bind group set to a given slot is used when dispatching.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .beginSubcases()\n      .combine('type', ['storage', 'uniform'] as const)\n  )\n  .fn(t => {\n    const { encoderType, type } = t.params;\n    t.skipIfNeedsStorageBuffersInFragmentStageAndHaveNone(type, encoderType);\n\n    const pipeline = t.createBindingStatePipeline(\n      encoderType,\n      { a: 0, b: 1, out: 2 },\n      type,\n      'a.value - b.value'\n    );\n\n    const badOut = t.makeBufferWithContents(new Int32Array([-1]), kBufferUsage);\n    const out = t.makeBufferWithContents(new Int32Array([0]), kBufferUsage);\n    const inputType: GPUBufferBindingType = type === 'storage' ? 'read-only-storage' : 'uniform';\n    const bindGroups = {\n      a: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([3]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      b: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([2]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      c: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([5]), kBufferUsage),\n        inputType,\n        encoderType\n      ),\n      badOut:\n        encoderType === 'compute pass' || type === 'storage'\n          ? t.createBindGroup(badOut, 'storage', encoderType)\n          : null,\n      out:\n        encoderType === 'compute pass' || type === 'storage'\n          ? t.createBindGroup(out, 'storage', encoderType)\n          : null,\n    };\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoderForStateTest(\n      type,\n      out,\n      encoderType\n    );\n\n    encoder.setBindGroup(1, bindGroups.c);\n\n    t.setPipeline(encoder, pipeline);\n\n    encoder.setBindGroup(0, bindGroups.c);\n    encoder.setBindGroup(0, bindGroups.a);\n\n    encoder.setBindGroup(2, bindGroups.badOut);\n\n    encoder.setBindGroup(1, bindGroups.b);\n    encoder.setBindGroup(2, bindGroups.out);\n\n    t.dispatchOrDraw(encoder);\n    validateFinishAndSubmit(true, true);\n\n    t.expectGPUBufferValuesEqual(out, new Int32Array([1]));\n    t.expectGPUBufferValuesEqual(badOut, new Int32Array([-1]));\n  });\n\ng.test('compatible_pipelines')\n  .desc('Test that bind groups can be shared between compatible pipelines.')\n  .params(u =>\n    u //\n      .combine('encoderType', kProgrammableEncoderTypes)\n  )\n  .fn(t => {\n    const { encoderType } = t.params;\n    t.skipIfNeedsStorageBuffersInFragmentStageAndHaveNone('storage', encoderType);\n\n    const pipelineA = t.createBindingStatePipeline(\n      encoderType,\n      { a: 0, b: 1, out: 2 },\n      'storage',\n      'a.value - b.value'\n    );\n    const pipelineB = t.createBindingStatePipeline(\n      encoderType,\n      { a: 0, b: 1, out: 2 },\n      'storage',\n      'a.value + b.value'\n    );\n\n    const outA = t.makeBufferWithContents(new Int32Array([0]), kBufferUsage);\n    const outB = t.makeBufferWithContents(new Int32Array([0]), kBufferUsage);\n    const bindGroups = {\n      a: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([3]), kBufferUsage),\n        'read-only-storage',\n        encoderType\n      ),\n      b: t.createBindGroup(\n        t.makeBufferWithContents(new Int32Array([2]), kBufferUsage),\n        'read-only-storage',\n        encoderType\n      ),\n      outA: t.createBindGroup(outA, 'storage', encoderType),\n      outB: t.createBindGroup(outB, 'storage', encoderType),\n    };\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: ['r32sint'] },\n    });\n    encoder.setBindGroup(0, bindGroups.a);\n    encoder.setBindGroup(1, bindGroups.b);\n\n    t.setPipeline(encoder, pipelineA);\n    encoder.setBindGroup(2, bindGroups.outA);\n    t.dispatchOrDraw(encoder);\n\n    t.setPipeline(encoder, pipelineB);\n    encoder.setBindGroup(2, bindGroups.outB);\n    t.dispatchOrDraw(encoder);\n\n    validateFinishAndSubmit(true, true);\n\n    t.expectGPUBufferValuesEqual(outA, new Int32Array([1]));\n    t.expectGPUBufferValuesEqual(outB, new Int32Array([5]));\n  });\n"],"mappings":"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"}