{"version":3,"file":"basic.spec.js","names":["description","makeTestGroup","memcpy","AllFeaturesMaxLimitsGPUTest","g","test","fn","t","encoder","device","createCommandEncoder","cmd","finish","queue","submit","data","Uint32Array","src","createBufferTracked","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","dst","getMappedRange","unmap","mid","createTextureTracked","width","height","depthOrArrayLayers","format","GPUTextureUsage","copyBufferToTexture","buffer","bytesPerRow","texture","mipLevel","origin","x","y","z","copyTextureToBuffer","expectGPUBufferValuesEqual","midDesc","mid1","mid2","copyTextureToTexture"],"sources":["../../../../../src/webgpu/api/operation/command_buffer/basic.spec.ts"],"sourcesContent":["export const description = `\nBasic tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { memcpy } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('empty').fn(t => {\n  const encoder = t.device.createCommandEncoder();\n  const cmd = encoder.finish();\n  t.device.queue.submit([cmd]);\n});\n\ng.test('b2t2b').fn(t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.createBufferTracked({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  memcpy({ src: data }, { dst: src.getMappedRange() });\n  src.unmap();\n\n  const dst = t.createBufferTracked({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const mid = t.createTextureTracked({\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, data);\n});\n\ng.test('b2t2t2b').fn(t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.createBufferTracked({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  memcpy({ src: data }, { dst: src.getMappedRange() });\n  src.unmap();\n\n  const dst = t.createBufferTracked({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const midDesc: GPUTextureDescriptor = {\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  };\n  const mid1 = t.createTextureTracked(midDesc);\n  const mid2 = t.createTextureTracked(midDesc);\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  encoder.copyTextureToTexture(\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, data);\n});\n"],"mappings":"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"}