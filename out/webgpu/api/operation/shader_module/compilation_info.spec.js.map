{"version":3,"file":"compilation_info.spec.js","names":["description","makeTestGroup","assert","AllFeaturesMaxLimitsGPUTest","g","kValidShaderSources","valid","name","_code","kInvalidShaderSources","_errorLine","_errorLinePos","kAllShaderSources","test","desc","params","u","combineWithParams","fn","t","shaderModule","expectGPUError","device","createShaderModule","code","info","getCompilationInfo","expect","GPUCompilationInfo","errorCount","message","messages","type","foundAppropriateError","lineNum","linePos","undefined","offset","length","lineOffset","i","indexOf","expectedOffset"],"sources":["../../../../../src/webgpu/api/operation/shader_module/compilation_info.spec.ts"],"sourcesContent":["export const description = `\nShaderModule CompilationInfo tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\nconst kValidShaderSources = [\n  {\n    valid: true,\n    name: 'ascii',\n    _code: `\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: true,\n    name: 'unicode',\n    _code: `\n      // 頂点シェーダー 👩‍💻\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n];\n\nconst kInvalidShaderSources = [\n  {\n    valid: false,\n    name: 'ascii',\n    _errorLine: 4,\n    _code: `\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        // Expected Error: unknown function 'unknown'\n        return unknown(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: false,\n    name: 'unicode',\n    _errorLine: 5,\n    _code: `\n      // 頂点シェーダー 👩‍💻\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        // Expected Error: unknown function 'unknown'\n        return unknown(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: false,\n    name: 'carriage-return',\n    _errorLine: 5,\n    _code:\n      `\n      @vertex fn main() -> @builtin(position) vec4<f32> {` +\n      '\\r\\n' +\n      `\n        // Expected Error: unknown function 'unknown'\n        return unknown(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: false,\n    name: 'unicode-multi-byte-characters',\n    _errorLine: 1,\n    // This shader is simplistic enough to always result in the same error position.\n    // Generally, various backends may choose to report the error at different positions within the\n    // line, so it's difficult to meaningfully validate them.\n    _errorLinePos: 19,\n    _code: `/*🐈🐈🐈🐈🐈🐈🐈*/?\n// Expected Error: invalid character found`,\n  },\n];\n\nconst kAllShaderSources = [...kValidShaderSources, ...kInvalidShaderSources];\n\ng.test('getCompilationInfo_returns')\n  .desc(\n    `\n    Test that getCompilationInfo() can be called on any ShaderModule.\n\n    - Test for both valid and invalid shader modules.\n    - Test for shader modules containing only ASCII and those containing unicode characters.\n    - Test that the compilation info for valid shader modules contains no errors.\n    - Test that the compilation info for invalid shader modules contains at least one error.`\n  )\n  .params(u => u.combineWithParams(kAllShaderSources))\n  .fn(async t => {\n    const { _code, valid } = t.params;\n\n    const shaderModule = t.expectGPUError(\n      'validation',\n      () => {\n        return t.device.createShaderModule({ code: _code });\n      },\n      !valid\n    );\n\n    const info = await shaderModule.getCompilationInfo();\n\n    t.expect(\n      info instanceof GPUCompilationInfo,\n      'Expected a GPUCompilationInfo object to be returned'\n    );\n\n    // Expect that we get zero error messages from a valid shader.\n    // Message types other than errors are OK.\n    let errorCount = 0;\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        errorCount++;\n      }\n    }\n    if (valid) {\n      t.expect(errorCount === 0, \"Expected zero GPUCompilationMessages of type 'error'\");\n    } else {\n      t.expect(errorCount > 0, \"Expected at least one GPUCompilationMessages of type 'error'\");\n    }\n  });\n\ng.test('line_number_and_position')\n  .desc(\n    `\n    Test that line numbers reported by compilationInfo either point at an appropriate line and\n    position or at 0:0, indicating an unknown position.\n\n    - Test for invalid shader modules containing containing at least one error.\n    - Test for shader modules containing only ASCII and those containing unicode characters.`\n  )\n  .params(u => u.combineWithParams(kInvalidShaderSources))\n  .fn(async t => {\n    const { _code, _errorLine, _errorLinePos } = t.params;\n\n    const shaderModule = t.expectGPUError('validation', () => {\n      return t.device.createShaderModule({ code: _code });\n    });\n\n    const info = await shaderModule.getCompilationInfo();\n\n    let foundAppropriateError = false;\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        // Some backends may not be able to indicate a precise location for the error. In those\n        // cases a line and position of 0 should be reported.\n        // If a line is reported, it should point at the correct line (1-based).\n        t.expect(\n          (message.lineNum === 0) === (message.linePos === 0),\n          `Got message.lineNum ${message.lineNum}, .linePos ${message.linePos}, but GPUCompilationMessage should specify both or neither`\n        );\n\n        if (message.lineNum === 0) {\n          foundAppropriateError = true;\n          break;\n        }\n\n        if (message.lineNum === _errorLine) {\n          foundAppropriateError = true;\n          if (_errorLinePos !== undefined) {\n            t.expect(\n              message.linePos === _errorLinePos,\n              `Got message.linePos ${message.linePos}, expected ${_errorLinePos}`\n            );\n          }\n          break;\n        }\n      }\n    }\n    t.expect(\n      foundAppropriateError,\n      'Expected to find an error which corresponded with the erroneous line'\n    );\n  });\n\ng.test('offset_and_length')\n  .desc(\n    `Test that message offsets and lengths are valid and align with any reported lineNum and linePos.\n\n    - Test for valid and invalid shader modules.\n    - Test for shader modules containing only ASCII and those containing unicode characters.`\n  )\n  .params(u => u.combineWithParams(kAllShaderSources))\n  .fn(async t => {\n    const { _code, valid } = t.params;\n\n    const shaderModule = t.expectGPUError(\n      'validation',\n      () => {\n        return t.device.createShaderModule({ code: _code });\n      },\n      !valid\n    );\n\n    const info = await shaderModule.getCompilationInfo();\n\n    for (const message of info.messages) {\n      // Any offsets and lengths should reference valid spans of the shader code.\n      t.expect(\n        message.offset <= _code.length && message.offset + message.length <= _code.length,\n        'message.offset and .length should be within the shader source'\n      );\n\n      // If a valid line number and position are given, the offset should point the the same\n      // location in the shader source.\n      if (message.lineNum !== 0 && message.linePos !== 0) {\n        let lineOffset = 0;\n        for (let i = 0; i < message.lineNum - 1; ++i) {\n          lineOffset = _code.indexOf('\\n', lineOffset);\n          assert(lineOffset !== -1);\n          lineOffset += 1;\n        }\n\n        const expectedOffset = lineOffset + message.linePos - 1;\n        t.expect(\n          message.offset === expectedOffset,\n          `message.lineNum (${message.lineNum}) and .linePos (${message.linePos}) point to a different offset (${lineOffset} + ${message.linePos} - 1 = ${expectedOffset}) than .offset (${message.offset})`\n        );\n      }\n    }\n  });\n"],"mappings":"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"}