{"version":3,"file":"anisotropy.spec.js","names":["description","makeTestGroup","assert","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","checkElementsEqual","TexelView","kRTSize","kBytesPerRow","xMiddle","kColorAttachmentFormat","kTextureFormat","colors","Uint8Array","checkerColors","SamplerAnisotropicFilteringSlantedPlaneTest","copyRenderTargetToBuffer","rt","byteLength","buffer","createBufferTracked","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","commandEncoder","device","createCommandEncoder","copyTextureToBuffer","texture","mipLevel","origin","bytesPerRow","rowsPerImage","width","height","depthOrArrayLayers","queue","submit","finish","init","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","drawSlantedPlane","textureView","sampler","undefined","bindGroup","createBindGroup","entries","binding","resource","getBindGroupLayout","colorAttachment","createTextureTracked","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachmentView","createView","encoder","pass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setBindGroup","draw","end","test","desc","fn","t","textureSize","mipLevelCount","TEXTURE_BINDING","textureEncoder","bufferSize","data","o","c","cid","color","makeBufferWithContents","copyBufferToTexture","results","maxAnisotropy","createSampler","magFilter","minFilter","mipmapFilter","result","readGPUBufferRangeTyped","type","typedLength","push","check0","warn","check1","expect","cleanup","paramsSimple","_results","coord","x","y","expected","_generateWarningOnly","createTextureFromTexelViewsMultipleMipmaps","map","value","fromTexelsAsBytes","_coords","params","pixelComparisons","entry","exp","expectSinglePixelBetweenTwoValuesIn2DTexture","generateWarningOnly","expectSinglePixelComparisonsAreOkInTexture"],"sources":["../../../../../src/webgpu/api/operation/sampling/anisotropy.spec.ts"],"sourcesContent":["export const description = `\nTests the behavior of anisotropic filtering.\n\nTODO:\nNote that anisotropic filtering is never guaranteed to occur, but we might be able to test some\nthings. If there are no guarantees we can issue warnings instead of failures. Ideas:\n  - No *more* than the provided maxAnisotropy samples are used, by testing how many unique\n    sample values come out of the sample operation.\n  - Check anisotropy is done in the correct direction (by having a 2D gradient and checking we get\n    more of the color in the correct direction).\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { PerPixelComparison } from '../../../util/texture/texture_ok.js';\n\nconst kRTSize = 16;\nconst kBytesPerRow = 256;\nconst xMiddle = kRTSize / 2; // we check the pixel value in the middle of the render target\nconst kColorAttachmentFormat = 'rgba8unorm';\nconst kTextureFormat = 'rgba8unorm';\nconst colors = [\n  new Uint8Array([0xff, 0x00, 0x00, 0xff]), // miplevel = 0\n  new Uint8Array([0x00, 0xff, 0x00, 0xff]), // miplevel = 1\n  new Uint8Array([0x00, 0x00, 0xff, 0xff]), // miplevel = 2\n];\nconst checkerColors = [\n  new Uint8Array([0xff, 0x00, 0x00, 0xff]),\n  new Uint8Array([0x00, 0xff, 0x00, 0xff]),\n];\n\n// renders texture a slanted plane placed in a specific way\nclass SamplerAnisotropicFilteringSlantedPlaneTest extends AllFeaturesMaxLimitsGPUTest {\n  copyRenderTargetToBuffer(rt: GPUTexture): GPUBuffer {\n    const byteLength = kRTSize * kBytesPerRow;\n    const buffer = this.createBufferTracked({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToBuffer(\n      { texture: rt, mipLevel: 0, origin: [0, 0, 0] },\n      { buffer, bytesPerRow: kBytesPerRow, rowsPerImage: kRTSize },\n      { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 }\n    );\n    this.queue.submit([commandEncoder.finish()]);\n\n    return buffer;\n  }\n\n  private pipeline: GPURenderPipeline | undefined;\n  override async init(): Promise<void> {\n    await super.init();\n\n    this.pipeline = this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Outputs {\n              @builtin(position) Position : vec4<f32>,\n              @location(0) fragUV : vec2<f32>,\n            };\n\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32) -> Outputs {\n              var position : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-0.5, 0.5, -0.5),\n                vec3<f32>(0.5, 0.5, -0.5),\n                vec3<f32>(-0.5, 0.5, 0.5),\n                vec3<f32>(-0.5, 0.5, 0.5),\n                vec3<f32>(0.5, 0.5, -0.5),\n                vec3<f32>(0.5, 0.5, 0.5));\n              // uv is pre-scaled to mimic repeating tiled texture\n              var uv : array<vec2<f32>, 6> = array<vec2<f32>, 6>(\n                vec2<f32>(0.0, 0.0),\n                vec2<f32>(1.0, 0.0),\n                vec2<f32>(0.0, 50.0),\n                vec2<f32>(0.0, 50.0),\n                vec2<f32>(1.0, 0.0),\n                vec2<f32>(1.0, 50.0));\n              // draw a slanted plane in a specific way\n              let matrix : mat4x4<f32> = mat4x4<f32>(\n                vec4<f32>(-1.7320507764816284, 1.8322050568049563e-16, -6.176817699518044e-17, -6.170640314703498e-17),\n                vec4<f32>(-2.1211504944260596e-16, -1.496108889579773, 0.5043753981590271, 0.5038710236549377),\n                vec4<f32>(0.0, -43.63650894165039, -43.232173919677734, -43.18894577026367),\n                vec4<f32>(0.0, 21.693578720092773, 21.789791107177734, 21.86800193786621));\n\n              var output : Outputs;\n              output.fragUV = uv[VertexIndex];\n              output.Position = matrix * vec4<f32>(position[VertexIndex], 1.0);\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `\n            @group(0) @binding(0) var sampler0 : sampler;\n            @group(0) @binding(1) var texture0 : texture_2d<f32>;\n\n            @fragment fn main(\n              @builtin(position) FragCoord : vec4<f32>,\n              @location(0) fragUV: vec2<f32>)\n              -> @location(0) vec4<f32> {\n                return textureSample(texture0, sampler0, fragUV);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  // return the render target texture object\n  drawSlantedPlane(textureView: GPUTextureView, sampler: GPUSampler): GPUTexture {\n    // make sure it's already initialized\n    assert(this.pipeline !== undefined);\n\n    const bindGroup = this.device.createBindGroup({\n      entries: [\n        { binding: 0, resource: sampler },\n        { binding: 1, resource: textureView },\n      ],\n      layout: this.pipeline.getBindGroupLayout(0),\n    });\n\n    const colorAttachment = this.createTextureTracked({\n      format: kColorAttachmentFormat,\n      size: { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(this.pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.draw(6);\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    return colorAttachment;\n  }\n}\n\nexport const g = makeTestGroup(TextureTestMixin(SamplerAnisotropicFilteringSlantedPlaneTest));\n\ng.test('anisotropic_filter_checkerboard')\n  .desc(\n    `Anisotropic filter rendering tests that draws a slanted plane and samples from a texture\n    that only has a top level mipmap, the content of which is like a checkerboard.\n    We will check the rendering result using sampler with maxAnisotropy values to be\n    different from each other, as the sampling rate is different.\n    We will also check if those large maxAnisotropy values are clamped so that rendering is the\n    same as the supported upper limit say 16.\n    A similar webgl demo is at https://jsfiddle.net/yqnbez24`\n  )\n  .fn(async t => {\n    // init texture with only a top level mipmap\n    const textureSize = 32;\n    const texture = t.createTextureTracked({\n      mipLevelCount: 1,\n      size: { width: textureSize, height: textureSize, depthOrArrayLayers: 1 },\n      format: kTextureFormat,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const textureEncoder = t.device.createCommandEncoder();\n\n    const bufferSize = kBytesPerRow * textureSize; // RGBA8 for each pixel (256 > 16 * 4)\n\n    // init checkerboard texture data\n    const data: Uint8Array = new Uint8Array(bufferSize);\n    for (let r = 0; r < textureSize; r++) {\n      const o = r * kBytesPerRow;\n      for (let c = o, end = o + textureSize * 4; c < end; c += 4) {\n        const cid = (r + (c - o) / 4) % 2;\n        const color = checkerColors[cid];\n        data[c] = color[0];\n        data[c + 1] = color[1];\n        data[c + 2] = color[2];\n        data[c + 3] = color[3];\n      }\n    }\n    const buffer = t.makeBufferWithContents(\n      data,\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n    );\n    const bytesPerRow = kBytesPerRow;\n    const rowsPerImage = textureSize;\n\n    textureEncoder.copyBufferToTexture(\n      {\n        buffer,\n        bytesPerRow,\n        rowsPerImage,\n      },\n      {\n        texture,\n        mipLevel: 0,\n        origin: [0, 0, 0],\n      },\n      [textureSize, textureSize, 1]\n    );\n\n    t.device.queue.submit([textureEncoder.finish()]);\n\n    const textureView = texture.createView();\n    const byteLength = kRTSize * kBytesPerRow;\n    const results = [];\n\n    for (const maxAnisotropy of [1, 16, 1024]) {\n      const sampler = t.device.createSampler({\n        magFilter: 'linear',\n        minFilter: 'linear',\n        mipmapFilter: 'linear',\n        maxAnisotropy,\n      });\n      const result = await t.readGPUBufferRangeTyped(\n        t.copyRenderTargetToBuffer(t.drawSlantedPlane(textureView, sampler)),\n        { type: Uint8Array, typedLength: byteLength }\n      );\n      results.push(result);\n    }\n\n    const check0 = checkElementsEqual(results[0].data, results[1].data);\n    if (check0 === undefined) {\n      t.warn('Render results with sampler.maxAnisotropy being 1 and 16 should be different.');\n    }\n    const check1 = checkElementsEqual(results[1].data, results[2].data);\n    if (check1 !== undefined) {\n      t.expect(\n        false,\n        'Render results with sampler.maxAnisotropy being 16 and 1024 should be the same.'\n      );\n    }\n\n    for (const result of results) {\n      result.cleanup();\n    }\n  });\n\ng.test('anisotropic_filter_mipmap_color')\n  .desc(\n    `Anisotropic filter rendering tests that draws a slanted plane and samples from a texture\n    containing mipmaps of different colors. Given the same fragment with dFdx and dFdy for uv being different,\n    sampler with bigger maxAnisotropy value tends to bigger mip levels to provide better details.\n    We can then look at the color of the fragment to know which mip level is being sampled from and to see\n    if it fits expectations.\n    A similar webgl demo is at https://jsfiddle.net/t8k7c95o/5/`\n  )\n  .paramsSimple([\n    {\n      maxAnisotropy: 1,\n      _results: [\n        { coord: { x: xMiddle, y: 2 }, expected: colors[2] },\n        { coord: { x: xMiddle, y: 6 }, expected: [colors[0], colors[1]] },\n      ],\n      _generateWarningOnly: false,\n    },\n    {\n      maxAnisotropy: 4,\n      _results: [\n        { coord: { x: xMiddle, y: 2 }, expected: [colors[0], colors[1]] },\n        { coord: { x: xMiddle, y: 6 }, expected: colors[0] },\n      ],\n      _generateWarningOnly: true,\n    },\n  ])\n  .fn(t => {\n    const texture = t.createTextureFromTexelViewsMultipleMipmaps(\n      colors.map(value => TexelView.fromTexelsAsBytes(kTextureFormat, _coords => value)),\n      { size: [4, 4, 1], usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING }\n    );\n    const textureView = texture.createView();\n\n    const sampler = t.device.createSampler({\n      magFilter: 'linear',\n      minFilter: 'linear',\n      mipmapFilter: 'linear',\n      maxAnisotropy: t.params.maxAnisotropy,\n    });\n\n    const colorAttachment = t.drawSlantedPlane(textureView, sampler);\n\n    const pixelComparisons: PerPixelComparison<Uint8Array>[] = [];\n    for (const entry of t.params._results) {\n      if (entry.expected instanceof Uint8Array) {\n        // equal exactly one color\n        pixelComparisons.push({ coord: entry.coord, exp: entry.expected });\n      } else {\n        // a lerp between two colors\n        // MAINTENANCE_TODO: Unify comparison to allow for a strict in-between comparison to support\n        //                   this kind of expectation.\n        t.expectSinglePixelBetweenTwoValuesIn2DTexture(\n          colorAttachment,\n          kColorAttachmentFormat,\n          entry.coord,\n          {\n            exp: entry.expected as [Uint8Array, Uint8Array],\n            generateWarningOnly: t.params._generateWarningOnly,\n          }\n        );\n      }\n    }\n    t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, pixelComparisons);\n  });\n"],"mappings":"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"}