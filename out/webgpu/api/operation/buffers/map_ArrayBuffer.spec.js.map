{"version":3,"file":"map_ArrayBuffer.spec.js","names":["description","makeTestGroup","timeout","AllFeaturesMaxLimitsGPUTest","checkElementsEqual","g","test","desc","params","u","combine","fn","t","transfer","mapMode","kSize","initialData","Uint32Array","ArrayBuffer","i","length","buf","makeBufferWithContents","GPUBufferUsage","MAP_WRITE","MAP_READ","mapAsync","GPUMapMode","ab1","getMappedRange","expect","byteLength","mc","MessageChannel","ab2Promise","Promise","resolve","port2","onmessage","ev","fail","data","shouldThrow","port1","postMessage","ab2","ab2Data","expectOK","ab1Data","abs2NewData","slice","reverse","unmap"],"sources":["../../../../../src/webgpu/api/operation/buffers/map_ArrayBuffer.spec.ts"],"sourcesContent":["export const description = `\nTests for the behavior of ArrayBuffers returned by getMappedRange.\n\nTODO: Add tests that transfer to another thread instead of just using MessageChannel.\nTODO: Add tests for any other Web APIs that can detach ArrayBuffers.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { timeout } from '../../../../common/util/timeout.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('postMessage')\n  .desc(\n    `Using postMessage to send a getMappedRange-returned ArrayBuffer throws a TypeError\n     if it was included in the transfer list. Otherwise, it makes a copy.\n    Test combinations of transfer={false, true}, mapMode={read,write}.`\n  )\n  .params(u =>\n    u //\n      .combine('transfer', [false, true])\n      .combine('mapMode', ['READ', 'WRITE'] as const)\n  )\n  .fn(async t => {\n    const { transfer, mapMode } = t.params;\n    const kSize = 1024;\n\n    // Populate initial data.\n    const initialData = new Uint32Array(new ArrayBuffer(kSize));\n    for (let i = 0; i < initialData.length; ++i) {\n      initialData[i] = i;\n    }\n\n    const buf = t.makeBufferWithContents(\n      initialData,\n      mapMode === 'WRITE' ? GPUBufferUsage.MAP_WRITE : GPUBufferUsage.MAP_READ\n    );\n\n    await buf.mapAsync(GPUMapMode[mapMode]);\n    const ab1 = buf.getMappedRange();\n    t.expect(ab1.byteLength === kSize, 'ab1 should have the size of the buffer');\n\n    const mc = new MessageChannel();\n    const ab2Promise = new Promise<ArrayBuffer>(resolve => {\n      mc.port2.onmessage = ev => {\n        if (transfer) {\n          t.fail(\n            `postMessage with ab1 in transfer list should not be received. Unexpected message: ${ev.data}`\n          );\n        } else {\n          resolve(ev.data);\n        }\n      };\n    });\n\n    if (transfer) {\n      t.shouldThrow('TypeError', () => mc.port1.postMessage(ab1, [ab1]));\n      // Wait to make sure the postMessage isn't received.\n      await new Promise(resolve => timeout(resolve, 100));\n    } else {\n      mc.port1.postMessage(ab1);\n    }\n    t.expect(ab1.byteLength === kSize, 'after postMessage, ab1 should not be detached');\n\n    if (!transfer) {\n      const ab2 = await ab2Promise;\n      t.expect(ab2.byteLength === kSize, 'ab2 should be the same size');\n      const ab2Data = new Uint32Array(ab2, 0, initialData.length);\n      // ab2 should have the same initial contents.\n      t.expectOK(checkElementsEqual(ab2Data, initialData));\n\n      // Mutations to ab2 should not be visible in ab1.\n      const ab1Data = new Uint32Array(ab1, 0, initialData.length);\n      const abs2NewData = initialData.slice().reverse();\n      for (let i = 0; i < ab2Data.length; ++i) {\n        ab2Data[i] = abs2NewData[i];\n      }\n      t.expectOK(checkElementsEqual(ab1Data, initialData));\n      t.expectOK(checkElementsEqual(ab2Data, abs2NewData));\n    }\n\n    buf.unmap();\n    t.expect(ab1.byteLength === 0, 'after unmap, ab1 should be detached');\n\n    // Transferring an already-detached ArrayBuffer is a DataCloneError.\n    t.shouldThrow('DataCloneError', () => mc.port1.postMessage(ab1, [ab1]));\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,OAAO,QAAQ,oCAAoC;AAC5D,SAASC,2BAA2B,QAAQ,sBAAsB;AAClE,SAASC,kBAAkB,QAAQ,iCAAiC;;AAEpE,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACE,2BAA2B,CAAC;;AAE3DE,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC;AAClBC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAClCA,OAAO,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,CAAU;AAClD,CAAC;AACAC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,QAAQ,EAAEC,OAAO,CAAC,CAAC,GAAGF,CAAC,CAACJ,MAAM;EACtC,MAAMO,KAAK,GAAG,IAAI;;EAElB;EACA,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,IAAIC,WAAW,CAACH,KAAK,CAAC,CAAC;EAC3D,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;IAC3CH,WAAW,CAACG,CAAC,CAAC,GAAGA,CAAC;EACpB;;EAEA,MAAME,GAAG,GAAGT,CAAC,CAACU,sBAAsB;IAClCN,WAAW;IACXF,OAAO,KAAK,OAAO,GAAGS,cAAc,CAACC,SAAS,GAAGD,cAAc,CAACE;EAClE,CAAC;;EAED,MAAMJ,GAAG,CAACK,QAAQ,CAACC,UAAU,CAACb,OAAO,CAAC,CAAC;EACvC,MAAMc,GAAG,GAAGP,GAAG,CAACQ,cAAc,CAAC,CAAC;EAChCjB,CAAC,CAACkB,MAAM,CAACF,GAAG,CAACG,UAAU,KAAKhB,KAAK,EAAE,wCAAwC,CAAC;;EAE5E,MAAMiB,EAAE,GAAG,IAAIC,cAAc,CAAC,CAAC;EAC/B,MAAMC,UAAU,GAAG,IAAIC,OAAO,CAAc,CAAAC,OAAO,KAAI;IACrDJ,EAAE,CAACK,KAAK,CAACC,SAAS,GAAG,CAAAC,EAAE,KAAI;MACzB,IAAI1B,QAAQ,EAAE;QACZD,CAAC,CAAC4B,IAAI;UACH,qFAAoFD,EAAE,CAACE,IAAK;QAC/F,CAAC;MACH,CAAC,MAAM;QACLL,OAAO,CAACG,EAAE,CAACE,IAAI,CAAC;MAClB;IACF,CAAC;EACH,CAAC,CAAC;;EAEF,IAAI5B,QAAQ,EAAE;IACZD,CAAC,CAAC8B,WAAW,CAAC,WAAW,EAAE,MAAMV,EAAE,CAACW,KAAK,CAACC,WAAW,CAAChB,GAAG,EAAE,CAACA,GAAG,CAAC,CAAC,CAAC;IAClE;IACA,MAAM,IAAIO,OAAO,CAAC,CAAAC,OAAO,KAAIlC,OAAO,CAACkC,OAAO,EAAE,GAAG,CAAC,CAAC;EACrD,CAAC,MAAM;IACLJ,EAAE,CAACW,KAAK,CAACC,WAAW,CAAChB,GAAG,CAAC;EAC3B;EACAhB,CAAC,CAACkB,MAAM,CAACF,GAAG,CAACG,UAAU,KAAKhB,KAAK,EAAE,+CAA+C,CAAC;;EAEnF,IAAI,CAACF,QAAQ,EAAE;IACb,MAAMgC,GAAG,GAAG,MAAMX,UAAU;IAC5BtB,CAAC,CAACkB,MAAM,CAACe,GAAG,CAACd,UAAU,KAAKhB,KAAK,EAAE,6BAA6B,CAAC;IACjE,MAAM+B,OAAO,GAAG,IAAI7B,WAAW,CAAC4B,GAAG,EAAE,CAAC,EAAE7B,WAAW,CAACI,MAAM,CAAC;IAC3D;IACAR,CAAC,CAACmC,QAAQ,CAAC3C,kBAAkB,CAAC0C,OAAO,EAAE9B,WAAW,CAAC,CAAC;;IAEpD;IACA,MAAMgC,OAAO,GAAG,IAAI/B,WAAW,CAACW,GAAG,EAAE,CAAC,EAAEZ,WAAW,CAACI,MAAM,CAAC;IAC3D,MAAM6B,WAAW,GAAGjC,WAAW,CAACkC,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACjD,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,OAAO,CAAC1B,MAAM,EAAE,EAAED,CAAC,EAAE;MACvC2B,OAAO,CAAC3B,CAAC,CAAC,GAAG8B,WAAW,CAAC9B,CAAC,CAAC;IAC7B;IACAP,CAAC,CAACmC,QAAQ,CAAC3C,kBAAkB,CAAC4C,OAAO,EAAEhC,WAAW,CAAC,CAAC;IACpDJ,CAAC,CAACmC,QAAQ,CAAC3C,kBAAkB,CAAC0C,OAAO,EAAEG,WAAW,CAAC,CAAC;EACtD;;EAEA5B,GAAG,CAAC+B,KAAK,CAAC,CAAC;EACXxC,CAAC,CAACkB,MAAM,CAACF,GAAG,CAACG,UAAU,KAAK,CAAC,EAAE,qCAAqC,CAAC;;EAErE;EACAnB,CAAC,CAAC8B,WAAW,CAAC,gBAAgB,EAAE,MAAMV,EAAE,CAACW,KAAK,CAACC,WAAW,CAAChB,GAAG,EAAE,CAACA,GAAG,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC"}