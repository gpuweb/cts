{"version":3,"file":"map_detach.spec.js","names":["description","makeTestGroup","getGPU","assert","GPUConst","AllFeaturesMaxLimitsGPUTest","g","test","desc","paramsSubcasesOnly","u","combine","combineWithParams","usage","BufferUsage","COPY_SRC","MAP_WRITE","COPY_DST","MAP_READ","mapMode","MapMode","WRITE","READ","unmap","destroy","deviceDestroy","unless","p","mappedAtCreation","undefined","fn","t","params","device","adapter","rec","requestAdapter","requestDeviceTracked","buffer","trackForCleanup","createBuffer","size","mapAsync","arrayBuffer","getMappedRange","view","Uint8Array","expect","byteLength","length"],"sources":["../../../../../src/webgpu/api/operation/buffers/map_detach.spec.ts"],"sourcesContent":["export const description = `\n  Tests that TypedArrays created when mapping a GPUBuffer are detached when the\n  buffer is unmapped or destroyed.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { getGPU } from '../../../../common/util/navigator_gpu.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { GPUConst } from '../../../constants.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('while_mapped')\n  .desc(\n    `\n    Test that a mapped buffers are able to properly detach.\n    - Tests {mappable, unmappable mapAtCreation, mappable mapAtCreation}\n    - Tests while {mapped, mapped at creation, mapped at creation then unmapped and mapped again}\n    - When {unmap, destroy, unmap && destroy, device.destroy} is called`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('mappedAtCreation', [false, true])\n      .combineWithParams([\n        { usage: GPUConst.BufferUsage.COPY_SRC },\n        { usage: GPUConst.BufferUsage.MAP_WRITE | GPUConst.BufferUsage.COPY_SRC },\n        { usage: GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.MAP_READ },\n        {\n          usage: GPUConst.BufferUsage.MAP_WRITE | GPUConst.BufferUsage.COPY_SRC,\n          mapMode: GPUConst.MapMode.WRITE,\n        },\n        {\n          usage: GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.MAP_READ,\n          mapMode: GPUConst.MapMode.READ,\n        },\n      ])\n      .combineWithParams([\n        { unmap: true, destroy: false },\n        { unmap: false, destroy: true },\n        { unmap: true, destroy: true },\n        { unmap: false, destroy: false, deviceDestroy: true },\n      ])\n      .unless(p => p.mappedAtCreation === false && p.mapMode === undefined)\n  )\n  .fn(async t => {\n    const { usage, mapMode, mappedAtCreation, unmap, destroy, deviceDestroy } = t.params;\n\n    let device: GPUDevice = t.device;\n    if (deviceDestroy) {\n      const adapter = await getGPU(t.rec).requestAdapter();\n      assert(adapter !== null);\n      device = await t.requestDeviceTracked(adapter);\n    }\n    const buffer = t.trackForCleanup(\n      device.createBuffer({\n        size: 4,\n        usage,\n        mappedAtCreation,\n      })\n    );\n\n    if (mapMode !== undefined) {\n      if (mappedAtCreation) {\n        buffer.unmap();\n      }\n      await buffer.mapAsync(mapMode);\n    }\n\n    const arrayBuffer = buffer.getMappedRange();\n    const view = new Uint8Array(arrayBuffer);\n    t.expect(arrayBuffer.byteLength === 4);\n    t.expect(view.length === 4);\n\n    if (unmap) buffer.unmap();\n    if (destroy) buffer.destroy();\n    if (deviceDestroy) device.destroy();\n\n    t.expect(arrayBuffer.byteLength === 0, 'ArrayBuffer should be detached');\n    t.expect(view.byteLength === 0, 'ArrayBufferView should be detached');\n  });\n"],"mappings":"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"}