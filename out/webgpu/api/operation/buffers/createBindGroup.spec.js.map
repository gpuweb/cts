{"version":3,"file":"createBindGroup.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","g","test","desc","paramsSubcasesOnly","u","combine","undefined","filter","p","bindBufferResource","offset","size","fn","t","extraBufferSize","params","bufferSize","bufferData","Uint8Array","i","buffer","makeBufferWithContents","GPUBufferUsage","COPY_DST","COPY_SRC","STORAGE","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","resource","bg","createBindGroup","entries","binding","getBindGroupLayout","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectOffset","expectSize","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/api/operation/buffers/createBindGroup.spec.ts"],"sourcesContent":["export const description = `\nBuffer tests in createBindGroup.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('buffer_binding_resource')\n  .desc(\n    `Validate the correctness of the buffer binding resource by filling the buffer with\n    testable data, clearing buffer in shader, and verifying the content of the whole buffer:\n  - covers the whole buffer\n  - covers the beginning of the buffer\n  - covers the end of the buffer\n  - covers neither the beginning nor the end of the buffer`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('bindBufferResource', [false, true] as const)\n      .combine('offset', [0, 256, undefined])\n      .combine('size', [4, 8, undefined])\n      .combine('extraBufferSize', [0, 8])\n      // offset and size don't matter if bindBufferResource is true\n      .filter(p => !p.bindBufferResource || (p.offset === undefined && p.size === undefined))\n  )\n  .fn(t => {\n    const { bindBufferResource, offset, size, extraBufferSize } = t.params;\n\n    const bufferSize = (offset ?? 0) + (size ?? 16) + extraBufferSize;\n    const bufferData = new Uint8Array(bufferSize);\n    for (let i = 0; i < bufferSize; ++i) {\n      bufferData[i] = i + 1;\n    }\n\n    const buffer = t.makeBufferWithContents(\n      bufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n    );\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            @group(0) @binding(0) var<storage, read_write> buffer : array<u32>;\n\n            @compute @workgroup_size(1) fn main() {\n              for (var i = 0u; i < arrayLength(&buffer); i = i + 1u) {\n                buffer[i] = 0;\n              }\n              return;\n            }`,\n        }),\n      },\n    });\n\n    const resource = bindBufferResource ? buffer : { buffer, offset, size };\n    const bg = t.device.createBindGroup({\n      entries: [{ binding: 0, resource }],\n      layout: pipeline.getBindGroupLayout(0),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    const expectOffset = bindBufferResource ? 0 : offset ?? 0;\n    const expectSize = bindBufferResource ? bufferSize : size ?? bufferSize - expectOffset;\n\n    for (let i = 0; i < expectSize; ++i) {\n      bufferData[expectOffset + i] = 0;\n    }\n\n    t.expectGPUBufferValuesEqual(buffer, bufferData);\n  });\n"],"mappings":"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"}