{"version":3,"file":"onSubmittedWorkDone.spec.js","names":["description","makeTestGroup","range","AllFeaturesMaxLimitsGPUTest","g","test","desc","fn","t","queue","onSubmittedWorkDone","buffer","createBufferTracked","size","usage","GPUBufferUsage","COPY_DST","writeBuffer","Uint8Array","i","promises","Promise","all","lastResolved","push","then","expect"],"sources":["../../../../src/webgpu/api/operation/onSubmittedWorkDone.spec.ts"],"sourcesContent":["export const description = `\nTests for the behavior of GPUQueue.onSubmittedWorkDone().\n\nNote that any promise timeouts will be detected by the framework.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('without_work')\n  .desc(`Await onSubmittedWorkDone once without having submitted any work.`)\n  .fn(async t => {\n    await t.queue.onSubmittedWorkDone();\n  });\n\ng.test('with_work')\n  .desc(`Await onSubmittedWorkDone once after submitting some work (writeBuffer).`)\n  .fn(async t => {\n    const buffer = t.createBufferTracked({ size: 4, usage: GPUBufferUsage.COPY_DST });\n    t.queue.writeBuffer(buffer, 0, new Uint8Array(4));\n    await t.queue.onSubmittedWorkDone();\n  });\n\ng.test('many,serial')\n  .desc(`Await 1000 onSubmittedWorkDone calls in serial.`)\n  .fn(async t => {\n    for (let i = 0; i < 1000; ++i) {\n      await t.queue.onSubmittedWorkDone();\n    }\n  });\n\ng.test('many,parallel')\n  .desc(`Await 1000 onSubmittedWorkDone calls in parallel with Promise.all().`)\n  .fn(async t => {\n    const promises = range(1000, () => t.queue.onSubmittedWorkDone());\n    await Promise.all(promises);\n  });\n\ng.test('many,parallel_order')\n  .desc(`Issue 200 onSubmittedWorkDone calls and make sure they resolve in the right order.`)\n  .fn(async t => {\n    const promises = [];\n    let lastResolved = -1;\n    for (const i of range(200, i => i)) {\n      promises.push(\n        t.queue.onSubmittedWorkDone().then(() => {\n          t.expect(i === lastResolved + 1);\n          lastResolved++;\n        })\n      );\n    }\n    await Promise.all(promises);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,KAAK,QAAQ,8BAA8B;AACpD,SAASC,2BAA2B,QAAQ,mBAAmB;;AAE/D,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,2BAA2B,CAAC;;AAE3DC,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;AACnBC,IAAI,CAAE,mEAAkE,CAAC;AACzEC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMA,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAAC,CAAC;AACrC,CAAC,CAAC;;AAEJN,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC;AAChBC,IAAI,CAAE,0EAAyE,CAAC;AAChFC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMG,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC,EAAEC,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAEC,cAAc,CAACC,QAAQ,CAAC,CAAC,CAAC;EACjFR,CAAC,CAACC,KAAK,CAACQ,WAAW,CAACN,MAAM,EAAE,CAAC,EAAE,IAAIO,UAAU,CAAC,CAAC,CAAC,CAAC;EACjD,MAAMV,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAAC,CAAC;AACrC,CAAC,CAAC;;AAEJN,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC;AAClBC,IAAI,CAAE,iDAAgD,CAAC;AACvDC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAE,EAAEA,CAAC,EAAE;IAC7B,MAAMX,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAAC,CAAC;EACrC;AACF,CAAC,CAAC;;AAEJN,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI,CAAE,sEAAqE,CAAC;AAC5EC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMY,QAAQ,GAAGlB,KAAK,CAAC,IAAI,EAAE,MAAMM,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAAC,CAAC,CAAC;EACjE,MAAMW,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;AAC7B,CAAC,CAAC;;AAEJhB,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;AAC1BC,IAAI,CAAE,oFAAmF,CAAC;AAC1FC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMY,QAAQ,GAAG,EAAE;EACnB,IAAIG,YAAY,GAAG,CAAC,CAAC;EACrB,KAAK,MAAMJ,CAAC,IAAIjB,KAAK,CAAC,GAAG,EAAE,CAAAiB,CAAC,KAAIA,CAAC,CAAC,EAAE;IAClCC,QAAQ,CAACI,IAAI;MACXhB,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAAC,CAAC,CAACe,IAAI,CAAC,MAAM;QACvCjB,CAAC,CAACkB,MAAM,CAACP,CAAC,KAAKI,YAAY,GAAG,CAAC,CAAC;QAChCA,YAAY,EAAE;MAChB,CAAC;IACH,CAAC;EACH;EACA,MAAMF,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;AAC7B,CAAC,CAAC"}