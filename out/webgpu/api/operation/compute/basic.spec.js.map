{"version":3,"file":"basic.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","checkElementsEqualGenerated","g","test","fn","t","data","Uint32Array","src","makeBufferWithContents","GPUBufferUsage","COPY_DST","STORAGE","dst","createBufferTracked","size","usage","COPY_SRC","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","entries","binding","resource","buffer","offset","getBindGroupLayout","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","desc","params","u","combine","beginSubcases","expand","val","badVal","kMaxComputeWorkgroupSize","limits","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","wgSize","workgroupSize","largeDimension","dispatchSize","maxComputeWorkgroupsPerDimension","bufferLength","bufferByteSize","BYTES_PER_ELEMENT","dims","wgSizes","expectGPUBufferValuesPassCheck","a","_i","type","typedLength","destroy"],"sources":["../../../../../src/webgpu/api/operation/compute/basic.spec.ts"],"sourcesContent":["export const description = `\nBasic command buffer compute tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport { checkElementsEqualGenerated } from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('memcpy').fn(t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.makeBufferWithContents(data, GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE);\n\n  const dst = t.createBufferTracked({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n  });\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: `\n          struct Data {\n            value : u32\n          };\n\n          @group(0) @binding(0) var<storage, read> src : Data;\n          @group(0) @binding(1) var<storage, read_write> dst : Data;\n\n          @compute @workgroup_size(1) fn main() {\n            dst.value = src.value;\n            return;\n          }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const bg = t.device.createBindGroup({\n    entries: [\n      { binding: 0, resource: { buffer: src, offset: 0, size: 4 } },\n      { binding: 1, resource: { buffer: dst, offset: 0, size: 4 } },\n    ],\n    layout: pipeline.getBindGroupLayout(0),\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, data);\n});\n\ng.test('large_dispatch')\n  .desc(`Test reasonably-sized large dispatches (see also: stress tests).`)\n  .params(u =>\n    u\n      // Reasonably-sized powers of two, and some stranger larger sizes.\n      .combine('dispatchSize', [256, 2048, 315, 628, 2179, 'maximum'] as const)\n      // Test some reasonable workgroup sizes.\n      .beginSubcases()\n      // 0 == x axis; 1 == y axis; 2 == z axis.\n      .combine('largeDimension', [0, 1, 2] as const)\n      .expand('workgroupSize', () => [1, 2, 8, 32, 'maximum'] as const)\n  )\n  .fn(t => {\n    // The output storage buffer is filled with this value.\n    const val = 0x01020304;\n    const badVal = 0xbaadf00d;\n\n    const kMaxComputeWorkgroupSize = [\n      t.device.limits.maxComputeWorkgroupSizeX,\n      t.device.limits.maxComputeWorkgroupSizeY,\n      t.device.limits.maxComputeWorkgroupSizeZ,\n    ];\n\n    const wgSize =\n      t.params.workgroupSize === 'maximum'\n        ? kMaxComputeWorkgroupSize[t.params.largeDimension]\n        : t.params.workgroupSize;\n    const dispatchSize =\n      t.params.dispatchSize === 'maximum'\n        ? t.device.limits.maxComputeWorkgroupsPerDimension\n        : t.params.dispatchSize;\n    const bufferLength = dispatchSize * wgSize;\n    const bufferByteSize = Uint32Array.BYTES_PER_ELEMENT * bufferLength;\n    const dst = t.createBufferTracked({\n      size: bufferByteSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n    });\n\n    // Only use one large dimension and workgroup size in the dispatch\n    // call to keep the size of the test reasonable.\n    const dims = [1, 1, 1];\n    dims[t.params.largeDimension] = dispatchSize;\n    const wgSizes = [1, 1, 1];\n    wgSizes[t.params.largeDimension] = wgSize;\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct OutputBuffer {\n              value : array<u32>\n            };\n\n            @group(0) @binding(0) var<storage, read_write> dst : OutputBuffer;\n\n            @compute @workgroup_size(${wgSizes[0]}, ${wgSizes[1]}, ${wgSizes[2]})\n            fn main(\n              @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n            ) {\n              var xExtent : u32 = ${dims[0]}u * ${wgSizes[0]}u;\n              var yExtent : u32 = ${dims[1]}u * ${wgSizes[1]}u;\n              var zExtent : u32 = ${dims[2]}u * ${wgSizes[2]}u;\n              var index : u32 = (\n                GlobalInvocationID.z * xExtent * yExtent +\n                GlobalInvocationID.y * xExtent +\n                GlobalInvocationID.x);\n              var val : u32 = ${val}u;\n              // Trivial error checking in the indexing and invocation.\n              if (GlobalInvocationID.x > xExtent ||\n                  GlobalInvocationID.y > yExtent ||\n                  GlobalInvocationID.z > zExtent) {\n                val = ${badVal}u;\n              }\n              dst.value[index] = val;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    const bg = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: { buffer: dst, offset: 0, size: bufferByteSize } }],\n      layout: pipeline.getBindGroupLayout(0),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(dims[0], dims[1], dims[2]);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectGPUBufferValuesPassCheck(dst, a => checkElementsEqualGenerated(a, _i => val), {\n      type: Uint32Array,\n      typedLength: bufferLength,\n    });\n\n    dst.destroy();\n  });\n"],"mappings":"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"}