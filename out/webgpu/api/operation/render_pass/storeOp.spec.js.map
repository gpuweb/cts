{"version":3,"file":"storeOp.spec.js","names":["description","makeTestGroup","assert","isDepthTextureFormat","isSintOrUintFormat","isStencilTextureFormat","kPossibleColorRenderableTextureFormats","kSizedDepthStencilFormats","AllFeaturesMaxLimitsGPUTest","ttu","kTexelRepresentationInfo","TexelComponent","kMipLevel","kMipLevelCount","kNumColorAttachments","kArrayLayers","kStoreOps","kHeight","kWidth","g","test","params","u","combine","fn","t","kColorFormat","colorAttachment","createTextureTracked","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","colorAttachmentView","createView","kDepthStencilFormat","depthStencilAttachment","encoder","device","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","clearValue","r","b","a","loadOp","storeOp","colorStoreOperation","depthClearValue","depthLoadOp","depthStoreOp","depthStencilStoreOperation","end","queue","submit","finish","expectedColorValue","R","G","B","A","expectSingleColor","exp","expectedDepthValue","Depth","layout","mipLevel","aspect","beginSubcases","colorFormat","storeOperation","arrayLayer","skipIfTextureFormatNotSupported","skipIfTextureFormatNotUsableAsRenderAttachment","mipLevelCount","colorViewDesc","baseArrayLayer","baseMipLevel","arrayLayerCount","components","Set","componentOrder","missingValue","baseValue","maxDiff","kRGBAComponents","clearValueAsComponents","Object","fromEntries","map","component","has","entries","k","v","toLowerCase","debug","JSON","stringify","expectedValue","expectSingleColorWithTolerance","slice","maxFractionalDiff","i","push","renderPassColorAttachments","storeOperation1","storeOperation2","desc","depthStencilTexture","depthStencilFormat","depthStencilViewDesc","depthStencilAttachmentView","stencilClearValue","stencilLoadOp","stencilStoreOp","expectedStencilValue","Stencil"],"sources":["../../../../../src/webgpu/api/operation/render_pass/storeOp.spec.ts"],"sourcesContent":["export const description = `API Operation Tests for RenderPass StoreOp.\n\n  Test Coverage:\n\n  - Tests that color and depth-stencil store operations {'discard', 'store'} work correctly for a\n    render pass with both a color attachment and depth-stencil attachment.\n      TODO: use depth24plus-stencil8\n\n  - Tests that store operations {'discard', 'store'} work correctly for a render pass with multiple\n    color attachments.\n      TODO: test with more interesting loadOp values\n\n  - Tests that store operations {'discard', 'store'} work correctly for a render pass with a color\n    attachment for:\n      - All renderable color formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n\n  - Tests that store operations {'discard', 'store'} work correctly for a render pass with a\n    depth-stencil attachment for:\n      - All renderable depth-stencil formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: test depth24plus and depth24plus-stencil8 formats\n      TODO: test that depth and stencil aspects are set separately\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n      TODO: test with more interesting loadOp values`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport {\n  EncodableTextureFormat,\n  isDepthTextureFormat,\n  isSintOrUintFormat,\n  isStencilTextureFormat,\n  kPossibleColorRenderableTextureFormats,\n  kSizedDepthStencilFormats,\n} from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport * as ttu from '../../../texture_test_utils.js';\nimport {\n  kTexelRepresentationInfo,\n  PerTexelComponent,\n  TexelComponent,\n} from '../../../util/texture/texel_data.js';\n\n// Test with a zero and non-zero mip.\nconst kMipLevel: number[] = [0, 1];\nconst kMipLevelCount = 2;\n\n// Test with different numbers of color attachments.\ntype NumColorAttachments = 1 | 2 | 3 | 4;\nconst kNumColorAttachments: NumColorAttachments[] = [1, 2, 3, 4];\n\n// Test with a zero and non-zero array layer.\nconst kArrayLayers: number[] = [0, 1];\n\nconst kStoreOps: GPUStoreOp[] = ['discard', 'store'];\n\nconst kHeight = 2;\nconst kWidth = 2;\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\n// Tests a render pass with both a color and depth stencil attachment to ensure store operations are\n// set independently.\ng.test('render_pass_store_op,color_attachment_with_depth_stencil_attachment')\n  .params(u =>\n    u //\n      .combine('colorStoreOperation', kStoreOps)\n      .combine('depthStencilStoreOperation', kStoreOps)\n  )\n  .fn(t => {\n    // Create a basic color attachment.\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachment = t.createTextureTracked({\n      format: kColorFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const colorAttachmentView = colorAttachment.createView();\n\n    // Create a basic depth/stencil attachment.\n    const kDepthStencilFormat: GPUTextureFormat = 'depth32float';\n    const depthStencilAttachment = t.createTextureTracked({\n      format: kDepthStencilFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}.\n    // Depth operation will clear to 1.0.\n    // Store operations are determined by test the params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: t.params.colorStoreOperation,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthStencilAttachment.createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: t.params.depthStencilStoreOperation,\n      },\n    });\n    pass.end();\n\n    t.device.queue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedColorValue: PerTexelComponent<number> = {};\n    if (t.params.colorStoreOperation === 'discard') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedColorValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (t.params.colorStoreOperation === 'store') {\n      // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n      expectedColorValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n    }\n    t.expectSingleColor(colorAttachment, kColorFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedColorValue,\n    });\n\n    // Check that the correct store operation occurred.\n    let expectedDepthValue: PerTexelComponent<number> = {};\n    if (t.params.depthStencilStoreOperation === 'discard') {\n      // If depthStencilStoreOperation was clear, the texture's depth component should be 0.0, and\n      // the stencil component should be 0.0.\n      expectedDepthValue = { Depth: 0.0 };\n    } else if (t.params.depthStencilStoreOperation === 'store') {\n      // If depthStencilStoreOperation was store, the texture's depth component should be 1.0, and\n      // the stencil component should be 1.0.\n      expectedDepthValue = { Depth: 1.0 };\n    }\n    t.expectSingleColor(depthStencilAttachment, kDepthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedDepthValue,\n      layout: { mipLevel: 0, aspect: 'depth-only' },\n    });\n  });\n\n// Tests that render pass color attachment store operations work correctly for all renderable color\n// formats, mip levels and array layers.\ng.test('render_pass_store_op,color_attachment_only')\n  .params(u =>\n    u\n      .combine('colorFormat', kPossibleColorRenderableTextureFormats)\n      .combine('storeOperation', kStoreOps)\n      .beginSubcases()\n      .combine('mipLevel', kMipLevel)\n      .combine('arrayLayer', kArrayLayers)\n  )\n  .fn(t => {\n    const { colorFormat, storeOperation, mipLevel, arrayLayer } = t.params;\n    t.skipIfTextureFormatNotSupported(colorFormat);\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(colorFormat);\n\n    const colorAttachment = t.createTextureTracked({\n      format: colorFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: arrayLayer + 1 },\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const colorViewDesc: GPUTextureViewDescriptor = {\n      baseArrayLayer: arrayLayer,\n      baseMipLevel: mipLevel,\n      mipLevelCount: 1,\n      arrayLayerCount: 1,\n    };\n\n    const colorAttachmentView = colorAttachment.createView(colorViewDesc);\n\n    const components = new Set(\n      kTexelRepresentationInfo[colorFormat as EncodableTextureFormat]?.componentOrder ?? []\n    );\n    assert(components.size > 0);\n\n    // Note: for unorm/float values we specifically want values\n    // that will generate failure if srgb remapping is applied so\n    // we can't choose 0 or 1 for R, G, or B\n    const missingValue = { R: 0, G: 0, B: 0, A: 1 };\n    const [baseValue, maxDiff] = isSintOrUintFormat(colorFormat)\n      ? [{ R: 12, G: 34, B: 56, A: 3 }, 0]\n      : [{ R: 0.8, G: 0.75, B: 0.5, A: 1.0 }, 2 / 255];\n    const kRGBAComponents = [\n      TexelComponent.R,\n      TexelComponent.G,\n      TexelComponent.B,\n      TexelComponent.A,\n    ] as const;\n\n    const clearValueAsComponents = Object.fromEntries(\n      kRGBAComponents.map(component => [\n        component,\n        components.has(component) ? baseValue[component] : missingValue[component],\n      ])\n    );\n    const clearValue = Object.fromEntries(\n      Object.entries(clearValueAsComponents).map(([k, v]) => [k.toLowerCase(), v])\n    ) as unknown as GPUColorDict;\n\n    t.debug(`clearValue: ${JSON.stringify(clearValue)}`);\n\n    // Color store operation is determined by the test params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          clearValue,\n          loadOp: 'clear',\n          storeOp: storeOperation,\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedValue: PerTexelComponent<number> = {};\n    if (storeOperation === 'discard') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (storeOperation === 'store') {\n      // If colorStoreOP was store, the texture should still contain\n      expectedValue = clearValueAsComponents;\n    }\n\n    ttu.expectSingleColorWithTolerance(t, colorAttachment, colorFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: arrayLayer,\n      exp: expectedValue,\n      layout: { mipLevel },\n      maxFractionalDiff: maxDiff,\n    });\n  });\n\n// Test with multiple color attachments to ensure each attachment's storeOp is set independently.\ng.test('render_pass_store_op,multiple_color_attachments')\n  .params(u =>\n    u\n      .combine('storeOperation1', kStoreOps)\n      .combine('storeOperation2', kStoreOps)\n      .beginSubcases()\n      .combine('colorAttachments', kNumColorAttachments)\n  )\n  .fn(t => {\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachments: GPUTexture[] = [];\n\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      colorAttachments.push(\n        t.createTextureTracked({\n          format: kColorFormat,\n          size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        })\n      );\n    }\n\n    // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}\n    // Color store operation is determined by test params. Use storeOperation1 for even numbered\n    // attachments and storeOperation2 for odd numbered attachments.\n    const renderPassColorAttachments: GPURenderPassColorAttachment[] = [];\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      renderPassColorAttachments.push({\n        view: colorAttachments[i].createView(),\n        clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: i % 2 === 0 ? t.params.storeOperation1 : t.params.storeOperation2,\n      });\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: renderPassColorAttachments,\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedValue: PerTexelComponent<number> = {};\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      if (renderPassColorAttachments[i].storeOp === 'discard') {\n        // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n        expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n      } else if (renderPassColorAttachments[i].storeOp === 'store') {\n        // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n        expectedValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n      }\n      t.expectSingleColor(colorAttachments[i], kColorFormat, {\n        size: [kHeight, kWidth, 1],\n        exp: expectedValue,\n      });\n    }\n  });\n\ng.test('render_pass_store_op,depth_stencil_attachment_only')\n  .desc(\n    `\nTests that render pass depth stencil store operations work correctly for all renderable color\nformats, mip levels and array layers.\n\n- x= all (sized) depth stencil formats, all store ops, multiple mip levels, multiple array layers\n\nTODO: Also test unsized depth/stencil formats [1]\n  `\n  )\n  .params(u =>\n    u\n      .combine('depthStencilFormat', kSizedDepthStencilFormats) // [1]\n      .combine('storeOperation', kStoreOps)\n      .beginSubcases()\n      .combine('mipLevel', kMipLevel)\n      .combine('arrayLayer', kArrayLayers)\n  )\n  .fn(t => {\n    const depthStencilTexture = t.createTextureTracked({\n      format: t.params.depthStencilFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: t.params.arrayLayer + 1 },\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilViewDesc: GPUTextureViewDescriptor = {\n      baseArrayLayer: t.params.arrayLayer,\n      baseMipLevel: t.params.mipLevel,\n      mipLevelCount: 1,\n      arrayLayerCount: 1,\n    };\n\n    const depthStencilAttachmentView = depthStencilTexture.createView(depthStencilViewDesc);\n\n    // Depth-stencil load operation will clear to depth = 1.0, stencil = 1.0.\n    // Depth-stencil store operate is determined by test params.\n    const encoder = t.device.createCommandEncoder();\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthStencilAttachmentView,\n    };\n    if (isDepthTextureFormat(t.params.depthStencilFormat)) {\n      depthStencilAttachment.depthClearValue = 1.0;\n      depthStencilAttachment.depthLoadOp = 'clear';\n      depthStencilAttachment.depthStoreOp = t.params.storeOperation;\n    }\n    if (isStencilTextureFormat(t.params.depthStencilFormat)) {\n      depthStencilAttachment.stencilClearValue = 1;\n      depthStencilAttachment.stencilLoadOp = 'clear';\n      depthStencilAttachment.stencilStoreOp = t.params.storeOperation;\n    }\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment,\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    let expectedDepthValue: PerTexelComponent<number> = {};\n    let expectedStencilValue: PerTexelComponent<number> = {};\n    if (t.params.storeOperation === 'discard') {\n      // If depthStencilStoreOperation was clear, the texture's depth/stencil component should be 0,\n      expectedDepthValue = { Depth: 0.0 };\n      expectedStencilValue = { Stencil: 0 };\n    } else if (t.params.storeOperation === 'store') {\n      // If depthStencilStoreOperation was store, the texture's depth/stencil components should be 1,\n      expectedDepthValue = { Depth: 1.0 };\n      expectedStencilValue = { Stencil: 1 };\n    }\n\n    if (isDepthTextureFormat(t.params.depthStencilFormat)) {\n      t.expectSingleColor(depthStencilTexture, t.params.depthStencilFormat, {\n        size: [kHeight, kWidth, 1],\n        slice: t.params.arrayLayer,\n        exp: expectedDepthValue,\n        layout: { mipLevel: t.params.mipLevel, aspect: 'depth-only' },\n      });\n    }\n    if (isStencilTextureFormat(t.params.depthStencilFormat)) {\n      t.expectSingleColor(depthStencilTexture, t.params.depthStencilFormat, {\n        size: [kHeight, kWidth, 1],\n        slice: t.params.arrayLayer,\n        exp: expectedStencilValue,\n        layout: { mipLevel: t.params.mipLevel, aspect: 'stencil-only' },\n      });\n    }\n  });\n"],"mappings":"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"}