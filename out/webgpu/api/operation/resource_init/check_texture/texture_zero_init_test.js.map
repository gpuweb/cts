{"version":3,"file":"texture_zero_init_test.js","names":["kUnitCaseParamsBuilder","assert","unreachable","kTextureAspects","kTextureDimensions","GPUConst","kUncompressedTextureFormats","textureDimensionAndFormatCompatible","isColorTextureFormat","isDepthTextureFormat","isStencilTextureFormat","isDepthOrStencilTextureFormat","isTextureFormatPossiblyUsableAsRenderAttachment","isTextureFormatPossiblyStorageReadable","isTextureFormatPossiblyMultisampled","canCopyToAllAspectsOfTextureFormat","isTextureFormatColorRenderable","isTextureFormatPossiblyUsableAsColorRenderAttachment","AllFeaturesMaxLimitsGPUTest","virtualMipSize","createTextureUploadBuffer","SubresourceRange","kTexelRepresentationInfo","UninitializeMethod","kUninitializeMethods","Object","keys","ReadMethod","kMipLevelCounts","kUninitializedMipRangesToTest","begin","end","kSampleCounts","kUninitializedLayerRangesToTest","InitializedState","initializedStateAsFloat","Zero","Canary","initializedStateAsUint","initializedStateAsSint","initializedStateAsColor","state","format","value","indexOf","initializedStateAsDepth","initializedStateAsStencil","getRequiredTextureUsage","sampleCount","uninitializeMethod","readMethod","usage","TextureUsage","COPY_DST","Creation","StoreOpClear","RENDER_ATTACHMENT","CopyToBuffer","CopyToTexture","COPY_SRC","Sample","TEXTURE_BINDING","Storage","STORAGE_BINDING","DepthTest","StencilTest","ColorBlending","TextureZeroInitTest","constructor","sharedState","rec","params","p","stateToTexelComponents","R","G","B","A","Depth","Stencil","textureWidth","width","mipLevelCount","nonPowerOfTwo","textureHeight","dimension","height","textureDepth","textureDepthOrArrayLayers","layerCount","iterateUninitializedSubresources","mipRange","layerRange","iterateInitializedSubresources","uninitialized","Array","level","length","subresources","layer","each","count","generateTextureViewDescriptorsForRendering","aspect","subresourceRange","viewDescriptor","undefined","baseMipLevel","baseArrayLayer","arrayLayerCount","initializeWithStoreOp","texture","commandEncoder","device","createCommandEncoder","label","pushDebugGroup","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","popDebugGroup","queue","submit","finish","initializeWithCopy","firstSubresource","next","textureSize","largestWidth","largestHeight","largestDepth","rep","texelData","Uint8Array","pack","encode","buffer","bytesPerRow","rowsPerImage","depth","copyBufferToTexture","mipLevel","origin","x","y","z","depthOrArrayLayers","destroy","initializeTexture","discardTexture","desc","skipIfTextureFormatNotSupportedForTest","skipIfTextureFormatNotSupported","skipIfTextureFormatDoesNotSupportUsage","skipIfTextureFormatNotMultisampled","kTestParams","combine","filter","beginSubcases","unless","hasColor","hasDepth","hasStencil","expandWithParams"],"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/texture_zero_init_test.ts"],"sourcesContent":["import { TestCaseRecorder, TestParams } from '../../../../../common/framework/fixture.js';\nimport {\n  kUnitCaseParamsBuilder,\n  ParamTypeOf,\n} from '../../../../../common/framework/params_builder.js';\nimport { assert, unreachable } from '../../../../../common/util/util.js';\nimport { kTextureAspects, kTextureDimensions } from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport {\n  kUncompressedTextureFormats,\n  textureDimensionAndFormatCompatible,\n  UncompressedTextureFormat,\n  EncodableTextureFormat,\n  isColorTextureFormat,\n  isDepthTextureFormat,\n  isStencilTextureFormat,\n  isDepthOrStencilTextureFormat,\n  isTextureFormatPossiblyUsableAsRenderAttachment,\n  isTextureFormatPossiblyStorageReadable,\n  isTextureFormatPossiblyMultisampled,\n  canCopyToAllAspectsOfTextureFormat,\n  isTextureFormatColorRenderable,\n  isTextureFormatPossiblyUsableAsColorRenderAttachment,\n} from '../../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTestSubcaseBatchState } from '../../../../gpu_test.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport { createTextureUploadBuffer } from '../../../../util/texture/layout.js';\nimport { BeginEndRange, SubresourceRange } from '../../../../util/texture/subresource.js';\nimport {\n  PerTexelComponent,\n  kTexelRepresentationInfo,\n} from '../../../../util/texture/texel_data.js';\n\nexport enum UninitializeMethod {\n  Creation = 'Creation', // The texture was just created. It is uninitialized.\n  StoreOpClear = 'StoreOpClear', // The texture was rendered to with GPUStoreOp \"clear\"\n}\nconst kUninitializeMethods = Object.keys(UninitializeMethod) as UninitializeMethod[];\n\nexport const enum ReadMethod {\n  Sample = 'Sample', // The texture is sampled from\n  CopyToBuffer = 'CopyToBuffer', // The texture is copied to a buffer\n  CopyToTexture = 'CopyToTexture', // The texture is copied to another texture\n  DepthTest = 'DepthTest', // The texture is read as a depth buffer\n  StencilTest = 'StencilTest', // The texture is read as a stencil buffer\n  ColorBlending = 'ColorBlending', // Read the texture by blending as a color attachment\n  Storage = 'Storage', // Read the texture as a storage texture\n}\n\n// Test with these mip level counts\ntype MipLevels = 1 | 5;\nconst kMipLevelCounts: MipLevels[] = [1, 5];\n\n// For each mip level count, define the mip ranges to leave uninitialized.\nconst kUninitializedMipRangesToTest: { [k in MipLevels]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only mip\n  5: [\n    { begin: 0, end: 2 },\n    { begin: 3, end: 4 },\n  ], // Test a range and a single mip\n};\n\n// Test with these sample counts.\nconst kSampleCounts: number[] = [1, 4];\n\n// Test with these layer counts.\ntype LayerCounts = 1 | 7;\n\n// For each layer count, define the layers to leave uninitialized.\nconst kUninitializedLayerRangesToTest: { [k in LayerCounts]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only layer\n  7: [\n    { begin: 2, end: 4 },\n    { begin: 6, end: 7 },\n  ], // Test a range and a single layer\n};\n\n// Enums to abstract over color / depth / stencil values in textures. Depending on the texture format,\n// the data for each value may have a different representation. These enums are converted to a\n// representation such that their values can be compared. ex.) An integer is needed to upload to an\n// unsigned normalized format, but its value is read as a float in the shader.\nexport const enum InitializedState {\n  Canary, // Set on initialized subresources. It should stay the same. On discarded resources, we should observe zero.\n  Zero, // We check that uninitialized subresources are in this state when read back.\n}\n\nconst initializedStateAsFloat = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1,\n};\n\nconst initializedStateAsUint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1,\n};\n\nconst initializedStateAsSint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: -1,\n};\n\nfunction initializedStateAsColor(\n  state: InitializedState,\n  format: GPUTextureFormat\n): [number, number, number, number] {\n  let value;\n  if (format.indexOf('uint') !== -1) {\n    value = initializedStateAsUint[state];\n  } else if (format.indexOf('sint') !== -1) {\n    value = initializedStateAsSint[state];\n  } else {\n    value = initializedStateAsFloat[state];\n  }\n  return [value, value, value, value];\n}\n\nconst initializedStateAsDepth = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 0.8,\n};\n\nconst initializedStateAsStencil = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 42,\n};\n\nexport function getRequiredTextureUsage(\n  format: UncompressedTextureFormat,\n  sampleCount: number,\n  uninitializeMethod: UninitializeMethod,\n  readMethod: ReadMethod\n): GPUTextureUsageFlags {\n  let usage: GPUTextureUsageFlags = GPUConst.TextureUsage.COPY_DST;\n\n  switch (uninitializeMethod) {\n    case UninitializeMethod.Creation:\n      break;\n    case UninitializeMethod.StoreOpClear:\n      usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  switch (readMethod) {\n    case ReadMethod.CopyToBuffer:\n    case ReadMethod.CopyToTexture:\n      usage |= GPUConst.TextureUsage.COPY_SRC;\n      break;\n    case ReadMethod.Sample:\n      usage |= GPUConst.TextureUsage.TEXTURE_BINDING;\n      break;\n    case ReadMethod.Storage:\n      usage |= GPUConst.TextureUsage.STORAGE_BINDING;\n      break;\n    case ReadMethod.DepthTest:\n    case ReadMethod.StencilTest:\n    case ReadMethod.ColorBlending:\n      usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  if (sampleCount > 1) {\n    // Copies to multisampled textures are not allowed. We need OutputAttachment to initialize\n    // canary data in multisampled textures.\n    usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n  }\n\n  if (!canCopyToAllAspectsOfTextureFormat(format)) {\n    // Copies are not possible. We need OutputAttachment to initialize\n    // canary data.\n    if (isColorTextureFormat(format)) {\n      assert(\n        isTextureFormatPossiblyUsableAsColorRenderAttachment(format),\n        'not implemented for non-renderable color'\n      );\n    }\n    usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n  }\n\n  return usage;\n}\n\nexport class TextureZeroInitTest extends AllFeaturesMaxLimitsGPUTest {\n  readonly stateToTexelComponents: { [k in InitializedState]: PerTexelComponent<number> };\n\n  private p: TextureZeroParams;\n  constructor(sharedState: GPUTestSubcaseBatchState, rec: TestCaseRecorder, params: TestParams) {\n    super(sharedState, rec, params);\n    this.p = params as TextureZeroParams;\n\n    const stateToTexelComponents = (state: InitializedState) => {\n      const [R, G, B, A] = initializedStateAsColor(state, this.p.format);\n      return {\n        R,\n        G,\n        B,\n        A,\n        Depth: initializedStateAsDepth[state],\n        Stencil: initializedStateAsStencil[state],\n      };\n    };\n\n    this.stateToTexelComponents = {\n      [InitializedState.Zero]: stateToTexelComponents(InitializedState.Zero),\n      [InitializedState.Canary]: stateToTexelComponents(InitializedState.Canary),\n    };\n  }\n\n  get textureWidth(): number {\n    let width = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      width = 2 * width - 1;\n    }\n    return width;\n  }\n\n  get textureHeight(): number {\n    if (this.p.dimension === '1d') {\n      return 1;\n    }\n\n    let height = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      height = 2 * height - 1;\n    }\n    return height;\n  }\n\n  get textureDepth(): number {\n    return this.p.dimension === '3d' ? 11 : 1;\n  }\n\n  get textureDepthOrArrayLayers(): number {\n    return this.p.dimension === '2d' ? this.p.layerCount : this.textureDepth;\n  }\n\n  // Used to iterate subresources and check that their uninitialized contents are zero when accessed\n  *iterateUninitializedSubresources(): Generator<SubresourceRange> {\n    for (const mipRange of kUninitializedMipRangesToTest[this.p.mipLevelCount]) {\n      for (const layerRange of kUninitializedLayerRangesToTest[this.p.layerCount]) {\n        yield new SubresourceRange({ mipRange, layerRange });\n      }\n    }\n  }\n\n  // Used to iterate and initialize other subresources not checked for zero-initialization.\n  // Zero-initialization of uninitialized subresources should not have side effects on already\n  // initialized subresources.\n  *iterateInitializedSubresources(): Generator<SubresourceRange> {\n    const uninitialized: boolean[][] = new Array(this.p.mipLevelCount);\n    for (let level = 0; level < uninitialized.length; ++level) {\n      uninitialized[level] = new Array(this.p.layerCount);\n    }\n    for (const subresources of this.iterateUninitializedSubresources()) {\n      for (const { level, layer } of subresources.each()) {\n        uninitialized[level][layer] = true;\n      }\n    }\n    for (let level = 0; level < uninitialized.length; ++level) {\n      for (let layer = 0; layer < uninitialized[level].length; ++layer) {\n        if (!uninitialized[level][layer]) {\n          yield new SubresourceRange({\n            mipRange: { begin: level, count: 1 },\n            layerRange: { begin: layer, count: 1 },\n          });\n        }\n      }\n    }\n  }\n\n  *generateTextureViewDescriptorsForRendering(\n    aspect: GPUTextureAspect,\n    subresourceRange?: SubresourceRange\n  ): Generator<GPUTextureViewDescriptor> {\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      aspect,\n    };\n\n    if (subresourceRange === undefined) {\n      return viewDescriptor;\n    }\n\n    for (const { level, layer } of subresourceRange.each()) {\n      yield {\n        ...viewDescriptor,\n        baseMipLevel: level,\n        mipLevelCount: 1,\n        baseArrayLayer: layer,\n        arrayLayerCount: 1,\n      };\n    }\n  }\n\n  private initializeWithStoreOp(\n    state: InitializedState,\n    texture: GPUTexture,\n    subresourceRange?: SubresourceRange\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder({ label: 'initializeWithStoreOp' });\n    commandEncoder.pushDebugGroup('initializeWithStoreOp');\n\n    for (const viewDescriptor of this.generateTextureViewDescriptorsForRendering(\n      'all',\n      subresourceRange\n    )) {\n      if (isColorTextureFormat(this.p.format)) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                view: texture.createView(viewDescriptor),\n                clearValue: initializedStateAsColor(state, this.p.format),\n                loadOp: 'clear',\n                storeOp: 'store',\n              },\n            ],\n          })\n          .end();\n      } else {\n        const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n          view: texture.createView(viewDescriptor),\n        };\n        if (isDepthTextureFormat(this.p.format)) {\n          depthStencilAttachment.depthClearValue = initializedStateAsDepth[state];\n          depthStencilAttachment.depthLoadOp = 'clear';\n          depthStencilAttachment.depthStoreOp = 'store';\n        }\n        if (isStencilTextureFormat(this.p.format)) {\n          depthStencilAttachment.stencilClearValue = initializedStateAsStencil[state];\n          depthStencilAttachment.stencilLoadOp = 'clear';\n          depthStencilAttachment.stencilStoreOp = 'store';\n        }\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment,\n          })\n          .end();\n      }\n    }\n\n    commandEncoder.popDebugGroup();\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  private initializeWithCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    const format = this.p.format as EncodableTextureFormat;\n\n    const firstSubresource = subresourceRange.each().next().value;\n    assert(typeof firstSubresource !== 'undefined');\n\n    const textureSize = [this.textureWidth, this.textureHeight, this.textureDepth];\n    const [largestWidth, largestHeight, largestDepth] = virtualMipSize(\n      this.p.dimension,\n      textureSize,\n      firstSubresource.level\n    );\n\n    const rep = kTexelRepresentationInfo[format];\n    const texelData = new Uint8Array(rep.pack(rep.encode(this.stateToTexelComponents[state])));\n    const { buffer, bytesPerRow, rowsPerImage } = createTextureUploadBuffer(\n      this,\n      texelData,\n      format,\n      this.p.dimension,\n      [largestWidth, largestHeight, largestDepth]\n    );\n\n    const commandEncoder = this.device.createCommandEncoder({ label: 'initializeWithCopy' });\n\n    for (const { level, layer } of subresourceRange.each()) {\n      const [width, height, depth] = virtualMipSize(this.p.dimension, textureSize, level);\n\n      commandEncoder.copyBufferToTexture(\n        {\n          buffer,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        { texture, mipLevel: level, origin: { x: 0, y: 0, z: layer } },\n        { width, height, depthOrArrayLayers: depth }\n      );\n    }\n    this.queue.submit([commandEncoder.finish()]);\n    buffer.destroy();\n  }\n\n  initializeTexture(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (this.p.sampleCount > 1 || !canCopyToAllAspectsOfTextureFormat(this.p.format)) {\n      // Copies to multisampled textures not yet specified.\n      // Use a storeOp for now.\n      if (isColorTextureFormat(this.p.format)) {\n        assert(\n          isTextureFormatColorRenderable(this.device, this.p.format),\n          'not implemented for non-renderable color'\n        );\n      }\n      this.initializeWithStoreOp(state, texture, subresourceRange);\n    } else {\n      this.initializeWithCopy(texture, state, subresourceRange);\n    }\n  }\n\n  discardTexture(texture: GPUTexture, subresourceRange: SubresourceRange): void {\n    const commandEncoder = this.device.createCommandEncoder({ label: 'discardTexture' });\n    commandEncoder.pushDebugGroup('discardTexture');\n\n    for (const desc of this.generateTextureViewDescriptorsForRendering('all', subresourceRange)) {\n      if (isColorTextureFormat(this.p.format)) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                view: texture.createView(desc),\n                loadOp: 'load',\n                storeOp: 'discard',\n              },\n            ],\n          })\n          .end();\n      } else {\n        const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n          view: texture.createView(desc),\n        };\n        if (isDepthTextureFormat(this.p.format)) {\n          depthStencilAttachment.depthLoadOp = 'load';\n          depthStencilAttachment.depthStoreOp = 'discard';\n        }\n        if (isStencilTextureFormat(this.p.format)) {\n          depthStencilAttachment.stencilLoadOp = 'load';\n          depthStencilAttachment.stencilStoreOp = 'discard';\n        }\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment,\n          })\n          .end();\n      }\n    }\n\n    commandEncoder.popDebugGroup();\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  skipIfTextureFormatNotSupportedForTest(params: TextureZeroParams) {\n    const { format, sampleCount, uninitializeMethod, readMethod } = params;\n    this.skipIfTextureFormatNotSupported(format);\n\n    const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n\n    this.skipIfTextureFormatDoesNotSupportUsage(usage, format);\n\n    if (sampleCount > 1) {\n      this.skipIfTextureFormatNotMultisampled(format);\n    }\n  }\n}\n\nexport const kTestParams = kUnitCaseParamsBuilder\n  .combine('dimension', kTextureDimensions)\n  .combine('readMethod', [\n    ReadMethod.CopyToBuffer,\n    ReadMethod.CopyToTexture,\n    ReadMethod.Sample,\n    ReadMethod.DepthTest,\n    ReadMethod.StencilTest,\n  ])\n  // [3] compressed formats\n  .combine('format', kUncompressedTextureFormats)\n  .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  .beginSubcases()\n  .combine('aspect', kTextureAspects)\n  .unless(({ readMethod, format, aspect }) => {\n    const hasColor = isColorTextureFormat(format);\n    const hasDepth = isDepthTextureFormat(format);\n    const hasStencil = isStencilTextureFormat(format);\n    return (\n      (readMethod === ReadMethod.DepthTest && (!hasDepth || aspect === 'stencil-only')) ||\n      (readMethod === ReadMethod.StencilTest && (!hasStencil || aspect === 'depth-only')) ||\n      (readMethod === ReadMethod.ColorBlending && !hasColor) ||\n      // [1]: Test with depth/stencil sampling\n      (readMethod === ReadMethod.Sample && (hasDepth || hasStencil)) ||\n      (aspect === 'depth-only' && !hasDepth) ||\n      (aspect === 'stencil-only' && !hasStencil) ||\n      (aspect === 'all' && !!hasDepth && !!hasStencil) ||\n      // Cannot copy from a packed depth format.\n      // [2]: Test copying out of the stencil aspect.\n      ((readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture) &&\n        (format === 'depth24plus' || format === 'depth24plus-stencil8'))\n    );\n  })\n  .combine('mipLevelCount', kMipLevelCounts)\n  // 1D texture can only have a single mip level\n  .unless(p => p.dimension === '1d' && p.mipLevelCount !== 1)\n  .combine('sampleCount', kSampleCounts)\n  .unless(\n    ({ readMethod, sampleCount }) =>\n      // We can only read from multisampled textures by sampling.\n      sampleCount > 1 &&\n      (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture)\n  )\n  // Multisampled textures may only have one mip\n  .unless(({ sampleCount, mipLevelCount }) => sampleCount > 1 && mipLevelCount > 1)\n  .combine('uninitializeMethod', kUninitializeMethods)\n  .unless(({ dimension, readMethod, uninitializeMethod, format, sampleCount }) => {\n    return (\n      dimension !== '2d' &&\n      (sampleCount > 1 ||\n        isDepthOrStencilTextureFormat(format) ||\n        readMethod === ReadMethod.DepthTest ||\n        readMethod === ReadMethod.StencilTest ||\n        readMethod === ReadMethod.ColorBlending ||\n        uninitializeMethod === UninitializeMethod.StoreOpClear)\n    );\n  })\n  .expandWithParams(function* ({ dimension }) {\n    switch (dimension) {\n      case '2d':\n        yield { layerCount: 1 as LayerCounts };\n        yield { layerCount: 7 as LayerCounts };\n        break;\n      case '1d':\n      case '3d':\n        yield { layerCount: 1 as LayerCounts };\n        break;\n    }\n  })\n  // Multisampled 3D / 2D array textures not supported.\n  .unless(({ sampleCount, layerCount }) => sampleCount > 1 && layerCount > 1)\n  .unless(({ format, sampleCount, uninitializeMethod, readMethod }) => {\n    const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n\n    return (\n      ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n        !isTextureFormatPossiblyUsableAsRenderAttachment(format)) ||\n      ((usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 &&\n        !isTextureFormatPossiblyStorageReadable(format)) ||\n      (sampleCount > 1 && !isTextureFormatPossiblyMultisampled(format))\n    );\n  })\n  .combine('nonPowerOfTwo', [false, true])\n  .combine('canaryOnCreation', [false, true]);\n\ntype TextureZeroParams = ParamTypeOf<typeof kTestParams>;\n\nexport type CheckContents = (\n  t: TextureZeroInitTest,\n  params: TextureZeroParams,\n  texture: GPUTexture,\n  state: InitializedState,\n  subresourceRange: SubresourceRange\n) => void;\n"],"mappings":"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"}