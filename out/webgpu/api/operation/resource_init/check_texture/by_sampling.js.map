{"version":3,"file":"by_sampling.js","names":["assert","unreachable","virtualMipSize","kTexelRepresentationInfo","getSingleDataType","getComponentReadbackTraits","checkContentsBySampling","t","params","texture","state","subresourceRange","format","rep","level","layers","mipLevels","width","height","depth","dimension","textureWidth","textureHeight","textureDepth","ReadbackTypedArray","shaderType","componentOrder","componentCount","length","indexExpression","toLowerCase","map","c","join","viewDimension","isCompatibility","depthOrArrayLayers","_xd","replace","_multisampled","sampleCount","texelIndexExpression","computePipeline","device","createComputePipeline","layout","compute","entryPoint","module","createShaderModule","code","layer","ubo","createBufferTracked","mappedAtCreation","size","usage","GPUBufferUsage","UNIFORM","COPY_DST","Int32Array","getMappedRange","set","unmap","byteLength","BYTES_PER_ELEMENT","resultBuffer","STORAGE","COPY_SRC","viewDescriptor","baseArrayLayer","arrayLayerCount","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","createView","commandEncoder","createCommandEncoder","label","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","destroy","expectedValues","ArrayBuffer","expectedState","stateToTexelComponents","i","d","h","w","value","undefined","expectGPUBufferValuesEqual"],"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_sampling.ts"],"sourcesContent":["import { assert, unreachable } from '../../../../../common/util/util.js';\nimport { EncodableTextureFormat } from '../../../../format_info.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  getSingleDataType,\n  getComponentReadbackTraits,\n} from '../../../../util/texture/texel_data.js';\n\nimport { CheckContents } from './texture_zero_init_test.js';\n\nexport const checkContentsBySampling: CheckContents = (\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  const format = params.format as EncodableTextureFormat;\n  const rep = kTexelRepresentationInfo[format];\n\n  for (const { level, layers } of subresourceRange.mipLevels()) {\n    const [width, height, depth] = virtualMipSize(\n      params.dimension,\n      [t.textureWidth, t.textureHeight, t.textureDepth],\n      level\n    );\n\n    const { ReadbackTypedArray, shaderType } = getComponentReadbackTraits(\n      getSingleDataType(format)\n    );\n\n    const componentOrder = rep.componentOrder;\n    const componentCount = componentOrder.length;\n\n    // For single-component textures, generates .r\n    // For multi-component textures, generates ex.)\n    //  .rgba[i], .bgra[i], .rgb[i]\n    const indexExpression =\n      componentCount === 1\n        ? componentOrder[0].toLowerCase()\n        : componentOrder.map(c => c.toLowerCase()).join('') + '[i]';\n\n    const viewDimension =\n      t.isCompatibility && params.dimension === '2d' && texture.depthOrArrayLayers > 1\n        ? '2d-array'\n        : params.dimension;\n    const _xd = `_${viewDimension.replace('-', '_')}`;\n    const _multisampled = params.sampleCount > 1 ? '_multisampled' : '';\n    const texelIndexExpression =\n      viewDimension === '2d'\n        ? 'vec2<i32>(GlobalInvocationID.xy)'\n        : viewDimension === '2d-array'\n        ? 'vec2<i32>(GlobalInvocationID.xy), constants.layer'\n        : viewDimension === '3d'\n        ? 'vec3<i32>(GlobalInvocationID.xyz)'\n        : viewDimension === '1d'\n        ? 'i32(GlobalInvocationID.x)'\n        : unreachable();\n    const computePipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        entryPoint: 'main',\n        module: t.device.createShaderModule({\n          code: `\n            struct Constants {\n              level : i32,\n              layer : i32,\n            };\n\n            @group(0) @binding(0) var<uniform> constants : Constants;\n            @group(0) @binding(1) var myTexture : texture${_multisampled}${_xd}<${shaderType}>;\n\n            struct Result {\n              values : array<${shaderType}>\n            };\n            @group(0) @binding(3) var<storage, read_write> result : Result;\n\n            @compute @workgroup_size(1)\n            fn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n              let flatIndex : u32 = ${componentCount}u * (\n                ${width}u * ${height}u * GlobalInvocationID.z +\n                ${width}u * GlobalInvocationID.y +\n                GlobalInvocationID.x\n              );\n              let texel : vec4<${shaderType}> = textureLoad(\n                myTexture, ${texelIndexExpression}, constants.level);\n\n              for (var i : u32 = 0u; i < ${componentCount}u; i = i + 1u) {\n                result.values[flatIndex + i] = texel.${indexExpression};\n              }\n            }`,\n        }),\n      },\n    });\n\n    for (const layer of layers) {\n      const ubo = t.createBufferTracked({\n        mappedAtCreation: true,\n        size: 8,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      });\n      new Int32Array(ubo.getMappedRange()).set([level, layer]);\n      ubo.unmap();\n\n      const byteLength =\n        width * height * depth * ReadbackTypedArray.BYTES_PER_ELEMENT * rep.componentOrder.length;\n      const resultBuffer = t.createBufferTracked({\n        size: byteLength,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      });\n\n      const viewDescriptor: GPUTextureViewDescriptor = {\n        ...(!t.isCompatibility && {\n          baseArrayLayer: layer,\n          arrayLayerCount: 1,\n        }),\n        dimension: viewDimension,\n      };\n\n      const bindGroup = t.device.createBindGroup({\n        layout: computePipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: ubo },\n          },\n          {\n            binding: 1,\n            resource: texture.createView(viewDescriptor),\n          },\n          {\n            binding: 3,\n            resource: {\n              buffer: resultBuffer,\n            },\n          },\n        ],\n      });\n\n      const commandEncoder = t.device.createCommandEncoder({ label: 'checkContentsBySampling' });\n      const pass = commandEncoder.beginComputePass();\n      pass.setPipeline(computePipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatchWorkgroups(width, height, depth);\n      pass.end();\n      t.queue.submit([commandEncoder.finish()]);\n      ubo.destroy();\n\n      const expectedValues = new ReadbackTypedArray(new ArrayBuffer(byteLength));\n      const expectedState = t.stateToTexelComponents[state];\n      let i = 0;\n      for (let d = 0; d < depth; ++d) {\n        for (let h = 0; h < height; ++h) {\n          for (let w = 0; w < width; ++w) {\n            for (const c of rep.componentOrder) {\n              const value = expectedState[c];\n              assert(value !== undefined);\n              expectedValues[i++] = value;\n            }\n          }\n        }\n      }\n      t.expectGPUBufferValuesEqual(resultBuffer, expectedValues);\n    }\n  }\n};\n"],"mappings":"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"}