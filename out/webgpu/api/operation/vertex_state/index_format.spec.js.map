{"version":3,"file":"index_format.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","getTextureCopyLayout","kHeight","kWidth","kTextureFormat","kBottomLeftTriangle","kSquare","kNothing","byteLength","bytesPerRow","rowsPerImage","IndexFormatTest","MakeRenderPipeline","topology","stripIndexFormat","vertexModule","device","createShaderModule","code","fragmentModule","createRenderPipeline","layout","createPipelineLayout","bindGroupLayouts","vertex","module","entryPoint","fragment","targets","format","primitive","CreateIndexBuffer","indices","indexFormat","typedArrayConstructor","uint16","Uint16Array","uint32","Uint32Array","makeBufferWithContents","GPUBufferUsage","INDEX","run","indexBuffer","indexCount","indexOffset","primitiveTopology","pipeline","colorAttachment","createTextureTracked","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","result","createBufferTracked","COPY_DST","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setIndexBuffer","drawIndexed","end","copyTextureToBuffer","texture","buffer","queue","submit","finish","CreateExpectedUint8Array","renderShape","arrayBuffer","Uint8Array","row","length","col","texel","kBytesPerTexel","byteOffset","g","test","desc","paramsSubcasesOnly","_indexCount","_expectedShape","fn","t","params","expectedTextureValues","expectGPUBufferValuesEqual","u","combine","expectedShape","indexFormat16","indexFormat32","kPrimitiveTopology","pipeline32","pipeline16","setPipelineBeforeSetIndexBuffer","setIndexBufferBeforeSetPipeline","combineWithParams","_indices"],"sources":["../../../../../src/webgpu/api/operation/vertex_state/index_format.spec.ts"],"sourcesContent":["export const description = `\nTest indexing, index format and primitive restart.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport { getTextureCopyLayout } from '../../../util/texture/layout.js';\n\nconst kHeight = 4;\nconst kWidth = 8;\nconst kTextureFormat = 'r8uint' as const;\n\n/** 4x4 grid of r8uint values (each 0 or 1). */\ntype Raster8x4 = readonly [\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n];\n\n/** Expected 4x4 rasterization of a bottom-left triangle. */\nconst kBottomLeftTriangle: Raster8x4 = [\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0],\n];\n\n/** Expected 4x4 rasterization filling the whole quad. */\nconst kSquare: Raster8x4 = [\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n];\n\n/** Expected 4x4 rasterization with no pixels. */\nconst kNothing: Raster8x4 = [\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nconst { byteLength, bytesPerRow, rowsPerImage } = getTextureCopyLayout(kTextureFormat, '2d', [\n  kWidth,\n  kHeight,\n  1,\n]);\n\nclass IndexFormatTest extends AllFeaturesMaxLimitsGPUTest {\n  MakeRenderPipeline(\n    topology: GPUPrimitiveTopology,\n    stripIndexFormat?: GPUIndexFormat\n  ): GPURenderPipeline {\n    const vertexModule = this.device.createShaderModule({\n      // NOTE: These positions will create triangles that cut right through pixel centers. If this\n      // results in different rasterization results on different hardware, tweak to avoid this.\n      code: `\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex : u32)\n             -> @builtin(position) vec4<f32> {\n          var pos = array<vec2<f32>, 4>(\n            vec2<f32>(0.01,  0.98),\n            vec2<f32>(0.99, -0.98),\n            vec2<f32>(0.99,  0.98),\n            vec2<f32>(0.01, -0.98));\n\n          if (VertexIndex == 0xFFFFu || VertexIndex == 0xFFFFFFFFu) {\n            return vec4<f32>(-0.99, -0.98, 0.0, 1.0);\n          }\n          return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n      `,\n    });\n\n    const fragmentModule = this.device.createShaderModule({\n      code: `\n        @fragment\n        fn main() -> @location(0) u32 {\n          return 1u;\n        }\n      `,\n    });\n\n    return this.device.createRenderPipeline({\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [] }),\n      vertex: { module: vertexModule, entryPoint: 'main' },\n      fragment: {\n        module: fragmentModule,\n        entryPoint: 'main',\n        targets: [{ format: kTextureFormat }],\n      },\n      primitive: {\n        topology,\n        stripIndexFormat,\n      },\n    });\n  }\n\n  CreateIndexBuffer(indices: readonly number[], indexFormat: GPUIndexFormat): GPUBuffer {\n    const typedArrayConstructor = { uint16: Uint16Array, uint32: Uint32Array }[indexFormat];\n    return this.makeBufferWithContents(new typedArrayConstructor(indices), GPUBufferUsage.INDEX);\n  }\n\n  run(\n    indexBuffer: GPUBuffer,\n    indexCount: number,\n    indexFormat: GPUIndexFormat,\n    indexOffset: number = 0,\n    primitiveTopology: GPUPrimitiveTopology = 'triangle-list'\n  ): GPUBuffer {\n    let pipeline: GPURenderPipeline;\n    // The indexFormat must be set in render pipeline descriptor that specifies a strip primitive\n    // topology for primitive restart testing\n    if (primitiveTopology === 'line-strip' || primitiveTopology === 'triangle-strip') {\n      pipeline = this.MakeRenderPipeline(primitiveTopology, indexFormat);\n    } else {\n      pipeline = this.MakeRenderPipeline(primitiveTopology);\n    }\n\n    const colorAttachment = this.createTextureTracked({\n      format: kTextureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const result = this.createBufferTracked({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    return result;\n  }\n\n  CreateExpectedUint8Array(renderShape: Raster8x4): Uint8Array {\n    const arrayBuffer = new Uint8Array(byteLength);\n    for (let row = 0; row < renderShape.length; row++) {\n      for (let col = 0; col < renderShape[row].length; col++) {\n        const texel: 0 | 1 = renderShape[row][col];\n\n        const kBytesPerTexel = 1; // r8uint\n        const byteOffset = row * bytesPerRow + col * kBytesPerTexel;\n        arrayBuffer[byteOffset] = texel;\n      }\n    }\n    return arrayBuffer;\n  }\n}\n\nexport const g = makeTestGroup(IndexFormatTest);\n\ng.test('index_format,uint16')\n  .desc('Test rendering result of indexed draw with index format of uint16.')\n  .paramsSubcasesOnly([\n    { indexOffset: 0, _indexCount: 10, _expectedShape: kSquare },\n    { indexOffset: 6, _indexCount: 6, _expectedShape: kBottomLeftTriangle },\n    { indexOffset: 18, _indexCount: 0, _expectedShape: kNothing },\n  ])\n  .fn(t => {\n    const { indexOffset, _indexCount, _expectedShape } = t.params;\n\n    // If this is written as uint16 but interpreted as uint32, it will have index 1 and 2 be both 0\n    // and render nothing.\n    // And the index buffer size - offset must be not less than the size required by triangle\n    // list, otherwise it also render nothing.\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n    const indexBuffer = t.CreateIndexBuffer(indices, 'uint16');\n    const result = t.run(indexBuffer, _indexCount, 'uint16', indexOffset);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('index_format,uint32')\n  .desc('Test rendering result of indexed draw with index format of uint32.')\n  .paramsSubcasesOnly([\n    { indexOffset: 0, _indexCount: 10, _expectedShape: kSquare },\n    { indexOffset: 12, _indexCount: 7, _expectedShape: kBottomLeftTriangle },\n    { indexOffset: 36, _indexCount: 0, _expectedShape: kNothing },\n  ])\n  .fn(t => {\n    const { indexOffset, _indexCount, _expectedShape } = t.params;\n\n    // If this is interpreted as uint16, then it would be 0, 1, 0, ... and would draw nothing.\n    // And the index buffer size - offset must be not less than the size required by triangle\n    // list, otherwise it also render nothing.\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n    const indexBuffer = t.CreateIndexBuffer(indices, 'uint32');\n    const result = t.run(indexBuffer, _indexCount, 'uint32', indexOffset);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('index_format,change_pipeline_after_setIndexBuffer')\n  .desc('Test that setting the index buffer before the pipeline works correctly.')\n  .params(u => u.combine('setPipelineBeforeSetIndexBuffer', [false, true]))\n  .fn(t => {\n    const indexOffset = 12;\n    const indexCount = 7;\n    const expectedShape = kBottomLeftTriangle;\n\n    const indexFormat16 = 'uint16';\n    const indexFormat32 = 'uint32';\n\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n    const indexBuffer = t.CreateIndexBuffer(indices, indexFormat32);\n\n    const kPrimitiveTopology = 'triangle-strip';\n    const pipeline32 = t.MakeRenderPipeline(kPrimitiveTopology, indexFormat32);\n    const pipeline16 = t.MakeRenderPipeline(kPrimitiveTopology, indexFormat16);\n\n    const colorAttachment = t.createTextureTracked({\n      format: kTextureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const result = t.createBufferTracked({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    if (t.params.setPipelineBeforeSetIndexBuffer) {\n      pass.setPipeline(pipeline16);\n    }\n    pass.setIndexBuffer(indexBuffer, indexFormat32, indexOffset);\n    pass.setPipeline(pipeline32); // Set the pipeline for 'indexFormat32' again.\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n    t.device.queue.submit([encoder.finish()]);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('index_format,setIndexBuffer_before_setPipeline')\n  .desc('Test that setting the index buffer before the pipeline works correctly.')\n  .params(u => u.combine('setIndexBufferBeforeSetPipeline', [false, true]))\n  .fn(t => {\n    const indexOffset = 12;\n    const indexCount = 7;\n    const expectedShape = kBottomLeftTriangle;\n\n    const indexFormat = 'uint32';\n\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n    const indexBuffer = t.CreateIndexBuffer(indices, indexFormat);\n\n    const kPrimitiveTopology = 'triangle-strip';\n    const pipeline = t.MakeRenderPipeline(kPrimitiveTopology, indexFormat);\n\n    const colorAttachment = t.createTextureTracked({\n      format: kTextureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const result = t.createBufferTracked({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    if (t.params.setIndexBufferBeforeSetPipeline) {\n      pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n      pass.setPipeline(pipeline);\n    } else {\n      pass.setPipeline(pipeline);\n      pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    }\n\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n    t.device.queue.submit([encoder.finish()]);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('index_format,setIndexBuffer_different_formats')\n  .desc(\n    `\n  Test that index buffers of multiple formats can be used with a pipeline that doesn't use strip\n  primitive topology.\n  `\n  )\n  .fn(t => {\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n\n    // Create a pipeline to be used by different index formats.\n    const kPrimitiveTopology = 'triangle-list';\n    const pipeline = t.MakeRenderPipeline(kPrimitiveTopology);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(kBottomLeftTriangle);\n\n    const colorAttachment = t.createTextureTracked({\n      format: kTextureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const result = t.createBufferTracked({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    let encoder = t.device.createCommandEncoder();\n    {\n      const indexFormat = 'uint32';\n      const indexOffset = 12;\n      const indexCount = 7;\n      const indexBuffer = t.CreateIndexBuffer(indices, indexFormat);\n\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: [0, 0, 0, 0],\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n\n      pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n      pass.setPipeline(pipeline);\n      pass.drawIndexed(indexCount);\n      pass.end();\n      encoder.copyTextureToBuffer(\n        { texture: colorAttachment },\n        { buffer: result, bytesPerRow, rowsPerImage },\n        [kWidth, kHeight]\n      );\n    }\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n\n    // Call setIndexBuffer with the pipeline and a different index format buffer.\n    encoder = t.device.createCommandEncoder();\n    {\n      const indexFormat = 'uint16';\n      const indexOffset = 6;\n      const indexCount = 6;\n      const indexBuffer = t.CreateIndexBuffer(indices, indexFormat);\n\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: [0, 0, 0, 0],\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n\n      pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n      pass.setPipeline(pipeline);\n      pass.drawIndexed(indexCount);\n      pass.end();\n      encoder.copyTextureToBuffer(\n        { texture: colorAttachment },\n        { buffer: result, bytesPerRow, rowsPerImage },\n        [kWidth, kHeight]\n      );\n    }\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('primitive_restart')\n  .desc(\n    `\nTest primitive restart with each primitive topology.\n\nPrimitive restart should be always active with strip primitive topologies\n('line-strip' or 'triangle-strip') and never active for other topologies, where\nthe primitive restart value isn't special and should be treated as a regular index value.\n\nThe value -1 gets uploaded as 0xFFFF or 0xFFFF_FFFF according to the format.\n\nThe positions of these points are embedded in the shader above, and look like this:\n  |   0  2|\n  |       |\n  -1  3  1|\n\nBelow are the indices lists used for each test, and the expected rendering result of each\n(approximately, in the case of incorrect results). This shows the expected result (marked '->')\nis different from what you would get if the topology were incorrect.\n\n- primitiveTopology: triangle-list\n  indices: [0, 1, 3, -1, 2, 1, 0, 0],\n   -> triangle-list:              (0, 1, 3), (-1, 2, 1)\n        |    #  #|\n        |    ####|\n        |   #####|\n        | #######|\n      triangle-list with restart: (0, 1, 3), (2, 1, 0)\n      triangle-strip:             (0, 1, 3), (2, 1, 0), (1, 0, 0)\n        |    ####|\n        |    ####|\n        |    ####|\n        |    ####|\n      triangle-strip w/o restart: (0, 1, 3), (1, 3, -1), (3, -1, 2), (-1, 2, 1), (2, 1, 0), (1, 0, 0)\n        |    ####|\n        |    ####|\n        |   #####|\n        | #######|\n\n- primitiveTopology: triangle-strip\n  indices: [3, 1, 0, -1, 2, 2, 1, 3],\n   -> triangle-strip:             (3, 1, 0), (2, 2, 1), (2, 1, 3)\n        |    #  #|\n        |    ####|\n        |    ####|\n        |    ####|\n      triangle-strip w/o restart: (3, 1, 0), (1, 0, -1), (0, -1, 2), (2, 2, 1), (2, 3, 1)\n        |    ####|\n        |   #####|\n        |  ######|\n        | #######|\n      triangle-list:              (3, 1, 0), (-1, 2, 2)\n      triangle-list with restart: (3, 1, 0), (2, 2, 1)\n        |        |\n        |    #   |\n        |    ##  |\n        |    ### |\n\n- primitiveTopology: point, line-list, line-strip:\n  indices: [0, 1, -1, 2, -1, 2, 3, 0],\n   -> point-list:             (0), (1), (-1), (2), (3), (0)\n        |    #  #|\n        |        |\n        |        |\n        |#   #  #|\n      point-list with restart (0), (1), (2), (3), (0)\n        |    #  #|\n        |        |\n        |        |\n        |    #  #|\n   -> line-list:              (0, 1), (-1, 2), (3, 0)\n        |    # ##|\n        |    ##  |\n        |  ### # |\n        |##  #  #|\n      line-list with restart: (0, 1), (2, 3)\n        |    #  #|\n        |     ## |\n        |     ## |\n        |    #  #|\n   -> line-strip:             (0, 1), (2, 3), (3, 0)\n        |    #  #|\n        |    ### |\n        |    ### |\n        |    #  #|\n      line-strip w/o restart: (0, 1), (1, -1), (-1, 2), (2, 3), (3, 3)\n        |    # ##|\n        |    ### |\n        |  ## ## |\n        |########|\n`\n  )\n  .params(u =>\n    u //\n      .combine('indexFormat', ['uint16', 'uint32'] as const)\n      .combineWithParams([\n        {\n          primitiveTopology: 'point-list',\n          _indices: [0, 1, -1, 2, 3, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 1, 0, 0, 1],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [1, 0, 0, 0, 1, 0, 0, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'line-list',\n          _indices: [0, 1, -1, 2, 3, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 1, 0, 1, 1],\n            [0, 0, 0, 0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 1, 0, 1, 0],\n            [1, 1, 0, 0, 1, 0, 0, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'line-strip',\n          _indices: [0, 1, -1, 2, 3, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 1, 0, 0, 1],\n            [0, 0, 0, 0, 1, 1, 1, 0],\n            [0, 0, 0, 0, 1, 1, 1, 0],\n            [0, 0, 0, 0, 1, 0, 0, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'triangle-list',\n          _indices: [0, 1, 3, -1, 2, 1, 0, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 1, 1, 1, 1],\n            [0, 0, 0, 1, 1, 1, 1, 1],\n            [0, 1, 1, 1, 1, 1, 1, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'triangle-strip',\n          _indices: [3, 1, 0, -1, 2, 2, 1, 3],\n          _expectedShape: [\n            [0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 1, 0, 1, 1],\n            [0, 0, 0, 0, 1, 1, 1, 1],\n            [0, 0, 0, 0, 1, 1, 1, 1],\n          ],\n        },\n      ] as const)\n  )\n  .fn(t => {\n    const { indexFormat, primitiveTopology, _indices, _expectedShape } = t.params;\n\n    const indexBuffer = t.CreateIndexBuffer(_indices, indexFormat);\n    const result = t.run(indexBuffer, _indices.length, indexFormat, 0, primitiveTopology);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n"],"mappings":"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"}