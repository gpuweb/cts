{"version":3,"file":"basic.spec.js","names":["description","makeTestGroup","now","AllFeaturesMaxLimitsGPUTest","checkElementsEqual","g","test","fn","t","dst","createBufferTracked","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","colorAttachment","createTextureTracked","format","width","height","depthOrArrayLayers","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachmentView","createView","encoder","device","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","clearValue","r","b","a","loadOp","storeOp","end","copyTextureToBuffer","texture","mipLevel","origin","x","y","z","buffer","bytesPerRow","queue","submit","finish","expectGPUBufferValuesEqual","Uint8Array","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","setPipeline","draw","desc","params","u","combine","indexed","indirect","kBytesPerRow","paramsBuffer","UNIFORM","indirectBuffer","INDIRECT","writeIndirectParams","count","instanceCount","Uint32Array","writeBuffer","indexBuffer","kMaxIndices","BYTES_PER_ELEMENT","INDEX","mappedAtCreation","indexData","getMappedRange","i","unmap","bgLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","bindGroup","createBindGroup","resource","createPipelineLayout","bindGroupLayouts","runPipeline","numVertices","numInstances","setBindGroup","setIndexBuffer","drawIndexedIndirect","drawIndirect","drawIndexed","yellow","allYellow","row","expectGPUBufferValuesPassCheck","data","srcByteOffset","type","typedLength","maxDurationMs","counts","vertexCounts","start","onSubmittedWorkDone","duration"],"sources":["../../../../../src/webgpu/api/operation/rendering/basic.spec.ts"],"sourcesContent":["export const description = `\nBasic command buffer rendering tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { now } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('clear').fn(t => {\n  const dst = t.createBufferTracked({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: colorAttachmentView,\n        clearValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  });\n  pass.end();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n\ng.test('fullscreen_quad').fn(t => {\n  const dst = t.createBufferTracked({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        @vertex fn main(\n          @builtin(vertex_index) VertexIndex : u32\n          ) -> @builtin(position) vec4<f32> {\n            var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                vec2<f32>(-1.0, -3.0),\n                vec2<f32>(3.0, 1.0),\n                vec2<f32>(-1.0, 1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }\n          `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n          @fragment fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }\n          `,\n      }),\n      entryPoint: 'main',\n      targets: [{ format: 'rgba8unorm' }],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: colorAttachmentView,\n        clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  });\n  pass.setPipeline(pipeline);\n  pass.draw(3);\n  pass.end();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n\ng.test('large_draw')\n  .desc(\n    `Test reasonably-sized large {draw, drawIndexed} (see also stress tests).\n\n  Tests that draw calls behave reasonably with large vertex counts for\n  non-indexed draws, large index counts for indexed draws, and large instance\n  counts in both cases. Various combinations of these counts are tested with\n  both direct and indirect draw calls.\n\n  Draw call sizes are increased incrementally over these parameters until we the\n  run out of values or completion of a draw call exceeds a fixed time limit of\n  100ms.\n\n  To validate that the drawn vertices actually made it though the pipeline on\n  each draw call, we render a 3x3 target with the positions of the first and\n  last vertices of the first and last instances in different respective corners,\n  and everything else positioned to cover only one of the intermediate\n  fragments. If the output image is completely yellow, then we can reasonably\n  infer that all vertices were drawn.\n\n  Params:\n    - indexed= {true, false} - whether to test indexed or non-indexed draw calls\n    - indirect= {true, false} - whether to use indirect or direct draw calls`\n  )\n  .params(u =>\n    u //\n      .combine('indexed', [true, false])\n      .combine('indirect', [true, false])\n  )\n  .fn(async t => {\n    const { indexed, indirect } = t.params;\n\n    const kBytesPerRow = 256;\n    const dst = t.createBufferTracked({\n      size: 3 * kBytesPerRow,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const paramsBuffer = t.createBufferTracked({\n      size: 8,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    const indirectBuffer = t.createBufferTracked({\n      size: 20,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST,\n    });\n    const writeIndirectParams = (count: number, instanceCount: number) => {\n      const params = new Uint32Array(5);\n      params[0] = count; // Vertex or index count\n      params[1] = instanceCount;\n      params[2] = 0; // First vertex or index\n      params[3] = 0; // First instance (non-indexed) or base vertex (indexed)\n      params[4] = 0; // First instance (indexed)\n      t.device.queue.writeBuffer(indirectBuffer, 0, params, 0, 5);\n    };\n\n    let indexBuffer: null | GPUBuffer = null;\n    if (indexed) {\n      const kMaxIndices = 16 * 1024 * 1024;\n      indexBuffer = t.createBufferTracked({\n        size: kMaxIndices * Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\n        mappedAtCreation: true,\n      });\n      const indexData = new Uint32Array(indexBuffer.getMappedRange());\n      for (let i = 0; i < kMaxIndices; ++i) {\n        indexData[i] = i;\n      }\n      indexBuffer.unmap();\n    }\n\n    const colorAttachment = t.createTextureTracked({\n      format: 'rgba8unorm',\n      size: { width: 3, height: 3, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const bgLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {},\n        },\n      ],\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: bgLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer: paramsBuffer },\n        },\n      ],\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: t.device.createPipelineLayout({ bindGroupLayouts: [bgLayout] }),\n\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          struct Params {\n            numVertices: u32,\n            numInstances: u32,\n          };\n\n          fn selectValue(index: u32, maxIndex: u32) -> f32 {\n            let highOrMid = select(0.0, 2.0 / 3.0, index == maxIndex - 1u);\n            return select(highOrMid, -2.0 / 3.0, index == 0u);\n          }\n\n          @group(0) @binding(0) var<uniform> params: Params;\n\n          @vertex fn main(\n              @builtin(vertex_index) v: u32,\n              @builtin(instance_index) i: u32)\n              -> @builtin(position) vec4<f32> {\n            let x = selectValue(v, params.numVertices);\n            let y = -selectValue(i, params.numInstances);\n            return vec4<f32>(x, y, 0.0, 1.0);\n          }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 1.0, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'point-list' },\n    });\n\n    const runPipeline = (numVertices: number, numInstances: number) => {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachmentView,\n            clearValue: { r: 0.0, g: 0.0, b: 1.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      if (indexBuffer !== null) {\n        pass.setIndexBuffer(indexBuffer, 'uint32');\n      }\n\n      if (indirect) {\n        writeIndirectParams(numVertices, numInstances);\n        if (indexed) {\n          pass.drawIndexedIndirect(indirectBuffer, 0);\n        } else {\n          pass.drawIndirect(indirectBuffer, 0);\n        }\n      } else {\n        if (indexed) {\n          pass.drawIndexed(numVertices, numInstances);\n        } else {\n          pass.draw(numVertices, numInstances);\n        }\n      }\n      pass.end();\n      encoder.copyTextureToBuffer(\n        { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { buffer: dst, bytesPerRow: kBytesPerRow },\n        { width: 3, height: 3, depthOrArrayLayers: 1 }\n      );\n\n      const params = new Uint32Array([numVertices, numInstances]);\n      t.device.queue.writeBuffer(paramsBuffer, 0, params, 0, 2);\n      t.device.queue.submit([encoder.finish()]);\n\n      const yellow = [0xff, 0xff, 0x00, 0xff];\n      const allYellow = new Uint8Array([...yellow, ...yellow, ...yellow]);\n      for (const row of [0, 1, 2]) {\n        t.expectGPUBufferValuesPassCheck(dst, data => checkElementsEqual(data, allYellow), {\n          srcByteOffset: row * 256,\n          type: Uint8Array,\n          typedLength: 12,\n        });\n      }\n    };\n\n    // If any iteration takes longer than this, we stop incrementing along that\n    // branch and move on to the next instance count. Note that the max\n    // supported vertex count for any iteration is 2**24 due to our choice of\n    // index buffer size.\n    const maxDurationMs = 100;\n    const counts = [\n      {\n        numInstances: 4,\n        vertexCounts: [2 ** 10, 2 ** 16, 2 ** 18, 2 ** 20, 2 ** 22, 2 ** 24],\n      },\n      {\n        numInstances: 2 ** 8,\n        vertexCounts: [2 ** 10, 2 ** 16, 2 ** 18, 2 ** 20, 2 ** 22],\n      },\n      {\n        numInstances: 2 ** 10,\n        vertexCounts: [2 ** 8, 2 ** 10, 2 ** 12, 2 ** 16, 2 ** 18, 2 ** 20],\n      },\n      {\n        numInstances: 2 ** 16,\n        vertexCounts: [2 ** 4, 2 ** 8, 2 ** 10, 2 ** 12, 2 ** 14],\n      },\n      {\n        numInstances: 2 ** 20,\n        vertexCounts: [2 ** 4, 2 ** 8, 2 ** 10],\n      },\n    ];\n    for (const { numInstances, vertexCounts } of counts) {\n      for (const numVertices of vertexCounts) {\n        const start = now();\n        runPipeline(numVertices, numInstances);\n        await t.device.queue.onSubmittedWorkDone();\n        const duration = now() - start;\n        if (duration >= maxDurationMs) {\n          break;\n        }\n      }\n    }\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,GAAG,QAAQ,iCAAiC;AACrD,SAASC,2BAA2B,QAAQ,sBAAsB;AAClE,SAASC,kBAAkB,QAAQ,iCAAiC;;AAEpE,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACE,2BAA2B,CAAC;;AAE3DE,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC,CAACC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACtB,MAAMC,GAAG,GAAGD,CAAC,CAACE,mBAAmB,CAAC;IAChCC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE;EAClD,CAAC,CAAC;;EAEF,MAAMC,eAAe,GAAGR,CAAC,CAACS,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,YAAY;IACpBP,IAAI,EAAE,EAAEQ,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,kBAAkB,EAAE,CAAC,CAAC,CAAC;IACpDT,KAAK,EAAEU,eAAe,CAACR,QAAQ,GAAGQ,eAAe,CAACC;EACpD,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAGR,eAAe,CAACS,UAAU,CAAC,CAAC;;EAExD,MAAMC,OAAO,GAAGlB,CAAC,CAACmB,MAAM,CAACC,oBAAoB,CAAC,CAAC;EAC/C,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAER,mBAAmB;MACzBS,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAE7B,CAAC,EAAE,GAAG,EAAE8B,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;MAC9CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC,CAAC;EACFT,IAAI,CAACU,GAAG,CAAC,CAAC;EACVb,OAAO,CAACc,mBAAmB;IACzB,EAAEC,OAAO,EAAEzB,eAAe,EAAE0B,QAAQ,EAAE,CAAC,EAAEC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,EAAEC,MAAM,EAAEtC,GAAG,EAAEuC,WAAW,EAAE,GAAG,CAAC,CAAC;IACjC,EAAE7B,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,kBAAkB,EAAE,CAAC,CAAC;EAC/C,CAAC;EACDb,CAAC,CAACmB,MAAM,CAACsB,KAAK,CAACC,MAAM,CAAC,CAACxB,OAAO,CAACyB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEzC3C,CAAC,CAAC4C,0BAA0B,CAAC3C,GAAG,EAAE,IAAI4C,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC;;AAEFhD,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,CAAAC,CAAC,KAAI;EAChC,MAAMC,GAAG,GAAGD,CAAC,CAACE,mBAAmB,CAAC;IAChCC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE;EAClD,CAAC,CAAC;;EAEF,MAAMC,eAAe,GAAGR,CAAC,CAACS,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,YAAY;IACpBP,IAAI,EAAE,EAAEQ,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,kBAAkB,EAAE,CAAC,CAAC,CAAC;IACpDT,KAAK,EAAEU,eAAe,CAACR,QAAQ,GAAGQ,eAAe,CAACC;EACpD,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAGR,eAAe,CAACS,UAAU,CAAC,CAAC;;EAExD,MAAM6B,QAAQ,GAAG9C,CAAC,CAACmB,MAAM,CAAC4B,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE;MACNC,MAAM,EAAElD,CAAC,CAACmB,MAAM,CAACgC,kBAAkB,CAAC;QAClCC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRJ,MAAM,EAAElD,CAAC,CAACmB,MAAM,CAACgC,kBAAkB,CAAC;QAClCC,IAAI,EAAG;AACf;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE,MAAM;MAClBE,OAAO,EAAE,CAAC,EAAE7C,MAAM,EAAE,YAAY,CAAC,CAAC;IACpC,CAAC;IACD8C,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAe,CAAC;EACzC,CAAC,CAAC;;EAEF,MAAMvC,OAAO,GAAGlB,CAAC,CAACmB,MAAM,CAACC,oBAAoB,CAAC,CAAC;EAC/C,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAER,mBAAmB;MACzBS,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAE7B,CAAC,EAAE,GAAG,EAAE8B,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;MAC9CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC,CAAC;EACFT,IAAI,CAACqC,WAAW,CAACZ,QAAQ,CAAC;EAC1BzB,IAAI,CAACsC,IAAI,CAAC,CAAC,CAAC;EACZtC,IAAI,CAACU,GAAG,CAAC,CAAC;EACVb,OAAO,CAACc,mBAAmB;IACzB,EAAEC,OAAO,EAAEzB,eAAe,EAAE0B,QAAQ,EAAE,CAAC,EAAEC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,EAAEC,MAAM,EAAEtC,GAAG,EAAEuC,WAAW,EAAE,GAAG,CAAC,CAAC;IACjC,EAAE7B,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,kBAAkB,EAAE,CAAC,CAAC;EAC/C,CAAC;EACDb,CAAC,CAACmB,MAAM,CAACsB,KAAK,CAACC,MAAM,CAAC,CAACxB,OAAO,CAACyB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEzC3C,CAAC,CAAC4C,0BAA0B,CAAC3C,GAAG,EAAE,IAAI4C,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC;;AAEFhD,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjB8D,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACjCA,OAAO,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;AACtC,CAAC;AACAhE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEgE,OAAO,EAAEC,QAAQ,CAAC,CAAC,GAAGjE,CAAC,CAAC6D,MAAM;;EAEtC,MAAMK,YAAY,GAAG,GAAG;EACxB,MAAMjE,GAAG,GAAGD,CAAC,CAACE,mBAAmB,CAAC;IAChCC,IAAI,EAAE,CAAC,GAAG+D,YAAY;IACtB9D,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE;EAClD,CAAC,CAAC;;EAEF,MAAM4D,YAAY,GAAGnE,CAAC,CAACE,mBAAmB,CAAC;IACzCC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAEC,cAAc,CAAC+D,OAAO,GAAG/D,cAAc,CAACE;EACjD,CAAC,CAAC;;EAEF,MAAM8D,cAAc,GAAGrE,CAAC,CAACE,mBAAmB,CAAC;IAC3CC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAEC,cAAc,CAACiE,QAAQ,GAAGjE,cAAc,CAACE;EAClD,CAAC,CAAC;EACF,MAAMgE,mBAAmB,GAAGA,CAACC,KAAa,EAAEC,aAAqB,KAAK;IACpE,MAAMZ,MAAM,GAAG,IAAIa,WAAW,CAAC,CAAC,CAAC;IACjCb,MAAM,CAAC,CAAC,CAAC,GAAGW,KAAK,CAAC,CAAC;IACnBX,MAAM,CAAC,CAAC,CAAC,GAAGY,aAAa;IACzBZ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACf7D,CAAC,CAACmB,MAAM,CAACsB,KAAK,CAACkC,WAAW,CAACN,cAAc,EAAE,CAAC,EAAER,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7D,CAAC;;EAED,IAAIe,WAA6B,GAAG,IAAI;EACxC,IAAIZ,OAAO,EAAE;IACX,MAAMa,WAAW,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;IACpCD,WAAW,GAAG5E,CAAC,CAACE,mBAAmB,CAAC;MAClCC,IAAI,EAAE0E,WAAW,GAAGH,WAAW,CAACI,iBAAiB;MACjD1E,KAAK,EAAEC,cAAc,CAAC0E,KAAK,GAAG1E,cAAc,CAACE,QAAQ;MACrDyE,gBAAgB,EAAE;IACpB,CAAC,CAAC;IACF,MAAMC,SAAS,GAAG,IAAIP,WAAW,CAACE,WAAW,CAACM,cAAc,CAAC,CAAC,CAAC;IAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,WAAW,EAAE,EAAEM,CAAC,EAAE;MACpCF,SAAS,CAACE,CAAC,CAAC,GAAGA,CAAC;IAClB;IACAP,WAAW,CAACQ,KAAK,CAAC,CAAC;EACrB;;EAEA,MAAM5E,eAAe,GAAGR,CAAC,CAACS,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,YAAY;IACpBP,IAAI,EAAE,EAAEQ,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,kBAAkB,EAAE,CAAC,CAAC,CAAC;IACpDT,KAAK,EAAEU,eAAe,CAACR,QAAQ,GAAGQ,eAAe,CAACC;EACpD,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAGR,eAAe,CAACS,UAAU,CAAC,CAAC;;EAExD,MAAMoE,QAAQ,GAAGrF,CAAC,CAACmB,MAAM,CAACmE,qBAAqB,CAAC;IAC9CC,OAAO,EAAE;IACP;MACEC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAEC,cAAc,CAACC,MAAM;MACjCpD,MAAM,EAAE,CAAC;IACX,CAAC;;EAEL,CAAC,CAAC;;EAEF,MAAMqD,SAAS,GAAG5F,CAAC,CAACmB,MAAM,CAAC0E,eAAe,CAAC;IACzC7C,MAAM,EAAEqC,QAAQ;IAChBE,OAAO,EAAE;IACP;MACEC,OAAO,EAAE,CAAC;MACVM,QAAQ,EAAE,EAAEvD,MAAM,EAAE4B,YAAY,CAAC;IACnC,CAAC;;EAEL,CAAC,CAAC;;EAEF,MAAMrB,QAAQ,GAAG9C,CAAC,CAACmB,MAAM,CAAC4B,oBAAoB,CAAC;IAC7CC,MAAM,EAAEhD,CAAC,CAACmB,MAAM,CAAC4E,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAC;;IAEvEpC,MAAM,EAAE;MACNC,MAAM,EAAElD,CAAC,CAACmB,MAAM,CAACgC,kBAAkB,CAAC;QAClCC,IAAI,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQ,CAAC,CAAC;MACFC,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRJ,MAAM,EAAElD,CAAC,CAACmB,MAAM,CAACgC,kBAAkB,CAAC;QAClCC,IAAI,EAAG;AACjB;AACA;AACA;AACA;MACQ,CAAC,CAAC;MACFC,UAAU,EAAE,MAAM;MAClBE,OAAO,EAAE,CAAC,EAAE7C,MAAM,EAAE,YAAY,CAAC,CAAC;IACpC,CAAC;IACD8C,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAY,CAAC;EACtC,CAAC,CAAC;;EAEF,MAAMwC,WAAW,GAAGA,CAACC,WAAmB,EAAEC,YAAoB,KAAK;IACjE,MAAMjF,OAAO,GAAGlB,CAAC,CAACmB,MAAM,CAACC,oBAAoB,CAAC,CAAC;IAC/C,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;MACnCC,gBAAgB,EAAE;MAChB;QACEC,IAAI,EAAER,mBAAmB;QACzBS,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAE7B,CAAC,EAAE,GAAG,EAAE8B,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9CC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;;IAEFT,IAAI,CAACqC,WAAW,CAACZ,QAAQ,CAAC;IAC1BzB,IAAI,CAAC+E,YAAY,CAAC,CAAC,EAAER,SAAS,CAAC;IAC/B,IAAIhB,WAAW,KAAK,IAAI,EAAE;MACxBvD,IAAI,CAACgF,cAAc,CAACzB,WAAW,EAAE,QAAQ,CAAC;IAC5C;;IAEA,IAAIX,QAAQ,EAAE;MACZM,mBAAmB,CAAC2B,WAAW,EAAEC,YAAY,CAAC;MAC9C,IAAInC,OAAO,EAAE;QACX3C,IAAI,CAACiF,mBAAmB,CAACjC,cAAc,EAAE,CAAC,CAAC;MAC7C,CAAC,MAAM;QACLhD,IAAI,CAACkF,YAAY,CAAClC,cAAc,EAAE,CAAC,CAAC;MACtC;IACF,CAAC,MAAM;MACL,IAAIL,OAAO,EAAE;QACX3C,IAAI,CAACmF,WAAW,CAACN,WAAW,EAAEC,YAAY,CAAC;MAC7C,CAAC,MAAM;QACL9E,IAAI,CAACsC,IAAI,CAACuC,WAAW,EAAEC,YAAY,CAAC;MACtC;IACF;IACA9E,IAAI,CAACU,GAAG,CAAC,CAAC;IACVb,OAAO,CAACc,mBAAmB;MACzB,EAAEC,OAAO,EAAEzB,eAAe,EAAE0B,QAAQ,EAAE,CAAC,EAAEC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACvE,EAAEC,MAAM,EAAEtC,GAAG,EAAEuC,WAAW,EAAE0B,YAAY,CAAC,CAAC;MAC1C,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,kBAAkB,EAAE,CAAC,CAAC;IAC/C,CAAC;;IAED,MAAMgD,MAAM,GAAG,IAAIa,WAAW,CAAC,CAACwB,WAAW,EAAEC,YAAY,CAAC,CAAC;IAC3DnG,CAAC,CAACmB,MAAM,CAACsB,KAAK,CAACkC,WAAW,CAACR,YAAY,EAAE,CAAC,EAAEN,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACzD7D,CAAC,CAACmB,MAAM,CAACsB,KAAK,CAACC,MAAM,CAAC,CAACxB,OAAO,CAACyB,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEzC,MAAM8D,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACvC,MAAMC,SAAS,GAAG,IAAI7D,UAAU,CAAC,CAAC,GAAG4D,MAAM,EAAE,GAAGA,MAAM,EAAE,GAAGA,MAAM,CAAC,CAAC;IACnE,KAAK,MAAME,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MAC3B3G,CAAC,CAAC4G,8BAA8B,CAAC3G,GAAG,EAAE,CAAA4G,IAAI,KAAIjH,kBAAkB,CAACiH,IAAI,EAAEH,SAAS,CAAC,EAAE;QACjFI,aAAa,EAAEH,GAAG,GAAG,GAAG;QACxBI,IAAI,EAAElE,UAAU;QAChBmE,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA,MAAMC,aAAa,GAAG,GAAG;EACzB,MAAMC,MAAM,GAAG;EACb;IACEf,YAAY,EAAE,CAAC;IACfgB,YAAY,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE;EACrE,CAAC;EACD;IACEhB,YAAY,EAAE,CAAC,IAAI,CAAC;IACpBgB,YAAY,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE;EAC5D,CAAC;EACD;IACEhB,YAAY,EAAE,CAAC,IAAI,EAAE;IACrBgB,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE;EACpE,CAAC;EACD;IACEhB,YAAY,EAAE,CAAC,IAAI,EAAE;IACrBgB,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE;EAC1D,CAAC;EACD;IACEhB,YAAY,EAAE,CAAC,IAAI,EAAE;IACrBgB,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;EACxC,CAAC,CACF;;EACD,KAAK,MAAM,EAAEhB,YAAY,EAAEgB,YAAY,CAAC,CAAC,IAAID,MAAM,EAAE;IACnD,KAAK,MAAMhB,WAAW,IAAIiB,YAAY,EAAE;MACtC,MAAMC,KAAK,GAAG1H,GAAG,CAAC,CAAC;MACnBuG,WAAW,CAACC,WAAW,EAAEC,YAAY,CAAC;MACtC,MAAMnG,CAAC,CAACmB,MAAM,CAACsB,KAAK,CAAC4E,mBAAmB,CAAC,CAAC;MAC1C,MAAMC,QAAQ,GAAG5H,GAAG,CAAC,CAAC,GAAG0H,KAAK;MAC9B,IAAIE,QAAQ,IAAIL,aAAa,EAAE;QAC7B;MACF;IACF;EACF;AACF,CAAC,CAAC"}