{"version":3,"file":"depth.spec.js","names":["description","makeTestGroup","isStencilTextureFormat","kDepthTextureFormats","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","TexelView","backgroundColor","triangleColor","kBaseColor","Float32Array","kRedStencilColor","kGreenStencilColor","DepthTest","runDepthStateTest","testStates","expectedColor","renderTargetFormat","renderTarget","createTextureTracked","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthStencilFormat","depthTexture","sampleCount","mipLevelCount","COPY_DST","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","device","createCommandEncoder","pass","beginRenderPass","colorAttachments","loadOp","storeOp","test","testPipeline","createRenderPipelineForTest","state","depth","setPipeline","setBindGroup","createBindGroupForTest","getBindGroupLayout","color","draw","end","queue","submit","finish","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","_coords","expectTexelViewComparisonIsOkInTexture","texture","depthStencil","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","desc","fn","t","depthSpencilFormat","depthWriteEnabled","depthCompare","last","i","j","params","u","combineWithParams","lastDepth","_expectedColor","stencilState","compare","failOp","depthFailOp","passOp","baseState","stencilFront","stencilBack","stencilReadMask","stencilWriteMask","depthWriteState","checkState","secondDepth","depthTestState","kMiddleDepthValue","combine","depthClearValue","_expected","skipIfTextureFormatNotSupported","colorAttachmentFormat","colorAttachment","colorAttachmentView","TEXTURE_BINDING","depthTextureView","pipelineDescriptor","pipeline","stencilClearValue","clearValue","r","b","a","expectSinglePixelComparisonsAreOkInTexture","coord","x","y","exp","Uint8Array","depthBufferFormat","reversed"],"sources":["../../../../../src/webgpu/api/operation/rendering/depth.spec.ts"],"sourcesContent":["export const description = `\nTest related to depth buffer, depth op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { isStencilTextureFormat, kDepthTextureFormats } from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nconst backgroundColor = [0x00, 0x00, 0x00, 0xff];\nconst triangleColor = [0xff, 0xff, 0xff, 0xff];\n\nconst kBaseColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\nconst kRedStencilColor = new Float32Array([1.0, 0.0, 0.0, 1.0]);\nconst kGreenStencilColor = new Float32Array([0.0, 1.0, 0.0, 1.0]);\n\ntype TestStates = {\n  state: GPUDepthStencilState;\n  color: Float32Array;\n  depth: number;\n};\n\nclass DepthTest extends TextureTestMixin(AllFeaturesMaxLimitsGPUTest) {\n  runDepthStateTest(testStates: TestStates[], expectedColor: Float32Array) {\n    const renderTargetFormat = 'rgba8unorm';\n\n    const renderTarget = this.createTextureTracked({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const depthTexture = this.createTextureTracked({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthStencilFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n    });\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    // Draw a triangle with the given depth state, color, and depth.\n    for (const test of testStates) {\n      const testPipeline = this.createRenderPipelineForTest(test.state, test.depth);\n      pass.setPipeline(testPipeline);\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), test.color)\n      );\n      pass.draw(1);\n    }\n\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    const expColor = {\n      R: expectedColor[0],\n      G: expectedColor[1],\n      B: expectedColor[2],\n      A: expectedColor[3],\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, _coords => expColor);\n\n    this.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [1, 1]);\n  }\n\n  createRenderPipelineForTest(\n    depthStencil: GPUDepthStencilState,\n    depth: number\n  ): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, ${depth}, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n\n            @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(params.color);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil,\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(DepthTest);\n\ng.test('depth_disabled')\n  .desc('Tests render results with depth test disabled.')\n  .fn(t => {\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const state = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always' as GPUCompareFunction,\n    };\n\n    const testStates = [\n      { state, color: kBaseColor, depth: 0.0 },\n      { state, color: kRedStencilColor, depth: 0.5 },\n      { state, color: kGreenStencilColor, depth: 1.0 },\n    ];\n\n    // Test that for all combinations and ensure the last triangle drawn is the one visible\n    // regardless of depth testing.\n    for (let last = 0; last < 3; ++last) {\n      const i = (last + 1) % 3;\n      const j = (last + 2) % 3;\n\n      t.runDepthStateTest([testStates[i], testStates[j], testStates[last]], testStates[last].color);\n      t.runDepthStateTest([testStates[j], testStates[i], testStates[last]], testStates[last].color);\n    }\n  });\n\ng.test('depth_write_disabled')\n  .desc(\n    `\n  Test that depthWriteEnabled behaves as expected.\n  If enabled, a depth value of 0.0 is written.\n  If disabled, it's not written, so it keeps the previous value of 1.0.\n  Use a depthCompare: 'equal' check at the end to check the value.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { depthWriteEnabled: false, lastDepth: 0.0, _expectedColor: kRedStencilColor },\n        { depthWriteEnabled: true, lastDepth: 0.0, _expectedColor: kGreenStencilColor },\n        { depthWriteEnabled: false, lastDepth: 1.0, _expectedColor: kGreenStencilColor },\n        { depthWriteEnabled: true, lastDepth: 1.0, _expectedColor: kRedStencilColor },\n      ])\n  )\n  .fn(t => {\n    const { depthWriteEnabled, lastDepth, _expectedColor } = t.params;\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const stencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      depthFailOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const depthWriteState = {\n      format: depthStencilFormat,\n      depthWriteEnabled,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const checkState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const testStates = [\n      // Draw a base point with depth write enabled.\n      { state: baseState, color: kBaseColor, depth: 1.0 },\n      // Draw a second point without depth write enabled.\n      { state: depthWriteState, color: kRedStencilColor, depth: 0.0 },\n      // Draw a third point which should occlude the second even though it is behind it.\n      { state: checkState, color: kGreenStencilColor, depth: lastDepth },\n    ];\n\n    t.runDepthStateTest(testStates, _expectedColor);\n  });\n\ng.test('depth_test_fail')\n  .desc(\n    `\n  Test that render results on depth test failure cases with 'less' depthCompare operation and\n  depthWriteEnabled is true.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { secondDepth: 1.0, lastDepth: 2.0, _expectedColor: kBaseColor }, // fail -> fail.\n        { secondDepth: 0.0, lastDepth: 2.0, _expectedColor: kRedStencilColor }, // pass -> fail.\n        { secondDepth: 2.0, lastDepth: 0.9, _expectedColor: kGreenStencilColor }, // fail -> pass.\n      ] as const)\n  )\n  .fn(t => {\n    const { secondDepth, lastDepth, _expectedColor } = t.params;\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const depthTestState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const testStates = [\n      { state: baseState, color: kBaseColor, depth: 1.0 },\n      { state: depthTestState, color: kRedStencilColor, depth: secondDepth },\n      { state: depthTestState, color: kGreenStencilColor, depth: lastDepth },\n    ];\n\n    t.runDepthStateTest(testStates, _expectedColor);\n  });\n\n// Use a depth value that's not exactly 0.5 because it is exactly between two depth16unorm value and\n// can get rounded either way (and a different way between shaders and clearDepthValue).\nconst kMiddleDepthValue = 0.5001;\n\ng.test('depth_compare_func')\n  .desc(\n    `Tests each depth compare function works properly. Clears the depth attachment to various values, and renders a point at depth 0.5 with various depthCompare modes.`\n  )\n  .params(u =>\n    u.combine('format', kDepthTextureFormats).combineWithParams([\n      { depthCompare: 'never', depthClearValue: 1.0, _expected: backgroundColor },\n      { depthCompare: 'never', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n      { depthCompare: 'never', depthClearValue: 0.0, _expected: backgroundColor },\n      { depthCompare: 'less', depthClearValue: 1.0, _expected: triangleColor },\n      { depthCompare: 'less', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n      { depthCompare: 'less', depthClearValue: 0.0, _expected: backgroundColor },\n      { depthCompare: 'less-equal', depthClearValue: 1.0, _expected: triangleColor },\n      {\n        depthCompare: 'less-equal',\n        depthClearValue: kMiddleDepthValue,\n        _expected: triangleColor,\n      },\n      { depthCompare: 'less-equal', depthClearValue: 0.0, _expected: backgroundColor },\n      { depthCompare: 'equal', depthClearValue: 1.0, _expected: backgroundColor },\n      { depthCompare: 'equal', depthClearValue: kMiddleDepthValue, _expected: triangleColor },\n      { depthCompare: 'equal', depthClearValue: 0.0, _expected: backgroundColor },\n      { depthCompare: 'not-equal', depthClearValue: 1.0, _expected: triangleColor },\n      {\n        depthCompare: 'not-equal',\n        depthClearValue: kMiddleDepthValue,\n        _expected: backgroundColor,\n      },\n      { depthCompare: 'not-equal', depthClearValue: 0.0, _expected: triangleColor },\n      { depthCompare: 'greater-equal', depthClearValue: 1.0, _expected: backgroundColor },\n      {\n        depthCompare: 'greater-equal',\n        depthClearValue: kMiddleDepthValue,\n        _expected: triangleColor,\n      },\n      { depthCompare: 'greater-equal', depthClearValue: 0.0, _expected: triangleColor },\n      { depthCompare: 'greater', depthClearValue: 1.0, _expected: backgroundColor },\n      { depthCompare: 'greater', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n      { depthCompare: 'greater', depthClearValue: 0.0, _expected: triangleColor },\n      { depthCompare: 'always', depthClearValue: 1.0, _expected: triangleColor },\n      { depthCompare: 'always', depthClearValue: kMiddleDepthValue, _expected: triangleColor },\n      { depthCompare: 'always', depthClearValue: 0.0, _expected: triangleColor },\n    ] as const)\n  )\n  .fn(t => {\n    const { depthCompare, depthClearValue, _expected, format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.createTextureTracked({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthTexture = t.createTextureTracked({\n      size: { width: 1, height: 1 },\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.5, 0.5, ${kMiddleDepthValue}, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare,\n        format,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTextureView,\n      depthClearValue,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n    };\n    if (isStencilTextureFormat(format)) {\n      depthStencilAttachment.stencilClearValue = 0;\n      depthStencilAttachment.stencilLoadOp = 'clear';\n      depthStencilAttachment.stencilStoreOp = 'store';\n    }\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment,\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n      {\n        coord: { x: 0, y: 0 },\n        exp: new Uint8Array(_expected),\n      },\n    ]);\n  });\n\ng.test('reverse_depth')\n  .desc(\n    `Tests simple rendering with reversed depth buffer, ensures depth test works properly: fragments are in correct order and out of range fragments are clipped.\n    Note that in real use case the depth range remapping is done by the modified projection matrix.\n(see https://developer.nvidia.com/content/depth-precision-visualized).`\n  )\n  .params(u => u.combine('reversed', [false, true]))\n  .fn(t => {\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.createTextureTracked({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthBufferFormat = 'depth32float';\n    const depthTexture = t.createTextureTracked({\n      size: { width: 1, height: 1 },\n      format: depthBufferFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Output {\n              @builtin(position) Position : vec4<f32>,\n              @location(0) color : vec4<f32>,\n            };\n\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32,\n              @builtin(instance_index) InstanceIndex : u32) -> Output {\n              let zv = array(0.2, 0.3, -0.1, 1.1);\n              let z = zv[InstanceIndex];\n\n              var output : Output;\n              output.Position = vec4<f32>(0.5, 0.5, z, 1.0);\n              var colors : array<vec4<f32>, 4> = array<vec4<f32>, 4>(\n                  vec4<f32>(1.0, 0.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 1.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 0.0, 1.0, 1.0),\n                  vec4<f32>(1.0, 1.0, 1.0, 1.0)\n              );\n              output.color = colors[InstanceIndex];\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main(\n              @location(0) color : vec4<f32>\n              ) -> @location(0) vec4<f32> {\n              return color;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: t.params.reversed ? 'greater' : 'less',\n        format: depthBufferFormat,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTextureView,\n\n        depthClearValue: t.params.reversed ? 0.0 : 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      },\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1, 4);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n      {\n        coord: { x: 0, y: 0 },\n        exp: new Uint8Array(\n          t.params.reversed ? [0x00, 0xff, 0x00, 0xff] : [0xff, 0x00, 0x00, 0xff]\n        ),\n      },\n    ]);\n  });\n"],"mappings":"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"}