{"version":3,"file":"depth_clip_clamp.spec.js","names":["description","makeTestGroup","canCopyFromAspectOfTextureFormat","getBlockInfoForTextureFormat","isStencilTextureFormat","kDepthTextureFormats","AllFeaturesMaxLimitsGPUTest","checkElementsBetween","checkElementsPassPredicate","g","test","desc","params","u","combine","undefined","fn","t","format","unclippedDepth","writeDepth","multisampled","skipIfTextureFormatNotSupported","skipIfDeviceDoesNotHaveFeature","hasStorageBuffers","isCompatibility","device","limits","maxStorageBuffersInFragmentStage","kNumDepthValues","kNumTestPoints","kViewportMinDepth","kViewportMaxDepth","shaderSource","module","createShaderModule","code","testPipeline","createRenderPipeline","layout","vertex","entryPoint","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","multisample","count","fragment","targets","checkPipeline","dsTexture","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","sampleCount","dsTextureView","createView","checkTextureDesc","checkTexture","checkTextureView","checkTextureMSView","bytesPerBlock","dsActual","createBufferTracked","GPUBufferUsage","COPY_DST","MAP_READ","dsExpected","checkBuffer","fragInputZFailedBuffer","STORAGE","testBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","enc","createCommandEncoder","pass","beginRenderPass","colorAttachments","depthStencilAttachment","view","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","setPipeline","setBindGroup","setViewport","draw","end","copyTextureToBuffer","texture","aspect","clearValue","resolveTarget","loadOp","storeOp","queue","submit","finish","expectGPUBufferValuesPassCheck","a","type","Float32Array","typedLength","kCheckPassedValue","predicatePrinter","leftHeader","getValueForCell","_index","Promise","all","mapAsync","GPUMapMode","READ","act","getMappedRange","exp","push","index","toFixed","value","Uint8Array","method","initPipeline","testTextureDesc","testTexture","testTextureView","testTextureMSView","resultBuffer","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/api/operation/rendering/depth_clip_clamp.spec.ts"],"sourcesContent":["export const description = `\nTests for depth clipping, depth clamping (at various points in the pipeline), and maybe extended\ndepth ranges as well.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  canCopyFromAspectOfTextureFormat,\n  getBlockInfoForTextureFormat,\n  isStencilTextureFormat,\n  kDepthTextureFormats,\n} from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport {\n  checkElementsBetween,\n  checkElementsPassPredicate,\n  CheckElementsSupplementalTableRows,\n} from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('depth_clamp_and_clip')\n  .desc(\n    `\nDepth written to the depth attachment should always be in the range of the viewport depth,\neven if it was written by the fragment shader (using frag_depth). If depth clipping is enabled,\nprimitives should be clipped to the viewport depth before rasterization; if not, these fragments\nshould be rasterized, and the fragment shader should receive out-of-viewport position.z values.\n\nTo test this, render NxN points, with N vertex depth values, by (if writeDepth=true) N\nfrag_depth values with the viewport depth set to [0.25,0.75].\n\nWhile rendering, check the fragment input position.z has the expected value (for all fragments that\nwere produced by the rasterizer) by writing the diff to a storage buffer, which is later checked to\nbe all (near) 0.\n\nThen, run another pass (which outputs every point at z=0.5 to avoid clipping) to verify the depth\nbuffer contents by outputting the expected depth with depthCompare:'not-equal': any fragments that\nhave unexpected values then get drawn to the color buffer, which is later checked to be empty.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthTextureFormats)\n      .combine('unclippedDepth', [undefined, false, true])\n      .combine('writeDepth', [false, true])\n      .combine('multisampled', [false, true])\n  )\n  .fn(async t => {\n    const { format, unclippedDepth, writeDepth, multisampled } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    if (unclippedDepth) {\n      t.skipIfDeviceDoesNotHaveFeature('depth-clip-control');\n    }\n\n    const hasStorageBuffers = t.isCompatibility\n      ? t.device.limits.maxStorageBuffersInFragmentStage! > 0\n      : true;\n\n    /** Number of depth values to test for both vertex output and frag_depth output. */\n    const kNumDepthValues = 8;\n    /** Test every combination of vertex output and frag_depth output. */\n    const kNumTestPoints = kNumDepthValues * kNumDepthValues;\n    const kViewportMinDepth = 0.25;\n    const kViewportMaxDepth = 0.75;\n\n    const shaderSource = `\n      // Test depths, with viewport range corresponding to [0,1].\n      var<private> kDepths: array<f32, ${kNumDepthValues}> = array<f32, ${kNumDepthValues}>(\n          -1.0, -0.5, 0.0, 0.25, 0.75, 1.0, 1.5, 2.0);\n\n      const vpMin: f32 = ${kViewportMinDepth};\n      const vpMax: f32 = ${kViewportMaxDepth};\n\n      // Draw the points in a straight horizontal row, one per pixel.\n      fn vertexX(idx: u32) -> f32 {\n        return (f32(idx) + 0.5) * 2.0 / ${kNumTestPoints}.0 - 1.0;\n      }\n\n      // Test vertex shader's position.z output.\n      // Here, the viewport range corresponds to position.z in [0,1].\n      fn vertexZ(idx: u32) -> f32 {\n        return kDepths[idx / ${kNumDepthValues}u];\n      }\n\n      // Test fragment shader's expected position.z input.\n      // Here, the viewport range corresponds to position.z in [vpMin,vpMax], but\n      // unclipped values extend beyond that range.\n      fn expectedFragPosZ(idx: u32) -> f32 {\n        return vpMin + vertexZ(idx) * (vpMax - vpMin);\n      }\n\n      //////// \"Test\" entry points\n\n      struct VFTest {\n        @builtin(position) pos: vec4<f32>,\n        @location(0) @interpolate(flat, either) vertexIndex: u32,\n      };\n\n      @vertex\n      fn vtest(@builtin(vertex_index) idx: u32) -> VFTest {\n        var vf: VFTest;\n        vf.pos = vec4<f32>(vertexX(idx), 0.0, vertexZ(idx), 1.0);\n        vf.vertexIndex = idx;\n        return vf;\n      }\n\n      struct Output {\n        // Each fragment (that didn't get clipped) writes into one element of this output.\n        // (Anything that doesn't get written is already zero.)\n        fragInputZDiff: array<f32, ${kNumTestPoints}>\n      };\n      @group(0) @binding(0) var <storage, read_write> output: Output;\n\n      fn checkZ(vf: VFTest) {\n        ${\n          hasStorageBuffers\n            ? `\n          output.fragInputZDiff[vf.vertexIndex] = vf.pos.z - expectedFragPosZ(vf.vertexIndex);\n        `\n            : ''\n        }\n      }\n\n      @fragment\n      fn ftest_WriteDepth(vf: VFTest) -> @builtin(frag_depth) f32 {\n        checkZ(vf);\n        return kDepths[vf.vertexIndex % ${kNumDepthValues}u];\n      }\n\n      @fragment\n      fn ftest_NoWriteDepth(vf: VFTest) {\n        checkZ(vf);\n      }\n\n      //////// \"Check\" entry points\n\n      struct VFCheck {\n        @builtin(position) pos: vec4<f32>,\n        @location(0) @interpolate(flat, either) vertexIndex: u32,\n      };\n\n      @vertex\n      fn vcheck(@builtin(vertex_index) idx: u32) -> VFCheck {\n        var vf: VFCheck;\n        // Depth=0.5 because we want to render every point, not get clipped.\n        vf.pos = vec4<f32>(vertexX(idx), 0.0, 0.5, 1.0);\n        vf.vertexIndex = idx;\n        return vf;\n      }\n\n      struct FCheck {\n        @builtin(frag_depth) depth: f32,\n        @location(0) color: f32,\n      };\n\n      @fragment\n      fn fcheck(vf: VFCheck) -> FCheck {\n        let vertZ = vertexZ(vf.vertexIndex);\n        let outOfRange = vertZ < 0.0 || vertZ > 1.0;\n        let expFragPosZ = expectedFragPosZ(vf.vertexIndex);\n\n        let writtenDepth = kDepths[vf.vertexIndex % ${kNumDepthValues}u];\n\n        let expectedDepthWriteInput = ${writeDepth ? 'writtenDepth' : 'expFragPosZ'};\n        var expectedDepthBufferValue = clamp(expectedDepthWriteInput, vpMin, vpMax);\n        if (${!unclippedDepth} && outOfRange) {\n          // Test fragment should have been clipped; expect the depth attachment to\n          // have its clear value (0.5).\n          expectedDepthBufferValue = 0.5;\n        }\n\n        var f: FCheck;\n        f.depth = expectedDepthBufferValue;\n        f.color = 1.0; // Color written if the resulting depth is unexpected.\n        return f;\n      }\n    `;\n    const module = t.device.createShaderModule({ code: shaderSource });\n\n    // Draw points at different vertex depths and fragment depths into the depth attachment,\n    // with a viewport of [0.25,0.75].\n    const testPipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vtest' },\n      primitive: {\n        topology: 'point-list',\n        unclippedDepth,\n      },\n      depthStencil: { format, depthWriteEnabled: true, depthCompare: 'always' },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: {\n        module,\n        entryPoint: writeDepth ? 'ftest_WriteDepth' : 'ftest_NoWriteDepth',\n        targets: [],\n      },\n    });\n\n    // Use depth comparison to check that the depth attachment now has the expected values.\n    const checkPipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vcheck' },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        format,\n        // NOTE: This check is probably very susceptible to floating point error. If it fails, maybe\n        // replace it with two checks (less + greater) with an epsilon applied in the check shader?\n        depthCompare: 'not-equal', // Expect every depth value to be exactly equal.\n        depthWriteEnabled: true, // If the check failed, overwrite with the expected result.\n      },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: { module, entryPoint: 'fcheck', targets: [{ format: 'r8unorm' }] },\n    });\n\n    const dsTexture = t.createTextureTracked({\n      format,\n      size: [kNumTestPoints],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      sampleCount: multisampled ? 4 : 1,\n    });\n    const dsTextureView = dsTexture.createView();\n\n    const checkTextureDesc = {\n      format: 'r8unorm' as const,\n      size: [kNumTestPoints],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    };\n    const checkTexture = t.createTextureTracked(checkTextureDesc);\n    const checkTextureView = checkTexture.createView();\n    const checkTextureMSView = multisampled\n      ? t.createTextureTracked({ ...checkTextureDesc, sampleCount: 4 }).createView()\n      : undefined;\n\n    const { bytesPerBlock } = getBlockInfoForTextureFormat(format);\n    const dsActual =\n      canCopyFromAspectOfTextureFormat(format, 'depth-only') && !multisampled && bytesPerBlock\n        ? t.createBufferTracked({\n            size: kNumTestPoints * bytesPerBlock,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n          })\n        : undefined;\n    const dsExpected =\n      canCopyFromAspectOfTextureFormat(format, 'depth-only') && !multisampled && bytesPerBlock\n        ? t.createBufferTracked({\n            size: kNumTestPoints * bytesPerBlock,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n          })\n        : undefined;\n    const checkBuffer = t.createBufferTracked({\n      size: kNumTestPoints,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const fragInputZFailedBuffer = t.createBufferTracked({\n      size: 4 * kNumTestPoints,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n    const testBindGroup = hasStorageBuffers\n      ? t.device.createBindGroup({\n          layout: testPipeline.getBindGroupLayout(0),\n          entries: [{ binding: 0, resource: { buffer: fragInputZFailedBuffer } }],\n        })\n      : undefined;\n\n    const enc = t.device.createCommandEncoder();\n    {\n      const pass = enc.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthClearValue: 0.5, // Will see this depth value if the fragment was clipped.\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          ...(isStencilTextureFormat(format) && {\n            stencilClearValue: 0,\n            stencilLoadOp: 'clear',\n            stencilStoreOp: 'discard',\n          }),\n        },\n      });\n      pass.setPipeline(testPipeline);\n      if (hasStorageBuffers) {\n        pass.setBindGroup(0, testBindGroup);\n      }\n      pass.setViewport(0, 0, kNumTestPoints, 1, kViewportMinDepth, kViewportMaxDepth);\n      pass.draw(kNumTestPoints);\n      pass.end();\n    }\n    if (dsActual) {\n      enc.copyTextureToBuffer({ texture: dsTexture, aspect: 'depth-only' }, { buffer: dsActual }, [\n        kNumTestPoints,\n      ]);\n    }\n    {\n      const clearValue = [0, 0, 0, 0]; // Will see this color if the check passed.\n      const pass = enc.beginRenderPass({\n        colorAttachments: [\n          checkTextureMSView\n            ? {\n                view: checkTextureMSView,\n                resolveTarget: checkTextureView,\n                clearValue,\n                loadOp: 'clear',\n                storeOp: 'discard',\n              }\n            : { view: checkTextureView, clearValue, loadOp: 'clear', storeOp: 'store' },\n        ],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthLoadOp: 'load',\n          depthStoreOp: 'store',\n          ...(isStencilTextureFormat(format) && {\n            stencilClearValue: 0,\n            stencilLoadOp: 'clear',\n            stencilStoreOp: 'discard',\n          }),\n        },\n      });\n      pass.setPipeline(checkPipeline);\n      pass.setViewport(0, 0, kNumTestPoints, 1, 0.0, 1.0);\n      pass.draw(kNumTestPoints);\n      pass.end();\n    }\n    enc.copyTextureToBuffer({ texture: checkTexture }, { buffer: checkBuffer }, [kNumTestPoints]);\n    if (dsExpected) {\n      enc.copyTextureToBuffer(\n        { texture: dsTexture, aspect: 'depth-only' },\n        { buffer: dsExpected },\n        [kNumTestPoints]\n      );\n    }\n    t.device.queue.submit([enc.finish()]);\n\n    if (hasStorageBuffers) {\n      t.expectGPUBufferValuesPassCheck(\n        fragInputZFailedBuffer,\n        a => checkElementsBetween(a, [() => -1e-5, () => 1e-5]),\n        { type: Float32Array, typedLength: kNumTestPoints }\n      );\n    }\n\n    const kCheckPassedValue = 0;\n    const predicatePrinter: CheckElementsSupplementalTableRows = [\n      { leftHeader: 'expected ==', getValueForCell: _index => kCheckPassedValue },\n    ];\n    if (dsActual && dsExpected && format === 'depth32float') {\n      await Promise.all([dsActual.mapAsync(GPUMapMode.READ), dsExpected.mapAsync(GPUMapMode.READ)]);\n      const act = new Float32Array(dsActual.getMappedRange());\n      const exp = new Float32Array(dsExpected.getMappedRange());\n      predicatePrinter.push(\n        { leftHeader: 'act ==', getValueForCell: index => act[index].toFixed(2) },\n        { leftHeader: 'exp ==', getValueForCell: index => exp[index].toFixed(2) }\n      );\n    }\n    t.expectGPUBufferValuesPassCheck(\n      checkBuffer,\n      a =>\n        checkElementsPassPredicate(a, (_index, value) => value === kCheckPassedValue, {\n          predicatePrinter,\n        }),\n      { type: Uint8Array, typedLength: kNumTestPoints, method: 'map' }\n    );\n  });\n\ng.test('depth_test_input_clamped')\n  .desc(\n    `\nInput to the depth test should always be in the range of viewport depth, even if it was written by\nthe fragment shader (using frag_depth).\n\nTo test this, first initialize the depth buffer with N expected values (by writing frag_depth, with\nthe default viewport). These expected values are clamped by the shader to [0.25, 0.75].\n\nThen, run another pass with the viewport depth set to [0.25,0.75], and output various (unclamped)\nfrag_depth values from its fragment shader with depthCompare:'not-equal'. These should get clamped;\nany fragments that have unexpected values then get drawn to the color buffer, which is later checked\nto be empty.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthTextureFormats)\n      .combine('unclippedDepth', [false, true])\n      .combine('multisampled', [false, true])\n  )\n  .fn(t => {\n    const { format, unclippedDepth, multisampled } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    if (unclippedDepth) {\n      t.skipIfDeviceDoesNotHaveFeature('depth-clip-control');\n    }\n\n    const kNumDepthValues = 8;\n    const kViewportMinDepth = 0.25;\n    const kViewportMaxDepth = 0.75;\n\n    const shaderSource = `\n      // Test depths, with viewport range corresponding to [0,1].\n      var<private> kDepths: array<f32, ${kNumDepthValues}> = array<f32, ${kNumDepthValues}>(\n          -1.0, -0.5, 0.0, 0.25, 0.75, 1.0, 1.5, 2.0);\n\n      const vpMin: f32 = ${kViewportMinDepth};\n      const vpMax: f32 = ${kViewportMaxDepth};\n\n      // Draw the points in a straight horizontal row, one per pixel.\n      fn vertexX(idx: u32) -> f32 {\n        return (f32(idx) + 0.5) * 2.0 / ${kNumDepthValues}.0 - 1.0;\n      }\n\n      struct VF {\n        @builtin(position) pos: vec4<f32>,\n        @location(0) @interpolate(flat, either) vertexIndex: u32,\n      };\n\n      @vertex\n      fn vmain(@builtin(vertex_index) idx: u32) -> VF {\n        var vf: VF;\n        // Depth=0.5 because we want to render every point, not get clipped.\n        vf.pos = vec4<f32>(vertexX(idx), 0.0, 0.5, 1.0);\n        vf.vertexIndex = idx;\n        return vf;\n      }\n\n      @fragment\n      fn finit(vf: VF) -> @builtin(frag_depth) f32 {\n        // Expected values of the ftest pipeline.\n        return clamp(kDepths[vf.vertexIndex], vpMin, vpMax);\n      }\n\n      struct FTest {\n        @builtin(frag_depth) depth: f32,\n        @location(0) color: f32,\n      };\n\n      @fragment\n      fn ftest(vf: VF) -> FTest {\n        var f: FTest;\n        f.depth = kDepths[vf.vertexIndex]; // Should get clamped to the viewport.\n        f.color = 1.0; // Color written if the resulting depth is unexpected.\n        return f;\n      }\n    `;\n\n    const module = t.device.createShaderModule({ code: shaderSource });\n\n    // Initialize depth attachment with expected values, in [0.25,0.75].\n    const initPipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vmain' },\n      primitive: { topology: 'point-list' },\n      depthStencil: { format, depthWriteEnabled: true, depthCompare: 'always' },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: { module, entryPoint: 'finit', targets: [] },\n    });\n\n    // With a viewport set to [0.25,0.75], output values in [0.0,1.0] and check they're clamped\n    // before the depth test, regardless of whether unclippedDepth is enabled.\n    const testPipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vmain' },\n      primitive: {\n        topology: 'point-list',\n        unclippedDepth,\n      },\n      depthStencil: { format, depthCompare: 'not-equal', depthWriteEnabled: false },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: { module, entryPoint: 'ftest', targets: [{ format: 'r8unorm' }] },\n    });\n\n    const dsTexture = t.createTextureTracked({\n      format,\n      size: [kNumDepthValues],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      sampleCount: multisampled ? 4 : 1,\n    });\n    const dsTextureView = dsTexture.createView();\n\n    const testTextureDesc = {\n      format: 'r8unorm' as const,\n      size: [kNumDepthValues],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    };\n    const testTexture = t.createTextureTracked(testTextureDesc);\n    const testTextureView = testTexture.createView();\n    const testTextureMSView = multisampled\n      ? t.createTextureTracked({ ...testTextureDesc, sampleCount: 4 }).createView()\n      : undefined;\n\n    const resultBuffer = t.createBufferTracked({\n      size: kNumDepthValues,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const enc = t.device.createCommandEncoder();\n    {\n      const pass = enc.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthClearValue: 1.0,\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          ...(isStencilTextureFormat(format) && {\n            stencilClearValue: 0,\n            stencilLoadOp: 'clear',\n            stencilStoreOp: 'discard',\n          }),\n        },\n      });\n      pass.setPipeline(initPipeline);\n      pass.draw(kNumDepthValues);\n      pass.end();\n    }\n    {\n      const clearValue = [0, 0, 0, 0]; // Will see this color if the test passed.\n      const pass = enc.beginRenderPass({\n        colorAttachments: [\n          testTextureMSView\n            ? {\n                view: testTextureMSView,\n                resolveTarget: testTextureView,\n                clearValue,\n                loadOp: 'clear',\n                storeOp: 'discard',\n              }\n            : { view: testTextureView, clearValue, loadOp: 'clear', storeOp: 'store' },\n        ],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthLoadOp: 'load',\n          depthStoreOp: 'store',\n          ...(isStencilTextureFormat(format) && {\n            stencilClearValue: 0,\n            stencilLoadOp: 'clear',\n            stencilStoreOp: 'discard',\n          }),\n        },\n      });\n      pass.setPipeline(testPipeline);\n      pass.setViewport(0, 0, kNumDepthValues, 1, kViewportMinDepth, kViewportMaxDepth);\n      pass.draw(kNumDepthValues);\n      pass.end();\n    }\n    enc.copyTextureToBuffer({ texture: testTexture }, { buffer: resultBuffer }, [kNumDepthValues]);\n    t.device.queue.submit([enc.finish()]);\n\n    t.expectGPUBufferValuesEqual(resultBuffer, new Uint8Array(kNumDepthValues), 0, {\n      method: 'map',\n    });\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E;EACEC,gCAAgC;EAChCC,4BAA4B;EAC5BC,sBAAsB;EACtBC,oBAAoB;AACf,yBAAyB;AAChC,SAASC,2BAA2B,QAAQ,sBAAsB;AAClE;EACEC,oBAAoB;EACpBC,0BAA0B;;AAErB,iCAAiC;;AAExC,OAAO,MAAMC,CAAC,GAAGR,aAAa,CAACK,2BAA2B,CAAC;;AAE3DG,CAAC,CAACC,IAAI,CAAC,sBAAsB,CAAC;AAC3BC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,QAAQ,EAAET,oBAAoB,CAAC;AACvCS,OAAO,CAAC,gBAAgB,EAAE,CAACC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AACnDD,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACpCA,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;AAC1C,CAAC;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEC,cAAc,EAAEC,UAAU,EAAEC,YAAY,CAAC,CAAC,GAAGJ,CAAC,CAACL,MAAM;EACrEK,CAAC,CAACK,+BAA+B,CAACJ,MAAM,CAAC;EACzC,IAAIC,cAAc,EAAE;IAClBF,CAAC,CAACM,8BAA8B,CAAC,oBAAoB,CAAC;EACxD;;EAEA,MAAMC,iBAAiB,GAAGP,CAAC,CAACQ,eAAe;EACvCR,CAAC,CAACS,MAAM,CAACC,MAAM,CAACC,gCAAgC,GAAI,CAAC;EACrD,IAAI;;EAER;EACA,MAAMC,eAAe,GAAG,CAAC;EACzB;EACA,MAAMC,cAAc,GAAGD,eAAe,GAAGA,eAAe;EACxD,MAAME,iBAAiB,GAAG,IAAI;EAC9B,MAAMC,iBAAiB,GAAG,IAAI;;EAE9B,MAAMC,YAAY,GAAI;AAC1B;AACA,yCAAyCJ,eAAgB,kBAAiBA,eAAgB;AAC1F;AACA;AACA,2BAA2BE,iBAAkB;AAC7C,2BAA2BC,iBAAkB;AAC7C;AACA;AACA;AACA,0CAA0CF,cAAe;AACzD;AACA;AACA;AACA;AACA;AACA,+BAA+BD,eAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqCC,cAAe;AACpD;AACA;AACA;AACA;AACA;EACUN,iBAAiB;EACZ;AACf;AACA,SAAS;EACK;EACL;AACT;AACA;AACA;AACA;AACA;AACA,0CAA0CK,eAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsDA,eAAgB;AACtE;AACA,wCAAwCT,UAAU,GAAG,cAAc,GAAG,aAAc;AACpF;AACA,cAAc,CAACD,cAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACD,MAAMe,MAAM,GAAGjB,CAAC,CAACS,MAAM,CAACS,kBAAkB,CAAC,EAAEC,IAAI,EAAEH,YAAY,CAAC,CAAC,CAAC;;EAElE;EACA;EACA,MAAMI,YAAY,GAAGpB,CAAC,CAACS,MAAM,CAACY,oBAAoB,CAAC;IACjDC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE,EAAEN,MAAM,EAAEO,UAAU,EAAE,OAAO,CAAC,CAAC;IACvCC,SAAS,EAAE;MACTC,QAAQ,EAAE,YAAY;MACtBxB;IACF,CAAC;IACDyB,YAAY,EAAE,EAAE1B,MAAM,EAAE2B,iBAAiB,EAAE,IAAI,EAAEC,YAAY,EAAE,QAAQ,CAAC,CAAC;IACzEC,WAAW,EAAE1B,YAAY,GAAG,EAAE2B,KAAK,EAAE,CAAC,CAAC,CAAC,GA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"}