{"version":3,"file":"read_only.spec.js","names":["description","makeTestGroup","unreachable","assert","Float16Array","kTextureDimensions","kColorTextureFormats","kTextureFormatInfo","GPUTest","MaxLimitsTestMixin","kValidShaderStages","ComponentCount","format","F","initTextureAndGetExpectedOutputBufferData","storageTexture","bytesPerBlock","color","bytes","undefined","width","height","depthOrArrayLayers","texelData","ArrayBuffer","texelTypedDataView","getTypedArrayBufferViewForTexelData","componentCount","outputBufferData","outputBufferTypedData","getTypedArrayBufferForOutputBufferData","SetData","texelValue","outputValue","texelDataIndex","component","outputComponent","texelComponentIndex","outputTexelComponentIndex","z","y","x","Math","max","f16Array","queue","writeTexture","texture","bytesPerRow","rowsPerImage","arrayBuffer","type","Uint32Array","Int32Array","Float32Array","Uint8Array","Uint16Array","Int8Array","Int16Array","getOutputBufferWGSLType","doTransform","shaderStage","outputBuffer","declaration","dimension","textureDeclaration","bindGroupEntries","binding","resource","createView","buffer","commandEncoder","device","createCommandEncoder","textureLoadCoord","computeShader","computePipeline","createComputePipeline","compute","module","createShaderModule","code","layout","bindGroup","createBindGroup","getBindGroupLayout","entries","computePassEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","shader","renderPipeline","createRenderPipeline","vertex","fragment","targets","primitive","topology","placeholderColorTexture","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","storeOp","draw","copyTextureToBuffer","loadFromTextureWGSL","concat","outputToBufferWGSL","layer","clearValue","r","g","b","a","texelCount","submit","finish","test","desc","params","u","combine","filter","p","storage","unless","beforeAllSubcases","t","selectDeviceOrSkipTestCase","isCompatibility","skipIfTextureFormatNotUsableAsStorageTexture","fn","skipIf","limits","maxStorageTexturesInFragmentStage","maxStorageTexturesInVertexStage","kWidth","COPY_DST","STORAGE_BINDING","expectedData","createBufferTracked","GPUBufferUsage","STORAGE","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/api/operation/storage_texture/read_only.spec.ts"],"sourcesContent":["export const description = `\nTests for the behavior of read-only storage textures.\n\nTODO:\n- Test mipmap level > 0\n- Test resource usage transitions with read-only storage textures\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable, assert } from '../../../../common/util/util.js';\nimport { Float16Array } from '../../../../external/petamoriken/float16/float16.js';\nimport { kTextureDimensions } from '../../../capability_info.js';\nimport {\n  ColorTextureFormat,\n  kColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../../format_info.js';\nimport { GPUTest, MaxLimitsTestMixin } from '../../../gpu_test.js';\nimport { kValidShaderStages, TValidShaderStage } from '../../../util/shader.js';\n\nfunction ComponentCount(format: ColorTextureFormat): number {\n  switch (format) {\n    case 'r32float':\n    case 'r32sint':\n    case 'r32uint':\n      return 1;\n    case 'rg32float':\n    case 'rg32sint':\n    case 'rg32uint':\n      return 2;\n    case 'rgba32float':\n    case 'rgba32sint':\n    case 'rgba32uint':\n    case 'rgba8sint':\n    case 'rgba8uint':\n    case 'rgba8snorm':\n    case 'rgba8unorm':\n    case 'rgba16float':\n    case 'rgba16sint':\n    case 'rgba16uint':\n    case 'bgra8unorm':\n      return 4;\n    default:\n      unreachable();\n      return 0;\n  }\n}\n\nclass F extends GPUTest {\n  initTextureAndGetExpectedOutputBufferData(\n    storageTexture: GPUTexture,\n    format: ColorTextureFormat\n  ): ArrayBuffer {\n    const bytesPerBlock = kTextureFormatInfo[format].color.bytes;\n    assert(bytesPerBlock !== undefined);\n\n    const width = storageTexture.width;\n    const height = storageTexture.height;\n    const depthOrArrayLayers = storageTexture.depthOrArrayLayers;\n\n    const texelData = new ArrayBuffer(bytesPerBlock * width * height * depthOrArrayLayers);\n    const texelTypedDataView = this.getTypedArrayBufferViewForTexelData(texelData, format);\n    const componentCount = ComponentCount(format);\n    const outputBufferData = new ArrayBuffer(4 * 4 * width * height * depthOrArrayLayers);\n    const outputBufferTypedData = this.getTypedArrayBufferForOutputBufferData(\n      outputBufferData,\n      format\n    );\n\n    const SetData = (\n      texelValue: number,\n      outputValue: number,\n      texelDataIndex: number,\n      component: number,\n      outputComponent: number = component\n    ) => {\n      const texelComponentIndex = texelDataIndex * componentCount + component;\n      texelTypedDataView[texelComponentIndex] = texelValue;\n      const outputTexelComponentIndex = texelDataIndex * 4 + outputComponent;\n      outputBufferTypedData[outputTexelComponentIndex] = outputValue;\n    };\n    for (let z = 0; z < depthOrArrayLayers; ++z) {\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const texelDataIndex = z * width * height + y * width + x;\n          outputBufferTypedData[4 * texelDataIndex] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 1] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 2] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 3] = 1;\n          for (let component = 0; component < componentCount; ++component) {\n            switch (format) {\n              case 'r32uint':\n              case 'rg32uint':\n              case 'rgba16uint':\n              case 'rgba32uint': {\n                const texelValue = 4 * texelDataIndex + component + 1;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8uint': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8unorm': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                const outputValue = texelValue / 255.0;\n                SetData(texelValue, outputValue, texelDataIndex, component);\n                break;\n              }\n              case 'bgra8unorm': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                const outputValue = texelValue / 255.0;\n                // BGRA -> RGBA\n                assert(component < 4);\n                const outputComponent = [2, 1, 0, 3][component];\n                SetData(texelValue, outputValue, texelDataIndex, component, outputComponent);\n                break;\n              }\n              case 'r32sint':\n              case 'rg32sint':\n              case 'rgba16sint':\n              case 'rgba32sint': {\n                const texelValue =\n                  (texelDataIndex & 1 ? 1 : -1) * (4 * texelDataIndex + component + 1);\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8sint': {\n                const texelValue = ((4 * texelDataIndex + component + 1) % 256) - 128;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8snorm': {\n                const texelValue = ((4 * texelDataIndex + component + 1) % 256) - 128;\n                const outputValue = Math.max(texelValue / 127.0, -1.0);\n                SetData(texelValue, outputValue, texelDataIndex, component);\n                break;\n              }\n              case 'r32float':\n              case 'rg32float':\n              case 'rgba32float': {\n                const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba16float': {\n                const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                const f16Array = new Float16Array(1);\n                f16Array[0] = texelValue;\n                SetData(texelValue, f16Array[0], texelDataIndex, component);\n                break;\n              }\n              default:\n                unreachable();\n                break;\n            }\n          }\n        }\n      }\n    }\n    this.queue.writeTexture(\n      {\n        texture: storageTexture,\n      },\n      texelData,\n      {\n        bytesPerRow: bytesPerBlock * width,\n        rowsPerImage: height,\n      },\n      [width, height, depthOrArrayLayers]\n    );\n\n    return outputBufferData;\n  }\n\n  getTypedArrayBufferForOutputBufferData(arrayBuffer: ArrayBuffer, format: ColorTextureFormat) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return new Uint32Array(arrayBuffer);\n      case 'sint':\n        return new Int32Array(arrayBuffer);\n      case 'float':\n      case 'unfilterable-float':\n        return new Float32Array(arrayBuffer);\n    }\n  }\n\n  getTypedArrayBufferViewForTexelData(arrayBuffer: ArrayBuffer, format: ColorTextureFormat) {\n    switch (format) {\n      case 'r32uint':\n      case 'rg32uint':\n      case 'rgba32uint':\n        return new Uint32Array(arrayBuffer);\n      case 'rgba8uint':\n      case 'rgba8unorm':\n      case 'bgra8unorm':\n        return new Uint8Array(arrayBuffer);\n      case 'rgba16uint':\n        return new Uint16Array(arrayBuffer);\n      case 'r32sint':\n      case 'rg32sint':\n      case 'rgba32sint':\n        return new Int32Array(arrayBuffer);\n      case 'rgba8sint':\n      case 'rgba8snorm':\n        return new Int8Array(arrayBuffer);\n      case 'rgba16sint':\n        return new Int16Array(arrayBuffer);\n      case 'r32float':\n      case 'rg32float':\n      case 'rgba32float':\n        return new Float32Array(arrayBuffer);\n      case 'rgba16float':\n        return new Float16Array(arrayBuffer);\n      default:\n        unreachable();\n        return new Uint8Array(arrayBuffer);\n    }\n  }\n\n  getOutputBufferWGSLType(format: ColorTextureFormat) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return 'vec4u';\n      case 'sint':\n        return 'vec4i';\n      case 'float':\n      case 'unfilterable-float':\n        return 'vec4f';\n      default:\n        unreachable();\n        return '';\n    }\n  }\n\n  doTransform(\n    storageTexture: GPUTexture,\n    shaderStage: TValidShaderStage,\n    format: ColorTextureFormat,\n    outputBuffer: GPUBuffer\n  ) {\n    let declaration = '';\n    switch (storageTexture.dimension) {\n      case '1d':\n        declaration = 'texture_storage_1d';\n        break;\n      case '2d':\n        declaration =\n          storageTexture.depthOrArrayLayers > 1 ? 'texture_storage_2d_array' : 'texture_storage_2d';\n        break;\n      case '3d':\n        declaration = 'texture_storage_3d';\n        break;\n    }\n    const textureDeclaration = `\n    @group(0) @binding(0) var readOnlyTexture: ${declaration}<${format}, read>;\n    `;\n\n    const bindGroupEntries = [\n      {\n        binding: 0,\n        resource: storageTexture.createView(),\n      },\n      ...(shaderStage === 'compute'\n        ? [\n            {\n              binding: 1,\n              resource: {\n                buffer: outputBuffer,\n              },\n            },\n          ]\n        : []),\n    ];\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    switch (shaderStage) {\n      case 'compute': {\n        let textureLoadCoord = '';\n        switch (storageTexture.dimension) {\n          case '1d':\n            textureLoadCoord = 'invocationID.x';\n            break;\n          case '2d':\n            textureLoadCoord =\n              storageTexture.depthOrArrayLayers > 1\n                ? `vec2u(invocationID.x, invocationID.y), invocationID.z`\n                : `vec2u(invocationID.x, invocationID.y)`;\n            break;\n          case '3d':\n            textureLoadCoord = 'invocationID';\n            break;\n        }\n\n        const computeShader = `\n      ${textureDeclaration}\n      @group(0) @binding(1)\n      var<storage,read_write> outputBuffer : array<${this.getOutputBufferWGSLType(format)}>;\n\n      @compute\n      @workgroup_size(\n        ${storageTexture.width}, ${storageTexture.height}, ${storageTexture.depthOrArrayLayers})\n      fn main(\n        @builtin(local_invocation_id) invocationID: vec3u,\n        @builtin(local_invocation_index) invocationIndex: u32) {\n        let initialValue = textureLoad(readOnlyTexture, ${textureLoadCoord});\n        outputBuffer[invocationIndex] = initialValue;\n      }`;\n        const computePipeline = this.device.createComputePipeline({\n          compute: {\n            module: this.device.createShaderModule({\n              code: computeShader,\n            }),\n          },\n          layout: 'auto',\n        });\n        const bindGroup = this.device.createBindGroup({\n          layout: computePipeline.getBindGroupLayout(0),\n          entries: bindGroupEntries,\n        });\n\n        const computePassEncoder = commandEncoder.beginComputePass();\n        computePassEncoder.setPipeline(computePipeline);\n        computePassEncoder.setBindGroup(0, bindGroup);\n        computePassEncoder.dispatchWorkgroups(1);\n        computePassEncoder.end();\n        break;\n      }\n      case 'fragment': {\n        let textureLoadCoord = '';\n        switch (storageTexture.dimension) {\n          case '1d':\n            textureLoadCoord = 'textureCoord.x';\n            break;\n          case '2d':\n            textureLoadCoord =\n              storageTexture.depthOrArrayLayers > 1 ? 'textureCoord, coordZ' : 'textureCoord';\n            break;\n          case '3d':\n            textureLoadCoord = 'vec3u(textureCoord, coordZ)';\n            break;\n        }\n\n        const shader = `\n        ${textureDeclaration}\n        @fragment\n        fn fs(@builtin(position) fragCoord: vec4f) -> @location(0) vec4u {\n          let coordX = u32(fragCoord.x);\n          let coordY = u32(fragCoord.y) % ${storageTexture.height}u;\n          let coordZ = u32(fragCoord.y) / ${storageTexture.height}u;\n          let textureCoord = vec2u(coordX, coordY);\n          return bitcast<vec4u>(textureLoad(readOnlyTexture, ${textureLoadCoord}));\n        }\n\n        @vertex\n        fn vs(@builtin(vertex_index) vertexIndex : u32) -> @builtin(position) vec4f {\n            var pos = array(\n              vec2f(-1.0,  3.0),\n              vec2f( 3.0, -1.0),\n              vec2f(-1.0, -1.0));\n            return vec4f(pos[vertexIndex], 0.0, 1.0);\n        }\n        `;\n\n        const module = this.device.createShaderModule({\n          code: shader,\n        });\n        const renderPipeline = this.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: { module },\n          fragment: { module, targets: [{ format: 'rgba32uint' }] },\n          primitive: { topology: 'triangle-list' },\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: renderPipeline.getBindGroupLayout(0),\n          entries: bindGroupEntries,\n        });\n\n        // This is just so our buffer compare is the same as the compute stage.\n        // Otherwise, we'd have to pad every row to a multiple of 256 bytes and\n        // change the comparison code to take that into account.\n        assert(storageTexture.width === 16, `width must be 16 because we require 256 bytesPerRow`);\n        const placeholderColorTexture = this.createTextureTracked({\n          size: [storageTexture.width, storageTexture.height * storageTexture.depthOrArrayLayers],\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n          format: 'rgba32uint',\n        });\n\n        const renderPassEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: placeholderColorTexture.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        renderPassEncoder.setPipeline(renderPipeline);\n        renderPassEncoder.setBindGroup(0, bindGroup);\n        renderPassEncoder.draw(3);\n        renderPassEncoder.end();\n\n        commandEncoder.copyTextureToBuffer(\n          { texture: placeholderColorTexture },\n          {\n            buffer: outputBuffer,\n            bytesPerRow: 256,\n          },\n          placeholderColorTexture\n        );\n        break;\n      }\n      case 'vertex': {\n        // We draw storageTexture.Width by (storageTexture.height * storageTexture.depthOrArrayLayers)\n        // points via 'point-list' to a placeholderColorTexture of the same size.\n        //\n        // We use the @builtin(vertex_index) to compute a coord in the source texture\n        // and use that same coord to compute a place to render in the point in the placeholder.\n        let loadFromTextureWGSL = '';\n        switch (storageTexture.dimension) {\n          case '1d':\n            loadFromTextureWGSL = `\n              output.vertex_out = textureLoad(readOnlyTexture, coordX);`;\n            break;\n          case '2d':\n            if (storageTexture.depthOrArrayLayers === 1) {\n              loadFromTextureWGSL = `\n                output.vertex_out = textureLoad(readOnlyTexture, vec2u(coordX, coordY));`;\n            } else {\n              loadFromTextureWGSL = loadFromTextureWGSL.concat(`\n                output.vertex_out =\n                  textureLoad(readOnlyTexture, vec2u(coordX, coordY), coordZ);`);\n            }\n            break;\n          case '3d':\n            loadFromTextureWGSL = loadFromTextureWGSL.concat(`\n              output.vertex_out = textureLoad(readOnlyTexture, vec3u(coordX, coordY, coordZ));`);\n            break;\n        }\n\n        let outputToBufferWGSL = '';\n        for (let layer = 0; layer < storageTexture.depthOrArrayLayers; ++layer) {\n          outputToBufferWGSL = outputToBufferWGSL.concat(\n            `\n            let outputIndex${layer} =\n              storageTextureTexelCountPerImage * ${layer}u +\n              fragmentInput.tex_coord.y * ${storageTexture.width}u + fragmentInput.tex_coord.x;\n            outputBuffer[outputIndex${layer}] = fragmentInput.vertex_out${layer};`\n          );\n        }\n\n        const shader = `\n        ${textureDeclaration}\n        struct VertexOutput {\n          @builtin(position) my_pos: vec4f,\n          @location(0) @interpolate(flat, either)\n            vertex_out: ${this.getOutputBufferWGSLType(format)},\n        }\n        @vertex\n        fn vs_main(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            let coordX = vertexIndex % ${storageTexture.width}u;\n            let coordY = vertexIndex / ${storageTexture.width}u % ${storageTexture.height}u;\n            let coordZ = vertexIndex / ${storageTexture.width * storageTexture.height}u;\n            let writePos = vec2f(f32(coordX), f32(coordY + coordZ * ${storageTexture.height}));\n            let destSize = vec2f(\n              ${storageTexture.width},\n              ${storageTexture.height * storageTexture.depthOrArrayLayers});\n            output.my_pos = vec4f((((writePos + 0.5) / destSize) * 2.0 - 1.0) * vec2f(1, -1), 0.0, 1.0);\n            ${loadFromTextureWGSL}\n            return output;\n        }\n        @fragment\n        fn fs_main(fragmentInput : VertexOutput) -> @location(0) vec4u {\n          let v = fragmentInput.vertex_out;\n          return bitcast<vec4u>(v);\n        }\n        `;\n\n        const module = this.device.createShaderModule({ code: shader });\n        const renderPipeline = this.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: { module },\n          fragment: { module, targets: [{ format: 'rgba32uint' }] },\n          primitive: { topology: 'point-list' },\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: renderPipeline.getBindGroupLayout(0),\n          entries: bindGroupEntries,\n        });\n\n        const placeholderColorTexture = this.createTextureTracked({\n          size: [storageTexture.width, storageTexture.height * storageTexture.depthOrArrayLayers],\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n          format: 'rgba32uint',\n        });\n\n        const renderPassEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: placeholderColorTexture.createView(),\n              loadOp: 'clear',\n              clearValue: { r: 0, g: 0, b: 0, a: 0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n        renderPassEncoder.setPipeline(renderPipeline);\n        renderPassEncoder.setBindGroup(0, bindGroup);\n        const texelCount =\n          storageTexture.width * storageTexture.height * storageTexture.depthOrArrayLayers;\n        renderPassEncoder.draw(texelCount);\n        renderPassEncoder.end();\n\n        commandEncoder.copyTextureToBuffer(\n          { texture: placeholderColorTexture },\n          {\n            buffer: outputBuffer,\n            bytesPerRow: 256,\n          },\n          placeholderColorTexture\n        );\n        break;\n      }\n    }\n\n    this.queue.submit([commandEncoder.finish()]);\n  }\n}\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(F));\n\ng.test('basic')\n  .desc(\n    `The basic functionality tests for read-only storage textures. In the test we read data from\n    the read-only storage texture, write the data into an output storage buffer, and check if the\n    data in the output storage buffer is exactly what we expect.`\n  )\n  .params(u =>\n    u\n      .combine('format', kColorTextureFormats)\n      .filter(\n        p => p.format === 'bgra8unorm' || kTextureFormatInfo[p.format].color?.storage === true\n      )\n      .combine('shaderStage', kValidShaderStages)\n      .combine('dimension', kTextureDimensions)\n      .combine('depthOrArrayLayers', [1, 2] as const)\n      .unless(p => p.dimension === '1d' && p.depthOrArrayLayers > 1)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    }\n    if (t.isCompatibility) {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n    }\n  })\n  .fn(t => {\n    const { format, shaderStage, dimension, depthOrArrayLayers } = t.params;\n\n    if (t.isCompatibility) {\n      if (shaderStage === 'fragment') {\n        t.skipIf(\n          !(t.device.limits.maxStorageTexturesInFragmentStage! > 0),\n          `maxStorageTexturesInFragmentStage(${t.device.limits\n            .maxStorageTexturesInFragmentStage!}) is not > 0`\n        );\n      } else if (shaderStage === 'vertex') {\n        t.skipIf(\n          !(t.device.limits.maxStorageTexturesInVertexStage! > 0),\n          `maxStorageTexturesInVertexStage(${t.device.limits\n            .maxStorageTexturesInVertexStage!}) is not > 0`\n        );\n      }\n    }\n\n    const kWidth = 16;\n    const height = dimension === '1d' ? 1 : 8;\n    const storageTexture = t.createTextureTracked({\n      format,\n      dimension,\n      size: [kWidth, height, depthOrArrayLayers],\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n    });\n\n    const expectedData = t.initTextureAndGetExpectedOutputBufferData(storageTexture, format);\n\n    const bytesPerRow = 4 * 4 * kWidth;\n    assert(bytesPerRow === 256, 'bytesPerRow === 256');\n    const outputBuffer = t.createBufferTracked({\n      size: bytesPerRow * height * depthOrArrayLayers,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n\n    t.doTransform(storageTexture, shaderStage, format, outputBuffer);\n\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expectedData));\n        break;\n      case 'sint':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Int32Array(expectedData));\n        break;\n      case 'float':\n      case 'unfilterable-float':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Float32Array(expectedData));\n        break;\n      default:\n        unreachable();\n        break;\n    }\n  });\n"],"mappings":"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"}