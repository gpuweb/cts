{"version":3,"file":"write.spec.js","names":["description","makeTestGroup","unreachable","getTextureFormatType","kRegularTextureFormats","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","kFullscreenQuadVertexShaderCode","TexelView","g","kTextureViewWriteMethods","kTextureViewUsageMethods","kColorsFloat","R","G","B","A","FloatToIntColor","c","Math","floor","kColorsInt","map","kTextureSize","writeTextureAndGetExpectedTexelView","t","method","view","format","sampleCount","type","isFloatType","kColors","expectedTexelView","fromTexelsAsColors","coords","pixelPos","y","x","length","clampToFormatRange","vecType","kColorArrayShaderString","join","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","commandEncoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","dispatchWorkgroups","end","queue","submit","finish","kPlaceholderTextureFormat","placeholderTexture","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createRenderPipeline","vertex","fragment","targets","writeMask","beginRenderPass","colorAttachments","createView","loadOp","storeOp","draw","targetView","resolveView","undefined","multisampleCount","multisample","count","resolveTarget","getTextureViewUsage","viewUsageMethod","minimalUsageForTest","test","desc","params","u","combine","filter","fn","skipIfTextureFormatNotSupported","skipIfTextureFormatNotMultisampled","skipIfTextureFormatNotUsableAsStorageTexture","skipIfTextureFormatNotUsableAsRenderAttachment","skipIfTextureFormatNotResolvable","skipIf","isCompatibility","limits","maxStorageBuffersInFragmentStage","textureUsageForMethod","includes","STORAGE_BINDING","COPY_SRC","texture","expectTexelViewComparisonIsOkInTexture","unimplemented"],"sources":["../../../../../src/webgpu/api/operation/texture_view/write.spec.ts"],"sourcesContent":["export const description = `\nTest the result of writing textures through texture views with various options.\n\nReads value from a shader array, writes the value via various write methods.\nCheck the texture result with the expected texel view.\n\nAll x= every possible view write method: {\n  - storage write {fragment, compute}\n  - render pass store\n  - render pass resolve\n}\n\nFormat reinterpretation is not tested here. It is in format_reinterpretation.spec.ts.\n\nTODO: Write helper for this if not already available (see resource_init, buffer_sync_test for related code).\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport {\n  getTextureFormatType,\n  kRegularTextureFormats,\n  RegularTextureFormat,\n} from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { kFullscreenQuadVertexShaderCode } from '../../../util/shader.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nexport const g = makeTestGroup(TextureTestMixin(AllFeaturesMaxLimitsGPUTest));\n\nconst kTextureViewWriteMethods = [\n  'storage-write-fragment',\n  'storage-write-compute',\n  'render-pass-store',\n  'render-pass-resolve',\n] as const;\ntype TextureViewWriteMethod = (typeof kTextureViewWriteMethods)[number];\n\nconst kTextureViewUsageMethods = ['inherit', 'minimal'] as const;\ntype TextureViewUsageMethod = (typeof kTextureViewUsageMethods)[number];\n\n// Src color values to read from a shader array.\nconst kColorsFloat = [\n  { R: 1.0, G: 0.0, B: 0.0, A: 0.8 },\n  { R: 0.0, G: 1.0, B: 0.0, A: 0.7 },\n  { R: 0.0, G: 0.0, B: 0.0, A: 0.6 },\n  { R: 0.0, G: 0.0, B: 0.0, A: 0.5 },\n  { R: 1.0, G: 1.0, B: 1.0, A: 0.4 },\n  { R: 0.7, G: 0.0, B: 0.0, A: 0.3 },\n  { R: 0.0, G: 0.8, B: 0.0, A: 0.2 },\n  { R: 0.0, G: 0.0, B: 0.9, A: 0.1 },\n  { R: 0.1, G: 0.2, B: 0.0, A: 0.3 },\n  { R: 0.4, G: 0.3, B: 0.6, A: 0.8 },\n];\n\nfunction FloatToIntColor(c: number) {\n  return Math.floor(c * 100);\n}\n\nconst kColorsInt = kColorsFloat.map(c => {\n  return {\n    R: FloatToIntColor(c.R),\n    G: FloatToIntColor(c.G),\n    B: FloatToIntColor(c.B),\n    A: FloatToIntColor(c.A),\n  };\n});\n\nconst kTextureSize = 16;\n\nfunction writeTextureAndGetExpectedTexelView(\n  t: GPUTest,\n  method: TextureViewWriteMethod,\n  view: GPUTextureView,\n  format: RegularTextureFormat,\n  sampleCount: number\n) {\n  const type = getTextureFormatType(format);\n  const isFloatType = type === 'float' || type === 'unfilterable-float';\n  const kColors = isFloatType ? kColorsFloat : kColorsInt;\n  const expectedTexelView = TexelView.fromTexelsAsColors(\n    format,\n    coords => {\n      const pixelPos = coords.y * kTextureSize + coords.x;\n      return kColors[pixelPos % kColors.length];\n    },\n    { clampToFormatRange: true }\n  );\n  const vecType = isFloatType ? 'vec4f' : type === 'sint' ? 'vec4i' : 'vec4u';\n  const kColorArrayShaderString = `array<${vecType}, ${kColors.length}>(\n      ${kColors.map(t => `${vecType}(${t.R}, ${t.G}, ${t.B}, ${t.A}) `).join(',')}\n    )`;\n\n  switch (method) {\n    case 'storage-write-compute':\n      {\n        const pipeline = t.device.createComputePipeline({\n          layout: 'auto',\n          compute: {\n            module: t.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var dst: texture_storage_2d<${format}, write>;\n                @compute @workgroup_size(1, 1) fn main(\n                  @builtin(global_invocation_id) global_id: vec3<u32>,\n                ) {\n                  const src = ${kColorArrayShaderString};\n                  let coord = vec2u(global_id.xy);\n                  let idx = coord.x + coord.y * ${kTextureSize};\n                  textureStore(dst, coord, src[idx % ${kColors.length}]);\n                }`,\n            }),\n            entryPoint: 'main',\n          },\n        });\n        const commandEncoder = t.device.createCommandEncoder();\n        const pass = commandEncoder.beginComputePass();\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(\n          0,\n          t.device.createBindGroup({\n            layout: pipeline.getBindGroupLayout(0),\n            entries: [\n              {\n                binding: 0,\n                resource: view,\n              },\n            ],\n          })\n        );\n        pass.dispatchWorkgroups(kTextureSize, kTextureSize);\n        pass.end();\n        t.device.queue.submit([commandEncoder.finish()]);\n      }\n      break;\n\n    case 'storage-write-fragment':\n      {\n        // Create a placeholder color attachment texture,\n        // The size of which equals that of format texture we are testing,\n        // so that we have the same number of fragments and texels.\n        const kPlaceholderTextureFormat = 'rgba8unorm';\n        const placeholderTexture = t.createTextureTracked({\n          format: kPlaceholderTextureFormat,\n          size: [kTextureSize, kTextureSize],\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        });\n\n        const pipeline = t.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module: t.device.createShaderModule({\n              code: kFullscreenQuadVertexShaderCode,\n            }),\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var dst: texture_storage_2d<${format}, write>;\n                @fragment fn main(\n                  @builtin(position) fragCoord: vec4<f32>,\n                ) {\n                  const src = ${kColorArrayShaderString};\n                  let coord = vec2u(fragCoord.xy);\n                  let idx = coord.x + coord.y * ${kTextureSize};\n                  textureStore(dst, coord, src[idx % ${kColors.length}]);\n                }`,\n            }),\n            // Set writeMask to 0 as the fragment shader has no output.\n            targets: [\n              {\n                format: kPlaceholderTextureFormat,\n                writeMask: 0,\n              },\n            ],\n          },\n        });\n        const commandEncoder = t.device.createCommandEncoder();\n        const pass = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: placeholderTexture.createView(),\n              loadOp: 'clear',\n              storeOp: 'discard',\n            },\n          ],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(\n          0,\n          t.device.createBindGroup({\n            layout: pipeline.getBindGroupLayout(0),\n            entries: [\n              {\n                binding: 0,\n                resource: view,\n              },\n            ],\n          })\n        );\n        pass.draw(6);\n        pass.end();\n        t.device.queue.submit([commandEncoder.finish()]);\n      }\n      break;\n\n    case 'render-pass-store':\n    case 'render-pass-resolve':\n      {\n        // Create a placeholder color attachment texture for the store target when tesing texture is used as resolve target.\n        const targetView =\n          method === 'render-pass-store'\n            ? view\n            : t\n                .createTextureTracked({\n                  format,\n                  size: [kTextureSize, kTextureSize],\n                  usage: GPUTextureUsage.RENDER_ATTACHMENT,\n                  sampleCount: 4,\n                })\n                .createView();\n        const resolveView = method === 'render-pass-store' ? undefined : view;\n        const multisampleCount = method === 'render-pass-store' ? sampleCount : 4;\n\n        const pipeline = t.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module: t.device.createShaderModule({\n              code: kFullscreenQuadVertexShaderCode,\n            }),\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: `\n                @fragment fn main(\n                  @builtin(position) fragCoord: vec4<f32>,\n                ) -> @location(0) ${vecType} {\n                  const src = ${kColorArrayShaderString};\n                  let coord = vec2u(fragCoord.xy);\n                  let idx = coord.x + coord.y * ${kTextureSize};\n                  return src[idx % ${kColors.length}];\n                }`,\n            }),\n            targets: [\n              {\n                format,\n              },\n            ],\n          },\n          multisample: {\n            count: multisampleCount,\n          },\n        });\n        const commandEncoder = t.device.createCommandEncoder();\n        const pass = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: targetView,\n              resolveTarget: resolveView,\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        pass.setPipeline(pipeline);\n        pass.draw(6);\n        pass.end();\n        t.device.queue.submit([commandEncoder.finish()]);\n      }\n      break;\n    default:\n      unreachable();\n  }\n\n  return expectedTexelView;\n}\n\nfunction getTextureViewUsage(\n  viewUsageMethod: TextureViewUsageMethod,\n  minimalUsageForTest: GPUTextureUsageFlags\n) {\n  switch (viewUsageMethod) {\n    case 'inherit':\n      return 0;\n\n    case 'minimal':\n      return minimalUsageForTest;\n\n    default:\n      unreachable();\n  }\n}\n\ng.test('format')\n  .desc(\n    `Views of every allowed format.\n\nRead values from color array in the shader, and write it to the texture view via different write methods.\n\n- x= every texture format\n- x= sampleCount {1, 4} if valid\n- x= every possible view write method (see above)\n- x= inherited or minimal texture view usage\n\nTODO: Test sampleCount > 1 for 'render-pass-store' after extending copySinglePixelTextureToBufferUsingComputePass\n      to read multiple pixels from multisampled textures. [1]\nTODO: Test rgb10a2uint when TexelRepresentation.numericRange is made per-component. [2]\n`\n  )\n  .params(u =>\n    u //\n      .combine('method', kTextureViewWriteMethods)\n      .combine('format', kRegularTextureFormats)\n      .combine('sampleCount', [1, 4])\n      .filter(({ format, method, sampleCount }) => {\n        // [2]\n        if (format === 'rgb10a2uint') {\n          return false;\n        }\n\n        switch (method) {\n          case 'storage-write-compute':\n          case 'storage-write-fragment':\n            return sampleCount === 1;\n          case 'render-pass-resolve':\n            return sampleCount === 1;\n          case 'render-pass-store':\n            // [1]\n            if (sampleCount > 1) {\n              return false;\n            }\n            break;\n        }\n\n        return true;\n      })\n      .combine('viewUsageMethod', kTextureViewUsageMethods)\n  )\n  .fn(t => {\n    const { format, method, sampleCount, viewUsageMethod } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    if (sampleCount > 1) {\n      t.skipIfTextureFormatNotMultisampled(format);\n    }\n\n    switch (method) {\n      case 'storage-write-compute':\n      case 'storage-write-fragment':\n        t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n        break;\n      case 'render-pass-store':\n        t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n        break;\n      case 'render-pass-resolve':\n        // Requires multisample in `writeTextureAndGetExpectedTexelView`\n        t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n        t.skipIfTextureFormatNotResolvable(format);\n        break;\n    }\n\n    t.skipIf(\n      t.isCompatibility &&\n        method === 'storage-write-fragment' &&\n        !(t.device.limits.maxStorageBuffersInFragmentStage! > 0),\n      `maxStorageBuffersInFragmentStage(${t.device.limits.maxStorageBuffersInFragmentStage}) < 1`\n    );\n\n    const textureUsageForMethod = method.includes('storage')\n      ? GPUTextureUsage.STORAGE_BINDING\n      : GPUTextureUsage.RENDER_ATTACHMENT;\n    const usage = GPUTextureUsage.COPY_SRC | textureUsageForMethod;\n\n    const texture = t.createTextureTracked({\n      format,\n      usage,\n      size: [kTextureSize, kTextureSize],\n      sampleCount,\n    });\n\n    const view = texture.createView({\n      usage: getTextureViewUsage(viewUsageMethod, textureUsageForMethod),\n    });\n    const expectedTexelView = writeTextureAndGetExpectedTexelView(\n      t,\n      method,\n      view,\n      format,\n      sampleCount\n    );\n\n    // [1] Use copySinglePixelTextureToBufferUsingComputePass to check multisampled texture.\n    t.expectTexelViewComparisonIsOkInTexture({ texture }, expectedTexelView, [\n      kTextureSize,\n      kTextureSize,\n    ]);\n  });\n\ng.test('dimension')\n  .desc(\n    `Views of every allowed dimension.\n\n- x= a representative subset of formats\n- x= {every texture dimension} x {every valid view dimension}\n  (per gpuweb#79 no dimension-count reinterpretations, like 2d-array <-> 3d, are possible)\n- x= sampleCount {1, 4} if valid\n- x= every possible view write method (see above)\n`\n  )\n  .unimplemented();\n\ng.test('aspect')\n  .desc(\n    `Views of every allowed aspect of depth/stencil textures.\n\n- x= every depth/stencil format\n- x= {\"all\", \"stencil-only\", \"depth-only\"} where valid for the format\n- x= sampleCount {1, 4} if valid\n- x= every possible view write method (see above)\n`\n  )\n  .unimplemented();\n"],"mappings":"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"}