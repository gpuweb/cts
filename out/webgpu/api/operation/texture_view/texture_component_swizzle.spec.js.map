{"version":3,"file":"texture_component_swizzle.spec.js","names":["description","makeTestGroup","assert","range","unreachable","isSintOrUintFormat","isDepthOrStencilTextureFormat","kAllTextureFormats","isDepthTextureFormat","getBlockInfoForTextureFormat","isStencilTextureFormat","isDepthStencilTextureFormat","isTextureFormatPossiblyMultisampled","isTextureFormatUsableAsRenderAttachment","AllFeaturesMaxLimitsGPUTest","applyCompareToTexel","chooseTextureSize","convertPerTexelComponentToResultFormat","createTextureWithRandomDataAndGetTexelsForEachAspect","getTextureFormatTypeInfo","isBuiltinComparison","isBuiltinGather","isFillable","ttu","TexelComponent","TexelView","kSwizzleTests","swizzleTexel","isSingleChannelInput","input","isMultisampledInput","getSwizzleByOffsetFromSwizzle","swizzle","offset","indexOf","length","kTextureBuiltinFunctions","canBuiltinTakeTextureDepth","func","canUseBuiltinFuncWithFormat","format","aspect","effectiveFormat","channelIndexToTexelComponent","channel","R","G","B","A","Error","getColorByChannelIndex","texel","component","v","undefined","gather","srcColors","kGatherComponentOrder","s_deviceToPipelines","WeakMap","g","test","desc","params","u","combine","filter","t","beginSubcases","expand","componentType","fn","skipIfDeviceDoesNotHaveFeature","compare","otherSwizzleIndexOffset","skipIfTextureFormatNotSupported","skipIfTextureLoadNotSupportedForTextureType","skipIfTextureFormatNotMultisampled","otherSwizzle","debug","isCompatibility","skipIf","depthRef","size","minSize","minBlocks","blockWidth","blockHeight","tx","ty","descriptor","label","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","device","RENDER_ATTACHMENT","sampleCount","texels","srcTexelViews","texture","aspectNdx","srcTexelView","samples","sampledColors","i","x","y","sample","color","z","push","map","c","JSON","stringify","join","components","readColors","sampledColor","resultType","sampleType","srcSampleType","resultFormat","expFormat","testData","swizzledColors","readColor","expRGBAColor","expColor","expTexelView","fromTexelsAsColors","_coords","textureView","createView","loadFn","loadWGSL","samplerWGSL","code","samplerType","pipelineId","cache","get","Map","set","pipeline","module","createShaderModule","bgl0","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","FRAGMENT","VERTEX","multisampled","sampler","type","buffer","storageTexture","bgl1","layout","createPipelineLayout","bindGroupLayouts","createRenderPipeline","vertex","fragment","targets","primitive","topology","outputTexture","createTextureTracked","COPY_SRC","STORAGE_BINDING","createSampler","uniformBuffer","createBufferTracked","GPUBufferUsage","UNIFORM","uniformValues","ArrayBuffer","asF32","Float32Array","width","height","queue","writeBuffer","Uint32Array","bindGroup0","createBindGroup","getBindGroupLayout","resource","bindGroup1","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","loadOp","storeOp","setPipeline","setBindGroup","draw","end","expectValidationError","submit","finish","forEach","expectTexelViewComparisonIsOkInTexture","origin","maxFractionalDiff"],"sources":["../../../../../src/webgpu/api/operation/texture_view/texture_component_swizzle.spec.ts"],"sourcesContent":["export const description = `\nOperational tests for the 'texture-component-swizzle' feature.\n\nTest that:\n* when the feature is on, swizzling is applied correctly.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, range, unreachable } from '../../../../common/util/util.js';\nimport {\n  isSintOrUintFormat,\n  isDepthOrStencilTextureFormat,\n  kAllTextureFormats,\n  isDepthTextureFormat,\n  getBlockInfoForTextureFormat,\n  isStencilTextureFormat,\n  isDepthStencilTextureFormat,\n  isTextureFormatPossiblyMultisampled,\n  isTextureFormatUsableAsRenderAttachment,\n} from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport {\n  applyCompareToTexel,\n  chooseTextureSize,\n  convertPerTexelComponentToResultFormat,\n  createTextureWithRandomDataAndGetTexelsForEachAspect,\n  getTextureFormatTypeInfo,\n  isBuiltinComparison,\n  isBuiltinGather,\n  isFillable,\n  TextureBuiltin,\n} from '../../../shader/execution/expression/call/builtin/texture_utils.js';\nimport * as ttu from '../../../texture_test_utils.js';\nimport { PerTexelComponent, TexelComponent } from '../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport {\n  kSwizzleTests,\n  SwizzleSpec,\n  swizzleTexel,\n} from '../../validation/capability_checks/features/texture_component_swizzle_utils.js';\n\ntype TextureInput =\n  | 'texture_2d<f32>'\n  | 'texture_2d<u32>'\n  | 'texture_2d<i32>'\n  | 'texture_depth_2d'\n  | 'texture_multisampled_2d<f32>'\n  | 'texture_multisampled_2d<u32>'\n  | 'texture_multisampled_2d<i32>'\n  | 'texture_depth_multisampled_2d';\n\nfunction isSingleChannelInput(input: TextureInput) {\n  return input === 'texture_depth_2d' || input === 'texture_depth_multisampled_2d';\n}\n\nfunction isMultisampledInput(input: TextureInput) {\n  return (\n    input === 'texture_multisampled_2d<f32>' ||\n    input === 'texture_multisampled_2d<u32>' ||\n    input === 'texture_multisampled_2d<i32>' ||\n    input === 'texture_depth_multisampled_2d'\n  );\n}\n\nfunction getSwizzleByOffsetFromSwizzle(swizzle: SwizzleSpec, offset: number): SwizzleSpec {\n  return kSwizzleTests[(kSwizzleTests.indexOf(swizzle) + offset) % kSwizzleTests.length];\n}\n\nconst kTextureBuiltinFunctions = [\n  'textureGather',\n  'textureGatherCompare',\n  'textureLoad',\n  'textureSample',\n  'textureSampleBias',\n  'textureSampleCompare',\n  'textureSampleCompareLevel',\n  'textureSampleGrad',\n  'textureSampleLevel',\n  // 'textureSampleBaseClampToEdge',  // external textures don't have a view to swizzle.\n] as const;\n\nfunction canBuiltinTakeTextureDepth(func: TextureBuiltin) {\n  return (\n    func === 'textureGather' ||\n    func === 'textureGatherCompare' ||\n    func === 'textureLoad' ||\n    func === 'textureSample' ||\n    func === 'textureSampleCompare' ||\n    func === 'textureSampleCompareLevel' ||\n    func === 'textureSampleLevel'\n  );\n}\n\nfunction canUseBuiltinFuncWithFormat(\n  func: TextureBuiltin,\n  format: GPUTextureFormat,\n  aspect: GPUTextureAspect\n) {\n  const effectiveFormat = aspect === 'stencil-only' ? 'stencil8' : format;\n  if (isSintOrUintFormat(effectiveFormat)) {\n    return func === 'textureGather' || func === 'textureLoad';\n  } else if (!isDepthTextureFormat(effectiveFormat)) {\n    return (\n      func !== 'textureGatherCompare' &&\n      func !== 'textureSampleCompare' &&\n      func !== 'textureSampleCompareLevel'\n    );\n  } else {\n    return true;\n  }\n}\n\nfunction channelIndexToTexelComponent(channel: number): TexelComponent {\n  switch (channel) {\n    case 0:\n      return TexelComponent.R;\n    case 1:\n      return TexelComponent.G;\n    case 2:\n      return TexelComponent.B;\n    case 3:\n      return TexelComponent.A;\n    default:\n      throw new Error(`Invalid channel index: ${channel}`);\n  }\n}\n\nfunction getColorByChannelIndex(texel: PerTexelComponent<number>, channel: number): number {\n  const component = channelIndexToTexelComponent(channel);\n  const v = texel[component];\n  assert(v !== undefined);\n  return v;\n}\n\nfunction gather(\n  srcColors: PerTexelComponent<number>[],\n  channel: number\n): PerTexelComponent<number> {\n  //   texel gather offsets\n  // r [0, 1] 2\n  // g [1, 1] 3\n  // b [1, 0] 1\n  // a [0, 0] 0\n  return {\n    R: getColorByChannelIndex(srcColors[2], channel),\n    G: getColorByChannelIndex(srcColors[3], channel),\n    B: getColorByChannelIndex(srcColors[1], channel),\n    A: getColorByChannelIndex(srcColors[0], channel),\n  };\n}\n\nconst kGatherComponentOrder = ['B', 'A', 'R', 'G'] as const;\n\ntype PipelineCache = Map<string, GPUComputePipeline | GPURenderPipeline>;\nconst s_deviceToPipelines = new WeakMap<GPUDevice, PipelineCache>();\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('read_swizzle')\n  .desc(\n    `\n  Test reading textures with swizzles.\n  * Test that multiple swizzles of the same texture work.\n  * Test that multiple swizzles of the same fails in compat if the swizzles are different.\n  `\n  )\n  .params(\n    u =>\n      u\n        .combine('format', kAllTextureFormats)\n        .filter(t => isFillable(t.format))\n        .combine('func', kTextureBuiltinFunctions)\n        .beginSubcases()\n        .expand('compare', function* (t) {\n          if (isBuiltinComparison(t.func)) {\n            yield 'less';\n            yield 'greater';\n          } else {\n            yield 'always';\n          }\n        })\n        .expand('aspect', function* (t) {\n          if (isDepthOrStencilTextureFormat(t.format)) {\n            if (isDepthTextureFormat(t.format)) {\n              yield 'depth-only';\n            }\n            if (isStencilTextureFormat(t.format)) {\n              yield 'stencil-only';\n            }\n          } else {\n            yield 'all';\n          }\n        })\n        .filter(t => canUseBuiltinFuncWithFormat(t.func, t.format, t.aspect))\n        .expand('input', function* (t) {\n          if (!isBuiltinComparison(t.func)) {\n            const { componentType } = getTextureFormatTypeInfo(t.format, t.aspect);\n            switch (componentType) {\n              case 'f32':\n                yield `texture_2d<f32>`;\n                break;\n              case 'u32':\n                yield `texture_2d<u32>`;\n                break;\n              case 'i32':\n                yield `texture_2d<i32>`;\n                break;\n              default:\n                unreachable();\n            }\n          }\n          if (\n            isDepthTextureFormat(t.format) &&\n            canBuiltinTakeTextureDepth(t.func) &&\n            t.aspect === 'depth-only'\n          ) {\n            yield `texture_depth_2d`;\n          }\n          if (t.func === 'textureLoad' && isTextureFormatPossiblyMultisampled(t.format)) {\n            const { componentType } = getTextureFormatTypeInfo(t.format, t.aspect);\n            switch (componentType) {\n              case 'f32':\n                yield `texture_multisampled_2d<f32>`;\n                break;\n              case 'u32':\n                yield `texture_multisampled_2d<u32>`;\n                break;\n              case 'i32':\n                yield `texture_multisampled_2d<i32>`;\n                break;\n              default:\n                unreachable();\n            }\n            if (\n              isDepthTextureFormat(t.format) &&\n              canBuiltinTakeTextureDepth(t.func) &&\n              t.aspect === 'depth-only'\n            ) {\n              yield `texture_depth_multisampled_2d`;\n            }\n          }\n        })\n        .expand('channel', function* (t) {\n          if (t.func === 'textureGather' && !isSingleChannelInput(t.input)) {\n            yield 0;\n            yield 1;\n            yield 2;\n            yield 3;\n          } else {\n            yield 0;\n          }\n        })\n        .combine('swizzle', kSwizzleTests)\n        .combine('otherSwizzleIndexOffset', [0, 1, 5]) // used to choose a different 2nd swizzle. 0 = same swizzle as 1st\n  )\n  .fn(async t => {\n    // MAINTENANCE_TODO: Remove this cast once texture-component-swizzle is added to @webgpu/types\n    t.skipIfDeviceDoesNotHaveFeature('texture-component-swizzle' as GPUFeatureName);\n    const { format, func, channel, compare, input, aspect, swizzle, otherSwizzleIndexOffset } =\n      t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    if (func === 'textureLoad') {\n      t.skipIfTextureLoadNotSupportedForTextureType(input);\n    }\n    if (isMultisampledInput(input)) {\n      t.skipIfTextureFormatNotMultisampled(format);\n    }\n    const otherSwizzle = getSwizzleByOffsetFromSwizzle(swizzle, otherSwizzleIndexOffset);\n    t.debug(() => `swizzle: ${swizzle}, otherSwizzle: ${otherSwizzle}`);\n\n    if (t.isCompatibility) {\n      t.skipIf(\n        swizzle !== otherSwizzle,\n        `swizzles must be equivalent in compatibility mode: ${swizzle} != ${otherSwizzle}`\n      );\n      t.skipIf(\n        !isBuiltinComparison(func) && input === 'texture_depth_2d',\n        'can not use depth textures with non-comparison samplers in compatibility mode'\n      );\n    }\n\n    const depthRef = 0.5;\n    const size = chooseTextureSize({ minSize: 2, minBlocks: 2, format });\n    const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(format);\n    // Choose a texture coordinate that will cross a block boundary for gather.\n    // This is because we only create solid color blocks for some formats so we\n    // won't get a different color per channel unless we sample across blocks.\n    const tx = blockWidth - 0.4;\n    const ty = blockHeight - 0.4;\n    const descriptor: GPUTextureDescriptor = {\n      label: 'swizzle test texture',\n      format,\n      size,\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        (isTextureFormatUsableAsRenderAttachment(t.device, format)\n          ? GPUTextureUsage.RENDER_ATTACHMENT\n          : 0),\n      sampleCount: isMultisampledInput(input) ? 4 : 1,\n    };\n    const { texels: srcTexelViews, texture } =\n      await createTextureWithRandomDataAndGetTexelsForEachAspect(t, descriptor);\n    const aspectNdx = isDepthStencilTextureFormat(format) && aspect === 'stencil-only' ? 1 : 0;\n    const srcTexelView = srcTexelViews[aspectNdx];\n\n    const samples = [];\n    const sampledColors = range(4, i => {\n      const x = (tx | 0) + (i % 2);\n      const y = (ty | 0) + ((i / 2) | 0);\n\n      const sample = srcTexelView[0].color({ x, y, z: 0 });\n      samples.push(sample);\n      return convertPerTexelComponentToResultFormat(sample, format, aspect);\n    });\n    t.debug(\n      () => `samples:\n${sampledColors.map((c, i) => `${i % 2}, ${(i / 2) | 0}, ${JSON.stringify(c)}`).join('\\n')}`\n    );\n\n    const components = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\n    const readColors = sampledColors.map(sampledColor =>\n      isBuiltinComparison(func)\n        ? applyCompareToTexel(components, sampledColor, compare, depthRef)\n        : sampledColor\n    );\n\n    const {\n      resultType,\n      sampleType: srcSampleType,\n      resultFormat: expFormat,\n    } = getTextureFormatTypeInfo(format, aspect);\n\n    const testData = [swizzle, otherSwizzle].map(swizzle => {\n      const swizzledColors = readColors.map(readColor => swizzleTexel(readColor, swizzle));\n      const expRGBAColor = isBuiltinGather(func)\n        ? gather(swizzledColors, channel)\n        : swizzledColors[0];\n      const expColor =\n        !isBuiltinGather(func) && isSingleChannelInput(input)\n          ? {\n              R: expRGBAColor.R,\n              G: expRGBAColor.R,\n              B: expRGBAColor.R,\n              A: expRGBAColor.R,\n            }\n          : expRGBAColor;\n      const expTexelView = TexelView.fromTexelsAsColors(expFormat, _coords => expColor);\n      const textureView = texture.createView({\n        label: `swizzle texture view(${swizzle})`,\n        swizzle,\n        aspect,\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n      });\n\n      // BA  in a 2x2 texel area this is\n      // RG  the order of gather.\n      t.debug(\n        () => `\\\n  swizzle: ${swizzle}, channel: ${channel}, ${\n    compare === 'always' ? '' : `compare: ${depthRef} is ${compare} than Texel`\n  }\n  readColors:\n${readColors\n  .map((c, i) => `${i % 2}, ${(i / 2) | 0}, ${JSON.stringify(c)} ${kGatherComponentOrder[i]}`)\n  .join('\\n')}\n  swizzledColors:\n${swizzledColors\n  .map((c, i) => `${i % 2}, ${(i / 2) | 0}, ${JSON.stringify(c)} ${kGatherComponentOrder[i]}`)\n  .join('\\n')}\n  `\n      );\n      return { swizzle, expColor, expFormat, expTexelView, textureView };\n    });\n\n    t.debug(\n      () => `expColors:\n${testData\n  .map(({ expColor }, i) => `${i % 2}, ${(i / 2) | 0}, ${JSON.stringify(expColor)}`)\n  .join('\\n')}`\n    );\n\n    const loadFn = ((func: TextureBuiltin) => {\n      switch (func) {\n        case 'textureGather':\n          return (v: number) =>\n            isSingleChannelInput(input)\n              ? `textureGather(tex${v}, smp, uni.texCoord)`\n              : `textureGather(${channel}, tex${v}, smp, uni.texCoord)`;\n        case 'textureGatherCompare':\n          return (v: number) => `textureGatherCompare(tex${v}, smp, uni.texCoord, ${depthRef})`;\n        case 'textureLoad':\n          return (v: number) =>\n            `textureLoad(tex${v}, vec2u(uni.texCoord * vec2f(textureDimensions(tex${v}))), 0)`;\n        case 'textureSample':\n          return (v: number) => `textureSample(tex${v}, smp, uni.texCoord)`;\n        case 'textureSampleBias':\n          return (v: number) => `textureSampleBias(tex${v}, smp, uni.texCoord, 0)`;\n        case 'textureSampleCompare':\n          return (v: number) => `textureSampleCompare(tex${v}, smp, uni.texCoord, ${depthRef})`;\n        case 'textureSampleCompareLevel':\n          return (v: number) =>\n            `textureSampleCompareLevel(tex${v}, smp, uni.texCoord, ${depthRef})`;\n        case 'textureSampleGrad':\n          return (v: number) => `textureSampleGrad(tex${v}, smp, uni.texCoord, vec2f(0), vec2f(0))`;\n        case 'textureSampleLevel':\n          return (v: number) => `textureSampleLevel(tex${v}, smp, uni.texCoord, 0)`;\n        default:\n          throw new Error(`Unsupported texture builtin function: ${func}`);\n      }\n    })(func);\n    const loadWGSL = (v: number) => `${resultType}(${loadFn(v)})`;\n\n    const samplerWGSL = isBuiltinComparison(func) ? 'sampler_comparison' : 'sampler';\n    const code = `\n      struct Uniforms {\n        texCoord: vec2f,\n      };\n\n      // These are intentionally in different bindGroups to test in compat that different swizzles\n      // of the same texture are not allowed.\n      @group(0) @binding(0) var tex0: ${input};\n      @group(1) @binding(0) var tex1: ${input};\n      @group(0) @binding(1) var smp: ${samplerWGSL};\n      @group(0) @binding(2) var<uniform> uni: Uniforms;\n      @group(0) @binding(3) var result: texture_storage_2d<${expFormat}, write>;\n\n      @vertex fn vsFSResults() -> @builtin(position) vec4f {\n        return vec4f(0, 0, 0, 1);\n      }\n\n      @fragment fn fsFSResults() -> @location(0) vec4f {\n        let c0 = ${loadWGSL(0)};\n        let c1 = ${loadWGSL(1)};\n        textureStore(result, vec2u(0, 0), c0);\n        textureStore(result, vec2u(1, 0), c1);\n        return vec4f(0, 0, 0, 1);\n      }\n    `;\n\n    const sampleType = isSingleChannelInput(input)\n      ? 'depth'\n      : srcSampleType === 'depth'\n      ? isBuiltinComparison(func)\n        ? 'depth'\n        : 'unfilterable-float'\n      : srcSampleType === 'float' && isMultisampledInput(input)\n      ? 'unfilterable-float'\n      : srcSampleType;\n    const samplerType = isBuiltinComparison(func) ? 'comparison' : 'non-filtering';\n\n    const pipelineId = `${sampleType}:${samplerType}${code}`;\n    const cache = s_deviceToPipelines.get(t.device) ?? new Map();\n    s_deviceToPipelines.set(t.device, cache);\n    let pipeline = cache.get(pipelineId);\n    if (!pipeline) {\n      const module = t.device.createShaderModule({ code });\n\n      const bgl0 = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n            texture: {\n              sampleType,\n              multisampled: isMultisampledInput(input),\n            },\n          },\n          {\n            binding: 1,\n            visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n            sampler: {\n              type: samplerType,\n            },\n          },\n          {\n            binding: 2,\n            visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n            buffer: {},\n          },\n          {\n            binding: 3,\n            visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT,\n            storageTexture: {\n              format: expFormat,\n            },\n          },\n        ],\n      });\n\n      const bgl1 = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n            texture: {\n              sampleType,\n              multisampled: isMultisampledInput(input),\n            },\n          },\n        ],\n      });\n\n      const layout = t.device.createPipelineLayout({\n        bindGroupLayouts: [bgl0, bgl1],\n      });\n\n      pipeline = t.device.createRenderPipeline({\n        layout,\n        vertex: { module },\n        fragment: { module, targets: [{ format: 'rgba8unorm' }] },\n        primitive: { topology: 'point-list' },\n      });\n      cache.set(pipelineId, pipeline);\n    }\n\n    const outputTexture = t.createTextureTracked({\n      format: expFormat,\n      size: [2],\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n    });\n\n    const sampler = t.device.createSampler(\n      isBuiltinComparison(func)\n        ? {\n            compare,\n          }\n        : {}\n    );\n\n    const uniformBuffer = t.createBufferTracked({\n      size: (2 + 2) * 4, // vec2f + padding\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const uniformValues = new ArrayBuffer(uniformBuffer.size);\n    const asF32 = new Float32Array(uniformValues);\n    asF32.set([tx / texture.width, ty / texture.height]);\n    t.device.queue.writeBuffer(uniformBuffer, 0, new Uint32Array(uniformValues));\n\n    const bindGroup0 = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: testData[0].textureView },\n        { binding: 1, resource: sampler },\n        { binding: 2, resource: uniformBuffer },\n        { binding: 3, resource: outputTexture },\n      ],\n    });\n\n    const bindGroup1 = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(1),\n      entries: [{ binding: 0, resource: testData[1].textureView }],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: t.createTextureTracked({\n            format: 'rgba8unorm',\n            size: [1],\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n          }),\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    pass.draw(1);\n    pass.end();\n\n    if (t.isCompatibility && testData[0].swizzle !== testData[1].swizzle) {\n      // Swizzles can not be different in compatibility mode\n      t.expectValidationError(() => {\n        t.device.queue.submit([encoder.finish()]);\n      });\n    } else {\n      t.device.queue.submit([encoder.finish()]);\n\n      testData.forEach(({ swizzle, expTexelView }, i) => {\n        t.debug(() => `${i}: ${swizzle}`);\n\n        ttu.expectTexelViewComparisonIsOkInTexture(\n          t,\n          { texture: outputTexture, origin: [i, 0, 0] },\n          expTexelView,\n          [1, 1, 1],\n          { maxFractionalDiff: 0.01 }\n        );\n      });\n    }\n  });\n"],"mappings":"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"}