{"version":3,"file":"max_combined_limits.spec.js","names":["description","makeTestGroup","range","getColorRenderByteCost","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","TexelView","g","test","desc","params","u","combine","fn","t","format","device","kWidth","kHeight","numColorAttachments","Math","min","limits","maxColorAttachments","maxColorAttachmentBytesPerSample","numStorageBuffers","maxStorageBuffersInFragmentStage","maxStorageBuffersPerShaderStage","numStorageTextures","maxStorageTexturesInFragmentStage","maxStorageTexturesPerShaderStage","code","i","join","debug","module","createShaderModule","pipeline","createRenderPipeline","layout","vertex","fragment","targets","depthStencil","depthWriteEnabled","depthCompare","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","storageBuffers","createBufferTracked","storageTextures","createTextureTracked","GPUTextureUsage","STORAGE_BINDING","RENDER_ATTACHMENT","bindGroup0","createBindGroup","getBindGroupLayout","entries","map","buffer","binding","resource","bindGroup1","storageTexture","createView","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","texture","loadOp","storeOp","view","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","fillExpected","expected","y","x","off","makeExpectedRGBA32Uint","Uint32Array","makeExpectedRGBA8Uint","Uint8Array","makeExpectedR8Uint","temp","length","forEach","expectGPUBufferValuesEqual","expectTexelViewComparisonIsOkInTexture","fromTextureDataByReference","bytesPerRow","rowsPerImage","subrectOrigin","subrectSize"],"sources":["../../../../../src/webgpu/api/operation/limits/max_combined_limits.spec.ts"],"sourcesContent":["export const description = `\nTest that with the limits set to their maximum we can actually use\nthe maximum number of storage buffers, storage textures, and fragment outputs\nat the same time.\n\nIn particular, OpenGL ES 3.1 has GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES which\nthe spec says is the combination of storage textures, storage buffers, and\nfragment shader outputs. This test checks that the whatever values the WebGPU\nimplementation allows, all of them are useable.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { getColorRenderByteCost } from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nexport const g = makeTestGroup(TextureTestMixin(AllFeaturesMaxLimitsGPUTest));\n\ng.test('max_storage_buffer_texture_frag_outputs')\n  .desc(\n    `\n    Use the maximum number of storage buffer, storage texture, and fragment stage outputs\n    `\n  )\n  .params(u => u.combine('format', ['r8uint', 'rgba8uint', 'rgba32uint'] as const))\n  .fn(t => {\n    const { format } = t.params;\n    const { device } = t;\n\n    const kWidth = 4;\n    const kHeight = 4;\n\n    const numColorAttachments = Math.min(\n      device.limits.maxColorAttachments,\n      device.limits.maxColorAttachmentBytesPerSample / getColorRenderByteCost(format)\n    );\n    const numStorageBuffers =\n      device.limits.maxStorageBuffersInFragmentStage ??\n      device.limits.maxStorageBuffersPerShaderStage;\n    const numStorageTextures =\n      device.limits.maxStorageTexturesInFragmentStage ??\n      device.limits.maxStorageTexturesPerShaderStage;\n\n    const code = `\n${range(\n  numStorageBuffers,\n  i => `@group(0) @binding(${i}) var<storage, read_write> sb${i}: array<vec4u>;`\n).join('\\n')}\n\n${range(\n  numStorageTextures,\n  i => `@group(1) @binding(${i}) var st${i}: texture_storage_2d<rgba32uint, write>;`\n).join('\\n')}\n\nstruct FragOut {\n${range(numColorAttachments, i => `  @location(${i}) f${i}: vec4u,`).join('\\n')}\n};\n\n@vertex fn vs(@builtin(vertex_index) vNdx: u32) -> @builtin(position) vec4f {\n  let pos = array(\n    vec2f(-1,  3),\n    vec2f( 3, -1),\n    vec2f(-1, -1),\n  );\n  return vec4f(pos[vNdx], 0, 1);\n}\n\n@fragment fn fs(@builtin(position) position: vec4f) -> FragOut {\n  let p = vec4u(position);\n  let ndx = p.y * ${kWidth} + p.x;\n\n${range(numStorageBuffers, i => `  sb${i}[ndx] = p + ${i};`).join('\\n')}\n\n${range(numStorageTextures, i => `  textureStore(st${i}, p.xy, p + ${i} * 2);`).join('\\n')}\n\n  var fragOut: FragOut;\n${range(numColorAttachments, i => `  fragOut.f${i} = vec4u(p + ${i} * 3);`).join('\\n')}\n  return fragOut;\n}\n    `;\n\n    t.debug(code);\n    const module = device.createShaderModule({ code });\n    const pipeline = device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module },\n      fragment: {\n        module,\n        targets: range(numColorAttachments, i => ({ format })),\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'less',\n        format: 'depth24plus-stencil8',\n      },\n    });\n\n    const size = kWidth * kHeight * 4 * 4;\n    const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC;\n    const storageBuffers = range(numStorageBuffers, i => t.createBufferTracked({ size, usage }));\n\n    const storageTextures = range(numStorageTextures, i =>\n      t.createTextureTracked({\n        format: 'rgba32uint',\n        size: [kWidth, kHeight],\n        usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n      })\n    );\n\n    const targets = range(numColorAttachments, i =>\n      t.createTextureTracked({\n        format,\n        size: [kWidth, kHeight],\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      })\n    );\n\n    const bindGroup0 = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: storageBuffers.map((buffer, i) => ({ binding: i, resource: { buffer } })),\n    });\n\n    const bindGroup1 = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(1),\n      entries: storageTextures.map((storageTexture, i) => ({\n        binding: i,\n        resource: storageTexture.createView(),\n      })),\n    });\n\n    // Note: the depth-stencil attachment is just to add more output.\n    // We do not check its contents.\n    const encoder = device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: targets.map(texture => ({\n        loadOp: 'clear',\n        storeOp: 'store',\n        view: texture.createView(),\n      })),\n      depthStencilAttachment: {\n        view: t\n          .createTextureTracked({\n            format: 'depth24plus-stencil8',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            size: [kWidth, kHeight],\n          })\n          .createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n        stencilClearValue: 0,\n        stencilLoadOp: 'clear',\n        stencilStoreOp: 'store',\n      },\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    pass.draw(3);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n\n    const fillExpected = <T extends Uint32Array | Uint8Array>(expected: T, i: number) => {\n      for (let y = 0; y < kHeight; ++y) {\n        for (let x = 0; x < kWidth; ++x) {\n          const off = (y * kWidth + x) * 4;\n          expected[off + 0] = x + i;\n          expected[off + 1] = y + i;\n          expected[off + 2] = i;\n          expected[off + 3] = 1 + i;\n        }\n      }\n      return expected;\n    };\n\n    const makeExpectedRGBA32Uint = (i: number) => {\n      const expected = new Uint32Array(size / 4);\n      return fillExpected(expected, i);\n    };\n\n    const makeExpectedRGBA8Uint = (i: number) => {\n      const expected = new Uint8Array(kWidth * kHeight * 4);\n      return fillExpected(expected, i);\n    };\n\n    const makeExpectedR8Uint = (i: number) => {\n      const temp = makeExpectedRGBA8Uint(i);\n      const expected = new Uint8Array(kWidth * kHeight);\n      for (let i = 0; i < expected.length; ++i) {\n        expected[i] = temp[i * 4];\n      }\n      return expected;\n    };\n\n    storageBuffers.forEach((buffer, i) => {\n      t.expectGPUBufferValuesEqual(buffer, makeExpectedRGBA32Uint(i));\n    });\n\n    storageTextures.forEach((texture, i) => {\n      t.expectTexelViewComparisonIsOkInTexture(\n        { texture },\n        TexelView.fromTextureDataByReference(\n          'rgba32uint',\n          new Uint8Array(makeExpectedRGBA32Uint(i * 2).buffer),\n          {\n            bytesPerRow: kWidth * 16,\n            rowsPerImage: kHeight,\n            subrectOrigin: [0, 0],\n            subrectSize: [kWidth, kHeight],\n          }\n        ),\n        [kWidth, kHeight]\n      );\n    });\n\n    targets.forEach((texture, i) => {\n      let expected;\n      let bytesPerRow;\n      switch (format) {\n        case 'r8uint':\n          expected = makeExpectedR8Uint(i * 3);\n          bytesPerRow = kWidth;\n          break;\n        case 'rgba8uint':\n          expected = makeExpectedRGBA8Uint(i * 3);\n          bytesPerRow = kWidth * 4;\n          break;\n        case 'rgba32uint':\n          expected = new Uint8Array(makeExpectedRGBA32Uint(i * 3).buffer);\n          bytesPerRow = kWidth * 16;\n          break;\n      }\n      t.expectTexelViewComparisonIsOkInTexture(\n        { texture },\n        TexelView.fromTextureDataByReference(format, expected, {\n          bytesPerRow,\n          rowsPerImage: kHeight,\n          subrectOrigin: [0, 0],\n          subrectSize: [kWidth, kHeight],\n        }),\n        [kWidth, kHeight]\n      );\n    });\n  });\n"],"mappings":"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"}