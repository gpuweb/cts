{"version":3,"file":"float32_filterable.spec.js","names":["description","makeTestGroup","kTextureSampleTypes","UniqueFeaturesAndLimitsValidationTest","g","kFloat32Formats","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","enabled","selectDeviceOrSkipTestCase","fn","format","sampleType","layout","device","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","texture","textureDesc","size","width","height","usage","GPUTextureUsage","TEXTURE_BINDING","shouldError","expectValidationError","createBindGroup","resource","createTextureTracked","createView"],"sources":["../../../../../src/webgpu/api/validation/texture/float32_filterable.spec.ts"],"sourcesContent":["export const description = `\nTests for capabilities added by float32-filterable flag.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureSampleTypes } from '../../../capability_info.js';\nimport { UniqueFeaturesAndLimitsValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(UniqueFeaturesAndLimitsValidationTest);\n\nconst kFloat32Formats: GPUTextureFormat[] = ['r32float', 'rg32float', 'rgba32float'];\n\ng.test('create_bind_group')\n  .desc(\n    `\nTest that it is valid to bind a float32 texture format to a 'float' sampled texture iff\nfloat32-filterable is enabled.\n`\n  )\n  .params(u =>\n    u\n      .combine('enabled', [true, false] as const)\n      .beginSubcases()\n      .combine('format', kFloat32Formats)\n      .combine('sampleType', kTextureSampleTypes)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.enabled) {\n      t.selectDeviceOrSkipTestCase('float32-filterable');\n    }\n  })\n  .fn(t => {\n    const { enabled, format, sampleType } = t.params;\n    const layout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType },\n        },\n      ],\n    });\n    const textureDesc = {\n      size: { width: 4, height: 4 },\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const shouldError = !(\n      (enabled && sampleType === 'float') ||\n      sampleType === 'unfilterable-float'\n    );\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: t.createTextureTracked(textureDesc).createView() }],\n        layout,\n      });\n    }, shouldError);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,qCAAqC,QAAQ,uBAAuB;;AAE7E,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,qCAAqC,CAAC;;AAErE,MAAME,eAAmC,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,CAAC;;AAEpFD,CAAC,CAACE,IAAI,CAAC,mBAAmB,CAAC;AACxBC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,CAAU,CAAC;AAC1CC,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,QAAQ,EAAEL,eAAe,CAAC;AAClCK,OAAO,CAAC,YAAY,EAAER,mBAAmB;AAC9C,CAAC;AACAU,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,IAAIA,CAAC,CAACL,MAAM,CAACM,OAAO,EAAE;IACpBD,CAAC,CAACE,0BAA0B,CAAC,oBAAoB,CAAC;EACpD;AACF,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAH,CAAC,KAAI;EACP,MAAM,EAAEC,OAAO,EAAEG,MAAM,EAAEC,UAAU,CAAC,CAAC,GAAGL,CAAC,CAACL,MAAM;EAChD,MAAMW,MAAM,GAAGN,CAAC,CAACO,MAAM,CAACC,qBAAqB,CAAC;IAC5CC,OAAO,EAAE;IACP;MACEC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAEC,cAAc,CAACC,QAAQ;MACnCC,OAAO,EAAE,EAAET,UAAU,CAAC;IACxB,CAAC;;EAEL,CAAC,CAAC;EACF,MAAMU,WAAW,GAAG;IAClBC,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7Bd,MAAM;IACNe,KAAK,EAAEC,eAAe,CAACC;EACzB,CAAC;EACD,MAAMC,WAAW,GAAG;EACjBrB,OAAO,IAAII,UAAU,KAAK,OAAO;EAClCA,UAAU,KAAK,oBAAoB,CACpC;;EACDL,CAAC,CAACuB,qBAAqB,CAAC,MAAM;IAC5BvB,CAAC,CAACO,MAAM,CAACiB,eAAe,CAAC;MACvBf,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,EAAEe,QAAQ,EAAEzB,CAAC,CAAC0B,oBAAoB,CAACX,WAAW,CAAC,CAACY,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;MACrFrB;IACF,CAAC,CAAC;EACJ,CAAC,EAAEgB,WAAW,CAAC;AACjB,CAAC,CAAC"}