{"version":3,"file":"maxStorageTexturesInFragmentStage.spec.js","names":["range","reorder","kReorderOrderKeys","assert","kStorageTextureAccessValues","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","getPipelineTypeForBindingCombination","getPerStageWGSLForBindingCombination","getStageVisibilityForBindingCombination","testMaxStorageXXXInYYYStageDeviceCreationWithDependentLimit","limit","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","g","description","limitOptional","createBindGroupLayout","device","visibility","access","order","numBindings","bindGroupLayoutDescription","entries","i","binding","storageTexture","format","test","desc","params","combine","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","skipIf","adapter","limits","GPUShaderStage","FRAGMENT","expectValidationError","actualLimit","Math","min","kNumGroups","ceil","bindGroupLayouts","numInGroup","createPipelineLayout","beginSubcases","async","bindGroupTest","bindingCombination","pipelineType","skipIfNotEnoughStorageBuffersInStage","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageTexturesInFragmentStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  kReorderOrderKeys,\n  ReorderOrder,\n  assert,\n} from '../../../../../common/util/util.js';\nimport { kStorageTextureAccessValues } from '../../../../capability_info.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  getPipelineTypeForBindingCombination,\n  getPerStageWGSLForBindingCombination,\n  LimitsRequest,\n  getStageVisibilityForBindingCombination,\n  testMaxStorageXXXInYYYStageDeviceCreationWithDependentLimit,\n} from './limit_utils.js';\n\nconst limit = 'maxStorageTexturesInFragmentStage';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n};\n\nexport const { g, description } = makeLimitTestGroup(limit, {\n  // MAINTAINANCE_TODO: remove once this limit is required.\n  limitOptional: true,\n});\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  access: GPUStorageTextureAccess,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  const bindGroupLayoutDescription: GPUBindGroupLayoutDescriptor = {\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        storageTexture: { format: 'r32float', access },\n      }))\n    ),\n  };\n  return device.createBindGroupLayout(bindGroupLayoutDescription);\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('access', kStorageTextureAccessValues)\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, order, access } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        t.skipIf(\n          t.adapter.limits.maxBindingsPerBindGroup < testValue,\n          `maxBindingsPerBindGroup = ${t.adapter.limits.maxBindingsPerBindGroup} which is less than ${testValue}`\n        );\n\n        const visibility = GPUShaderStage.FRAGMENT;\n        await t.expectValidationError(() => {\n          createBindGroupLayout(device, visibility, access, order, testValue);\n        }, shouldError);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('access', kStorageTextureAccessValues)\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, order, access } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        const visibility = GPUShaderStage.FRAGMENT;\n\n        t.skipIf(\n          actualLimit === 0,\n          `can not make a bindGroupLayout to test createPipelineLaoyout if the actaul limit is 0`\n        );\n\n        const maxBindingsPerBindGroup = Math.min(\n          t.device.limits.maxBindingsPerBindGroup,\n          actualLimit\n        );\n\n        const kNumGroups = Math.ceil(testValue / maxBindingsPerBindGroup);\n\n        // Not sure what to do in this case but best we get notified if it happens.\n        assert(kNumGroups <= t.device.limits.maxBindGroups);\n\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const numInGroup = Math.min(\n            testValue - i * maxBindingsPerBindGroup,\n            maxBindingsPerBindGroup\n          );\n          return createBindGroupLayout(device, visibility, access, order, numInGroup);\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .beginSubcases()\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, order, bindGroupTest } = t.params;\n    const bindingCombination = 'fragment';\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        t.skipIf(\n          bindGroupTest === 'sameGroup' && testValue > device.limits.maxBindingsPerBindGroup,\n          `can not test ${testValue} bindings in same group because maxBindingsPerBindGroup = ${device.limits.maxBindingsPerBindGroup}`\n        );\n\n        const visibility = getStageVisibilityForBindingCombination(bindingCombination);\n        t.skipIfNotEnoughStorageBuffersInStage(visibility, testValue);\n\n        const code = getPerStageWGSLForBindingCombination(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var u${j}_${i}: texture_storage_2d<r32float,read>`,\n          (i, j) => `_ = u${j}_${i};`,\n          device.limits.maxBindGroups,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ntestMaxStorageXXXInYYYStageDeviceCreationWithDependentLimit(\n  g,\n  limit,\n  'maxStorageTexturesPerShaderStage'\n);\n"],"mappings":"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"}