{"version":3,"file":"maxColorAttachmentBytesPerSample.spec.js","names":["assert","kTextureSampleCounts","kTextureFormatInfo","align","kMaximumLimitBaseParams","makeLimitTestGroup","kFormatsToUseBySize","kInterleaveFormats","getAttachments","interleaveFormat","testValue","bytesPerSample","targets","addTexture","format","info","newBytesPerSample","colorRender","alignment","byteCost","push","writeMask","getDescription","actualLimit","sampleCount","offset","map","s","padEnd","toString","padStart","join","getPipelineDescriptor","device","code","module","createShaderModule","pipelineDescriptor","layout","vertex","entryPoint","fragment","depthStencil","depthWriteEnabled","depthCompare","multisample","count","createTextures","t","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","kExtraLimits","maxColorAttachments","limit","g","description","test","desc","params","combine","fn","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","shouldError","result","numTargets","length","limits","testCreateRenderPipeline","encoder","createCommandEncoder","textures","pass","beginRenderPass","colorAttachments","texture","view","createView","loadOp","storeOp","end","expectValidationError","finish","createRenderBundleEncoder","colorFormats"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxColorAttachmentBytesPerSample.spec.ts"],"sourcesContent":["import { assert } from '../../../../../common/util/util.js';\nimport { kTextureSampleCounts } from '../../../../capability_info.js';\nimport { kTextureFormatInfo } from '../../../../format_info.js';\nimport { align } from '../../../../util/math.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  LimitsRequest,\n  LimitTestsImpl,\n  makeLimitTestGroup,\n} from './limit_utils.js';\n\nconst kFormatsToUseBySize: GPUTextureFormat[] = [\n  'rgba32uint',\n  'rgba16uint',\n  'rgba8unorm',\n  'rg8unorm',\n  'r8unorm',\n];\n\nconst kInterleaveFormats: GPUTextureFormat[] = [\n  'rgba16uint',\n  'rg16uint',\n  'rgba8unorm',\n  'rg8unorm',\n  'r8unorm',\n];\n\nfunction getAttachments(interleaveFormat: GPUTextureFormat, testValue: number) {\n  let bytesPerSample = 0;\n  const targets: GPUColorTargetState[] = [];\n\n  const addTexture = (format: GPUTextureFormat) => {\n    const info = kTextureFormatInfo[format];\n    const newBytesPerSample =\n      align(bytesPerSample, info.colorRender!.alignment) + info.colorRender!.byteCost;\n    if (newBytesPerSample > testValue) {\n      return false;\n    }\n    targets.push({ format, writeMask: 0 });\n    bytesPerSample = newBytesPerSample;\n    return true;\n  };\n\n  while (bytesPerSample < testValue) {\n    addTexture(interleaveFormat);\n    for (const format of kFormatsToUseBySize) {\n      if (addTexture(format)) {\n        break;\n      }\n    }\n  }\n\n  assert(bytesPerSample === testValue);\n  return targets;\n}\n\nfunction getDescription(\n  testValue: number,\n  actualLimit: number,\n  sampleCount: number,\n  targets: GPUColorTargetState[]\n) {\n  return `\n    // testValue  : ${testValue}\n    // actualLimit: ${actualLimit}\n    // sampleCount: ${sampleCount}\n    // targets:\n    ${(() => {\n      let offset = 0;\n      return targets\n        .map(({ format }) => {\n          const info = kTextureFormatInfo[format];\n          offset = align(offset, info.colorRender!.alignment);\n          const s = `//   ${format.padEnd(11)} (offset: ${offset.toString().padStart(2)}, align: ${\n            info.colorRender!.alignment\n          }, size: ${info.colorRender!.byteCost})`;\n          offset += info.colorRender!.byteCost;\n          return s;\n        })\n        .join('\\n    ');\n    })()}\n  `;\n}\n\nfunction getPipelineDescriptor(\n  device: GPUDevice,\n  actualLimit: number,\n  interleaveFormat: GPUTextureFormat,\n  sampleCount: number,\n  testValue: number\n): { pipelineDescriptor: GPURenderPipelineDescriptor; code: string } | undefined {\n  const targets = getAttachments(interleaveFormat, testValue);\n  if (!targets) {\n    return;\n  }\n\n  const code = `\n    ${getDescription(testValue, actualLimit, sampleCount, targets)}\n    @vertex fn vs() -> @builtin(position) vec4f {\n      return vec4f(0);\n    }\n\n    @fragment fn fs() -> @location(0) vec4f {\n      return vec4f(0);\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    vertex: {\n      module,\n      entryPoint: 'vs',\n    },\n    fragment: {\n      module,\n      entryPoint: 'fs',\n      targets,\n    },\n    // depth should not affect the test so added to make sure the implementation does not consider it\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus',\n    },\n    multisample: {\n      count: sampleCount,\n    },\n  };\n  return { pipelineDescriptor, code };\n}\n\nfunction createTextures(t: LimitTestsImpl, targets: GPUColorTargetState[]) {\n  return targets.map(({ format }) =>\n    t.createTextureTracked({\n      size: [1, 1],\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    })\n  );\n}\n\nconst kExtraLimits: LimitsRequest = {\n  maxColorAttachments: 'adapterLimit',\n};\n\nconst limit = 'maxColorAttachmentBytesPerSample';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit in createRenderPipeline(Async)`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .combine('sampleCount', kTextureSampleCounts)\n      .combine('interleaveFormat', kInterleaveFormats)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, sampleCount, interleaveFormat } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        const result = getPipelineDescriptor(\n          device,\n          actualLimit,\n          interleaveFormat,\n          sampleCount,\n          testValue\n        );\n        if (!result) {\n          return;\n        }\n        const { pipelineDescriptor, code } = result;\n        const numTargets = (pipelineDescriptor.fragment!.targets as GPUColorTargetState[]).length;\n        if (numTargets > device.limits.maxColorAttachments) {\n          return;\n        }\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError, code);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('beginRenderPass,at_over')\n  .desc(`Test using at and over ${limit} limit in beginRenderPass`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('sampleCount', kTextureSampleCounts)\n      .combine('interleaveFormat', kInterleaveFormats)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, sampleCount, interleaveFormat } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        const targets = getAttachments(interleaveFormat, testValue);\n        if (targets.length > device.limits.maxColorAttachments) {\n          return;\n        }\n\n        const encoder = device.createCommandEncoder();\n        const textures = createTextures(t, targets);\n\n        const pass = encoder.beginRenderPass({\n          colorAttachments: textures.map(texture => ({\n            view: texture.createView(),\n            loadOp: 'clear',\n            storeOp: 'store',\n          })),\n        });\n        pass.end();\n\n        await t.expectValidationError(\n          () => {\n            encoder.finish();\n          },\n          shouldError,\n          getDescription(testValue, actualLimit, sampleCount, targets)\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createRenderBundle,at_over')\n  .desc(`Test using at and over ${limit} limit in createRenderBundle`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('sampleCount', kTextureSampleCounts)\n      .combine('interleaveFormat', kInterleaveFormats)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, sampleCount, interleaveFormat } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        const targets = getAttachments(interleaveFormat, testValue);\n        if (targets.length > device.limits.maxColorAttachments) {\n          return;\n        }\n\n        await t.expectValidationError(\n          () => {\n            device.createRenderBundleEncoder({\n              colorFormats: targets.map(({ format }) => format),\n            });\n          },\n          shouldError,\n          getDescription(testValue, actualLimit, sampleCount, targets)\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}