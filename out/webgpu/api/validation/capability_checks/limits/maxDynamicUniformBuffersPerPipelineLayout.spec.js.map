{"version":3,"file":"maxDynamicUniformBuffersPerPipelineLayout.spec.js","names":["range","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","combine","ShaderStage","VERTEX","FRAGMENT","COMPUTE","fn","t","limitTest","testValueName","visibility","testDeviceWithRequestedMaximumLimits","device","testValue","shouldError","limits","maxUniformBuffersPerShaderStage","expectValidationError","createBindGroupLayout","entries","i","binding","buffer","hasDynamicOffset","unimplemented"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxDynamicUniformBuffersPerPipelineLayout.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\nimport { GPUConst } from '../../../../constants.js';\n\nimport { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxDynamicUniformBuffersPerPipelineLayout';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroupLayout,at_over')\n  .desc(`Test using createBindGroupLayout at and over ${limit} limit`)\n  .params(\n    kMaximumLimitBaseParams.combine('visibility', [\n      GPUConst.ShaderStage.VERTEX,\n      GPUConst.ShaderStage.FRAGMENT,\n      GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n      GPUConst.ShaderStage.COMPUTE,\n      GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.VERTEX,\n      GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.FRAGMENT,\n      GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n    ])\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        shouldError ||= testValue > t.device.limits.maxUniformBuffersPerShaderStage;\n        await t.expectValidationError(() => {\n          device.createBindGroupLayout({\n            entries: range(testValue, i => ({\n              binding: i,\n              visibility,\n              buffer: {\n                hasDynamicOffset: true,\n              },\n            })),\n          });\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(`Test using at and over ${limit} limit in createPipelineLayout`)\n  .unimplemented();\n"],"mappings":";;GAAA,SAASA,KAAK,QAAQ,oCAAoC,CAC1D,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,SAASC,uBAAuB,EAAEC,kBAAkB,QAAQ,kBAAkB;;AAE9E,MAAMC,KAAK,GAAG,2CAA2C;AACzD,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,+BAA+B,CAAC;AACpCC,IAAI,CAAE,gDAA+CJ,KAAM,QAAO,CAAC;AACnEK,MAAM;EACLP,uBAAuB,CAACQ,OAAO,CAAC,YAAY,EAAE;EAC5CT,QAAQ,CAACU,WAAW,CAACC,MAAM;EAC3BX,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC7BZ,QAAQ,CAACU,WAAW,CAACC,MAAM,GAAGX,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC3DZ,QAAQ,CAACU,WAAW,CAACG,OAAO;EAC5Bb,QAAQ,CAACU,WAAW,CAACG,OAAO,GAAGb,QAAQ,CAACU,WAAW,CAACC,MAAM;EAC1DX,QAAQ,CAACU,WAAW,CAACG,OAAO,GAAGb,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC5DZ,QAAQ,CAACU,WAAW,CAACG,OAAO,GAAGb,QAAQ,CAACU,WAAW,CAACC,MAAM,GAAGX,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC3F;AACH,CAAC;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,CAAC,CAAC,GAAGH,CAAC,CAACP,MAAM;EACzD,MAAMO,CAAC,CAACI,oCAAoC;IAC1CH,SAAS;IACTC,aAAa;IACb,OAAO,EAAEG,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;MAC5CA,WAAW,KAAKD,SAAS,GAAGN,CAAC,CAACK,MAAM,CAACG,MAAM,CAACC,+BAA+B;MAC3E,MAAMT,CAAC,CAACU,qBAAqB,CAAC,MAAM;QAClCL,MAAM,CAACM,qBAAqB,CAAC;UAC3BC,OAAO,EAAE5B,KAAK,CAACsB,SAAS,EAAE,CAAAO,CAAC,MAAK;YAC9BC,OAAO,EAAED,CAAC;YACVV,UAAU;YACVY,MAAM,EAAE;cACNC,gBAAgB,EAAE;YACpB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,EAAET,WAAW,CAAC;IACjB;EACF,CAAC;AACH,CAAC,CAAC;;AAEJlB,CAAC,CAACE,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAE,0BAAyBJ,KAAM,gCAA+B,CAAC;AACrE6B,aAAa,CAAC,CAAC"}