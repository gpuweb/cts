{"version":3,"file":"maxDynamicUniformBuffersPerPipelineLayout.spec.js","names":["range","kShaderStageCombinationsWithStage","kMaximumLimitBaseParams","makeLimitTestGroup","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","maxUniformBuffersPerShaderStage","limit","g","description","test","desc","params","combine","fn","t","limitTest","testValueName","visibility","testDeviceWithRequestedMaximumLimits","device","testValue","shouldError","expectValidationError","createBindGroupLayout","entries","i","binding","buffer","hasDynamicOffset","actualLimit","maxUniformBindings","Math","min","limits","totalBindings","skipIf","maxBindingsPerStage","numBindingsAvailable","bindGroupLayouts","map","maxBindings","visibilityBit","numInGroup","debug","createPipelineLayout"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxDynamicUniformBuffersPerPipelineLayout.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\nimport { kShaderStageCombinationsWithStage } from '../../../../capability_info.js';\n\nimport { kMaximumLimitBaseParams, LimitsRequest, makeLimitTestGroup } from './limit_utils.js';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n  maxUniformBuffersPerShaderStage: 'adapterLimit',\n};\n\nconst limit = 'maxDynamicUniformBuffersPerPipelineLayout';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroupLayout,at_over')\n  .desc(`Test using createBindGroupLayout at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('visibility', kShaderStageCombinationsWithStage))\n  .fn(async t => {\n    const { limitTest, testValueName, visibility } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        await t.expectValidationError(() => {\n          device.createBindGroupLayout({\n            entries: range(testValue, i => ({\n              binding: i,\n              visibility,\n              buffer: {\n                hasDynamicOffset: true,\n              },\n            })),\n          });\n        }, shouldError);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(`Test using at and over ${limit} limit in createPipelineLayout`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        // We need to make the largest binding groups we can that don't exceed maxDynamicUniformBuffersPerPipelineLayout\n        // otherwise, createBindGroupLayout will fail.\n        const maxUniformBindings = Math.min(\n          device.limits.maxUniformBuffersPerShaderStage,\n          actualLimit\n        );\n\n        const totalBindings = maxUniformBindings * 3;\n        t.skipIf(\n          totalBindings < testValue,\n          `total uniform buffer bindings across stages (${totalBindings}) < testValue(${testValue})`\n        );\n\n        // These are ordered by their stage visibility bits\n        const maxBindingsPerStage = [maxUniformBindings, maxUniformBindings, maxUniformBindings];\n\n        // Make 3 groups using the max bindings allowed for that stage up to testValue bindings\n        let numBindingsAvailable = testValue;\n        const bindGroupLayouts = maxBindingsPerStage.map((maxBindings, visibilityBit) => {\n          const numInGroup = Math.min(numBindingsAvailable, maxBindings);\n          numBindingsAvailable -= numInGroup;\n          t.debug(`group(${visibilityBit}) numBindings: ${numInGroup}`);\n\n          return device.createBindGroupLayout({\n            entries: range(numInGroup, i => ({\n              binding: i,\n              visibility: 1 << visibilityBit,\n              buffer: {\n                hasDynamicOffset: true,\n              },\n            })),\n          });\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}