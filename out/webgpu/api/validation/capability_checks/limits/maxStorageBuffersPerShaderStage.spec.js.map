{"version":3,"file":"maxStorageBuffersPerShaderStage.spec.js","names":["range","reorder","kReorderOrderKeys","assert","kShaderStageCombinationsWithStage","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","kBindingCombinations","getPipelineTypeForBindingCombination","getPerStageWGSLForBindingCombination","getStageVisibilityForBinidngCombination","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","maxStorageBuffersInFragmentStage","maxStorageBuffersInVertexStage","limit","g","description","createBindGroupLayout","device","visibility","type","order","numBindings","bindGroupLayoutDescription","entries","i","binding","buffer","test","desc","params","combine","filter","ShaderStage","VERTEX","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","skipIf","adapter","limits","skipIfNotEnoughStorageBuffersInStage","expectValidationError","actualLimit","Math","min","kNumGroups","ceil","bindGroupLayouts","numInGroup","createPipelineLayout","beginSubcases","async","bindingCombination","bindGroupTest","pipelineType","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageBuffersPerShaderStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  kReorderOrderKeys,\n  ReorderOrder,\n  assert,\n} from '../../../../../common/util/util.js';\nimport { kShaderStageCombinationsWithStage } from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  kBindingCombinations,\n  getPipelineTypeForBindingCombination,\n  getPerStageWGSLForBindingCombination,\n  LimitsRequest,\n  getStageVisibilityForBinidngCombination,\n} from './limit_utils.js';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n  maxStorageBuffersInFragmentStage: 'adapterLimit',\n  maxStorageBuffersInVertexStage: 'adapterLimit',\n};\n\nconst limit = 'maxStorageBuffersPerShaderStage';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  type: GPUBufferBindingType,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  const bindGroupLayoutDescription = {\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        buffer: { type },\n      }))\n    ),\n  };\n  return device.createBindGroupLayout(bindGroupLayoutDescription);\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .combine('order', kReorderOrderKeys)\n      .filter(\n        ({ visibility, type }) =>\n          (visibility & GPUConst.ShaderStage.VERTEX) === 0 || type !== 'storage'\n      )\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order, type } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        t.skipIf(\n          t.adapter.limits.maxBindingsPerBindGroup < testValue,\n          `maxBindingsPerBindGroup = ${t.adapter.limits.maxBindingsPerBindGroup} which is less than ${testValue}`\n        );\n\n        t.skipIfNotEnoughStorageBuffersInStage(visibility, testValue);\n\n        await t.expectValidationError(() => {\n          createBindGroupLayout(device, visibility, type, order, testValue);\n        }, shouldError);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .combine('order', kReorderOrderKeys)\n      .filter(\n        ({ visibility, type }) =>\n          (visibility & GPUConst.ShaderStage.VERTEX) === 0 || type !== 'storage'\n      )\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order, type } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        t.skipIfNotEnoughStorageBuffersInStage(visibility, testValue);\n\n        const maxBindingsPerBindGroup = Math.min(\n          t.device.limits.maxBindingsPerBindGroup,\n          actualLimit\n        );\n\n        const kNumGroups = Math.ceil(testValue / maxBindingsPerBindGroup);\n\n        // Not sure what to do in this case but best we get notified if it happens.\n        assert(kNumGroups <= t.device.limits.maxBindGroups);\n\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const numInGroup = Math.min(\n            testValue - i * maxBindingsPerBindGroup,\n            maxBindingsPerBindGroup\n          );\n          return createBindGroupLayout(device, visibility, type, order, numInGroup);\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .combine('bindingCombination', kBindingCombinations)\n      .beginSubcases()\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, bindingCombination, order, bindGroupTest } = t.params;\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        t.skipIf(\n          bindGroupTest === 'sameGroup' && testValue > device.limits.maxBindingsPerBindGroup,\n          `can not test ${testValue} bindings in same group because maxBindingsPerBindGroup = ${device.limits.maxBindingsPerBindGroup}`\n        );\n\n        const visibility = getStageVisibilityForBinidngCombination(bindingCombination);\n        t.skipIfNotEnoughStorageBuffersInStage(visibility, testValue);\n\n        const code = getPerStageWGSLForBindingCombination(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var<storage> u${j}_${i}: f32`,\n          (i, j) => `_ = u${j}_${i};`,\n          device.limits.maxBindGroups,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}