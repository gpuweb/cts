{"version":3,"file":"maxDynamicStorageBuffersPerPipelineLayout.spec.js","names":["range","kShaderStageCombinationsWithStage","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","maxStorageBuffersPerShaderStage","maxStorageBuffersInFragmentStage","maxStorageBuffersInVertexStage","limit","g","description","test","desc","params","combine","filter","visibility","type","ShaderStage","VERTEX","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","device","testValue","shouldError","skipIfNotEnoughStorageBuffersInStage","limits","expectValidationError","createBindGroupLayout","entries","i","binding","buffer","hasDynamicOffset","actualLimit","maxComputeBindings","Math","min","maxFragmentBindings","maxVertexBindings","totalBindings","skipIf","maxBindingsPerStage","numBindingsAvailable","bindGroupLayouts","map","maxBindings","visibilityBit","numInGroup","debug","createPipelineLayout"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxDynamicStorageBuffersPerPipelineLayout.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\nimport { kShaderStageCombinationsWithStage } from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\n\nimport { kMaximumLimitBaseParams, LimitsRequest, makeLimitTestGroup } from './limit_utils.js';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n  maxStorageBuffersPerShaderStage: 'adapterLimit',\n  maxStorageBuffersInFragmentStage: 'adapterLimit',\n  maxStorageBuffersInVertexStage: 'adapterLimit',\n};\n\nconst limit = 'maxDynamicStorageBuffersPerPipelineLayout';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroupLayout,at_over')\n  .desc(`Test using createBindGroupLayout at and over ${limit} limit`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .filter(\n        ({ visibility, type }) =>\n          (visibility & GPUConst.ShaderStage.VERTEX) === 0 || type !== 'storage'\n      )\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, type } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        t.skipIfNotEnoughStorageBuffersInStage(visibility, testValue);\n        shouldError ||= testValue > t.device.limits.maxStorageBuffersPerShaderStage;\n        await t.expectValidationError(() => {\n          device.createBindGroupLayout({\n            entries: range(testValue, i => ({\n              binding: i,\n              visibility,\n              buffer: {\n                type,\n                hasDynamicOffset: true,\n              },\n            })),\n          });\n        }, shouldError);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(`Test using at and over ${limit} limit in createPipelineLayout`)\n  .params(\n    kMaximumLimitBaseParams.combine('type', [\n      'storage',\n      'read-only-storage',\n    ] as GPUBufferBindingType[])\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, type } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        // We need to make the largest binding groups we can that don't exceed maxDynamicStorageBuffersPerPipelineLayout\n        // otherwise, createBindGroupLayout will fail.\n        const maxComputeBindings = Math.min(\n          device.limits.maxStorageBuffersPerShaderStage,\n          actualLimit\n        );\n        const maxFragmentBindings = Math.min(\n          device.limits.maxStorageBuffersInFragmentStage ?? maxComputeBindings,\n          actualLimit\n        );\n        // read-write storage buffers are not allowed in vertex stages.\n        const maxVertexBindings =\n          type === 'storage'\n            ? 0\n            : Math.min(\n                device.limits.maxStorageBuffersInVertexStage ?? maxComputeBindings,\n                actualLimit\n              );\n\n        const totalBindings = maxComputeBindings + maxFragmentBindings + maxVertexBindings;\n        t.skipIf(\n          totalBindings < testValue,\n          `total storage buffer bindings across stages (${totalBindings}) < testValue(${testValue})`\n        );\n\n        // These are ordered by their stage visibility bits\n        const maxBindingsPerStage = [maxVertexBindings, maxFragmentBindings, maxComputeBindings];\n\n        // Make 3 groups using the max bindings allowed for that stage up to testValue bindings\n        let numBindingsAvailable = testValue;\n        const bindGroupLayouts = maxBindingsPerStage.map((maxBindings, visibilityBit) => {\n          const numInGroup = Math.min(numBindingsAvailable, maxBindings);\n          numBindingsAvailable -= numInGroup;\n          t.debug(`group(${visibilityBit}) numBindings: ${numInGroup}`);\n\n          return device.createBindGroupLayout({\n            entries: range(numInGroup, i => ({\n              binding: i,\n              visibility: 1 << visibilityBit,\n              buffer: {\n                type,\n                hasDynamicOffset: true,\n              },\n            })),\n          });\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}