{"version":3,"file":"maxComputeInvocationsPerWorkgroup.spec.js","names":["kMaximumLimitBaseParams","makeLimitTestGroup","getClosestSizeOverLimit","size","limit","closest","Number","MAX_SAFE_INTEGER","closestSize","depthLimit","Math","min","depth","height","planeSize","width","ceil","num","dist","getClosestSizeUnderOrAtLimit","floor","getDeviceLimitToRequest","limitValueTest","defaultLimit","maximumLimit","getTestWorkgroupSize","t","testValueName","requestedLimit","maxDimensions","getDefaultLimit","getDeviceLimitToRequestAndValueToTest","workgroupSize","g","description","test","desc","params","combine","fn","limitTest","async","adapterLimit","testValue","reduce","a","b","testDeviceWithSpecificLimits","actualLimit","shouldError","module","code","getModuleForWorkgroupSize","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxComputeInvocationsPerWorkgroup.spec.ts"],"sourcesContent":["import {\n  kMaximumLimitBaseParams,\n  MaximumLimitValueTest,\n  MaximumTestValue,\n  makeLimitTestGroup,\n  LimitTestsImpl,\n} from './limit_utils.js';\n\n/**\n * Given a 3 dimensional size, and a limit, compute\n * the smallest volume with more then limit units.\n */\nfunction getClosestSizeOverLimit(size: number[], limit: number) {\n  let closest = Number.MAX_SAFE_INTEGER;\n  let closestSize: number[] = [];\n  const depthLimit = Math.min(limit, size[2]);\n  for (let depth = 1; depth <= depthLimit; ++depth) {\n    for (let height = 1; height <= size[1]; ++height) {\n      const planeSize = depth * height;\n      if (planeSize <= limit) {\n        const width = Math.min(size[0], Math.ceil(limit / planeSize));\n        const num = width * planeSize;\n        const dist = num - limit;\n        if (dist > 0 && dist < closest) {\n          closest = dist;\n          closestSize = [width, height, depth];\n        }\n      }\n    }\n  }\n  return closestSize;\n}\n\n/**\n * Given a 3 dimensional size, and a limit, compute\n * the largest volume with limit or less units.\n */\nfunction getClosestSizeUnderOrAtLimit(size: number[], limit: number) {\n  let closest = Number.MAX_SAFE_INTEGER;\n  let closestSize: number[] = [];\n  const depthLimit = Math.min(limit, size[2]);\n  for (let depth = 1; depth <= depthLimit; ++depth) {\n    for (let height = 1; height <= size[1]; ++height) {\n      const planeSize = depth * height;\n      if (planeSize <= limit) {\n        const width = Math.min(size[0], Math.floor(limit / planeSize));\n        const num = width * planeSize;\n        const dist = limit - num;\n        if (dist < closest) {\n          closest = dist;\n          closestSize = [width, height, depth];\n        }\n      }\n    }\n  }\n  return closestSize;\n}\n\nfunction getDeviceLimitToRequest(\n  limitValueTest: MaximumLimitValueTest,\n  defaultLimit: number,\n  maximumLimit: number\n) {\n  switch (limitValueTest) {\n    case 'atDefault':\n      return defaultLimit;\n    case 'underDefault':\n      return defaultLimit - 1;\n    case 'betweenDefaultAndMaximum':\n      return Math.floor((defaultLimit + maximumLimit) / 2);\n    case 'atMaximum':\n      return maximumLimit;\n    case 'overMaximum':\n      return maximumLimit + 1;\n  }\n}\n\nfunction getTestWorkgroupSize(\n  t: LimitTestsImpl,\n  testValueName: MaximumTestValue,\n  requestedLimit: number\n) {\n  const maxDimensions = [\n    t.getDefaultLimit('maxComputeWorkgroupSizeX'),\n    t.getDefaultLimit('maxComputeWorkgroupSizeY'),\n    t.getDefaultLimit('maxComputeWorkgroupSizeZ'),\n  ];\n\n  switch (testValueName) {\n    case 'atLimit':\n      return getClosestSizeUnderOrAtLimit(maxDimensions, requestedLimit);\n    case 'overLimit':\n      return getClosestSizeOverLimit(maxDimensions, requestedLimit);\n  }\n}\n\nfunction getDeviceLimitToRequestAndValueToTest(\n  t: LimitTestsImpl,\n  limitValueTest: MaximumLimitValueTest,\n  testValueName: MaximumTestValue,\n  defaultLimit: number,\n  maximumLimit: number\n) {\n  const requestedLimit = getDeviceLimitToRequest(limitValueTest, defaultLimit, maximumLimit);\n  const workgroupSize = getTestWorkgroupSize(t, testValueName, requestedLimit);\n  return {\n    requestedLimit,\n    workgroupSize,\n  };\n}\n\nconst limit = 'maxComputeInvocationsPerWorkgroup';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createComputePipeline,at_over')\n  .desc(`Test using createComputePipeline(Async) at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('async', [false, true] as const))\n  .fn(async t => {\n    const { limitTest, testValueName, async } = t.params;\n    const { defaultLimit, adapterLimit: maximumLimit } = t;\n\n    const { requestedLimit, workgroupSize } = getDeviceLimitToRequestAndValueToTest(\n      t,\n      limitTest,\n      testValueName,\n      defaultLimit,\n      maximumLimit\n    );\n    const testValue = workgroupSize.reduce((a, b) => a * b, 1);\n\n    await t.testDeviceWithSpecificLimits(\n      requestedLimit,\n      testValue,\n      async ({ testValue, actualLimit, shouldError }) => {\n        const { module, code } = t.getModuleForWorkgroupSize(workgroupSize);\n\n        await t.testCreatePipeline(\n          'createComputePipeline',\n          async,\n          module,\n          shouldError,\n          `workgroupSize: [${workgroupSize}], size: ${testValue}, limit: ${actualLimit}\\n${code}`\n        );\n      }\n    );\n  });\n"],"mappings":"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"}