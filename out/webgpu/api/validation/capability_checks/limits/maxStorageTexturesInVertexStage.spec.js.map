{"version":3,"file":"maxStorageTexturesInVertexStage.spec.js","names":["range","reorder","kReorderOrderKeys","assert","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","getPipelineTypeForBindingCombination","getPerStageWGSLForBindingCombination","getStageVisibilityForBinidngCombination","testMaxStorageXXXInYYYStageDeviceCreationWithDependentLimit","limit","dependentLimitName","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","g","description","limitOptional","limitCheckFn","t","device","actualLimit","isCompatibility","expectedLimit","limits","expect","createBindGroupLayout","visibility","order","numBindings","bindGroupLayoutDescription","entries","i","binding","storageTexture","format","access","test","desc","params","combine","fn","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","skipIf","adapter","GPUShaderStage","VERTEX","expectValidationError","Math","min","kNumGroups","ceil","bindGroupLayouts","numInGroup","createPipelineLayout","beginSubcases","async","bindGroupTest","bindingCombination","pipelineType","skipIfNotEnoughStorageBuffersInStage","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageTexturesInVertexStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  kReorderOrderKeys,\n  ReorderOrder,\n  assert,\n} from '../../../../../common/util/util.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  getPipelineTypeForBindingCombination,\n  getPerStageWGSLForBindingCombination,\n  LimitsRequest,\n  getStageVisibilityForBinidngCombination,\n  testMaxStorageXXXInYYYStageDeviceCreationWithDependentLimit,\n} from './limit_utils.js';\n\nconst limit = 'maxStorageTexturesInVertexStage';\nconst dependentLimitName = 'maxStorageTexturesPerShaderStage';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n  [dependentLimitName]: 'adapterLimit',\n};\n\nexport const { g, description } = makeLimitTestGroup(limit, {\n  // MAINTAINANCE_TODO: remove once this limit is required.\n  limitOptional: true,\n  limitCheckFn(t, device, { actualLimit }) {\n    if (!t.isCompatibility) {\n      const expectedLimit = device.limits[dependentLimitName];\n      t.expect(\n        actualLimit === expectedLimit,\n        `expected actual actualLimit: ${actualLimit} to equal ${dependentLimitName}: ${expectedLimit}`\n      );\n      return true;\n    }\n    return false;\n  },\n});\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  const bindGroupLayoutDescription: GPUBindGroupLayoutDescriptor = {\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        storageTexture: { format: 'r32float', access: 'read-only' },\n      }))\n    ),\n  };\n  return device.createBindGroupLayout(bindGroupLayoutDescription);\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(kMaximumLimitBaseParams.combine('order', kReorderOrderKeys))\n  .fn(async t => {\n    const { limitTest, testValueName, order } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        t.skipIf(\n          t.adapter.limits.maxBindingsPerBindGroup < testValue,\n          `maxBindingsPerBindGroup = ${t.adapter.limits.maxBindingsPerBindGroup} which is less than ${testValue}`\n        );\n\n        const visibility = GPUShaderStage.VERTEX;\n        await t.expectValidationError(() => {\n          createBindGroupLayout(device, visibility, order, testValue);\n        }, shouldError);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(kMaximumLimitBaseParams.combine('order', kReorderOrderKeys))\n  .fn(async t => {\n    const { limitTest, testValueName, order } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        const visibility = GPUShaderStage.VERTEX;\n\n        t.skipIf(\n          actualLimit === 0,\n          `can not make a bindGroupLayout to test createPipelineLaoyout if the actaul limit is 0`\n        );\n\n        const maxBindingsPerBindGroup = Math.min(\n          t.device.limits.maxBindingsPerBindGroup,\n          actualLimit\n        );\n\n        const kNumGroups = Math.ceil(testValue / maxBindingsPerBindGroup);\n\n        // Not sure what to do in this case but best we get notified if it happens.\n        assert(kNumGroups <= t.device.limits.maxBindGroups);\n\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const numInGroup = Math.min(\n            testValue - i * maxBindingsPerBindGroup,\n            maxBindingsPerBindGroup\n          );\n          return createBindGroupLayout(device, visibility, order, numInGroup);\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .beginSubcases()\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, order, bindGroupTest } = t.params;\n    const bindingCombination = 'vertex';\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        t.skipIf(\n          bindGroupTest === 'sameGroup' && testValue > device.limits.maxBindingsPerBindGroup,\n          `can not test ${testValue} bindings in same group because maxBindingsPerBindGroup = ${device.limits.maxBindingsPerBindGroup}`\n        );\n\n        const visibility = getStageVisibilityForBinidngCombination(bindingCombination);\n        t.skipIfNotEnoughStorageBuffersInStage(visibility, testValue);\n\n        const code = getPerStageWGSLForBindingCombination(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var u${j}_${i}: texture_storage_2d<r32float,read>`,\n          (i, j) => `_ = u${j}_${i};`,\n          device.limits.maxBindGroups,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ntestMaxStorageXXXInYYYStageDeviceCreationWithDependentLimit(g, limit, dependentLimitName);\n"],"mappings":"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"}