{"version":3,"file":"texture_formats.spec.js","names":["description","makeTestGroup","getGPU","assert","kCanvasTextureFormats","kASTCCompressedTextureFormats","kBCCompressedTextureFormats","getBlockInfoForTextureFormat","isDepthOrStencilTextureFormat","isTextureFormatPossiblyStorageReadable","isTextureFormatPossiblyUsableAsColorRenderAttachment","kOptionalTextureFormats","UniqueFeaturesOrLimitsGPUTest","kAllCanvasTypes","createCanvas","vtu","g","test","desc","params","u","combine","beforeAllSubcases","t","format","enable_required_feature","selectDeviceForTextureFormatOrSkipTestCase","fn","formatInfo","shouldThrow","createTextureTracked","size","blockWidth","blockHeight","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","textureFormat","testTexture","testViewDesc","dimension","aspect","arrayLayerCount","baseMipLevel","mipLevelCount","baseArrayLayer","createView","supportsBC","supportsBCSliced3D","requiredFeatures","push","selectDeviceOrSkipTestCase","skipIfTextureFormatNotSupported","info","descriptor","expectValidationError","supportsASTC","supportsASTCSliced3D","canvasType","canvas","ctx","getContext","GPUCanvasContext","canvasConf","device","COPY_SRC","COPY_DST","expectedError","includes","configure","map","filter","skipIfTextureFormatNotUsableWithStorageAccessMode","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","storageTexture","isAsync","skipIfTextureFormatNotUsableAsRenderAttachment","doCreateRenderPipelineTest","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","depthStencil","depthCompare","depthWriteEnabled","createRenderBundleEncoder","colorFormats","depthStencilFormat","adapter","rec","requestAdapter","features","has","supportsETC2","expect"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/texture_formats.spec.ts"],"sourcesContent":["export const description = `\nTests for capability checking for features enabling optional texture formats.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { getGPU } from '../../../../../common/util/navigator_gpu.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kCanvasTextureFormats } from '../../../../capability_info.js';\nimport {\n  kASTCCompressedTextureFormats,\n  kBCCompressedTextureFormats,\n  getBlockInfoForTextureFormat,\n  isDepthOrStencilTextureFormat,\n  isTextureFormatPossiblyStorageReadable,\n  isTextureFormatPossiblyUsableAsColorRenderAttachment,\n  kOptionalTextureFormats,\n} from '../../../../format_info.js';\nimport { UniqueFeaturesOrLimitsGPUTest } from '../../../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas } from '../../../../util/create_elements.js';\nimport * as vtu from '../../validation_test_utils.js';\n\nexport const g = makeTestGroup(UniqueFeaturesOrLimitsGPUTest);\n\ng.test('texture_descriptor')\n  .desc(\n    `\n  Test creating a texture with an optional texture format will fail if the required optional feature\n  is not enabled.\n  `\n  )\n  .params(u =>\n    u.combine('format', kOptionalTextureFormats).combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = getBlockInfoForTextureFormat(format);\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.createTextureTracked({\n        format,\n        size: [formatInfo.blockWidth, formatInfo.blockHeight, 1] as const,\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n      });\n    });\n  });\n\ng.test('texture_descriptor_view_formats')\n  .desc(\n    `\n  Test creating a texture with view formats that have an optional texture format will fail if the\n  required optional feature is not enabled.\n  `\n  )\n  .params(u =>\n    u.combine('format', kOptionalTextureFormats).combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = getBlockInfoForTextureFormat(format);\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.createTextureTracked({\n        format,\n        size: [formatInfo.blockWidth, formatInfo.blockHeight, 1] as const,\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [format],\n      });\n    });\n  });\n\ng.test('texture_view_descriptor')\n  .desc(\n    `\n  Test creating a texture view with all texture formats will fail if the required optional feature\n  is not enabled.\n  `\n  )\n  .params(u =>\n    u.combine('format', kOptionalTextureFormats).combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    // If the required feature isn't enabled then the texture will fail to create and we won't be\n    // able to test createView, so pick and alternate guaranteed format instead. This will almost\n    // certainly not be view-compatible with the format being tested, but that doesn't matter since\n    // createView should throw an exception due to the format feature not being enabled before it\n    // has a chance to validate that the view and texture formats aren't compatible.\n    const textureFormat = enable_required_feature ? format : 'rgba8unorm';\n\n    const formatInfo = getBlockInfoForTextureFormat(format);\n    const testTexture = t.createTextureTracked({\n      format: textureFormat,\n      size: [formatInfo.blockWidth, formatInfo.blockHeight, 1] as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const testViewDesc: GPUTextureViewDescriptor = {\n      format,\n      dimension: '2d',\n      aspect: 'all',\n      arrayLayerCount: 1,\n      baseMipLevel: 0,\n      mipLevelCount: 1,\n      baseArrayLayer: 0,\n    };\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      testTexture.createView(testViewDesc);\n    });\n  });\n\ng.test('texture_compression_bc_sliced_3d')\n  .desc(\n    `\n  Tests that creating a 3D texture with BC compressed format fails if the features don't contain\n  'texture-compression-bc' and 'texture-compression-bc-sliced-3d'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kBCCompressedTextureFormats)\n      .combine('supportsBC', [false, true])\n      .combine('supportsBCSliced3D', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { supportsBC, supportsBCSliced3D } = t.params;\n\n    const requiredFeatures: GPUFeatureName[] = [];\n    if (supportsBC) {\n      requiredFeatures.push('texture-compression-bc');\n    }\n    if (supportsBCSliced3D) {\n      requiredFeatures.push('texture-compression-bc-sliced-3d');\n    }\n\n    t.selectDeviceOrSkipTestCase({ requiredFeatures });\n  })\n  .fn(t => {\n    const { format, supportsBC, supportsBCSliced3D } = t.params;\n\n    t.skipIfTextureFormatNotSupported(format);\n    const info = getBlockInfoForTextureFormat(format);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension: '3d',\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !supportsBC || !supportsBCSliced3D);\n  });\n\ng.test('texture_compression_astc_sliced_3d')\n  .desc(\n    `\n  Tests that creating a 3D texture with ASTC compressed format fails if the features don't contain\n  'texture-compression-astc' and 'texture-compression-astc-sliced-3d'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kASTCCompressedTextureFormats)\n      .combine('supportsASTC', [false, true])\n      .combine('supportsASTCSliced3D', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { supportsASTC, supportsASTCSliced3D } = t.params;\n\n    const requiredFeatures: GPUFeatureName[] = [];\n    if (supportsASTC) {\n      requiredFeatures.push('texture-compression-astc');\n    }\n    if (supportsASTCSliced3D) {\n      requiredFeatures.push('texture-compression-astc-sliced-3d');\n    }\n\n    t.selectDeviceOrSkipTestCase({ requiredFeatures });\n  })\n  .fn(t => {\n    const { format, supportsASTC, supportsASTCSliced3D } = t.params;\n\n    t.skipIfTextureFormatNotSupported(format);\n    const info = getBlockInfoForTextureFormat(format);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension: '3d',\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !supportsASTC || !supportsASTCSliced3D);\n  });\n\ng.test('canvas_configuration')\n  .desc(\n    `\n  Test configuring a canvas with optional texture formats will throw an exception if the required\n  optional feature is not enabled. Otherwise, a validation error should be generated instead of\n  throwing an exception.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, canvasType, enable_required_feature } = t.params;\n\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const canvasConf = {\n      device: t.device,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    };\n\n    const expectedError =\n      enable_required_feature &&\n      (kCanvasTextureFormats as unknown as Array<GPUTextureFormat>).includes(format)\n        ? false\n        : 'TypeError';\n\n    t.shouldThrow(expectedError, () => {\n      ctx.configure(canvasConf);\n    });\n  });\n\ng.test('canvas_configuration_view_formats')\n  .desc(\n    `\n  Test that configuring a canvas with view formats throws an exception if the required optional\n  feature is not enabled. Otherwise, a validation error should be generated instead of throwing an\n  exception.\n  `\n  )\n  .params(u =>\n    u\n      .combine('viewFormats', [\n        ...kOptionalTextureFormats.map(format => [format]),\n        ['bgra8unorm', 'bc1-rgba-unorm'],\n        ['bc1-rgba-unorm', 'bgra8unorm'],\n      ])\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { viewFormats, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(viewFormats as GPUTextureFormat[]);\n    }\n  })\n  .fn(t => {\n    const { viewFormats, canvasType, enable_required_feature } = t.params;\n\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const canvasConf = {\n      device: t.device,\n      format: 'bgra8unorm' as const,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      viewFormats: viewFormats as GPUTextureFormat[],\n    };\n\n    if (enable_required_feature) {\n      t.expectValidationError(() => {\n        ctx.configure(canvasConf);\n      });\n    } else {\n      t.shouldThrow('TypeError', () => {\n        ctx.configure(canvasConf);\n      });\n    }\n  });\n\ng.test('storage_texture_binding_layout')\n  .desc(\n    `\n  Test creating a GPUStorageTextureBindingLayout with an optional texture format will fail if the\n  required optional feature are not enabled.\n\n  Note: This test has no cases if there are no optional texture formats supporting storage.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => isTextureFormatPossiblyStorageReadable(t.format))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n    t.skipIfTextureFormatNotUsableWithStorageAccessMode('write-only', format);\n\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: {\n              format,\n            },\n          },\n        ],\n      });\n    });\n  });\n\ng.test('color_target_state')\n  .desc(\n    `\n  Test creating a render pipeline with an optional texture format set in GPUColorTargetState will\n  fail if the required optional feature is not enabled.\n\n  Note: This test has no cases if there are no optional texture formats supporting color rendering.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => isTextureFormatPossiblyUsableAsColorRenderAttachment(t.format))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { isAsync, format, enable_required_feature } = t.params;\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n\n    vtu.doCreateRenderPipelineTest(\n      t,\n      isAsync,\n      enable_required_feature,\n      {\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n              @vertex\n              fn main()-> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @fragment\n              fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n      },\n      'TypeError'\n    );\n  });\n\ng.test('depth_stencil_state')\n  .desc(\n    `\n  Test creating a render pipeline with an optional texture format set in GPUColorTargetState will\n  fail if the required optional feature is not enabled.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => isDepthOrStencilTextureFormat(t.format))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { isAsync, format, enable_required_feature } = t.params;\n\n    vtu.doCreateRenderPipelineTest(\n      t,\n      isAsync,\n      enable_required_feature,\n      {\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n              @vertex\n              fn main()-> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n        },\n        depthStencil: {\n          format,\n          depthCompare: 'always',\n          depthWriteEnabled: false,\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @fragment\n              fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: 'rgba8unorm' }],\n        },\n      },\n      'TypeError'\n    );\n  });\n\ng.test('render_bundle_encoder_descriptor_color_format')\n  .desc(\n    `\n  Test creating a render bundle encoder with an optional texture format set as one of the color\n  format will fail if the required optional feature is not enabled.\n\n  Note: This test has no cases if there are no optional texture formats supporting color rendering.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => isTextureFormatPossiblyUsableAsColorRenderAttachment(t.format))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.device.createRenderBundleEncoder({\n        colorFormats: [format],\n      });\n    });\n  });\n\ng.test('render_bundle_encoder_descriptor_depth_stencil_format')\n  .desc(\n    `\n  Test creating a render bundle encoder with an optional texture format set as the depth stencil\n  format will fail if the required optional feature is not enabled.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => isDepthOrStencilTextureFormat(t.format))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.device.createRenderBundleEncoder({\n        colorFormats: ['rgba8unorm'],\n        depthStencilFormat: format,\n      });\n    });\n  });\n\ng.test('check_capability_guarantees')\n  .desc(\n    `check any adapter returned by requestAdapter() must provide the following guarantees:\n      - \"texture-compression-bc\" is supported or both \"texture-compression-etc2\" and \"texture-compression-astc\" are supported\n      - if \"texture-compression-bc-sliced-3d\" is supported, then \"texture-compression-bc\" must be supported.\n      - if \"texture-compression-astc-sliced-3d\" is supported, then \"texture-compression-astc\" must be supported.\n    `\n  )\n  .fn(async t => {\n    const adapter = await getGPU(t.rec).requestAdapter();\n    assert(adapter !== null);\n\n    const features = adapter.features;\n\n    const supportsBC = features.has('texture-compression-bc');\n    const supportsBCSliced3D = features.has('texture-compression-bc-sliced-3d');\n    const supportsASTC = features.has('texture-compression-astc');\n    const supportsASTCSliced3D = features.has('texture-compression-astc-sliced-3d');\n    const supportsETC2 = features.has('texture-compression-etc2');\n\n    t.expect(\n      supportsBC || (supportsETC2 && supportsASTC),\n      'Adapter must support BC or both ETC2 and ASTC'\n    );\n\n    if (supportsBCSliced3D) {\n      t.expect(supportsBC, 'If BC Sliced 3D is supported, BC must be supported');\n    }\n\n    if (supportsASTCSliced3D) {\n      t.expect(supportsASTC, 'If ASTC Sliced 3D is supported, ASTC must be supported');\n    }\n  });\n"],"mappings":"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"}