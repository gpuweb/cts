{"version":3,"file":"texture_component_swizzle_utils.js","names":["kSwizzleTests","swizzleComponentToTexelComponent","src","component","R","G","B","A","swizzleTexel","swizzle","isIdentitySwizzle"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/texture_component_swizzle_utils.ts"],"sourcesContent":["import { PerTexelComponent } from '../../../../util/texture/texel_data.js';\n\ndeclare global {\n  type GPUComponentSwizzle = 'r' | 'g' | 'b' | 'a' | '0' | '1';\n\n  // Note this is a four-character string that only includes `\"r\"`, `\"g\"`, `\"b\"`, `\"a\"`, `\"0\"`, or `\"1\"`.\n  type GPUTextureComponentSwizzle = string;\n\n  // MAINTENANCE_TODO: Remove these types once texture-component-swizzle is added to @webgpu/types\n  /* prettier-ignore */\n  interface GPUTextureViewDescriptor {\n    swizzle?: GPUTextureComponentSwizzle; // \"rgba\" by default\n  }\n}\n\n// Note: There are 4 settings with 6 options which is 1296 combinations. So we don't check them all. Just a few below.\nexport const kSwizzleTests = [\n  'rgba',\n  '0000',\n  '1111',\n  'rrrr',\n  'gggg',\n  'bbbb',\n  'aaaa',\n  'abgr',\n  'gbar',\n  'barg',\n  'argb',\n  '0gba',\n  'r0ba',\n  'rg0a',\n  'rgb0',\n  '1gba',\n  'r1ba',\n  'rg1a',\n  'rgb1',\n] as const;\nexport type SwizzleSpec = (typeof kSwizzleTests)[number];\n\nfunction swizzleComponentToTexelComponent(\n  src: PerTexelComponent<number>,\n  component: GPUComponentSwizzle\n): number {\n  switch (component) {\n    case '0':\n      return 0;\n    case '1':\n      return 1;\n    case 'r':\n      return src.R!;\n    case 'g':\n      return src.G!;\n    case 'b':\n      return src.B!;\n    case 'a':\n      return src.A!;\n  }\n}\n\nexport function swizzleTexel(\n  src: PerTexelComponent<number>,\n  swizzle: GPUTextureComponentSwizzle\n): PerTexelComponent<number> {\n  return {\n    R: swizzle[0]\n      ? swizzleComponentToTexelComponent(src, swizzle[0] as GPUComponentSwizzle)\n      : src.R,\n    G: swizzle[1]\n      ? swizzleComponentToTexelComponent(src, swizzle[1] as GPUComponentSwizzle)\n      : src.G,\n    B: swizzle[2]\n      ? swizzleComponentToTexelComponent(src, swizzle[2] as GPUComponentSwizzle)\n      : src.B,\n    A: swizzle[3]\n      ? swizzleComponentToTexelComponent(src, swizzle[3] as GPUComponentSwizzle)\n      : src.A,\n  };\n}\n\nexport function isIdentitySwizzle(swizzle: GPUTextureComponentSwizzle): boolean {\n  return swizzle === 'rgba';\n}\n"],"mappings":";;;;;;;;;;;;;;;AAeA;AACA,OAAO,MAAMA,aAAa,GAAG;AAC3B,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,CACE;;;;AAGV,SAASC,gCAAgCA;AACvCC,GAA8B;AAC9BC,SAA8B;AACtB;EACR,QAAQA,SAAS;IACf,KAAK,GAAG;MACN,OAAO,CAAC;IACV,KAAK,GAAG;MACN,OAAO,CAAC;IACV,KAAK,GAAG;MACN,OAAOD,GAAG,CAACE,CAAC;IACd,KAAK,GAAG;MACN,OAAOF,GAAG,CAACG,CAAC;IACd,KAAK,GAAG;MACN,OAAOH,GAAG,CAACI,CAAC;IACd,KAAK,GAAG;MACN,OAAOJ,GAAG,CAACK,CAAC;EAChB;AACF;;AAEA,OAAO,SAASC,YAAYA;AAC1BN,GAA8B;AAC9BO,OAAmC;AACR;EAC3B,OAAO;IACLL,CAAC,EAAEK,OAAO,CAAC,CAAC,CAAC;IACTR,gCAAgC,CAACC,GAAG,EAAEO,OAAO,CAAC,CAAC,CAAwB,CAAC;IACxEP,GAAG,CAACE,CAAC;IACTC,CAAC,EAAEI,OAAO,CAAC,CAAC,CAAC;IACTR,gCAAgC,CAACC,GAAG,EAAEO,OAAO,CAAC,CAAC,CAAwB,CAAC;IACxEP,GAAG,CAACG,CAAC;IACTC,CAAC,EAAEG,OAAO,CAAC,CAAC,CAAC;IACTR,gCAAgC,CAACC,GAAG,EAAEO,OAAO,CAAC,CAAC,CAAwB,CAAC;IACxEP,GAAG,CAACI,CAAC;IACTC,CAAC,EAAEE,OAAO,CAAC,CAAC,CAAC;IACTR,gCAAgC,CAACC,GAAG,EAAEO,OAAO,CAAC,CAAC,CAAwB,CAAC;IACxEP,GAAG,CAACK;EACV,CAAC;AACH;;AAEA,OAAO,SAASG,iBAAiBA,CAACD,OAAmC,EAAW;EAC9E,OAAOA,OAAO,KAAK,MAAM;AAC3B"}