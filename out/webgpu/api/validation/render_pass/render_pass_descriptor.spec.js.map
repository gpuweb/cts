{"version":3,"file":"render_pass_descriptor.spec.js","names":["description","makeTestGroup","range","getDefaultLimits","kQueryTypes","GPUConst","computeBytesPerSampleFromFormats","kDepthStencilFormats","kRenderableColorTextureFormats","kTextureFormatInfo","ValidationTest","kMaxColorAttachments","maxColorAttachments","default","F","createTestTexture","options","format","dimension","width","height","arrayLayerCount","mipLevelCount","sampleCount","usage","GPUTextureUsage","RENDER_ATTACHMENT","createTextureTracked","size","depthOrArrayLayers","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","getDepthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","tryRenderPass","success","descriptor","commandEncoder","device","createCommandEncoder","renderPass","beginRenderPass","end","expectValidationError","finish","kArrayLayerCount","test","desc","fn","t","colorTexture","colorAttachments","depthStencilTexture","depthStencilAttachment","paramsSubcasesOnly","u","combine","undefined","Array","fill","unclampedColorAttachments","hasDepthStencilAttachment","params","slice","limits","isEmptyColorTargets","i","length","_success","paramsSimple","colorAttachmentsCountVariant","mult","add","colorAttachmentsCount","makeLimitVariant","push","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupportedDeprecated","attachmentCount","info","skipIf","shouldError","colorRender","maxColorAttachmentBytesPerSample","combineWithParams","formats","depthSlice","colorAttachment","expand","mipLevel","depthAtMipLevel","Math","max","Set","viewDescriptor","baseMipLevel","baseArrayLayer","passDescriptor","sameDepthSlice","sameTexture","samePass","texDescriptor","encoder","createEncoder","pass","validateFinish","sameMipLevel","colorTexture1x1A","colorTexture1x1B","colorTexture2x2","depthStencilTexture1x1","depthStencilTexture2x2","ARRAY_LAYER_COUNT","MIP_LEVEL_COUNT","COLOR_FORMAT","DEPTH_STENCIL_FORMAT","baseTextureViewDescriptor","resolveTargetTexture","resolveTarget","multisampledColorTexture","multisampledResolveTargetTexture","TextureUsage","COPY_SRC","COPY_DST","STORAGE_BINDING","TEXTURE_BINDING","STORAGE","isValid","resolveTargetTextureView","multisampledDepthStencilTexture","selectDeviceOrSkipTestCase","feature","depthReadOnly","stencilReadOnly","depthAttachment","depthAttachmentView","renderPassDescriptor","hasDepthSettings","hasStencilSettings","hasDepth","depth","hasStencil","stencil","goodAspectSettingsPresent","hasBothDepthOps","hasBothStencilOps","hasNeitherDepthOps","hasNeitherStencilOps","goodDepthCombo","goodStencilCombo","isDepthValueInRange","isInvalid","filter","multisample","skipIfMultisampleNotSupportedForFormatDeprecated","resolve","queryType","timestampWrites","querySet","createQuerySetTracked","type","count","beginningOfPassWriteIndex","endOfPassWriteIndex","querySetCount","occlusionQuerySet"],"sources":["../../../../../src/webgpu/api/validation/render_pass/render_pass_descriptor.spec.ts"],"sourcesContent":["export const description = `\nrender pass descriptor validation tests.\n\nTODO(#3363): Make this into a MaxLimitTest and increase kMaxColorAttachments.\nTODO: review for completeness\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { getDefaultLimits, kQueryTypes } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  computeBytesPerSampleFromFormats,\n  kDepthStencilFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../../format_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\n// MAINTENANCE_TODO: This should be changed to kMaxColorAttachmentsToTest\n// when this is made a MaxLimitTest (see above).\nconst kMaxColorAttachments = getDefaultLimits('core').maxColorAttachments.default;\n\nclass F extends ValidationTest {\n  createTestTexture(\n    options: {\n      format?: GPUTextureFormat;\n      dimension?: GPUTextureDimension;\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      format = 'rgba8unorm',\n      dimension = '2d',\n      width = 16,\n      height = 16,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      usage = GPUTextureUsage.RENDER_ATTACHMENT,\n    } = options;\n\n    return this.createTextureTracked({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      format,\n      dimension,\n      mipLevelCount,\n      sampleCount,\n      usage,\n    });\n  }\n\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n\n  getDepthStencilAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassDepthStencilAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      depthClearValue: 1.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n      stencilClearValue: 0,\n      stencilLoadOp: 'clear',\n      stencilStoreOp: 'store',\n    };\n  }\n\n  tryRenderPass(success: boolean, descriptor: GPURenderPassDescriptor): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(descriptor);\n    renderPass.end();\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\nconst kArrayLayerCount = 10;\n\ng.test('attachments,one_color_attachment')\n  .desc(`Test that a render pass works with only one color attachment.`)\n  .fn(t => {\n    const colorTexture = t.createTestTexture({ format: 'rgba8unorm' });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('attachments,one_depth_stencil_attachment')\n  .desc(`Test that a render pass works with only one depthStencil attachment.`)\n  .fn(t => {\n    const depthStencilTexture = t.createTestTexture({ format: 'depth24plus-stencil8' });\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('color_attachments,empty')\n  .desc(\n    `\n  Test that when colorAttachments has all values be 'undefined' or the sequence is empty, the\n  depthStencilAttachment must not be 'undefined'.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('unclampedColorAttachments', [\n        [],\n        [undefined],\n        [undefined, undefined],\n        new Array(8).fill(undefined),\n        [{ format: 'rgba8unorm' }],\n      ])\n      .combine('hasDepthStencilAttachment', [false, true])\n  )\n  .fn(t => {\n    const { unclampedColorAttachments, hasDepthStencilAttachment } = t.params;\n    const colorAttachments = unclampedColorAttachments.slice(\n      0,\n      t.device.limits.maxColorAttachments\n    );\n\n    let isEmptyColorTargets = true;\n    for (let i = 0; i < colorAttachments.length; i++) {\n      if (colorAttachments[i] !== undefined) {\n        isEmptyColorTargets = false;\n        const colorTexture = t.createTestTexture();\n        colorAttachments[i] = t.getColorAttachment(colorTexture);\n      }\n    }\n\n    const _success = !isEmptyColorTargets || hasDepthStencilAttachment;\n    t.tryRenderPass(_success, {\n      colorAttachments,\n      depthStencilAttachment: hasDepthStencilAttachment\n        ? t.getDepthStencilAttachment(t.createTestTexture({ format: 'depth24plus-stencil8' }))\n        : undefined,\n    });\n  });\n\ng.test('color_attachments,limits,maxColorAttachments')\n  .desc(\n    `\n  Test that the out of bound of color attachment indexes are handled.\n    - a validation error is generated when color attachments exceed the maximum limit(8).\n  `\n  )\n  .paramsSimple([\n    { colorAttachmentsCountVariant: { mult: 1, add: 0 }, _success: true }, // Control case\n    { colorAttachmentsCountVariant: { mult: 1, add: 1 }, _success: false }, // Out of bounds\n  ])\n  .fn(t => {\n    const { colorAttachmentsCountVariant, _success } = t.params;\n    const colorAttachmentsCount = t.makeLimitVariant(\n      'maxColorAttachments',\n      colorAttachmentsCountVariant\n    );\n\n    const colorAttachments = [];\n    for (let i = 0; i < colorAttachmentsCount; i++) {\n      const colorTexture = t.createTestTexture({ format: 'r8unorm' });\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n\n    t.tryRenderPass(_success, { colorAttachments });\n  });\n\ng.test('color_attachments,limits,maxColorAttachmentBytesPerSample,aligned')\n  .desc(\n    `\n    Test that the total bytes per sample of the formats of the color attachments must be no greater\n    than maxColorAttachmentBytesPerSample when the components are aligned (same format).\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine(\n        'attachmentCount',\n        range(kMaxColorAttachments, i => i + 1)\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupportedDeprecated(t.params.format);\n  })\n  .fn(t => {\n    const { format, attachmentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    t.skipIf(\n      attachmentCount > t.device.limits.maxColorAttachments,\n      `attachmentCount: ${attachmentCount} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const colorAttachments = [];\n    for (let i = 0; i < attachmentCount; i++) {\n      const colorTexture = t.createTestTexture({ format });\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n    const shouldError =\n      info.colorRender === undefined ||\n      computeBytesPerSampleFromFormats(range(attachmentCount, () => format)) >\n        t.device.limits.maxColorAttachmentBytesPerSample;\n\n    t.tryRenderPass(!shouldError, { colorAttachments });\n  });\n\ng.test('color_attachments,limits,maxColorAttachmentBytesPerSample,unaligned')\n  .desc(\n    `\n    Test that the total bytes per sample of the formats of the color attachments must be no greater\n    than maxColorAttachmentBytesPerSample when the components are (potentially) unaligned.\n  `\n  )\n  .params(u =>\n    u.combineWithParams([\n      // Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n      // 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n      // become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n      // is allowed: 4+8+16+1+1 < 32.\n      {\n        formats: [\n          'r8unorm',\n          'r32float',\n          'rgba8unorm',\n          'rgba32float',\n          'r8unorm',\n        ] as GPUTextureFormat[],\n      },\n      {\n        formats: [\n          'r32float',\n          'rgba8unorm',\n          'rgba32float',\n          'r8unorm',\n          'r8unorm',\n        ] as GPUTextureFormat[],\n      },\n    ])\n  )\n  .fn(t => {\n    const { formats } = t.params;\n\n    t.skipIf(\n      formats.length > t.device.limits.maxColorAttachments,\n      `numColorAttachments: ${formats.length} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const colorAttachments = [];\n    for (const format of formats) {\n      const colorTexture = t.createTestTexture({ format });\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n\n    const success =\n      computeBytesPerSampleFromFormats(formats) <= t.device.limits.maxColorAttachmentBytesPerSample;\n\n    t.tryRenderPass(success, { colorAttachments });\n  });\n\ng.test('color_attachments,depthSlice,definedness')\n  .desc(\n    `\n  Test that depthSlice must be undefined for 2d color attachments and defined for 3d color attachments.\"\n  - The special value '0xFFFFFFFF' is not treated as 'undefined'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('dimension', ['2d', '3d'] as GPUTextureDimension[])\n      .beginSubcases()\n      .combine('depthSlice', [undefined, 0, 0xffffffff])\n  )\n  .fn(t => {\n    const { dimension, depthSlice } = t.params;\n    const texture = t.createTestTexture({ dimension });\n\n    const colorAttachment = t.getColorAttachment(texture);\n    if (depthSlice !== undefined) {\n      colorAttachment.depthSlice = depthSlice;\n    }\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    const success =\n      (dimension === '2d' && depthSlice === undefined) || (dimension === '3d' && depthSlice === 0);\n\n    t.tryRenderPass(success, descriptor);\n  });\n\ng.test('color_attachments,depthSlice,bound_check')\n  .desc(\n    `\n  Test that depthSlice must be less than the depthOrArrayLayers of 3d texture's subresource at mip levels.\n  - Check depth bounds with 3d texture size [16, 1, 10], which has 5 mip levels with depth [10, 5, 2, 1, 1]\n    for testing more mip level size computation.\n  - Failed if depthSlice >= the depth of each mip level.\n  `\n  )\n  .params(u =>\n    u\n      .combine('mipLevel', [0, 1, 2, 3, 4])\n      .beginSubcases()\n      .expand('depthSlice', ({ mipLevel }) => {\n        const depthAtMipLevel = Math.max(kArrayLayerCount >> mipLevel, 1);\n        // Use Set() to exclude duplicates when the depthAtMipLevel is 1 and 2\n        return [...new Set([0, 1, depthAtMipLevel - 1, depthAtMipLevel])];\n      })\n  )\n  .fn(t => {\n    const { mipLevel, depthSlice } = t.params;\n\n    const texture = t.createTestTexture({\n      dimension: '3d',\n      width: 16,\n      height: 1,\n      arrayLayerCount: kArrayLayerCount,\n      mipLevelCount: mipLevel + 1,\n    });\n\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      baseMipLevel: mipLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    };\n\n    const colorAttachment = t.getColorAttachment(texture, viewDescriptor);\n    colorAttachment.depthSlice = depthSlice;\n\n    const passDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    const success = depthSlice < Math.max(kArrayLayerCount >> mipLevel, 1);\n\n    t.tryRenderPass(success, passDescriptor);\n  });\n\ng.test('color_attachments,depthSlice,overlaps,same_miplevel')\n  .desc(\n    `\n  Test that the depth slices of 3d color attachments have no overlaps for same texture in a render\n  pass.\n  - Succeed if the depth slices are different, or from different textures, or on different render\n    passes.\n  - Fail if same depth slice from same texture's same mip level is overwritten in a render pass.\n  `\n  )\n  .params(u =>\n    u\n      .combine('sameDepthSlice', [true, false])\n      .beginSubcases()\n      .combine('sameTexture', [true, false])\n      .combine('samePass', [true, false])\n  )\n  .fn(t => {\n    const { sameDepthSlice, sameTexture, samePass } = t.params;\n    const arrayLayerCount = 4;\n\n    const texDescriptor = {\n      dimension: '3d' as GPUTextureDimension,\n      arrayLayerCount,\n    };\n    const texture = t.createTestTexture(texDescriptor);\n\n    const colorAttachments = [];\n    for (let i = 0; i < arrayLayerCount; i++) {\n      const colorAttachment = t.getColorAttachment(\n        sameTexture ? texture : t.createTestTexture(texDescriptor)\n      );\n      colorAttachment.depthSlice = sameDepthSlice ? 0 : i;\n      colorAttachments.push(colorAttachment);\n    }\n\n    const encoder = t.createEncoder('non-pass');\n    if (samePass) {\n      const pass = encoder.encoder.beginRenderPass({ colorAttachments });\n      pass.end();\n    } else {\n      for (let i = 0; i < arrayLayerCount; i++) {\n        const pass = encoder.encoder.beginRenderPass({ colorAttachments: [colorAttachments[i]] });\n        pass.end();\n      }\n    }\n\n    const success = !sameDepthSlice || !sameTexture || !samePass;\n\n    encoder.validateFinish(success);\n  });\n\ng.test('color_attachments,depthSlice,overlaps,diff_miplevel')\n  .desc(\n    `\n  Test that the same depth slice from different mip levels of a 3d texture with size [1, 1, N] can\n  be set in a render pass's color attachments.\n  `\n  )\n  .params(u => u.combine('sameMipLevel', [true, false]))\n  .fn(t => {\n    const { sameMipLevel } = t.params;\n    const mipLevelCount = 4;\n\n    const texDescriptor = {\n      dimension: '3d' as GPUTextureDimension,\n      width: 1,\n      height: 1,\n      arrayLayerCount: 1 << mipLevelCount,\n      mipLevelCount,\n    };\n    const texture = t.createTestTexture(texDescriptor);\n\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      baseMipLevel: 0,\n      mipLevelCount: 1,\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    };\n\n    const colorAttachments = [];\n    for (let i = 0; i < mipLevelCount; i++) {\n      if (!sameMipLevel) {\n        viewDescriptor.baseMipLevel = i;\n      }\n      const colorAttachment = t.getColorAttachment(texture, viewDescriptor);\n      colorAttachment.depthSlice = 0;\n      colorAttachments.push(colorAttachment);\n    }\n\n    const encoder = t.createEncoder('non-pass');\n    const pass = encoder.encoder.beginRenderPass({ colorAttachments });\n    pass.end();\n\n    encoder.validateFinish(!sameMipLevel);\n  });\n\ng.test('attachments,same_size')\n  .desc(\n    `\n  Test that attachments have the same size. Otherwise, a validation error should be generated.\n    - Succeed if all attachments have the same size.\n    - Fail if one of the color attachments has a different size.\n    - Fail if the depth stencil attachment has a different size.\n  `\n  )\n  .fn(t => {\n    const colorTexture1x1A = t.createTestTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n    const colorTexture1x1B = t.createTestTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n    const colorTexture2x2 = t.createTestTexture({ width: 2, height: 2, format: 'rgba8unorm' });\n    const depthStencilTexture1x1 = t.createTestTexture({\n      width: 1,\n      height: 1,\n      format: 'depth24plus-stencil8',\n    });\n    const depthStencilTexture2x2 = t.createTestTexture({\n      width: 2,\n      height: 2,\n      format: 'depth24plus-stencil8',\n    });\n\n    {\n      // Control case: all the same size (1x1)\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture1x1B),\n        ],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture1x1),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // One of the color attachments has a different size\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture2x2),\n        ],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // The depth stencil attachment has a different size\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture1x1B),\n        ],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture2x2),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('attachments,color_depth_mismatch')\n  .desc(`Test that attachments match whether they are used for color or depth stencil.`)\n  .fn(t => {\n    const colorTexture = t.createTestTexture({ format: 'rgba8unorm' });\n    const depthStencilTexture = t.createTestTexture({ format: 'depth24plus-stencil8' });\n\n    {\n      // Using depth-stencil for color\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(depthStencilTexture)],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // Using color for depth-stencil\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(colorTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('attachments,layer_count')\n  .desc(\n    `\n  Test the layer counts for color or depth stencil.\n    - Fail if using 2D array texture view with arrayLayerCount > 1.\n    - Succeed if using 2D array texture view that covers the first layer of the texture.\n    - Succeed if using 2D array texture view that covers the last layer for depth stencil.\n  `\n  )\n  .paramsSimple([\n    { arrayLayerCount: 5, baseArrayLayer: 0, _success: false },\n    { arrayLayerCount: 1, baseArrayLayer: 0, _success: true },\n    { arrayLayerCount: 1, baseArrayLayer: 9, _success: true },\n  ])\n  .fn(t => {\n    const { arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 10;\n    const MIP_LEVEL_COUNT = 1;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTestTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTestTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n      baseArrayLayer,\n      arrayLayerCount,\n      baseMipLevel: 0,\n      mipLevelCount: MIP_LEVEL_COUNT,\n    };\n\n    {\n      // Check 2D array texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D array texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('attachments,mip_level_count')\n  .desc(\n    `\n  Test the mip level count for color or depth stencil.\n    - Fail if using 2D texture view with mipLevelCount > 1.\n    - Succeed if using 2D texture view that covers the first level of the texture.\n    - Succeed if using 2D texture view that covers the last level of the texture.\n  `\n  )\n  .paramsSimple([\n    { mipLevelCount: 2, baseMipLevel: 0, _success: false },\n    { mipLevelCount: 1, baseMipLevel: 0, _success: true },\n    { mipLevelCount: 1, baseMipLevel: 3, _success: true },\n  ])\n  .fn(t => {\n    const { mipLevelCount, baseMipLevel, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 1;\n    const MIP_LEVEL_COUNT = 4;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTestTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTestTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      baseArrayLayer: 0,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n      baseMipLevel,\n      mipLevelCount,\n    };\n\n    {\n      // Check 2D texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('color_attachments,non_multisampled')\n  .desc(\n    `\n  Test that setting a resolve target is invalid if the color attachments is non multisampled.\n  `\n  )\n  .fn(t => {\n    const colorTexture = t.createTestTexture({ sampleCount: 1 });\n    const resolveTargetTexture = t.createTestTexture({ sampleCount: 1 });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: colorTexture.createView(),\n          resolveTarget: resolveTargetTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('color_attachments,sample_count')\n  .desc(\n    `\n  Test the usages of multisampled textures for color attachments.\n    - Succeed if using a multisampled color attachment without setting a resolve target.\n    - Fail if using multiple color attachments with different sample counts.\n  `\n  )\n  .fn(t => {\n    const colorTexture = t.createTestTexture({ sampleCount: 1 });\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n\n    {\n      // It is allowed to use a multisampled color attachment without setting resolve target\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      };\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // It is not allowed to use multiple color attachments with different sample counts\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture),\n          t.getColorAttachment(multisampledColorTexture),\n        ],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('resolveTarget,sample_count')\n  .desc(\n    `\n  Test that using multisampled resolve target is invalid for color attachments.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const multisampledResolveTargetTexture = t.createTestTexture({ sampleCount: 4 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = multisampledResolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,array_layer_count')\n  .desc(\n    `\n  Test that using a resolve target with array layer count is greater than 1 is invalid for color\n  attachments.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTestTexture({ arrayLayerCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({ dimension: '2d-array' });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,mipmap_level_count')\n  .desc(\n    `\n  Test that using a resolve target with that mipmap level count is greater than 1 is invalid for\n  color attachments.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTestTexture({ mipLevelCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,usage')\n  .desc(\n    `\n  Test that using a resolve target whose usage is not RENDER_ATTACHMENT is invalid for color\n  attachments.\n  `\n  )\n  .paramsSimple([\n    { usage: GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.TEXTURE_BINDING },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.STORAGE },\n    { usage: GPUConst.TextureUsage.RENDER_ATTACHMENT | GPUConst.TextureUsage.TEXTURE_BINDING },\n  ])\n  .fn(t => {\n    const { usage } = t.params;\n\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTestTexture({ usage });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    const isValid = usage & GPUConst.TextureUsage.RENDER_ATTACHMENT ? true : false;\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('resolveTarget,error_state')\n  .desc(`Test that a resolve target that has a error is invalid for color attachments.`)\n  .fn(t => {\n    const ARRAY_LAYER_COUNT = 1;\n\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTestTexture({ arrayLayerCount: ARRAY_LAYER_COUNT });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    t.expectValidationError(() => {\n      colorAttachment.resolveTarget = resolveTargetTexture.createView({\n        dimension: '2d',\n        format: 'rgba8unorm',\n        baseArrayLayer: ARRAY_LAYER_COUNT + 1,\n      });\n    });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,single_sample_count')\n  .desc(\n    `\n  Test that a resolve target that has multi sample color attachment and a single resolve target is\n  valid.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTestTexture({ sampleCount: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('resolveTarget,different_format')\n  .desc(`Test that a resolve target that has a different format is invalid.`)\n  .fn(t => {\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTestTexture({ format: 'bgra8unorm' });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,different_size')\n  .desc(\n    `\n  Test that a resolve target that has a different size with the color attachment is invalid.\n  `\n  )\n  .fn(t => {\n    const size = 16;\n    const multisampledColorTexture = t.createTestTexture({\n      width: size,\n      height: size,\n      sampleCount: 4,\n    });\n    const resolveTargetTexture = t.createTestTexture({\n      width: size * 2,\n      height: size * 2,\n      mipLevelCount: 2,\n    });\n\n    {\n      const resolveTargetTextureView = resolveTargetTexture.createView({\n        baseMipLevel: 0,\n        mipLevelCount: 1,\n      });\n\n      const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n      colorAttachment.resolveTarget = resolveTargetTextureView;\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [colorAttachment],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      const resolveTargetTextureView = resolveTargetTexture.createView({ baseMipLevel: 1 });\n\n      const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n      colorAttachment.resolveTarget = resolveTargetTextureView;\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [colorAttachment],\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n  });\n\ng.test('depth_stencil_attachment,sample_counts_mismatch')\n  .desc(\n    `\n  Test that the depth stencil attachment that has different number of samples with the color\n  attachment is invalid.\n  `\n  )\n  .fn(t => {\n    const multisampledDepthStencilTexture = t.createTestTexture({\n      sampleCount: 4,\n      format: 'depth24plus-stencil8',\n    });\n\n    {\n      // It is not allowed to use a depth stencil attachment whose sample count is different from\n      // the one of the color attachment.\n      const depthStencilTexture = t.createTestTexture({\n        sampleCount: 1,\n        format: 'depth24plus-stencil8',\n      });\n      const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      const colorTexture = t.createTestTexture({ sampleCount: 1 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // It is allowed to use a multisampled depth stencil attachment whose sample count is equal to\n      // the one of the color attachment.\n      const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // It is allowed to use a multisampled depth stencil attachment with no color attachment.\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n  });\n\ng.test('depth_stencil_attachment,loadOp_storeOp_match_depthReadOnly_stencilReadOnly')\n  .desc(\n    `\n  Test GPURenderPassDepthStencilAttachment Usage:\n    - if the format has a depth aspect:\n      - if depthReadOnly is true\n        - depthLoadOp and depthStoreOp must not be provided\n      - else:\n        - depthLoadOp and depthStoreOp must be provided\n    - if the format has a stencil aspect:\n      - if stencilReadOnly is true\n        - stencilLoadOp and stencilStoreOp must not be provided\n      - else:\n        - stencilLoadOp and stencilStoreOp must be provided\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases() // Note: It's easier to debug if you comment this line out as you can then run an individual case.\n      .combine('depthReadOnly', [undefined, true, false])\n      .combine('depthLoadOp', [undefined, 'clear', 'load'] as GPULoadOp[])\n      .combine('depthStoreOp', [undefined, 'discard', 'store'] as GPUStoreOp[])\n      .combine('stencilReadOnly', [undefined, true, false])\n      .combine('stencilLoadOp', [undefined, 'clear', 'load'] as GPULoadOp[])\n      .combine('stencilStoreOp', [undefined, 'discard', 'store'] as GPUStoreOp[])\n  )\n  .beforeAllSubcases(t => {\n    const info = kTextureFormatInfo[t.params.format as GPUTextureFormat];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const {\n      format,\n      depthReadOnly,\n      depthLoadOp,\n      depthStoreOp,\n      stencilReadOnly,\n      stencilLoadOp,\n      stencilStoreOp,\n    } = t.params;\n\n    const depthAttachment = t.createTextureTracked({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const depthAttachmentView = depthAttachment.createView();\n\n    const encoder = t.device.createCommandEncoder();\n\n    // If depthLoadOp is \"clear\", depthClearValue must be provided and must be between 0.0 and 1.0,\n    // and it will be ignored if depthLoadOp is not \"clear\".\n    const depthClearValue = depthLoadOp === 'clear' ? 0 : undefined;\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthAttachmentView,\n        depthLoadOp,\n        depthStoreOp,\n        depthReadOnly,\n        stencilLoadOp,\n        stencilStoreOp,\n        stencilReadOnly,\n        depthClearValue,\n      },\n    };\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.end();\n\n    const info = kTextureFormatInfo[format];\n    const hasDepthSettings = !!depthLoadOp && !!depthStoreOp && !depthReadOnly;\n    const hasStencilSettings = !!stencilLoadOp && !!stencilStoreOp && !stencilReadOnly;\n    const hasDepth = info.depth;\n    const hasStencil = info.stencil;\n\n    const goodAspectSettingsPresent =\n      (hasDepthSettings ? hasDepth : true) && (hasStencilSettings ? hasStencil : true);\n\n    const hasBothDepthOps = !!depthLoadOp && !!depthStoreOp;\n    const hasBothStencilOps = !!stencilLoadOp && !!stencilStoreOp;\n    const hasNeitherDepthOps = !depthLoadOp && !depthStoreOp;\n    const hasNeitherStencilOps = !stencilLoadOp && !stencilStoreOp;\n\n    const goodDepthCombo = hasDepth && !depthReadOnly ? hasBothDepthOps : hasNeitherDepthOps;\n    const goodStencilCombo =\n      hasStencil && !stencilReadOnly ? hasBothStencilOps : hasNeitherStencilOps;\n\n    const shouldError = !goodAspectSettingsPresent || !goodDepthCombo || !goodStencilCombo;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, shouldError);\n  });\n\ng.test('depth_stencil_attachment,depth_clear_value')\n  .desc(\n    `\n  Test that depthClearValue is invalid if the value is out of the range(0.0 and 1.0) only when\n  depthLoadOp is 'clear'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('depthLoadOp', ['load', 'clear', undefined] as const)\n      .combine('depthClearValue', [undefined, -1.0, 0.0, 0.5, 1.0, 1.5] as const)\n  )\n  .fn(t => {\n    const { depthLoadOp, depthClearValue } = t.params;\n\n    const depthStencilTexture = t.createTestTexture({\n      format: depthLoadOp === undefined ? 'stencil8' : 'depth24plus-stencil8',\n    });\n    const depthStencilAttachment = t.getDepthStencilAttachment(depthStencilTexture);\n    depthStencilAttachment.depthClearValue = depthClearValue;\n    depthStencilAttachment.depthLoadOp = depthLoadOp;\n    if (depthLoadOp === undefined) {\n      depthStencilAttachment.depthStoreOp = undefined;\n    }\n\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(t.createTestTexture())],\n      depthStencilAttachment,\n    };\n\n    // We can not check for out of range because NaN is not out of range.\n    // So (v < 0.0 || v > 1.0) would return false when depthClearValue is undefined (NaN)\n    const isDepthValueInRange = depthClearValue! >= 0.0 && depthClearValue! <= 1.0;\n    const isInvalid = depthLoadOp === 'clear' && !isDepthValueInRange;\n\n    t.tryRenderPass(!isInvalid, descriptor);\n  });\n\ng.test('resolveTarget,format_supports_resolve')\n  .desc(\n    `\n  For all formats that support 'multisample', test that they can be used as a resolveTarget\n  if and only if they support 'resolve'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .filter(t => kTextureFormatInfo[t.format].multisample)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupportedDeprecated(format);\n    t.skipIfMultisampleNotSupportedForFormatDeprecated(format);\n  })\n  .fn(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const multisampledColorTexture = t.createTestTexture({ format, sampleCount: 4 });\n    const resolveTarget = t.createTestTexture({ format });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTarget.createView();\n\n    t.tryRenderPass(!!info.colorRender?.resolve, {\n      colorAttachments: [colorAttachment],\n    });\n  });\n\ng.test('timestampWrites,query_set_type')\n  .desc(\n    `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp', a validation error should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('queryType', kQueryTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { queryType } = t.params;\n\n    const timestampWrites = {\n      querySet: t.createQuerySetTracked({ type: queryType, count: 2 }),\n      beginningOfPassWriteIndex: 0,\n      endOfPassWriteIndex: 1,\n    };\n\n    const isValid = queryType === 'timestamp';\n\n    const colorTexture = t.createTestTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites,\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('timestampWrite,query_index')\n  .desc(\n    `Test that querySet.count should be greater than timestampWrite.queryIndex, and that the\n         query indexes are unique.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('beginningOfPassWriteIndex', [undefined, 0, 1, 2, 3] as const)\n      .combine('endOfPassWriteIndex', [undefined, 0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { beginningOfPassWriteIndex, endOfPassWriteIndex } = t.params;\n\n    const querySetCount = 2;\n\n    const timestampWrites = {\n      querySet: t.createQuerySetTracked({ type: 'timestamp', count: querySetCount }),\n      beginningOfPassWriteIndex,\n      endOfPassWriteIndex,\n    };\n\n    const isValid =\n      beginningOfPassWriteIndex !== endOfPassWriteIndex &&\n      (beginningOfPassWriteIndex === undefined || beginningOfPassWriteIndex < querySetCount) &&\n      (endOfPassWriteIndex === undefined || endOfPassWriteIndex < querySetCount);\n\n    const colorTexture = t.createTestTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites,\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('occlusionQuerySet,query_set_type')\n  .desc(`Test that occlusionQuerySet must have type 'occlusion'.`)\n  .params(u => u.combine('queryType', kQueryTypes))\n  .beforeAllSubcases(t => {\n    if (t.params.queryType === 'timestamp') {\n      t.selectDeviceOrSkipTestCase(['timestamp-query']);\n    }\n  })\n  .fn(t => {\n    const { queryType } = t.params;\n\n    const querySet = t.createQuerySetTracked({\n      type: queryType,\n      count: 1,\n    });\n\n    const colorTexture = t.createTestTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      occlusionQuerySet: querySet,\n    };\n\n    const isValid = queryType === 'occlusion';\n    t.tryRenderPass(isValid, descriptor);\n  });\n"],"mappings":"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"}