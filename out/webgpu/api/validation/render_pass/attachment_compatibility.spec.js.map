{"version":3,"file":"attachment_compatibility.spec.js","names":["description","makeTestGroup","range","getDefaultLimits","kTextureSampleCounts","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","filterFormatsByFeature","getFeaturesForFormats","isDepthTextureFormat","isStencilTextureFormat","kPossibleColorRenderableTextureFormats","AllFeaturesMaxLimitsValidationTest","kMaxColorAttachments","maxColorAttachments","default","kColorAttachmentCounts","i","kColorAttachments","map","count","result","Array","fill","concat","r","cases","j","push","flat","kDepthStencilAttachmentFormats","undefined","kFeaturesForDepthStencilAttachmentFormats","F","createAttachmentTextureView","format","sampleCount","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","createColorAttachment","view","clearValue","loadOp","storeOp","createDepthAttachment","attachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","createRenderPipeline","targets","depthStencil","cullMode","device","layout","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","multisample","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","passFormat","bundleFormat","params","skipIfTextureFormatNotSupported","skipIfTextureFormatNotUsableAsRenderAttachment","bundleEncoder","createRenderBundleEncoder","colorFormats","bundle","finish","encoder","validateFinishAndSubmit","createEncoder","pass","beginRenderPass","colorAttachments","executeBundles","end","passCount","bundleCount","limits","skipIf","beginSubcases","expand","p","length","filter","attachmentCount","passAttachments","iPass","bundleAttachments","iBundle","every","v","passFeature","bundleFeature","depthStencilFormat","depthStencilAttachment","renderSampleCount","bundleSampleCount","beforeAllSubcases","usesMismatchedDevice","mismatched","sourceDevice","mismatchedDevice","encoderType","encoderFormat","pipelineFormat","pipeline","writeMask","attachmentInfo","setPipeline","encoderCount","pipelineCount","encoderAttachments","iEncoder","pipelineAttachments","iPipeline","colorTargets","encoderFormatFeature","pipelineFormatFeature","depthCompare","depthWriteEnabled","kStencilFaceStates","failOp","depthFailOp","passOp","stencilFront","stencilBack","depthReadOnly","stencilReadOnly","stencilWriteMask","writesDepth","writesStencil","isValid","attachmentType","encoderSampleCount","pipelineSampleCount"],"sources":["../../../../../src/webgpu/api/validation/render_pass/attachment_compatibility.spec.ts"],"sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n\nTODO(#3363): Make this into a MaxLimitTest and increase kMaxColorAttachments.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { getDefaultLimits, kTextureSampleCounts } from '../../../capability_info.js';\nimport {\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  filterFormatsByFeature,\n  getFeaturesForFormats,\n  isDepthTextureFormat,\n  isStencilTextureFormat,\n  kPossibleColorRenderableTextureFormats,\n} from '../../../format_info.js';\nimport { AllFeaturesMaxLimitsValidationTest } from '../validation_test.js';\n\n// MAINTENANCE_TODO: This should be changed to kMaxColorAttachmentsToTest\n// when this is made a MaxLimitTest (see above).\nconst kMaxColorAttachments = getDefaultLimits('core').maxColorAttachments.default;\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kColorAttachments = kColorAttachmentCounts\n  .map(count => {\n    // generate cases with 0..1 null attachments at different location\n    // e.g. count == 2\n    // [\n    //    [1, 1],\n    //    [0, 1],\n    //    [1, 0],\n    // ]\n    // 0 (false) means null attachment, 1 (true) means non-null attachment, at the slot\n\n    // Special cases: we need at least a color attachment, when we don't have depth stencil attachment\n    if (count === 1) {\n      return [[1]];\n    }\n    if (count === 2) {\n      return [\n        [1, 1],\n        [0, 1],\n        [1, 0],\n      ];\n    }\n\n    // [1, 1, ..., 1]: all color attachment are used\n    let result = [new Array<boolean>(count).fill(true)];\n\n    // [1, 0, 1, ..., 1]: generate cases with one null attachment at different locations\n    result = result.concat(\n      range(count, i => {\n        const r = new Array<boolean>(count).fill(true);\n        r[i] = false;\n        return r;\n      })\n    );\n\n    // [1, 0, 1, ..., 0, 1]: generate cases with two null attachments at different locations\n    // To reduce test run time, limit the attachment count to <= 4\n    if (count <= 4) {\n      result = result.concat(\n        range(count - 1, i => {\n          const cases = [] as boolean[][];\n          for (let j = i + 1; j < count; j++) {\n            const r = new Array<boolean>(count).fill(true);\n            r[i] = false;\n            r[j] = false;\n            cases.push(r);\n          }\n          return cases;\n        }).flat()\n      );\n    }\n\n    return result;\n  })\n  .flat() as boolean[][];\n\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nconst kFeaturesForDepthStencilAttachmentFormats = getFeaturesForFormats([\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n]);\n\nclass F extends AllFeaturesMaxLimitsValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.createTextureTracked({\n      // Size matching the \"arbitrary\" size used by ValidationTest helpers.\n      size: [16, 16, 1],\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    }).createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat | null,\n    sampleCount?: number\n  ): GPURenderPassColorAttachment | null {\n    return format === null\n      ? null\n      : {\n          view: this.createAttachmentTextureView(format, sampleCount),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachment {\n    const attachment: GPURenderPassDepthStencilAttachment = {\n      view: this.createAttachmentTextureView(format, sampleCount),\n    };\n    if (isDepthTextureFormat(format)) {\n      attachment.depthClearValue = 0;\n      attachment.depthLoadOp = 'clear';\n      attachment.depthStoreOp = 'discard';\n    }\n    if (isStencilTextureFormat(format)) {\n      attachment.stencilClearValue = 1;\n      attachment.stencilLoadOp = 'clear';\n      attachment.stencilStoreOp = 'discard';\n    }\n    return attachment;\n  }\n\n  createRenderPipeline(\n    targets: Iterable<GPUColorTargetState | null>,\n    depthStencil?: GPUDepthStencilState,\n    sampleCount?: number,\n    cullMode?: GPUCullMode\n  ) {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '@fragment fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      primitive: { topology: 'triangle-list', cullMode },\n      depthStencil,\n      multisample: { count: sampleCount },\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kPossibleColorRenderableTextureFormats)\n      .combine('bundleFormat', kPossibleColorRenderableTextureFormats)\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    t.skipIfTextureFormatNotSupported(passFormat, bundleFormat);\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(passFormat, bundleFormat);\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passCount', kColorAttachmentCounts)\n      .combine('bundleCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n\n    const { maxColorAttachments } = t.device.limits;\n    t.skipIf(\n      passCount > maxColorAttachments,\n      `passCount: ${passCount} > maxColorAttachments for device: ${maxColorAttachments}`\n    );\n    t.skipIf(\n      bundleCount > maxColorAttachments,\n      `bundleCount: ${bundleCount} > maxColorAttachments for device: ${maxColorAttachments}`\n    );\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8uint'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8uint')),\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passCount === bundleCount, true);\n  });\n\ng.test('render_pass_and_bundle,color_sparse')\n  .desc(\n    `\n  Test that each of color attachments in render passes and bundles must match.\n  `\n  )\n  .params(u =>\n    u //\n      // introduce attachmentCount to make it easier to split the test\n      .combine('attachmentCount', kColorAttachmentCounts)\n      .beginSubcases()\n      // Indices into kColorAttachments\n      .expand('iPass', p =>\n        range(kColorAttachments.length, i => i).filter(\n          i => kColorAttachments[i].length === p.attachmentCount\n        )\n      )\n      .expand('iBundle', p =>\n        range(kColorAttachments.length, i => i).filter(\n          i => kColorAttachments[i].length === p.attachmentCount\n        )\n      )\n  )\n  .fn(t => {\n    const passAttachments = kColorAttachments[t.params.iPass];\n    const bundleAttachments = kColorAttachments[t.params.iBundle];\n\n    const { maxColorAttachments } = t.device.limits;\n    t.skipIf(passAttachments.length > maxColorAttachments);\n    t.skipIf(bundleAttachments.length > maxColorAttachments);\n\n    const colorFormats = bundleAttachments.map(i => (i ? 'rgba8uint' : null));\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const colorAttachments = passAttachments.map(i =>\n      t.createColorAttachment(i ? 'rgba8uint' : null)\n    );\n    const pass = encoder.beginRenderPass({\n      colorAttachments,\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(\n      passAttachments.every((v, i) => v === bundleAttachments[i]),\n      true\n    );\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .params(u =>\n    u //\n      .combine('passFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .combine('bundleFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .beginSubcases()\n      .expand('passFormat', ({ passFeature }) =>\n        filterFormatsByFeature(passFeature, kDepthStencilAttachmentFormats)\n      )\n      .expand('bundleFormat', ({ bundleFeature }) =>\n        filterFormatsByFeature(bundleFeature, kDepthStencilAttachmentFormats)\n      )\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    t.skipIfTextureFormatNotSupported(passFormat, bundleFormat);\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('renderSampleCount', kTextureSampleCounts)\n      .combine('bundleSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(renderSampleCount === bundleSampleCount, true);\n  });\n\ng.test('render_pass_and_bundle,device_mismatch')\n  .desc('Test that render passes cannot be called with bundles created from another device.')\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => t.usesMismatchedDevice())\n  .fn(t => {\n    const { mismatched } = t.params;\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const format = 'r16uint';\n    const bundleEncoder = sourceDevice.createRenderBundleEncoder({\n      colorFormats: [format],\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(format)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(!mismatched, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kPossibleColorRenderableTextureFormats)\n      .combine('pipelineFormat', kPossibleColorRenderableTextureFormats)\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    t.skipIfTextureFormatNotSupported(encoderFormat, pipelineFormat);\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(encoderFormat, pipelineFormat);\n\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat, writeMask: 0 }]);\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: [encoderFormat] },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderCount', kColorAttachmentCounts)\n      .combine('pipelineCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n\n    const { maxColorAttachments } = t.device.limits;\n    t.skipIf(\n      pipelineCount > maxColorAttachments,\n      `pipelineCount: ${pipelineCount} > maxColorAttachments for device: ${maxColorAttachments}`\n    );\n    t.skipIf(\n      encoderCount > maxColorAttachments,\n      `encoderCount: ${encoderCount} > maxColorAttachments for device: ${maxColorAttachments}`\n    );\n\n    const pipeline = t.createRenderPipeline(\n      range(pipelineCount, () => ({ format: 'rgba8uint', writeMask: 0 }))\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: range(encoderCount, () => 'rgba8uint') },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderCount === pipelineCount, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_sparse')\n  .desc(\n    `\nTest that each of color attachments in render passes or bundles match that of the pipeline.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      // introduce attachmentCount to make it easier to split the test\n      .combine('attachmentCount', kColorAttachmentCounts)\n      .beginSubcases()\n      // Indices into kColorAttachments\n      .expand('iEncoder', p =>\n        range(kColorAttachments.length, i => i).filter(\n          i => kColorAttachments[i].length === p.attachmentCount\n        )\n      )\n      .expand('iPipeline', p =>\n        range(kColorAttachments.length, i => i).filter(\n          i => kColorAttachments[i].length === p.attachmentCount\n        )\n      )\n  )\n  .fn(t => {\n    const { encoderType } = t.params;\n    const encoderAttachments = kColorAttachments[t.params.iEncoder];\n    const pipelineAttachments = kColorAttachments[t.params.iPipeline];\n\n    const { maxColorAttachments } = t.device.limits;\n    t.skipIf(encoderAttachments.length > maxColorAttachments);\n    t.skipIf(pipelineAttachments.length > maxColorAttachments);\n\n    const colorTargets = pipelineAttachments.map(i =>\n      i ? ({ format: 'rgba8uint', writeMask: 0 } as GPUColorTargetState) : null\n    );\n    const pipeline = t.createRenderPipeline(colorTargets);\n\n    const colorFormats = encoderAttachments.map(i => (i ? 'rgba8uint' : null));\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(\n      encoderAttachments.every((v, i) => v === pipelineAttachments[i]),\n      true\n    );\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('encoderFormatFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .combine('pipelineFormatFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .beginSubcases()\n      .expand('encoderFormat', ({ encoderFormatFeature }) =>\n        filterFormatsByFeature(encoderFormatFeature, kDepthStencilAttachmentFormats)\n      )\n      .expand('pipelineFormat', ({ pipelineFormatFeature }) =>\n        filterFormatsByFeature(pipelineFormatFeature, kDepthStencilAttachmentFormats)\n      )\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    t.skipIfTextureFormatNotSupported(encoderFormat, pipelineFormat);\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      pipelineFormat !== undefined\n        ? { format: pipelineFormat, depthCompare: 'always', depthWriteEnabled: false }\n        : undefined\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: ['rgba8unorm'], depthStencilFormat: encoderFormat },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\nconst kStencilFaceStates = [\n  { failOp: 'keep', depthFailOp: 'keep', passOp: 'keep' },\n  { failOp: 'zero', depthFailOp: 'zero', passOp: 'zero' },\n] as GPUStencilFaceState[];\n\ng.test('render_pass_or_bundle_and_pipeline,depth_stencil_read_only_write_state')\n  .desc(\n    `\nTest that the depth stencil read only state in render passes or bundles is compatible with the depth stencil write state of the pipeline.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('format', kDepthStencilAttachmentFormats)\n      .beginSubcases()\n      // pass/bundle state\n      .combine('depthReadOnly', [false, true])\n      .combine('stencilReadOnly', [false, true])\n      .combine('stencilFront', kStencilFaceStates)\n      .combine('stencilBack', kStencilFaceStates)\n      // pipeline state\n      .combine('depthWriteEnabled', [false, true])\n      .combine('stencilWriteMask', [0, 0xffffffff])\n      .combine('cullMode', ['none', 'front', 'back'] as const)\n      .filter(p => {\n        if (p.format) {\n          // If the format has no depth aspect, the depthReadOnly, depthWriteEnabled of the pipeline must not be true\n          // in order to create a valid render pipeline.\n          if (!isDepthTextureFormat(p.format) && p.depthWriteEnabled) {\n            return false;\n          }\n          // If the format has no stencil aspect, the stencil state operation must be 'keep'\n          // in order to create a valid render pipeline.\n          if (\n            !isStencilTextureFormat(p.format) &&\n            (p.stencilFront.failOp !== 'keep' || p.stencilBack.failOp !== 'keep')\n          ) {\n            return false;\n          }\n        }\n        // No depthStencil attachment\n        return true;\n      })\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      format,\n      depthReadOnly,\n      stencilReadOnly,\n      depthWriteEnabled,\n      stencilWriteMask,\n      cullMode,\n      stencilFront,\n      stencilBack,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      format === undefined\n        ? undefined\n        : {\n            format,\n            depthWriteEnabled,\n            depthCompare: 'always',\n            stencilWriteMask,\n            stencilFront,\n            stencilBack,\n          },\n      1,\n      cullMode\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: {\n        colorFormats: ['rgba8unorm'],\n        depthStencilFormat: format,\n        depthReadOnly,\n        stencilReadOnly,\n      },\n    });\n    encoder.setPipeline(pipeline);\n\n    let writesDepth = false;\n    let writesStencil = false;\n    if (format) {\n      writesDepth = depthWriteEnabled;\n      if (stencilWriteMask !== 0) {\n        if (\n          cullMode !== 'front' &&\n          (stencilFront.passOp !== 'keep' ||\n            stencilFront.depthFailOp !== 'keep' ||\n            stencilFront.failOp !== 'keep')\n        ) {\n          writesStencil = true;\n        }\n        if (\n          cullMode !== 'back' &&\n          (stencilBack.passOp !== 'keep' ||\n            stencilBack.depthFailOp !== 'keep' ||\n            stencilBack.failOp !== 'keep')\n        ) {\n          writesStencil = true;\n        }\n      }\n    }\n\n    let isValid = true;\n    if (writesDepth) {\n      isValid &&= !depthReadOnly;\n    }\n    if (writesStencil) {\n      isValid &&= !stencilReadOnly;\n    }\n\n    validateFinishAndSubmit(isValid, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count for both color texture and depthstencil texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('attachmentType', ['color', 'depthstencil'] as const)\n      .beginSubcases()\n      .combine('encoderSampleCount', kTextureSampleCounts)\n      .combine('pipelineSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { encoderType, attachmentType, encoderSampleCount, pipelineSampleCount } = t.params;\n\n    const colorFormats = attachmentType === 'color' ? ['rgba8unorm' as const] : [];\n    const depthStencilFormat =\n      attachmentType === 'depthstencil' ? ('depth24plus-stencil8' as const) : undefined;\n\n    const pipeline = t.createRenderPipeline(\n      colorFormats.map(format => ({ format, writeMask: 0 })),\n      depthStencilFormat\n        ? { format: depthStencilFormat, depthWriteEnabled: false, depthCompare: 'always' }\n        : undefined,\n      pipelineSampleCount\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats, depthStencilFormat, sampleCount: encoderSampleCount },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderSampleCount === pipelineSampleCount, true);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,KAAK,QAAQ,iCAAiC;AACvD,SAASC,gBAAgB,EAAEC,oBAAoB,QAAQ,6BAA6B;AACpF;EACEC,yBAAyB;EACzBC,2BAA2B;EAC3BC,sBAAsB;EACtBC,qBAAqB;EACrBC,oBAAoB;EACpBC,sBAAsB;EACtBC,sCAAsC;AACjC,yBAAyB;AAChC,SAASC,kCAAkC,QAAQ,uBAAuB;;AAE1E;AACA;AACA,MAAMC,oBAAoB,GAAGV,gBAAgB,CAAC,MAAM,CAAC,CAACW,mBAAmB,CAACC,OAAO;;AAEjF,MAAMC,sBAAsB,GAAGd,KAAK,CAACW,oBAAoB,EAAE,CAAAI,CAAC,KAAIA,CAAC,GAAG,CAAC,CAAC;AACtE,MAAMC,iBAAiB,GAAGF,sBAAsB;AAC7CG,GAAG,CAAC,CAAAC,KAAK,KAAI;EACZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACd;EACA,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAO;IACL,CAAC,CAAC,EAAE,CAAC,CAAC;IACN,CAAC,CAAC,EAAE,CAAC,CAAC;IACN,CAAC,CAAC,EAAE,CAAC,CAAC,CACP;;EACH;;EAEA;EACA,IAAIC,MAAM,GAAG,CAAC,IAAIC,KAAK,CAAUF,KAAK,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;;EAEnD;EACAF,MAAM,GAAGA,MAAM,CAACG,MAAM;IACpBtB,KAAK,CAACkB,KAAK,EAAE,CAAAH,CAAC,KAAI;MAChB,MAAMQ,CAAC,GAAG,IAAIH,KAAK,CAAUF,KAAK,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MAC9CE,CAAC,CAACR,CAAC,CAAC,GAAG,KAAK;MACZ,OAAOQ,CAAC;IACV,CAAC;EACH,CAAC;;EAED;EACA;EACA,IAAIL,KAAK,IAAI,CAAC,EAAE;IACdC,MAAM,GAAGA,MAAM,CAACG,MAAM;MACpBtB,KAAK,CAACkB,KAAK,GAAG,CAAC,EAAE,CAAAH,CAAC,KAAI;QACpB,MAAMS,KAAK,GAAG,EAAiB;QAC/B,KAAK,IAAIC,CAAC,GAAGV,CAAC,GAAG,CAAC,EAAEU,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;UAClC,MAAMF,CAAC,GAAG,IAAIH,KAAK,CAAUF,KAAK,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;UAC9CE,CAAC,CAACR,CAAC,CAAC,GAAG,KAAK;UACZQ,CAAC,CAACE,CAAC,CAAC,GAAG,KAAK;UACZD,KAAK,CAACE,IAAI,CAACH,CAAC,CAAC;QACf;QACA,OAAOC,KAAK;MACd,CAAC,CAAC,CAACG,IAAI,CAAC;IACV,CAAC;EACH;;EAEA,OAAOR,MAAM;AACf,CAAC,CAAC;AACDQ,IAAI,CAAC,CAAgB;;AAExB,MAAMC,8BAA8B,GAAG;AACrCC,SAAS;AACT,GAAG1B,yBAAyB;AAC5B,GAAGC,2BAA2B,CACtB;;;AAEV,MAAM0B,yCAAyC,GAAGxB,qBAAqB,CAAC;AACtE,GAAGH,yBAAyB;AAC5B,GAAGC,2BAA2B;AAC/B,CAAC;;AAEF,MAAM2B,CAAC,SAASrB,kCAAkC,CAAC;EACjDsB,2BAA2BA,CAACC,MAAwB,EAAEC,WAAoB,EAAE;IAC1E,OAAO,IAAI,CAACC,oBAAoB,CAAC;MAC/B;MACAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;MACjBH,MAAM;MACNI,KAAK,EAAEC,eAAe,CAACC,iBAAiB;MACxCL;IACF,CAAC,CAAC,CAACM,UAAU,CAAC,CAAC;EACjB;;EAEAC,qBAAqBA;EACnBR,MAA+B;EAC/BC,WAAoB;EACiB;IACrC,OAAOD,MAAM,KAAK,IAAI;IAClB,IAAI;IACJ;MACES,IAAI,EAAE,IAAI,CAACV,2BAA2B,CAACC,MAAM,EAAEC,WAAW,CAAC;MAC3DS,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACxBC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;EACP;;EAEAC,qBAAqBA;EACnBb,MAAwB;EACxBC,WAAoB;EACiB;IACrC,MAAMa,UAA+C,GAAG;MACtDL,IAAI,EAAE,IAAI,CAACV,2BAA2B,CAACC,MAAM,EAAEC,WAAW;IAC5D,CAAC;IACD,IAAI3B,oBAAoB,CAAC0B,MAAM,CAAC,EAAE;MAChCc,UAAU,CAACC,eAAe,GAAG,CAAC;MAC9BD,UAAU,CAACE,WAAW,GAAG,OAAO;MAChCF,UAAU,CAACG,YAAY,GAAG,SAAS;IACrC;IACA,IAAI1C,sBAAsB,CAACyB,MAAM,CAAC,EAAE;MAClCc,UAAU,CAACI,iBAAiB,GAAG,CAAC;MAChCJ,UAAU,CAACK,aAAa,GAAG,OAAO;MAClCL,UAAU,CAACM,cAAc,GAAG,SAAS;IACvC;IACA,OAAON,UAAU;EACnB;;EAEAO,oBAAoBA;EAClBC,OAA6C;EAC7CC,YAAmC;EACnCtB,WAAoB;EACpBuB,QAAsB;EACtB;IACA,OAAO,IAAI,CAACC,MAAM,CAACJ,oBAAoB,CAAC;MACtCK,MAAM,EAAE,MAAM;MACdC,MAAM,EAAE;QACNC,MAAM,EAAE,IAAI,CAACH,MAAM,CAACI,kBAAkB,CAAC;UACrCC,IAAI,EAAG;AACjB;AACA;AACA;QACQ,CAAC,CAAC;QACFC,UAAU,EAAE;MACd,CAAC;MACDC,QAAQ,EAAE;QACRJ,MAAM,EAAE,IAAI,CAACH,MAAM,CAACI,kBAAkB,CAAC;UACrCC,IAAI,EAAE;QACR,CAAC,CAAC;QACFC,UAAU,EAAE,MAAM;QAClBT;MACF,CAAC;MACDW,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAe,EAAEV,QAAQ,CAAC,CAAC;MAClDD,YAAY;MACZY,WAAW,EAAE,EAAElD,KAAK,EAAEgB,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF;;AAEA,OAAO,MAAMmC,CAAC,GAAGtE,aAAa,CAACgC,CAAC,CAAC;;AAEjCsC,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;AAC1CC,IAAI,CAAC,6EAA6E,CAAC;AACnFC,kBAAkB,CAAC,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,YAAY,EAAEjE,sCAAsC,CAAC;AAC7DiE,OAAO,CAAC,cAAc,EAAEjE,sCAAsC;AACnE,CAAC;AACAkE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,UAAU,EAAEC,YAAY,CAAC,CAAC,GAAGF,CAAC,CAACG,MAAM;EAC7CH,CAAC,CAACI,+BAA+B,CAACH,UAAU,EAAEC,YAAY,CAAC;EAC3DF,CAAC,CAACK,8CAA8C,CAACJ,UAAU,EAAEC,YAAY,CAAC;;EAE1E,MAAMI,aAAa,GAAGN,CAAC,CAAClB,MAAM,CAACyB,yBAAyB,CAAC;IACvDC,YAAY,EAAE,CAACN,YAAY;EAC7B,CAAC,CAAC;EACF,MAAMO,MAAM,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC;;EAErC,MAAM,EAAEC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAAC,UAAU,CAAC;EACxE,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE,CAAChB,CAAC,CAACnC,qBAAqB,CAACoC,UAAU,CAAC;EACxD,CAAC,CAAC;EACFa,IAAI,CAACG,cAAc,CAAC,CAACR,MAAM,CAAC,CAAC;EAC7BK,IAAI,CAACI,GAAG,CAAC,CAAC;EACVN,uBAAuB,CAACX,UAAU,KAAKC,YAAY,EAAE,IAAI,CAAC;AAC5D,CAAC,CAAC;;AAEJT,CAAC,CAACC,IAAI,CAAC,oCAAoC,CAAC;AACzCC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,kBAAkB,CAAC,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,WAAW,EAAE5D,sBAAsB,CAAC;AAC5C4D,OAAO,CAAC,aAAa,EAAE5D,sBAAsB;AAClD,CAAC;AACA6D,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEmB,SAAS,EAAEC,WAAW,CAAC,CAAC,GAAGpB,CAAC,CAACG,MAAM;;EAE3C,MAAM,EAAEnE,mBAAmB,CAAC,CAAC,GAAGgE,CAAC,CAAClB,MAAM,CAACuC,MAAM;EAC/CrB,CAAC,CAACsB,MAAM;IACNH,SAAS,GAAGnF,mBAAmB;IAC9B,cAAamF,SAAU,sCAAqCnF,mBAAoB;EACnF,CAAC;EACDgE,CAAC,CAACsB,MAAM;IACNF,WAAW,GAAGpF,mBAAmB;IAChC,gBAAeoF,WAAY,sCAAqCpF,mBAAoB;EACvF,CAAC;;EAED,MAAMsE,aAAa,GAAGN,CAAC,CAAClB,MAAM,CAACyB,yBAAyB,CAAC;IACvDC,YAAY,EAAEpF,KAAK,CAACgG,WAAW,EAAE,MAAM,WAAW;EACpD,CAAC,CAAC;EACF,MAAMX,MAAM,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC;;EAErC,MAAM,EAAEC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAAC,UAAU,CAAC;EACxE,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE5F,KAAK,CAAC+F,SAAS,EAAE,MAAMnB,CAAC,CAACnC,qBAAqB,CAAC,WAAW,CAAC;EAC/E,CAAC,CAAC;EACFiD,IAAI,CAACG,cAAc,CAAC,CAACR,MAAM,CAAC,CAAC;EAC7BK,IAAI,CAACI,GAAG,CAAC,CAAC;EACVN,uBAAuB,CAACO,SAAS,KAAKC,WAAW,EAAE,IAAI,CAAC;AAC1D,CAAC,CAAC;;AAEJ3B,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;AAC1CC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC,CAAC;AACA;AAAA,CACCC,OAAO,CAAC,iBAAiB,EAAE5D,sBAAsB,CAAC;AAClDqF,aAAa,CAAC;AACf;AAAA,CACCC,MAAM,CAAC,OAAO,EAAE,CAAAC,CAAC;AAChBrG,KAAK,CAACgB,iBAAiB,CAACsF,MAAM,EAAE,CAAAvF,CAAC,KAAIA,CAAC,CAAC,CAACwF,MAAM;EAC5C,CAAAxF,CAAC,KAAIC,iBAAiB,CAACD,CAAC,CAAC,CAACuF,MAAM,KAAKD,CAAC,CAACG;AACzC;AACF,CAAC;AACAJ,MAAM,CAAC,SAAS,EAAE,CAAAC,CAAC;AAClBrG,KAAK,CAACgB,iBAAiB,CAACsF,MAAM,EAAE,CAAAvF,CAAC,KAAIA,CAAC,CAAC,CAACwF,MAAM;EAC5C,CAAAxF,CAAC,KAAIC,iBAAiB,CAACD,CAAC,CAAC,CAACuF,MAAM,KAAKD,CAAC,CAACG;AACzC;AACF;AACJ,CAAC;AACA7B,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM6B,eAAe,GAAGzF,iBAAiB,CAAC4D,CAAC,CAACG,MAAM,CAAC2B,KAAK,CAAC;EACzD,MAAMC,iBAAiB,GAAG3F,iBAAiB,CAAC4D,CAAC,CAACG,MAAM,CAAC6B,OAAO,CAAC;;EAE7D,MAAM,EAAEhG,mBAAmB,CAAC,CAAC,GAAGgE,CAAC,CAAClB,MAAM,CAACuC,MAAM;EAC/CrB,CAAC,CAACsB,MAAM,CAACO,eAAe,CAACH,MAAM,GAAG1F,mBAAmB,CAAC;EACtDgE,CAAC,CAACsB,MAAM,CAACS,iBAAiB,CAACL,MAAM,GAAG1F,mBAAmB,CAAC;;EAExD,MAAMwE,YAAY,GAAGuB,iBAAiB,CAAC1F,GAAG,CAAC,CAAAF,CAAC,KAAKA,CAAC,GAAG,WAAW,GAAG,IAAK,CAAC;EACzE,MAAMmE,aAAa,GAAGN,CAAC,CAAClB,MAAM,CAACyB,yBAAyB,CAAC;IACvDC;EACF,CAAC,CAAC;EACF,MAAMC,MAAM,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC;;EAErC,MAAM,EAAEC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAAC,UAAU,CAAC;EACxE,MAAMG,gBAAgB,GAAGa,eAAe,CAACxF,GAAG,CAAC,CAAAF,CAAC;EAC5C6D,CAAC,CAACnC,qBAAqB,CAAC1B,CAAC,GAAG,WAAW,GAAG,IAAI;EAChD,CAAC;EACD,MAAM2E,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC;EACF,CAAC,CAAC;EACFF,IAAI,CAACG,cAAc,CAAC,CAACR,MAAM,CAAC,CAAC;EAC7BK,IAAI,CAACI,GAAG,CAAC,CAAC;EACVN,uBAAuB;IACrBiB,eAAe,CAACI,KAAK,CAAC,CAACC,CAAC,EAAE/F,CAAC,KAAK+F,CAAC,KAAKH,iBAAiB,CAAC5F,CAAC,CAAC,CAAC;IAC3D;EACF,CAAC;AACH,CAAC,CAAC;;AAEJsD,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;AAC1CC,IAAI,CAAC,gFAAgF,CAAC;AACtFQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,aAAa,EAAE5C,yCAAyC,CAAC;AACjE4C,OAAO,CAAC,eAAe,EAAE5C,yCAAyC,CAAC;AACnEqE,aAAa,CAAC,CAAC;AACfC,MAAM,CAAC,YAAY,EAAE,CAAC,EAAEW,WAAW,CAAC,CAAC;AACpC1G,sBAAsB,CAAC0G,WAAW,EAAEnF,8BAA8B;AACpE,CAAC;AACAwE,MAAM,CAAC,cAAc,EAAE,CAAC,EAAEY,aAAa,CAAC,CAAC;AACxC3G,sBAAsB,CAAC2G,aAAa,EAAEpF,8BAA8B;AACtE;AACJ,CAAC;AACA+C,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,UAAU,EAAEC,YAAY,CAAC,CAAC,GAAGF,CAAC,CAACG,MAAM;EAC7CH,CAAC,CAACI,+BAA+B,CAACH,UAAU,EAAEC,YAAY,CAAC;;EAE3D,MAAMI,aAAa,GAAGN,CAAC,CAAClB,MAAM,CAACyB,yBAAyB,CAAC;IACvDC,YAAY,EAAE,CAAC,YAAY,CAAC;IAC5B6B,kBAAkB,EAAEnC;EACtB,CAAC,CAAC;EACF,MAAMO,MAAM,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC;;EAErC,MAAM,EAAEC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAAC,UAAU,CAAC;EACxE,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE,CAAChB,CAAC,CAACnC,qBAAqB,CAAC,YAAY,CAAC,CAAC;IACzDyE,sBAAsB;IACpBrC,UAAU,KAAKhD,SAAS,GAAG+C,CAAC,CAAC9B,qBAAqB,CAAC+B,UAAU,CAAC,GAAGhD;EACrE,CAAC,CAAC;EACF6D,IAAI,CAACG,cAAc,CAAC,CAACR,MAAM,CAAC,CAAC;EAC7BK,IAAI,CAACI,GAAG,CAAC,CAAC;EACVN,uBAAuB,CAACX,UAAU,KAAKC,YAAY,EAAE,IAAI,CAAC;AAC5D,CAAC,CAAC;;AAEJT,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;AAC1CC,IAAI,CAAC,qEAAqE,CAAC;AAC3EC,kBAAkB,CAAC,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,mBAAmB,EAAExE,oBAAoB,CAAC;AAClDwE,OAAO,CAAC,mBAAmB,EAAExE,oBAAoB;AACtD,CAAC;AACAyE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEuC,iBAAiB,EAAEC,iBAAiB,CAAC,CAAC,GAAGxC,CAAC,CAACG,MAAM;EACzD,MAAMG,aAAa,GAAGN,CAAC,CAAClB,MAAM,CAACyB,yBAAyB,CAAC;IACvDC,YAAY,EAAE,CAAC,YAAY,CAAC;IAC5BlD,WAAW,EAAEkF;EACf,CAAC,CAAC;EACF,MAAM/B,MAAM,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC;EACrC,MAAM,EAAEC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAAC,UAAU,CAAC;EACxE,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE,CAAChB,CAAC,CAACnC,qBAAqB,CAAC,YAAY,EAAE0E,iBAAiB,CAAC;EAC7E,CAAC,CAAC;EACFzB,IAAI,CAACG,cAAc,CAAC,CAACR,MAAM,CAAC,CAAC;EAC7BK,IAAI,CAACI,GAAG,CAAC,CAAC;EACVN,uBAAuB,CAAC2B,iBAAiB,KAAKC,iBAAiB,EAAE,IAAI,CAAC;AACxE,CAAC,CAAC;;AAEJ/C,CAAC,CAACC,IAAI,CAAC,wCAAwC,CAAC;AAC7CC,IAAI,CAAC,oFAAoF,CAAC;AAC1FC,kBAAkB,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AAC/D2C,iBAAiB,CAAC,CAAAzC,CAAC,KAAIA,CAAC,CAAC0C,oBAAoB,CAAC,CAAC,CAAC;AAChD3C,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE2C,UAAU,CAAC,CAAC,GAAG3C,CAAC,CAACG,MAAM;EAC/B,MAAMyC,YAAY,GAAGD,UAAU,GAAG3C,CAAC,CAAC6C,gBAAgB,GAAG7C,CAAC,CAAClB,MAAM;;EAE/D,MAAMzB,MAAM,GAAG,SAAS;EACxB,MAAMiD,aAAa,GAAGsC,YAAY,CAACrC,yBAAyB,CAAC;IAC3DC,YAAY,EAAE,CAACnD,MAAM;EACvB,CAAC,CAAC;EACF,MAAMoD,MAAM,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC;;EAErC,MAAM,EAAEC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAAC,UAAU,CAAC;EACxE,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAAC;IACnCC,gBAAgB,EAAE,CAAChB,CAAC,CAACnC,qBAAqB,CAACR,MAAM,CAAC;EACpD,CAAC,CAAC;EACFyD,IAAI,CAACG,cAAc,CAAC,CAACR,MAAM,CAAC,CAAC;EAC7BK,IAAI,CAACI,GAAG,CAAC,CAAC;EACVN,uBAAuB,CAAC,CAAC+B,UAAU,EAAE,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJlD,CAAC,CAACC,IAAI,CAAC,iDAAiD,CAAC;AACtDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,eAAe,CAAU,CAAC;AACjEyB,aAAa,CAAC,CAAC;AACfzB,OAAO,CAAC,eAAe,EAAEjE,sCAAsC,CAAC;AAChEiE,OAAO,CAAC,gBAAgB,EAAEjE,sCAAsC;AACrE,CAAC;AACAkE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE8C,WAAW,EAAEC,aAAa,EAAEC,cAAc,CAAC,CAAC,GAAGhD,CAAC,CAACG,MAAM;EAC/DH,CAAC,CAACI,+BAA+B,CAAC2C,aAAa,EAAEC,cAAc,CAAC;EAChEhD,CAAC,CAACK,8CAA8C,CAAC0C,aAAa,EAAEC,cAAc,CAAC;;EAE/E,MAAMC,QAAQ,GAAGjD,CAAC,CAACtB,oBAAoB,CAAC,CAAC,EAAErB,MAAM,EAAE2F,cAAc,EAAEE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEnF,MAAM,EAAEvC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAACiC,WAAW,EAAE;IACxEK,cAAc,EAAE,EAAE3C,YAAY,EAAE,CAACuC,aAAa,CAAC,CAAC;EAClD,CAAC,CAAC;EACFpC,OAAO,CAACyC,WAAW,CAACH,QAAQ,CAAC;EAC7BrC,uBAAuB,CAACmC,aAAa,KAAKC,cAAc,EAAE,IAAI,CAAC;AACjE,CAAC,CAAC;;AAEJvD,CAAC,CAACC,IAAI,CAAC,gDAAgD,CAAC;AACrDC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,eAAe,CAAU,CAAC;AACjEyB,aAAa,CAAC,CAAC;AACfzB,OAAO,CAAC,cAAc,EAAE5D,sBAAsB,CAAC;AAC/C4D,OAAO,CAAC,eAAe,EAAE5D,sBAAsB;AACpD,CAAC;AACA6D,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE8C,WAAW,EAAEO,YAAY,EAAEC,aAAa,CAAC,CAAC,GAAGtD,CAAC,CAACG,MAAM;;EAE7D,MAAM,EAAEnE,mBAAmB,CAAC,CAAC,GAAGgE,CAAC,CAAClB,MAAM,CAACuC,MAAM;EAC/CrB,CAAC,CAACsB,MAAM;IACNgC,aAAa,GAAGtH,mBAAmB;IAClC,kBAAiBsH,aAAc,sCAAqCtH,mBAAoB;EAC3F,CAAC;EACDgE,CAAC,CAACsB,MAAM;IACN+B,YAAY,GAAGrH,mBAAmB;IACjC,iBAAgBqH,YAAa,sCAAqCrH,mBAAoB;EACzF,CAAC;;EAED,MAAMiH,QAAQ,GAAGjD,CAAC,CAACtB,oBAAoB;IACrCtD,KAAK,CAACkI,aAAa,EAAE,OAAO,EAAEjG,MAAM,EAAE,WAAW,EAAE6F,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;EACpE,CAAC;;EAED,MAAM,EAAEvC,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAACiC,WAAW,EAAE;IACxEK,cAAc,EAAE,EAAE3C,YAAY,EAAEpF,KAAK,CAACiI,YAAY,EAAE,MAAM,WAAW,CAAC,CAAC;EACzE,CAAC,CAAC;EACF1C,OAAO,CAACyC,WAAW,CAACH,QAAQ,CAAC;EAC7BrC,uBAAuB,CAACyC,YAAY,KAAKC,aAAa,EAAE,IAAI,CAAC;AAC/D,CAAC,CAAC;;AAEJ7D,CAAC,CAACC,IAAI,CAAC,iDAAiD,CAAC;AACtDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,eAAe,CAAU;AACjE;AAAA,CACCA,OAAO,CAAC,iBAAiB,EAAE5D,sBAAsB,CAAC;AAClDqF,aAAa,CAAC;AACf;AAAA,CACCC,MAAM,CAAC,UAAU,EAAE,CAAAC,CAAC;AACnBrG,KAAK,CAACgB,iBAAiB,CAACsF,MAAM,EAAE,CAAAvF,CAAC,KAAIA,CAAC,CAAC,CAACwF,MAAM;EAC5C,CAAAxF,CAAC,KAAIC,iBAAiB,CAACD,CAAC,CAAC,CAACuF,MAAM,KAAKD,CAAC,CAACG;AACzC;AACF,CAAC;AACAJ,MAAM,CAAC,WAAW,EAAE,CAAAC,CAAC;AACpBrG,KAAK,CAACgB,iBAAiB,CAACsF,MAAM,EAAE,CAAAvF,CAAC,KAAIA,CAAC,CAAC,CAACwF,MAAM;EAC5C,CAAAxF,CAAC,KAAIC,iBAAiB,CAACD,CAAC,CAAC,CAACuF,MAAM,KAAKD,CAAC,CAACG;AACzC;AACF;AACJ,CAAC;AACA7B,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE8C,WAAW,CAAC,CAAC,GAAG9C,CAAC,CAACG,MAAM;EAChC,MAAMoD,kBAAkB,GAAGnH,iBAAiB,CAAC4D,CAAC,CAACG,MAAM,CAACqD,QAAQ,CAAC;EAC/D,MAAMC,mBAAmB,GAAGrH,iBAAiB,CAAC4D,CAAC,CAACG,MAAM,CAACuD,SAAS,CAAC;;EAEjE,MAAM,EAAE1H,mBAAmB,CAAC,CAAC,GAAGgE,CAAC,CAAClB,MAAM,CAACuC,MAAM;EAC/CrB,CAAC,CAACsB,MAAM,CAACiC,kBAAkB,CAAC7B,MAAM,GAAG1F,mBAAmB,CAAC;EACzDgE,CAAC,CAACsB,MAAM,CAACmC,mBAAmB,CAAC/B,MAAM,GAAG1F,mBAAmB,CAAC;;EAE1D,MAAM2H,YAAY,GAAGF,mBAAmB,CAACpH,GAAG,CAAC,CAAAF,CAAC;EAC5CA,CAAC,GAAI,EAAEkB,MAAM,EAAE,WAAW,EAAE6F,SAAS,EAAE,CAAC,CAAC,CAAC,GAA2B;EACvE,CAAC;EACD,MAAMD,QAAQ,GAAGjD,CAAC,CAACtB,oBAAoB,CAACiF,YAAY,CAAC;;EAErD,MAAMnD,YAAY,GAAG+C,kBAAkB,CAAClH,GAAG,CAAC,CAAAF,CAAC,KAAKA,CAAC,GAAG,WAAW,GAAG,IAAK,CAAC;EAC1E,MAAM,EAAEwE,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAACiC,WAAW,EAAE;IACxEK,cAAc,EAAE,EAAE3C,YAAY,CAAC;EACjC,CAAC,CAAC;EACFG,OAAO,CAACyC,WAAW,CAACH,QAAQ,CAAC;EAC7BrC,uBAAuB;IACrB2C,kBAAkB,CAACtB,KAAK,CAAC,CAACC,CAAC,EAAE/F,CAAC,KAAK+F,CAAC,KAAKuB,mBAAmB,CAACtH,CAAC,CAAC,CAAC;IAChE;EACF,CAAC;AACH,CAAC,CAAC;;AAEJsD,CAAC,CAACC,IAAI,CAAC,iDAAiD,CAAC;AACtDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,eAAe,CAAU,CAAC;AACjEA,OAAO,CAAC,sBAAsB,EAAE5C,yCAAyC,CAAC;AAC1E4C,OAAO,CAAC,uBAAuB,EAAE5C,yCAAyC,CAAC;AAC3EqE,aAAa,CAAC,CAAC;AACfC,MAAM,CAAC,eAAe,EAAE,CAAC,EAAEoC,oBAAoB,CAAC,CAAC;AAChDnI,sBAAsB,CAACmI,oBAAoB,EAAE5G,8BAA8B;AAC7E,CAAC;AACAwE,MAAM,CAAC,gBAAgB,EAAE,CAAC,EAAEqC,qBAAqB,CAAC,CAAC;AAClDpI,sBAAsB,CAACoI,qBAAqB,EAAE7G,8BAA8B;AAC9E;AACJ,CAAC;AACA+C,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE8C,WAAW,EAAEC,aAAa,EAAEC,cAAc,CAAC,CAAC,GAAGhD,CAAC,CAACG,MAAM;EAC/DH,CAAC,CAACI,+BAA+B,CAAC2C,aAAa,EAAEC,cAAc,CAAC;;EAEhE,MAAMC,QAAQ,GAAGjD,CAAC,CAACtB,oBAAoB;IACrC,CAAC,EAAErB,MAAM,EAAE,YAAY,EAAE6F,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IACxCF,cAAc,KAAK/F,SAAS;IACxB,EAAEI,MAAM,EAAE2F,cAAc,EAAEc,YAAY,EAAE,QAAQ,EAAEC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC5E9G;EACN,CAAC;;EAED,MAAM,EAAE0D,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAACiC,WAAW,EAAE;IACxEK,cAAc,EAAE,EAAE3C,YAAY,EAAE,CAAC,YAAY,CAAC,EAAE6B,kBAAkB,EAAEU,aAAa,CAAC;EACpF,CAAC,CAAC;EACFpC,OAAO,CAACyC,WAAW,CAACH,QAAQ,CAAC;EAC7BrC,uBAAuB,CAACmC,aAAa,KAAKC,cAAc,EAAE,IAAI,CAAC;AACjE,CAAC,CAAC;;AAEJ,MAAMgB,kBAAkB,GAAG;AACzB,EAAEC,MAAM,EAAE,MAAM,EAAEC,WAAW,EAAE,MAAM,EAAEC,MAAM,EAAE,MAAM,CAAC,CAAC;AACvD,EAAEF,MAAM,EAAE,MAAM,EAAEC,WAAW,EAAE,MAAM,EAAEC,MAAM,EAAE,MAAM,CAAC,CAAC,CAC/B;;;AAE1B1E,CAAC,CAACC,IAAI,CAAC,wEAAwE,CAAC;AAC7EC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,eAAe,CAAU,CAAC;AACjEA,OAAO,CAAC,QAAQ,EAAE9C,8BAA8B,CAAC;AACjDuE,aAAa,CAAC;AACf;AAAA,CACCzB,OAAO,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACvCA,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACzCA,OAAO,CAAC,cAAc,EAAEkE,kBAAkB,CAAC;AAC3ClE,OAAO,CAAC,aAAa,EAAEkE,kBAAkB;AAC1C;AAAA,CACClE,OAAO,CAAC,mBAAmB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC3CA,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;AAC5CA,OAAO,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAU,CAAC;AACvD6B,MAAM,CAAC,CAAAF,CAAC,KAAI;EACX,IAAIA,CAAC,CAACpE,MAAM,EAAE;IACZ;IACA;IACA,IAAI,CAAC1B,oBAAoB,CAAC8F,CAAC,CAACpE,MAAM,CAAC,IAAIoE,CAAC,CAACsC,iBAAiB,EAAE;MAC1D,OAAO,KAAK;IACd;IACA;IACA;IACA;IACE,CAACnI,sBAAsB,CAAC6F,CAAC,CAACpE,MAAM,CAAC;IAChCoE,CAAC,CAAC2C,YAAY,CAACH,MAAM,KAAK,MAAM,IAAIxC,CAAC,CAAC4C,WAAW,CAACJ,MAAM,KAAK,MAAM,CAAC;IACrE;MACA,OAAO,KAAK;IACd;EACF;EACA;EACA,OAAO,IAAI;AACb,CAAC;AACL,CAAC;AACAlE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM;IACJ8C,WAAW;IACXzF,MAAM;IACNiH,aAAa;IACbC,eAAe;IACfR,iBAAiB;IACjBS,gBAAgB;IAChB3F,QAAQ;IACRuF,YAAY;IACZC;EACF,CAAC,GAAGrE,CAAC,CAACG,MAAM;EACZH,CAAC,CAACI,+BAA+B,CAAC/C,MAAM,CAAC;;EAEzC,MAAM4F,QAAQ,GAAGjD,CAAC,CAACtB,oBAAoB;IACrC,CAAC,EAAErB,MAAM,EAAE,YAAY,EAAE6F,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IACxC7F,MAAM,KAAKJ,SAAS;IAChBA,SAAS;IACT;MACEI,MAAM;MACN0G,iBAAiB;MACjBD,YAAY,EAAE,QAAQ;MACtBU,gBAAgB;MAChBJ,YAAY;MACZC;IACF,CAAC;IACL,CAAC;IACDxF;EACF,CAAC;;EAED,MAAM,EAAE8B,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAACiC,WAAW,EAAE;IACxEK,cAAc,EAAE;MACd3C,YAAY,EAAE,CAAC,YAAY,CAAC;MAC5B6B,kBAAkB,EAAEhF,MAAM;MAC1BiH,aAAa;MACbC;IACF;EACF,CAAC,CAAC;EACF5D,OAAO,CAACyC,WAAW,CAACH,QAAQ,CAAC;;EAE7B,IAAIwB,WAAW,GAAG,KAAK;EACvB,IAAIC,aAAa,GAAG,KAAK;EACzB,IAAIrH,MAAM,EAAE;IACVoH,WAAW,GAAGV,iBAAiB;IAC/B,IAAIS,gBAAgB,KAAK,CAAC,EAAE;MAC1B;MACE3F,QAAQ,KAAK,OAAO;MACnBuF,YAAY,CAACD,MAAM,KAAK,MAAM;MAC7BC,YAAY,CAACF,WAAW,KAAK,MAAM;MACnCE,YAAY,CAACH,MAAM,KAAK,MAAM,CAAC;MACjC;QACAS,aAAa,GAAG,IAAI;MACtB;MACA;MACE7F,QAAQ,KAAK,MAAM;MAClBwF,WAAW,CAACF,MAAM,KAAK,MAAM;MAC5BE,WAAW,CAACH,WAAW,KAAK,MAAM;MAClCG,WAAW,CAACJ,MAAM,KAAK,MAAM,CAAC;MAChC;QACAS,aAAa,GAAG,IAAI;MACtB;IACF;EACF;;EAEA,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIF,WAAW,EAAE;IACfE,OAAO,KAAK,CAACL,aAAa;EAC5B;EACA,IAAII,aAAa,EAAE;IACjBC,OAAO,KAAK,CAACJ,eAAe;EAC9B;;EAEA3D,uBAAuB,CAAC+D,OAAO,EAAE,IAAI,CAAC;AACxC,CAAC,CAAC;;AAEJlF,CAAC,CAACC,IAAI,CAAC,iDAAiD,CAAC;AACtDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,MAAM,CAAC,CAAAN,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE,CAAC,aAAa,EAAE,eAAe,CAAU,CAAC;AACjEA,OAAO,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,cAAc,CAAU,CAAC;AAC7DyB,aAAa,CAAC,CAAC;AACfzB,OAAO,CAAC,oBAAoB,EAAExE,oBAAoB,CAAC;AACnDwE,OAAO,CAAC,qBAAqB,EAAExE,oBAAoB;AACxD,CAAC;AACAyE,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE8C,WAAW,EAAE8B,cAAc,EAAEC,kBAAkB,EAAEC,mBAAmB,CAAC,CAAC,GAAG9E,CAAC,CAACG,MAAM;;EAEzF,MAAMK,YAAY,GAAGoE,cAAc,KAAK,OAAO,GAAG,CAAC,YAAY,CAAU,GAAG,EAAE;EAC9E,MAAMvC,kBAAkB;EACtBuC,cAAc,KAAK,cAAc,GAAI,sBAAsB,GAAa3H,SAAS;;EAEnF,MAAMgG,QAAQ,GAAGjD,CAAC,CAACtB,oBAAoB;IACrC8B,YAAY,CAACnE,GAAG,CAAC,CAAAgB,MAAM,MAAK,EAAEA,MAAM,EAAE6F,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACtDb,kBAAkB;IACd,EAAEhF,MAAM,EAAEgF,kBAAkB,EAAE0B,iBAAiB,EAAE,KAAK,EAAED,YAAY,EAAE,QAAQ,CAAC,CAAC;IAChF7G,SAAS;IACb6H;EACF,CAAC;;EAED,MAAM,EAAEnE,OAAO,EAAEC,uBAAuB,CAAC,CAAC,GAAGZ,CAAC,CAACa,aAAa,CAACiC,WAAW,EAAE;IACxEK,cAAc,EAAE,EAAE3C,YAAY,EAAE6B,kBAAkB,EAAE/E,WAAW,EAAEuH,kBAAkB,CAAC;EACtF,CAAC,CAAC;EACFlE,OAAO,CAACyC,WAAW,CAACH,QAAQ,CAAC;EAC7BrC,uBAAuB,CAACiE,kBAAkB,KAAKC,mBAAmB,EAAE,IAAI,CAAC;AAC3E,CAAC,CAAC"}