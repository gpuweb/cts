{"version":3,"file":"submit.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsValidationTest","F","createCommandBuffer","options","device","cb","expectValidationError","encoder","createCommandEncoder","valid","popDebugGroup","finish","g","test","desc","paramsSubcasesOnly","cb0Mismatched","cb1Mismatched","beforeAllSubcases","t","usesMismatchedDevice","fn","params","mismatched","cb0","mismatchedDevice","cb1","queue","submit","cb1_invalid","cb2","cb2_invalid"],"sources":["../../../../../src/webgpu/api/validation/queue/submit.spec.ts"],"sourcesContent":["export const description = `\nTests submit validation.\n\nNote: destroyed buffer/texture/querySet are tested in destroyed/. (unless it gets moved here)\nNote: buffer map state is tested in ./buffer_mapped.spec.ts.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsValidationTest } from '../validation_test.js';\n\ninterface CommandBufferOptions {\n  device?: GPUDevice;\n  valid?: boolean;\n}\n\nclass F extends AllFeaturesMaxLimitsValidationTest {\n  createCommandBuffer(options: CommandBufferOptions = {}): GPUCommandBuffer {\n    const device = options.device ?? this.device;\n\n    let cb!: GPUCommandBuffer;\n\n    this.expectValidationError(() => {\n      const encoder = device.createCommandEncoder();\n      if (options.valid === false) {\n        // Popping a debug group when none are pushed results in an invalid command buffer.\n        encoder.popDebugGroup();\n      }\n      cb = encoder.finish();\n    }, options.valid === false);\n\n    return cb;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('command_buffer,device_mismatch')\n  .desc(\n    `\n    Tests submit cannot be called with command buffers created from another device\n    Test with two command buffers to make sure all command buffers can be validated:\n    - cb0 and cb1 from same device\n    - cb0 and cb1 from different device\n    `\n  )\n  .paramsSubcasesOnly([\n    { cb0Mismatched: false, cb1Mismatched: false }, // control case\n    { cb0Mismatched: true, cb1Mismatched: false },\n    { cb0Mismatched: false, cb1Mismatched: true },\n  ])\n  .beforeAllSubcases(t => t.usesMismatchedDevice())\n  .fn(t => {\n    const { cb0Mismatched, cb1Mismatched } = t.params;\n    const mismatched = cb0Mismatched || cb1Mismatched;\n\n    const cb0 = t.createCommandBuffer({ device: cb0Mismatched ? t.mismatchedDevice : t.device });\n    const cb1 = t.createCommandBuffer({ device: cb1Mismatched ? t.mismatchedDevice : t.device });\n\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb0, cb1]);\n    }, mismatched);\n  });\n\ng.test('command_buffer,duplicate_buffers')\n  .desc(\n    `\n    Tests submit cannot be called with the same command buffer listed multiple times:\n    `\n  )\n  .fn(t => {\n    const cb = t.createCommandBuffer();\n\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb, cb]);\n    }, true);\n  });\n\ng.test('command_buffer,submit_invalidates')\n  .desc(\n    `\n    Tests that calling submit invalidates the command buffers passed to it:\n    `\n  )\n  .fn(t => {\n    const cb = t.createCommandBuffer();\n\n    // Initial submit of a valid command buffer should pass.\n    t.device.queue.submit([cb]);\n\n    // Subsequent submits of the same command buffer should fail.\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb]);\n    });\n  });\n\ng.test('command_buffer,invalid_submit_invalidates')\n  .desc(\n    `\n    Tests that calling submit invalidates all command buffers passed to it, even\n    if they're part of an invalid submit.\n    `\n  )\n  .fn(t => {\n    const cb1 = t.createCommandBuffer();\n    const cb1_invalid = t.createCommandBuffer({ valid: false });\n\n    // Submit should fail because on of the command buffers is invalid\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb1, cb1_invalid]);\n    });\n\n    // Subsequent submits of the previously valid command buffer should fail.\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb1]);\n    });\n\n    // The order of the invalid and valid command buffers in the submit array should not matter.\n    const cb2 = t.createCommandBuffer();\n    const cb2_invalid = t.createCommandBuffer({ valid: false });\n\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb2_invalid, cb2]);\n    });\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb2]);\n    });\n  });\n"],"mappings":"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"}