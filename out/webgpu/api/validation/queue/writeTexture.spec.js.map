{"version":3,"file":"writeTexture.spec.js","names":["description","makeTestGroup","GPUConst","kResourceStates","AllFeaturesMaxLimitsValidationTest","g","test","desc","params","u","combine","fn","t","textureState","texture","createTextureWithState","data","Uint8Array","size","isValid","expectValidationError","device","queue","writeTexture","paramsSubcasesOnly","usage","TextureUsage","COPY_DST","STORAGE_BINDING","COPY_SRC","createTextureTracked","width","height","format","sampleCount","GPUTextureUsage","RENDER_ATTACHMENT","beforeAllSubcases","usesMismatchedDevice","mismatched","sourceDevice","mismatchedDevice","trackForCleanup","createTexture"],"sources":["../../../../../src/webgpu/api/validation/queue/writeTexture.spec.ts"],"sourcesContent":["export const description = `Tests writeTexture validation.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { AllFeaturesMaxLimitsValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsValidationTest);\n\ng.test('texture_state')\n  .desc(\n    `\n  Test that the texture used for GPUQueue.writeTexture() must be valid. Tests calling writeTexture\n  with {valid, invalid, destroyed} texture.\n  `\n  )\n  .params(u => u.combine('textureState', kResourceStates))\n  .fn(t => {\n    const { textureState } = t.params;\n    const texture = t.createTextureWithState(textureState);\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    const isValid = textureState === 'valid';\n\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, !isValid);\n  });\n\ng.test('usages')\n  .desc(\n    `\n  Tests calling writeTexture with the texture missed COPY_DST usage.\n    - texture {with, without} COPY DST usage\n  `\n  )\n  .paramsSubcasesOnly([\n    { usage: GPUConst.TextureUsage.COPY_DST }, // control case\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.COPY_SRC },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.COPY_DST },\n  ])\n  .fn(t => {\n    const { usage } = t.params;\n    const texture = t.createTextureTracked({\n      size: { width: 16, height: 16 },\n      usage,\n      format: 'rgba8unorm' as const,\n    });\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    const isValid = usage & GPUConst.TextureUsage.COPY_DST ? true : false;\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, !isValid);\n  });\n\ng.test('sample_count')\n  .desc(\n    `\n  Test that the texture sample count. Check that a validation error is generated if sample count is\n  not 1.\n  `\n  )\n  .params(u => u.combine('sampleCount', [1, 4]))\n  .fn(t => {\n    const { sampleCount } = t.params;\n    const texture = t.createTextureTracked({\n      size: { width: 16, height: 16 },\n      sampleCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    const isValid = sampleCount === 1;\n\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, !isValid);\n  });\n\ng.test('texture,device_mismatch')\n  .desc('Tests writeTexture cannot be called with a texture created from another device.')\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => t.usesMismatchedDevice())\n  .fn(t => {\n    const { mismatched } = t.params;\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const texture = t.trackForCleanup(\n      sourceDevice.createTexture({\n        size: { width: 16, height: 16 },\n        format: 'bgra8unorm',\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n\n    const data = new Uint8Array(16);\n    const size = [1, 1];\n\n    t.expectValidationError(() => {\n      t.device.queue.writeTexture({ texture }, data, {}, size);\n    }, mismatched);\n  });\n"],"mappings":"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"}