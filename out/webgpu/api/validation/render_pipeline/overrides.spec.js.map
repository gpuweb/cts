{"version":3,"file":"overrides.spec.js","names":["description","makeTestGroup","kValue","CreateRenderPipelineValidationTest","g","test","desc","params","u","combine","combineWithParams","vertexConstants","_success","x","y","xxx","z","w","数","séquençage","fn","t","isAsync","doCreateRenderPipelineTest","layout","vertex","module","device","createShaderModule","code","entryPoint","constants","fragment","targets","format","fragmentConstants","r","b","a","séquençage","descriptor","getDescriptor","fragmentShaderCode","cf","NaN","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","cu","u32","min","max","ci","i32","negative","positive","f32","first_non_castable_pipeline_override","cb","MAX_VALUE","cf16","f16","skipIfDeviceDoesNotHaveFeature"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/overrides.spec.ts"],"sourcesContent":["export const description = `\nThis test dedicatedly tests validation of pipeline overridable constants of createRenderPipeline.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kValue } from '../../../util/constants.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\ng.test('identifier,vertex')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for overridable constants identifiers in vertex state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: {}, _success: true },\n        { vertexConstants: { x: 1, y: 1 }, _success: true },\n        { vertexConstants: { x: 1, y: 1, 1: 1, 1000: 1 }, _success: true },\n        { vertexConstants: { 'x\\0': 1, y: 1 }, _success: false },\n        { vertexConstants: { xxx: 1 }, _success: false },\n        { vertexConstants: { 1: 1 }, _success: true },\n        { vertexConstants: { 2: 1 }, _success: false },\n        { vertexConstants: { z: 1 }, _success: false }, // pipeline constant id is specified for z\n        { vertexConstants: { w: 1 }, _success: false }, // pipeline constant id is specified for w\n        { vertexConstants: { 1: 1, z: 1 }, _success: false }, // pipeline constant id is specified for z\n        { vertexConstants: { 数: 1 }, _success: true }, // test non-ASCII\n        { vertexConstants: { séquençage: 0 }, _success: false }, // test unicode normalization\n      ] as { vertexConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(isAsync, _success, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            override x: f32 = 0.0;\n            override y: f32 = 0.0;\n            override 数: f32 = 0.0;\n            override séquençage: f32 = 0.0;\n            @id(1) override z: f32 = 0.0;\n            @id(1000) override w: f32 = 1.0;\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(x, y, z, w + 数 + séquençage);\n            }`,\n        }),\n        entryPoint: 'main',\n        constants: vertexConstants,\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n\ng.test('identifier,fragment')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for overridable constants identifiers in fragment state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: {}, _success: true },\n        { fragmentConstants: { r: 1, g: 1 }, _success: true },\n        { fragmentConstants: { r: 1, g: 1, 1: 1, 1000: 1 }, _success: true },\n        { fragmentConstants: { 'r\\0': 1 }, _success: false },\n        { fragmentConstants: { xxx: 1 }, _success: false },\n        { fragmentConstants: { 1: 1 }, _success: true },\n        { fragmentConstants: { 2: 1 }, _success: false },\n        { fragmentConstants: { b: 1 }, _success: false }, // pipeline constant id is specified for b\n        { fragmentConstants: { a: 1 }, _success: false }, // pipeline constant id is specified for a\n        { fragmentConstants: { 1: 1, b: 1 }, _success: false }, // pipeline constant id is specified for b\n        { fragmentConstants: { 数: 1 }, _success: true }, // test non-ASCII\n        { fragmentConstants: { séquençage: 0 }, _success: false }, // test unicode is not normalized\n      ] as { fragmentConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        override r: f32 = 0.0;\n        override g: f32 = 0.0;\n        override 数: f32 = 0.0;\n        override sequencage: f32 = 0.0;\n        @id(1) override b: f32 = 0.0;\n        @id(1000) override a: f32 = 0.0;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            return vec4<f32>(r, g, b, a + 数 + sequencage);\n        }`,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('uninitialized,vertex')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for uninitialized overridable constants in vertex state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: {}, _success: false },\n        { vertexConstants: { x: 1, y: 1 }, _success: false }, // z is missing\n        { vertexConstants: { x: 1, z: 1 }, _success: true },\n        { vertexConstants: { x: 1, y: 1, z: 1, w: 1 }, _success: true },\n      ] as { vertexConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(isAsync, _success, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            override x: f32;\n            override y: f32 = 0.0;\n            override z: f32;\n            override w: f32 = 1.0;\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(x, y, z, w);\n            }`,\n        }),\n        entryPoint: 'main',\n        constants: vertexConstants,\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n\ng.test('uninitialized,fragment')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for uninitialized overridable constants in fragment state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: {}, _success: false },\n        { fragmentConstants: { r: 1, g: 1 }, _success: false }, // b is missing\n        { fragmentConstants: { r: 1, b: 1 }, _success: true },\n        { fragmentConstants: { r: 1, g: 1, b: 1, a: 1 }, _success: true },\n      ] as { fragmentConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        override r: f32;\n        override g: f32 = 0.0;\n        override b: f32;\n        override a: f32 = 0.0;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            return vec4<f32>(r, g, b, a);\n        }\n          `,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('value,type_error,vertex')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for invalid constant values like inf, NaN will results in TypeError.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: { cf: 1 }, _success: true }, // control\n        { vertexConstants: { cf: NaN }, _success: false },\n        { vertexConstants: { cf: Number.POSITIVE_INFINITY }, _success: false },\n        { vertexConstants: { cf: Number.NEGATIVE_INFINITY }, _success: false },\n      ] as { vertexConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      _success,\n      {\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n            override cf: f32 = 0.0;\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              _ = cf;\n              return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }`,\n          }),\n          entryPoint: 'main',\n          constants: vertexConstants,\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: 'rgba8unorm' }],\n        },\n      },\n      'TypeError'\n    );\n  });\n\ng.test('value,type_error,fragment')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for invalid constant values like inf, NaN will results in TypeError.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: { cf: 1 }, _success: true }, // control\n        { fragmentConstants: { cf: NaN }, _success: false },\n        { fragmentConstants: { cf: Number.POSITIVE_INFINITY }, _success: false },\n        { fragmentConstants: { cf: Number.NEGATIVE_INFINITY }, _success: false },\n      ] as const)\n  )\n  .fn(t => {\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        override cf: f32 = 0.0;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            _ = cf;\n            return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n        }\n          `,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor, 'TypeError');\n  });\n\ng.test('value,validation_error,vertex')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for unrepresentable constant values in vertex stage.\n\nTODO(#2060): test with last_f64_castable.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: { cu: kValue.u32.min }, _success: true },\n        { vertexConstants: { cu: kValue.u32.min - 1 }, _success: false },\n        { vertexConstants: { cu: kValue.u32.max }, _success: true },\n        { vertexConstants: { cu: kValue.u32.max + 1 }, _success: false },\n        { vertexConstants: { ci: kValue.i32.negative.min }, _success: true },\n        { vertexConstants: { ci: kValue.i32.negative.min - 1 }, _success: false },\n        { vertexConstants: { ci: kValue.i32.positive.max }, _success: true },\n        { vertexConstants: { ci: kValue.i32.positive.max + 1 }, _success: false },\n        { vertexConstants: { cf: kValue.f32.negative.min }, _success: true },\n        {\n          vertexConstants: { cf: kValue.f32.negative.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        { vertexConstants: { cf: kValue.f32.positive.max }, _success: true },\n        {\n          vertexConstants: { cf: kValue.f32.positive.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        // Conversion to boolean can't fail\n        { vertexConstants: { cb: Number.MAX_VALUE }, _success: true },\n        { vertexConstants: { cb: kValue.i32.negative.min - 1 }, _success: true },\n      ] as { vertexConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(isAsync, _success, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          override cb: bool = false;\n          override cu: u32 = 0u;\n          override ci: i32 = 0;\n          override cf: f32 = 0.0;\n          @vertex fn main() -> @builtin(position) vec4<f32> {\n            _ = cb;\n            _ = cu;\n            _ = ci;\n            _ = cf;\n            return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        constants: vertexConstants,\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n\ng.test('value,validation_error,fragment')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for unrepresentable constant values in fragment stage.\n\nTODO(#2060): test with last_f64_castable.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: { cu: kValue.u32.min }, _success: true },\n        { fragmentConstants: { cu: kValue.u32.min - 1 }, _success: false },\n        { fragmentConstants: { cu: kValue.u32.max }, _success: true },\n        { fragmentConstants: { cu: kValue.u32.max + 1 }, _success: false },\n        { fragmentConstants: { ci: kValue.i32.negative.min }, _success: true },\n        { fragmentConstants: { ci: kValue.i32.negative.min - 1 }, _success: false },\n        { fragmentConstants: { ci: kValue.i32.positive.max }, _success: true },\n        { fragmentConstants: { ci: kValue.i32.positive.max + 1 }, _success: false },\n        { fragmentConstants: { cf: kValue.f32.negative.min }, _success: true },\n        {\n          fragmentConstants: { cf: kValue.f32.negative.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        { fragmentConstants: { cf: kValue.f32.positive.max }, _success: true },\n        {\n          fragmentConstants: { cf: kValue.f32.positive.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        // Conversion to boolean can't fail\n        { fragmentConstants: { cb: Number.MAX_VALUE }, _success: true },\n        { fragmentConstants: { cb: kValue.i32.negative.min - 1 }, _success: true },\n      ] as { fragmentConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(t => {\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        override cb: bool = false;\n        override cu: u32 = 0u;\n        override ci: i32 = 0;\n        override cf: f32 = 0.0;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            _ = cb;\n            _ = cu;\n            _ = ci;\n            _ = cf;\n            return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n        }\n          `,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('value,validation_error,f16,vertex')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for unrepresentable f16 constant values in vertex stage.\n\nTODO(#2060): Tighten the cases around the valid/invalid boundary once we have WGSL spec\nclarity on whether values like f16.positive.last_f64_castable would be valid. See issue.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: { cf16: kValue.f16.negative.min }, _success: true },\n        {\n          vertexConstants: { cf16: kValue.f16.negative.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        { vertexConstants: { cf16: kValue.f16.positive.max }, _success: true },\n        {\n          vertexConstants: { cf16: kValue.f16.positive.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        { vertexConstants: { cf16: kValue.f32.negative.min }, _success: false },\n        { vertexConstants: { cf16: kValue.f32.positive.max }, _success: false },\n        {\n          vertexConstants: { cf16: kValue.f32.negative.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        {\n          vertexConstants: { cf16: kValue.f32.positive.first_non_castable_pipeline_override },\n          _success: false,\n        },\n      ] as const)\n  )\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(isAsync, _success, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          enable f16;\n\n          override cf16: f16 = 0.0h;\n          @vertex fn main() -> @builtin(position) vec4<f32> {\n            _ = cf16;\n            return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        constants: vertexConstants,\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n\ng.test('value,validation_error,f16,fragment')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) validation for unrepresentable f16 constant values in fragment stage.\n\nTODO(#2060): Tighten the cases around the valid/invalid boundary once we have WGSL spec\nclarity on whether values like f16.positive.last_f64_castable would be valid. See issue.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: { cf16: kValue.f16.negative.min }, _success: true },\n        {\n          fragmentConstants: { cf16: kValue.f16.negative.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        { fragmentConstants: { cf16: kValue.f16.positive.max }, _success: true },\n        {\n          fragmentConstants: { cf16: kValue.f16.positive.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        { fragmentConstants: { cf16: kValue.f32.negative.min }, _success: false },\n        { fragmentConstants: { cf16: kValue.f32.positive.max }, _success: false },\n        {\n          fragmentConstants: { cf16: kValue.f32.negative.first_non_castable_pipeline_override },\n          _success: false,\n        },\n        {\n          fragmentConstants: { cf16: kValue.f32.positive.first_non_castable_pipeline_override },\n          _success: false,\n        },\n      ] as const)\n  )\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('shader-f16');\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        enable f16;\n\n        override cf16: f16 = 0.0h;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            _ = cf16;\n            return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n        }\n          `,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"mappings":"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"}