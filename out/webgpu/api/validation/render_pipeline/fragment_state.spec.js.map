{"version":3,"file":"fragment_state.spec.js","names":["description","makeTestGroup","assert","range","getDefaultLimits","IsDualSourceBlendingFactor","kBlendFactors","kBlendOperations","GPUConst","kAllTextureFormats","computeBytesPerSampleFromFormats","kColorTextureFormats","isTextureFormatColorRenderable","isTextureFormatBlendable","getTextureFormatColorType","isColorTextureFormat","kPossibleColorRenderableTextureFormats","getColorRenderByteCost","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultFragmentShaderCode","kDefaultVertexShaderCode","kTexelRepresentationInfo","CreateRenderPipelineValidationTest","kMaxColorAttachments","maxColorAttachments","default","g","values","test","desc","params","u","combine","fn","t","isAsync","goodDescriptor","getDescriptor","targets","format","doCreateRenderPipelineTest","badDescriptor","filter","beginSubcases","fragOutType","skipIfTextureFormatNotSupported","fragmentShaderCode","plainType","componentCount","success","vertex","module","device","createShaderModule","code","entryPoint","fragment","layout","descriptor","mult","add","targetsLengthVariant","targetsLength","makeLimitVariant","_i","writeMask","depthStencil","depthWriteEnabled","depthCompare","limits","i","attachmentCount","skipIf","shouldError","maxColorAttachmentBytesPerSample","combineWithParams","formats","length","map","f","hasBlend","skipIfTextureFormatNotUsableAsRenderAttachment","blend","color","alpha","undefined","supportsBlend","component","srcFactor","dstFactor","operation","skipIfDeviceDoesNotHaveFeature","defaultBlendComponent","blendComponentToTest","useDualSourceBlending","_success","expand","p","shaderOutput","scalar","count","componentOrder","sampleType","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement","kDualSourceBlendingFactors","blendFactor","colorTargetsCount","maskOutNonZeroIndexColorTargets","testBlendComponent","colorTargetStates","Array","ColorWrite","ALL","useBlendSrc1"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/fragment_state.spec.ts"],"sourcesContent":["export const description = `\nThis test dedicatedly tests validation of GPUFragmentState of createRenderPipeline.\n\nTODO(#3363): Make this into a MaxLimitTest and increase kMaxColorAttachments.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, range } from '../../../../common/util/util.js';\nimport {\n  getDefaultLimits,\n  IsDualSourceBlendingFactor,\n  kBlendFactors,\n  kBlendOperations,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kAllTextureFormats,\n  computeBytesPerSampleFromFormats,\n  kColorTextureFormats,\n  isTextureFormatColorRenderable,\n  isTextureFormatBlendable,\n  getTextureFormatColorType,\n  isColorTextureFormat,\n  kPossibleColorRenderableTextureFormats,\n  getColorRenderByteCost,\n} from '../../../format_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultFragmentShaderCode,\n  kDefaultVertexShaderCode,\n} from '../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nimport { ColorTargetState, CreateRenderPipelineValidationTest } from './common.js';\n\n// MAINTENANCE_TODO: This should be changed to kMaxColorAttachmentsToTest\n// when this is made a MaxLimitTest (see above).\nconst kMaxColorAttachments = getDefaultLimits('core').maxColorAttachments.default;\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('color_target_exists')\n  .desc(`Tests creating a complete render pipeline requires at least one color target state.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('targets_format_is_color_format')\n  .desc(\n    `Tests that color target state format must be a color format, regardless of how the\n    fragment shader writes to it.`\n  )\n  .params(u =>\n    u\n      // Test all non-color texture formats, plus 'rgba8unorm' as a control case.\n      .combine('format', kAllTextureFormats)\n      .filter(({ format }) => {\n        return format === 'rgba8unorm' || !isColorTextureFormat(format);\n      })\n      .combine('isAsync', [false, true])\n      .beginSubcases()\n      .combine('fragOutType', ['f32', 'u32', 'i32'] as const)\n  )\n  .fn(t => {\n    const { isAsync, format, fragOutType } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const fragmentShaderCode = getFragmentShaderCodeWithOutput([\n      { values, plainType: fragOutType, componentCount: 4 },\n    ]);\n\n    const success = format === 'rgba8unorm' && fragOutType === 'f32';\n    t.doCreateRenderPipelineTest(isAsync, success, {\n      vertex: {\n        module: t.device.createShaderModule({ code: kDefaultVertexShaderCode }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({ code: fragmentShaderCode }),\n        entryPoint: 'main',\n        targets: [{ format }],\n      },\n      layout: 'auto',\n    });\n  });\n\ng.test('targets_format_renderable')\n  .desc(\n    `Tests that color target state format must have RENDER_ATTACHMENT capability\n    (tests only color formats).`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [false, true])\n      .combine('format', kColorTextureFormats)\n  )\n  .fn(t => {\n    const { isAsync, format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      isTextureFormatColorRenderable(t.device, format),\n      descriptor\n    );\n  });\n\ng.test('limits,maxColorAttachments')\n  .desc(\n    `Tests that color state targets length must not be larger than device.limits.maxColorAttachments.`\n  )\n  .params(u =>\n    u.combine('isAsync', [false, true]).combine('targetsLengthVariant', [\n      { mult: 1, add: 0 },\n      { mult: 1, add: 1 },\n    ])\n  )\n  .fn(t => {\n    const { isAsync, targetsLengthVariant } = t.params;\n    const targetsLength = t.makeLimitVariant('maxColorAttachments', targetsLengthVariant);\n\n    const descriptor = t.getDescriptor({\n      targets: range(targetsLength, _i => {\n        return { format: 'rg8unorm', writeMask: 0 };\n      }),\n      fragmentShaderCode: kDefaultFragmentShaderCode,\n      // add a depth stencil so that we can set writeMask to 0 for all color attachments\n      depthStencil: {\n        format: 'depth24plus',\n        depthWriteEnabled: true,\n        depthCompare: 'always',\n      },\n    });\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      targetsLength <= t.device.limits.maxColorAttachments,\n      descriptor\n    );\n  });\n\ng.test('limits,maxColorAttachmentBytesPerSample,aligned')\n  .desc(\n    `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using the same format for multiple attachments.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kPossibleColorRenderableTextureFormats)\n      .beginSubcases()\n      .combine(\n        'attachmentCount',\n        range(kMaxColorAttachments, i => i + 1)\n      )\n      .combine('isAsync', [false, true])\n  )\n  .fn(t => {\n    const { format, attachmentCount, isAsync } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    t.skipIf(\n      attachmentCount > t.device.limits.maxColorAttachments,\n      `attachmentCount: ${attachmentCount} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const descriptor = t.getDescriptor({\n      targets: range(attachmentCount, () => {\n        return { format, writeMask: 0 };\n      }),\n    });\n    const shouldError =\n      !isTextureFormatColorRenderable(t.device, format) ||\n      getColorRenderByteCost(format) * attachmentCount >\n        t.device.limits.maxColorAttachmentBytesPerSample;\n\n    t.doCreateRenderPipelineTest(isAsync, !shouldError, descriptor);\n  });\n\ng.test('limits,maxColorAttachmentBytesPerSample,unaligned')\n  .desc(\n    `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using various sets of (potentially) unaligned formats.\n  `\n  )\n  .params(u =>\n    u\n      .combineWithParams([\n        // Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n        // 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n        // become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n        // is allowed: 4+8+16+1+1 < 32.\n        {\n          formats: ['r8unorm', 'r32float', 'rgba8unorm', 'rgba32float', 'r8unorm'],\n        },\n        {\n          formats: ['r32float', 'rgba8unorm', 'rgba32float', 'r8unorm', 'r8unorm'],\n        },\n      ] as const)\n      .beginSubcases()\n      .combine('isAsync', [false, true])\n  )\n  .fn(t => {\n    const { formats, isAsync } = t.params;\n\n    t.skipIf(\n      formats.length > t.device.limits.maxColorAttachments,\n      `numColorAttachments: ${formats.length} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const success =\n      computeBytesPerSampleFromFormats(formats) <= t.device.limits.maxColorAttachmentBytesPerSample;\n\n    const descriptor = t.getDescriptor({\n      targets: formats.map(f => {\n        return { format: f, writeMask: 0 };\n      }),\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('targets_format_filterable')\n  .desc(\n    `\n  Tests that color target state format must be filterable if blend is not undefined.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kPossibleColorRenderableTextureFormats)\n      .beginSubcases()\n      .combine('hasBlend', [false, true])\n  )\n  .fn(t => {\n    const { isAsync, format, hasBlend } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: hasBlend ? { color: {}, alpha: {} } : undefined,\n        },\n      ],\n    });\n\n    const supportsBlend = isTextureFormatBlendable(t.device, format);\n    t.doCreateRenderPipelineTest(isAsync, !hasBlend || supportsBlend, descriptor);\n  });\n\ng.test('targets_blend')\n  .desc(\n    `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('component', ['color', 'alpha'] as const)\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .beginSubcases()\n      .combine('operation', kBlendOperations)\n  )\n  .fn(t => {\n    const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n    if (IsDualSourceBlendingFactor(srcFactor) || IsDualSourceBlendingFactor(dstFactor)) {\n      t.skipIfDeviceDoesNotHaveFeature('dual-source-blending');\n    }\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const blendComponentToTest: GPUBlendComponent = {\n      srcFactor,\n      dstFactor,\n      operation,\n    };\n    const format = 'rgba8unorm';\n    const useDualSourceBlending =\n      IsDualSourceBlendingFactor(srcFactor) || IsDualSourceBlendingFactor(dstFactor);\n    const fragmentShaderCode = getFragmentShaderCodeWithOutput(\n      [{ values, plainType: 'f32', componentCount: 4 }],\n      null,\n      useDualSourceBlending\n    );\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n            alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent,\n          },\n        },\n      ],\n      fragmentShaderCode,\n    });\n\n    if (operation === 'min' || operation === 'max') {\n      const _success = srcFactor === 'one' && dstFactor === 'one';\n      t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n    } else {\n      t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n    }\n  });\n\ng.test('targets_write_mask')\n  .desc(`Tests that color target state write mask must be < 16.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('writeMask', [0, 0xf, 0x10, 0x80000001]))\n  .fn(t => {\n    const { isAsync, writeMask } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          writeMask,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, writeMask < 16, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', [undefined, ...kPossibleColorRenderableTextureFormats] as const)\n      .beginSubcases()\n      .combine('shaderOutput', [\n        undefined,\n        ...u.combine('scalar', ['f32', 'u32', 'i32'] as const).combine('count', [1, 2, 3, 4]),\n      ])\n      // We only care about testing writeMask if there is an attachment but no shader output.\n      .expand('writeMask', p =>\n        p.format !== undefined && p.shaderOutput !== undefined ? [0, 0x1, 0x2, 0x4, 0x8] : [0xf]\n      )\n  )\n  .fn(t => {\n    const { isAsync, format, writeMask, shaderOutput } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n\n    const descriptor = t.getDescriptor({\n      targets: format ? [{ format, writeMask }] : [],\n      // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n      depthStencil: { format: 'depth24plus', depthWriteEnabled: false, depthCompare: 'always' },\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        shaderOutput\n          ? [{ values, plainType: shaderOutput.scalar, componentCount: shaderOutput.count }]\n          : []\n      ),\n    });\n\n    let success = true;\n    if (format) {\n      // There is a color target\n      if (shaderOutput) {\n        // The shader outputs to the color target\n        success =\n          shaderOutput.scalar === getPlainTypeInfo(getTextureFormatColorType(format)) &&\n          shaderOutput.count >= kTexelRepresentationInfo[format].componentOrder.length;\n      } else {\n        // The shader does not output to the color target\n        success = writeMask === 0;\n      }\n    }\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel\n    is read indicated by any color blend factor, an extra requirement is added:\n      - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n      // The default srcFactor and dstFactor are 'one' and 'zero'. Override just one at a time.\n      .combineWithParams([\n        ...u.combine('colorSrcFactor', kBlendFactors),\n        ...u.combine('colorDstFactor', kBlendFactors),\n        ...u.combine('alphaSrcFactor', kBlendFactors),\n        ...u.combine('alphaDstFactor', kBlendFactors),\n      ] as const)\n  )\n  .fn(t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const useDualSourceBlending =\n      IsDualSourceBlendingFactor(colorSrcFactor) ||\n      IsDualSourceBlendingFactor(colorDstFactor) ||\n      IsDualSourceBlendingFactor(alphaSrcFactor) ||\n      IsDualSourceBlendingFactor(alphaDstFactor);\n    if (useDualSourceBlending) {\n      t.skipIfDeviceDoesNotHaveFeature('dual-source-blending');\n    }\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: { srcFactor: colorSrcFactor, dstFactor: colorDstFactor },\n            alpha: { srcFactor: alphaSrcFactor, dstFactor: alphaDstFactor },\n          },\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        [{ values, plainType: getPlainTypeInfo(sampleType), componentCount }],\n        null,\n        useDualSourceBlending\n      ),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor?.includes('src-alpha') ||\n      colorDstFactor?.includes('src-alpha') ||\n      colorSrcFactor?.includes('src1-alpha') ||\n      colorDstFactor?.includes('src1-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      getTextureFormatColorType(format) === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\nconst kDualSourceBlendingFactors: GPUBlendFactor[] = [\n  'src1',\n  'one-minus-src1',\n  'src1-alpha',\n  'one-minus-src1-alpha',\n];\n\ng.test('dual_source_blending,color_target_count')\n  .desc(\n    `Test that when the blend factor of color attachment 0 uses src1 (the second input of the\n   corresponding blending unit), there must be exactly one color target.\n`\n  )\n  .params(u =>\n    u\n      .combine('blendFactor', kDualSourceBlendingFactors)\n      .combine('colorTargetsCount', [1, 2] as const)\n      .combine('maskOutNonZeroIndexColorTargets', [true, false] as const)\n      .beginSubcases()\n      .combine('component', ['color', 'alpha'] as const)\n  )\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('dual-source-blending');\n    const { blendFactor, colorTargetsCount, maskOutNonZeroIndexColorTargets, component } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const testBlendComponent: GPUBlendComponent = {\n      srcFactor: blendFactor,\n      dstFactor: blendFactor,\n      operation: 'add',\n    };\n\n    assert(colorTargetsCount >= 1);\n    const colorTargetStates = new Array<ColorTargetState>(colorTargetsCount);\n    colorTargetStates[0] = {\n      format: 'rgba8unorm',\n      blend: {\n        color: component === 'color' ? testBlendComponent : defaultBlendComponent,\n        alpha: component === 'alpha' ? testBlendComponent : defaultBlendComponent,\n      },\n    };\n\n    for (let i = 1; i < colorTargetsCount; ++i) {\n      colorTargetStates[i] = {\n        format: 'rgba8unorm',\n        blend: {\n          color: defaultBlendComponent,\n          alpha: defaultBlendComponent,\n        },\n        writeMask: maskOutNonZeroIndexColorTargets ? 0 : GPUConst.ColorWrite.ALL,\n      };\n    }\n\n    const descriptor = t.getDescriptor({\n      targets: colorTargetStates,\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        [{ values, plainType: 'f32', componentCount: 4 }],\n        null,\n        true\n      ),\n    });\n\n    const isAsync = false;\n    const _success = colorTargetsCount === 1;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('dual_source_blending,use_blend_src')\n  .desc(\n    `Test that when the blend factor of color attachment 0 uses src1, dual source blending must be\n    used in the fragment shader, whether the corresponding color write mask is 0 or not. In\n    contrast, when dual source blending is used in the fragment shader, we don't require blend\n    factor must use src1 (the second input of the corresponding blending unit).\n`\n  )\n  .params(u =>\n    u\n      .combine('blendFactor', kBlendFactors)\n      .combine('useBlendSrc1', [true, false] as const)\n      .combine('writeMask', [0, GPUConst.ColorWrite.ALL] as const)\n      .beginSubcases()\n      .combine('component', ['color', 'alpha'] as const)\n  )\n  .fn(t => {\n    t.skipIfDeviceDoesNotHaveFeature('dual-source-blending');\n    const { blendFactor, useBlendSrc1, writeMask, component } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const testBlendComponent: GPUBlendComponent = {\n      srcFactor: blendFactor,\n      dstFactor: blendFactor,\n      operation: 'add',\n    };\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          blend: {\n            color: component === 'color' ? testBlendComponent : defaultBlendComponent,\n            alpha: component === 'alpha' ? testBlendComponent : defaultBlendComponent,\n          },\n          writeMask,\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        [{ values, plainType: 'f32', componentCount: 4 }],\n        null,\n        useBlendSrc1\n      ),\n    });\n\n    const _success = !IsDualSourceBlendingFactor(blendFactor) || useBlendSrc1;\n    const isAsync = false;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"mappings":"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"}