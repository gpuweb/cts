{"version":3,"file":"fragment_state.spec.js","names":["description","makeTestGroup","assert","range","getDefaultLimits","IsDualSourceBlendingFactor","kBlendFactors","kBlendOperations","GPUConst","kAllTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","computeBytesPerSampleFromFormats","kColorTextureFormats","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultFragmentShaderCode","kDefaultVertexShaderCode","kTexelRepresentationInfo","CreateRenderPipelineValidationTest","kMaxColorAttachments","maxColorAttachments","default","g","values","test","desc","params","u","combine","fn","t","isAsync","goodDescriptor","getDescriptor","targets","format","doCreateRenderPipelineTest","badDescriptor","filter","color","beginSubcases","beforeAllSubcases","info","skipIfTextureFormatNotSupported","selectDeviceOrSkipTestCase","feature","fragOutType","fragmentShaderCode","plainType","componentCount","success","vertex","module","device","createShaderModule","code","entryPoint","fragment","layout","descriptor","colorRender","mult","add","targetsLengthVariant","targetsLength","makeLimitVariant","_i","writeMask","depthStencil","depthWriteEnabled","depthCompare","limits","i","attachmentCount","skipIf","shouldError","undefined","byteCost","maxColorAttachmentBytesPerSample","combineWithParams","formats","length","map","f","hasBlend","blend","alpha","supportsBlend","srcFactor","dstFactor","component","operation","defaultBlendComponent","blendComponentToTest","useDualSourceBlending","_success","expand","p","shaderOutput","selectDeviceForTextureFormatOrSkipTestCase","scalar","count","type","componentOrder","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","requiredFeatures","push","sampleType","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement","kDualSourceBlendingFactors","blendFactor","colorTargetsCount","maskOutNonZeroIndexColorTargets","testBlendComponent","colorTargetStates","Array","ColorWrite","ALL","useBlendSrc1"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/fragment_state.spec.ts"],"sourcesContent":["export const description = `\nThis test dedicatedly tests validation of GPUFragmentState of createRenderPipeline.\n\nTODO(#3363): Make this into a MaxLimitTest and increase kMaxColorAttachments.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, range } from '../../../../common/util/util.js';\nimport {\n  getDefaultLimits,\n  IsDualSourceBlendingFactor,\n  kBlendFactors,\n  kBlendOperations,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kAllTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  computeBytesPerSampleFromFormats,\n  kColorTextureFormats,\n} from '../../../format_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultFragmentShaderCode,\n  kDefaultVertexShaderCode,\n} from '../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nimport { ColorTargetState, CreateRenderPipelineValidationTest } from './common.js';\n\n// MAINTENANCE_TODO: This should be changed to kMaxColorAttachmentsToTest\n// when this is made a MaxLimitTest (see above).\nconst kMaxColorAttachments = getDefaultLimits('core').maxColorAttachments.default;\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('color_target_exists')\n  .desc(`Tests creating a complete render pipeline requires at least one color target state.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('targets_format_is_color_format')\n  .desc(\n    `Tests that color target state format must be a color format, regardless of how the\n    fragment shader writes to it.`\n  )\n  .params(u =>\n    u\n      // Test all non-color texture formats, plus 'rgba8unorm' as a control case.\n      .combine('format', kAllTextureFormats)\n      .filter(({ format }) => {\n        return format === 'rgba8unorm' || !kTextureFormatInfo[format].color;\n      })\n      .combine('isAsync', [false, true])\n      .beginSubcases()\n      .combine('fragOutType', ['f32', 'u32', 'i32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { isAsync, format, fragOutType } = t.params;\n\n    const fragmentShaderCode = getFragmentShaderCodeWithOutput([\n      { values, plainType: fragOutType, componentCount: 4 },\n    ]);\n\n    const success = format === 'rgba8unorm' && fragOutType === 'f32';\n    t.doCreateRenderPipelineTest(isAsync, success, {\n      vertex: {\n        module: t.device.createShaderModule({ code: kDefaultVertexShaderCode }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({ code: fragmentShaderCode }),\n        entryPoint: 'main',\n        targets: [{ format }],\n      },\n      layout: 'auto',\n    });\n  });\n\ng.test('targets_format_renderable')\n  .desc(\n    `Tests that color target state format must have RENDER_ATTACHMENT capability\n    (tests only color formats).`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [false, true])\n      .combine('format', kColorTextureFormats)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, !!info.colorRender, descriptor);\n  });\n\ng.test('limits,maxColorAttachments')\n  .desc(\n    `Tests that color state targets length must not be larger than device.limits.maxColorAttachments.`\n  )\n  .params(u =>\n    u.combine('isAsync', [false, true]).combine('targetsLengthVariant', [\n      { mult: 1, add: 0 },\n      { mult: 1, add: 1 },\n    ])\n  )\n  .fn(t => {\n    const { isAsync, targetsLengthVariant } = t.params;\n    const targetsLength = t.makeLimitVariant('maxColorAttachments', targetsLengthVariant);\n\n    const descriptor = t.getDescriptor({\n      targets: range(targetsLength, _i => {\n        return { format: 'rg8unorm', writeMask: 0 };\n      }),\n      fragmentShaderCode: kDefaultFragmentShaderCode,\n      // add a depth stencil so that we can set writeMask to 0 for all color attachments\n      depthStencil: {\n        format: 'depth24plus',\n        depthWriteEnabled: true,\n        depthCompare: 'always',\n      },\n    });\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      targetsLength <= t.device.limits.maxColorAttachments,\n      descriptor\n    );\n  });\n\ng.test('limits,maxColorAttachmentBytesPerSample,aligned')\n  .desc(\n    `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using the same format for multiple attachments.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine(\n        'attachmentCount',\n        range(kMaxColorAttachments, i => i + 1)\n      )\n      .combine('isAsync', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n  })\n  .fn(t => {\n    const { format, attachmentCount, isAsync } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    t.skipIf(\n      attachmentCount > t.device.limits.maxColorAttachments,\n      `attachmentCount: ${attachmentCount} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const descriptor = t.getDescriptor({\n      targets: range(attachmentCount, () => {\n        return { format, writeMask: 0 };\n      }),\n    });\n    const shouldError =\n      info.colorRender === undefined ||\n      info.colorRender.byteCost * attachmentCount >\n        t.device.limits.maxColorAttachmentBytesPerSample;\n\n    t.doCreateRenderPipelineTest(isAsync, !shouldError, descriptor);\n  });\n\ng.test('limits,maxColorAttachmentBytesPerSample,unaligned')\n  .desc(\n    `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using various sets of (potentially) unaligned formats.\n  `\n  )\n  .params(u =>\n    u\n      .combineWithParams([\n        // Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n        // 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n        // become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n        // is allowed: 4+8+16+1+1 < 32.\n        {\n          formats: ['r8unorm', 'r32float', 'rgba8unorm', 'rgba32float', 'r8unorm'],\n        },\n        {\n          formats: ['r32float', 'rgba8unorm', 'rgba32float', 'r8unorm', 'r8unorm'],\n        },\n      ] as const)\n      .beginSubcases()\n      .combine('isAsync', [false, true])\n  )\n  .fn(t => {\n    const { formats, isAsync } = t.params;\n\n    t.skipIf(\n      formats.length > t.device.limits.maxColorAttachments,\n      `numColorAttachments: ${formats.length} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const success =\n      computeBytesPerSampleFromFormats(formats) <= t.device.limits.maxColorAttachmentBytesPerSample;\n\n    const descriptor = t.getDescriptor({\n      targets: formats.map(f => {\n        return { format: f, writeMask: 0 };\n      }),\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('targets_format_filterable')\n  .desc(\n    `\n  Tests that color target state format must be filterable if blend is not undefined.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('hasBlend', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { isAsync, format, hasBlend } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: hasBlend ? { color: {}, alpha: {} } : undefined,\n        },\n      ],\n    });\n\n    const supportsBlend = info.colorRender?.blend;\n    assert(supportsBlend !== undefined);\n    t.doCreateRenderPipelineTest(isAsync, !hasBlend || supportsBlend, descriptor);\n  });\n\ng.test('targets_blend')\n  .desc(\n    `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('component', ['color', 'alpha'] as const)\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .beginSubcases()\n      .combine('operation', kBlendOperations)\n  )\n  .beforeAllSubcases(t => {\n    const { srcFactor, dstFactor } = t.params;\n    if (IsDualSourceBlendingFactor(srcFactor) || IsDualSourceBlendingFactor(dstFactor)) {\n      t.selectDeviceOrSkipTestCase('dual-source-blending');\n    }\n  })\n  .fn(t => {\n    const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const blendComponentToTest: GPUBlendComponent = {\n      srcFactor,\n      dstFactor,\n      operation,\n    };\n    const format = 'rgba8unorm';\n    const useDualSourceBlending =\n      IsDualSourceBlendingFactor(srcFactor) || IsDualSourceBlendingFactor(dstFactor);\n    const fragmentShaderCode = getFragmentShaderCodeWithOutput(\n      [{ values, plainType: 'f32', componentCount: 4 }],\n      null,\n      useDualSourceBlending\n    );\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n            alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent,\n          },\n        },\n      ],\n      fragmentShaderCode,\n    });\n\n    if (operation === 'min' || operation === 'max') {\n      const _success = srcFactor === 'one' && dstFactor === 'one';\n      t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n    } else {\n      t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n    }\n  });\n\ng.test('targets_write_mask')\n  .desc(`Tests that color target state write mask must be < 16.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('writeMask', [0, 0xf, 0x10, 0x80000001]))\n  .fn(t => {\n    const { isAsync, writeMask } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          writeMask,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, writeMask < 16, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', [undefined, ...kRenderableColorTextureFormats] as const)\n      .beginSubcases()\n      .combine('shaderOutput', [\n        undefined,\n        ...u.combine('scalar', ['f32', 'u32', 'i32'] as const).combine('count', [1, 2, 3, 4]),\n      ])\n      // We only care about testing writeMask if there is an attachment but no shader output.\n      .expand('writeMask', p =>\n        p.format !== undefined && p.shaderOutput !== undefined ? [0, 0x1, 0x2, 0x4, 0x8] : [0xf]\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    const { isAsync, format, writeMask, shaderOutput } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: format ? [{ format, writeMask }] : [],\n      // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n      depthStencil: { format: 'depth24plus', depthWriteEnabled: false, depthCompare: 'always' },\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        shaderOutput\n          ? [{ values, plainType: shaderOutput.scalar, componentCount: shaderOutput.count }]\n          : []\n      ),\n    });\n\n    let success = true;\n    if (format) {\n      // There is a color target\n      if (shaderOutput) {\n        // The shader outputs to the color target\n        const info = kTextureFormatInfo[format];\n        success =\n          shaderOutput.scalar === getPlainTypeInfo(info.color.type) &&\n          shaderOutput.count >= kTexelRepresentationInfo[format].componentOrder.length;\n      } else {\n        // The shader does not output to the color target\n        success = writeMask === 0;\n      }\n    }\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel\n    is read indicated by any color blend factor, an extra requirement is added:\n      - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n      // The default srcFactor and dstFactor are 'one' and 'zero'. Override just one at a time.\n      .combineWithParams([\n        ...u.combine('colorSrcFactor', kBlendFactors),\n        ...u.combine('colorDstFactor', kBlendFactors),\n        ...u.combine('alphaSrcFactor', kBlendFactors),\n        ...u.combine('alphaDstFactor', kBlendFactors),\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format, colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor } = t.params;\n\n    const info = kTextureFormatInfo[format];\n    const requiredFeatures: (GPUFeatureName | undefined)[] = [info.feature];\n\n    if (\n      IsDualSourceBlendingFactor(colorSrcFactor) ||\n      IsDualSourceBlendingFactor(colorDstFactor) ||\n      IsDualSourceBlendingFactor(alphaSrcFactor) ||\n      IsDualSourceBlendingFactor(alphaDstFactor)\n    ) {\n      requiredFeatures.push('dual-source-blending');\n    }\n\n    t.selectDeviceOrSkipTestCase(requiredFeatures);\n  })\n  .fn(t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const useDualSourceBlending =\n      IsDualSourceBlendingFactor(colorSrcFactor) ||\n      IsDualSourceBlendingFactor(colorDstFactor) ||\n      IsDualSourceBlendingFactor(alphaSrcFactor) ||\n      IsDualSourceBlendingFactor(alphaDstFactor);\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: { srcFactor: colorSrcFactor, dstFactor: colorDstFactor },\n            alpha: { srcFactor: alphaSrcFactor, dstFactor: alphaDstFactor },\n          },\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        [{ values, plainType: getPlainTypeInfo(sampleType), componentCount }],\n        null,\n        useDualSourceBlending\n      ),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor?.includes('src-alpha') ||\n      colorDstFactor?.includes('src-alpha') ||\n      colorSrcFactor?.includes('src1-alpha') ||\n      colorDstFactor?.includes('src1-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.color.type === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\nconst kDualSourceBlendingFactors: GPUBlendFactor[] = [\n  'src1',\n  'one-minus-src1',\n  'src1-alpha',\n  'one-minus-src1-alpha',\n];\n\ng.test('dual_source_blending,color_target_count')\n  .desc(\n    `Test that when the blend factor of color attachment 0 uses src1 (the second input of the\n   corresponding blending unit), there must be exactly one color target.\n`\n  )\n  .beforeAllSubcases(t => t.selectDeviceOrSkipTestCase('dual-source-blending'))\n  .params(u =>\n    u\n      .combine('blendFactor', kDualSourceBlendingFactors)\n      .combine('colorTargetsCount', [1, 2] as const)\n      .combine('maskOutNonZeroIndexColorTargets', [true, false] as const)\n      .beginSubcases()\n      .combine('component', ['color', 'alpha'] as const)\n  )\n  .fn(t => {\n    const { blendFactor, colorTargetsCount, maskOutNonZeroIndexColorTargets, component } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const testBlendComponent: GPUBlendComponent = {\n      srcFactor: blendFactor,\n      dstFactor: blendFactor,\n      operation: 'add',\n    };\n\n    assert(colorTargetsCount >= 1);\n    const colorTargetStates = new Array<ColorTargetState>(colorTargetsCount);\n    colorTargetStates[0] = {\n      format: 'rgba8unorm',\n      blend: {\n        color: component === 'color' ? testBlendComponent : defaultBlendComponent,\n        alpha: component === 'alpha' ? testBlendComponent : defaultBlendComponent,\n      },\n    };\n\n    for (let i = 1; i < colorTargetsCount; ++i) {\n      colorTargetStates[i] = {\n        format: 'rgba8unorm',\n        blend: {\n          color: defaultBlendComponent,\n          alpha: defaultBlendComponent,\n        },\n        writeMask: maskOutNonZeroIndexColorTargets ? 0 : GPUConst.ColorWrite.ALL,\n      };\n    }\n\n    const descriptor = t.getDescriptor({\n      targets: colorTargetStates,\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        [{ values, plainType: 'f32', componentCount: 4 }],\n        null,\n        true\n      ),\n    });\n\n    const isAsync = false;\n    const _success = colorTargetsCount === 1;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('dual_source_blending,use_blend_src')\n  .desc(\n    `Test that when the blend factor of color attachment 0 uses src1, dual source blending must be\n    used in the fragment shader, whether the corresponding color write mask is 0 or not. In\n    contrast, when dual source blending is used in the fragment shader, we don't require blend\n    factor must use src1 (the second input of the corresponding blending unit).\n`\n  )\n  .beforeAllSubcases(t => t.selectDeviceOrSkipTestCase('dual-source-blending'))\n  .params(u =>\n    u\n      .combine('blendFactor', kBlendFactors)\n      .combine('useBlendSrc1', [true, false] as const)\n      .combine('writeMask', [0, GPUConst.ColorWrite.ALL] as const)\n      .beginSubcases()\n      .combine('component', ['color', 'alpha'] as const)\n  )\n  .fn(t => {\n    const { blendFactor, useBlendSrc1, writeMask, component } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const testBlendComponent: GPUBlendComponent = {\n      srcFactor: blendFactor,\n      dstFactor: blendFactor,\n      operation: 'add',\n    };\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          blend: {\n            color: component === 'color' ? testBlendComponent : defaultBlendComponent,\n            alpha: component === 'alpha' ? testBlendComponent : defaultBlendComponent,\n          },\n          writeMask,\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        [{ values, plainType: 'f32', componentCount: 4 }],\n        null,\n        useBlendSrc1\n      ),\n    });\n\n    const _success = !IsDualSourceBlendingFactor(blendFactor) || useBlendSrc1;\n    const isAsync = false;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"mappings":"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"}