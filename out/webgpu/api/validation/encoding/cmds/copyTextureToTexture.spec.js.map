{"version":3,"file":"copyTextureToTexture.spec.js","names":["description","makeTestGroup","kTextureUsages","kTextureDimensions","kAllTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","textureDimensionAndFormatCompatible","getBlockInfoForTextureFormat","getBaseFormatForTextureFormat","canCopyFromAllAspectsOfTextureFormat","canCopyToAllAspectsOfTextureFormat","kResourceStates","align","lcm","AllFeaturesMaxLimitsValidationTest","F","TestCopyTextureToTexture","source","destination","copySize","expectation","commandEncoder","device","createCommandEncoder","copyTextureToTexture","expectValidationError","finish","cmd","queue","submit","GetPhysicalSubresourceSize","dimension","textureSize","format","mipLevel","blockWidth","blockHeight","virtualWidthAtLevel","Math","max","width","virtualHeightAtLevel","height","physicalWidthAtLevel","physicalHeightAtLevel","depthOrArrayLayers","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","srcState","dstState","params","textureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","srcTexture","createTextureWithState","dstTexture","isSubmitSuccess","isFinishSuccess","texture","srcMismatched","dstMismatched","beforeAllSubcases","usesMismatchedDevice","srcTextureDevice","mismatchedDevice","trackForCleanup","createTexture","dstTextureDevice","beginSubcases","combineWithParams","srcLevelCount","dstLevelCount","srcCopyLevel","dstCopyLevel","unless","p","createTextureTracked","mipLevelCount","isSuccess","srcUsage","dstUsage","skipIf","isCompatibility","srcSampleCount","dstSampleCount","RENDER_ATTACHMENT","sampleCount","x","y","z","expand","srcCopyOrigin","dstCopyOrigin","copyWidth","copyHeight","kWidth","kHeight","origin","filter","srcFormat","dstFormat","srcInfo","dstInfo","skipIfTextureFormatNotSupported","skipIfCopyTextureToTextureNotSupportedForFormat","srcFormatInfo","dstFormatInfo","srcBaseFormat","dstBaseFormat","copyBoxOffsets","srcTextureSize","dstTextureSize","kMipLevelCount","srcSizeAtLevel","dstSizeAtLevel","copyOrigin","min","kFormat","copyDepth","srcCopyOriginZ","dstCopyOriginZ","copyExtentDepth","kArrayLayerCount","testTexture","sourceAspect","destinationAspect","kTextureSize","kValidAspectsForFormat","rgba8unorm","depth24plus","depth32float","stencil8","depth16unorm","isSourceAspectValid","includes","isDestinationAspectValid","aspect","isSuccessForCompressedFormats"],"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"sourcesContent":["export const description = `\ncopyTextureToTexture tests.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kTextureUsages, kTextureDimensions } from '../../../../capability_info.js';\nimport {\n  kAllTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  textureDimensionAndFormatCompatible,\n  getBlockInfoForTextureFormat,\n  getBaseFormatForTextureFormat,\n  canCopyFromAllAspectsOfTextureFormat,\n  canCopyToAllAspectsOfTextureFormat,\n  ColorTextureFormat,\n} from '../../../../format_info.js';\nimport { kResourceStates } from '../../../../gpu_test.js';\nimport { align, lcm } from '../../../../util/math.js';\nimport { AllFeaturesMaxLimitsValidationTest } from '../../validation_test.js';\n\nclass F extends AllFeaturesMaxLimitsValidationTest {\n  TestCopyTextureToTexture(\n    source: GPUTexelCopyTextureInfo,\n    destination: GPUTexelCopyTextureInfo,\n    copySize: GPUExtent3D,\n    expectation: 'Success' | 'FinishError' | 'SubmitError'\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(source, destination, copySize);\n\n    if (expectation === 'FinishError') {\n      this.expectValidationError(() => {\n        commandEncoder.finish();\n      });\n    } else {\n      const cmd = commandEncoder.finish();\n      this.expectValidationError(() => {\n        this.device.queue.submit([cmd]);\n      }, expectation === 'SubmitError');\n    }\n  }\n\n  GetPhysicalSubresourceSize(\n    dimension: GPUTextureDimension,\n    textureSize: Required<GPUExtent3DDict>,\n    format: GPUTextureFormat,\n    mipLevel: number\n  ): Required<GPUExtent3DDict> {\n    const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(format);\n    const virtualWidthAtLevel = Math.max(textureSize.width >> mipLevel, 1);\n    const virtualHeightAtLevel = Math.max(textureSize.height >> mipLevel, 1);\n    const physicalWidthAtLevel = align(virtualWidthAtLevel, blockWidth);\n    const physicalHeightAtLevel = align(virtualHeightAtLevel, blockHeight);\n\n    switch (dimension) {\n      case '1d':\n        return { width: physicalWidthAtLevel, height: 1, depthOrArrayLayers: 1 };\n      case '2d':\n        return {\n          width: physicalWidthAtLevel,\n          height: physicalHeightAtLevel,\n          depthOrArrayLayers: textureSize.depthOrArrayLayers,\n        };\n      case '3d':\n        return {\n          width: physicalWidthAtLevel,\n          height: physicalHeightAtLevel,\n          depthOrArrayLayers: Math.max(textureSize.depthOrArrayLayers >> mipLevel, 1),\n        };\n    }\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_with_invalid_or_destroyed_texture')\n  .desc('Test copyTextureToTexture is an error when one of the textures is invalid or destroyed.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcState', kResourceStates)\n      .combine('dstState', kResourceStates)\n  )\n  .fn(t => {\n    const { srcState, dstState } = t.params;\n\n    const textureDesc: GPUTextureDescriptor = {\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    };\n\n    const srcTexture = t.createTextureWithState(srcState, textureDesc);\n    const dstTexture = t.createTextureWithState(dstState, textureDesc);\n\n    const isSubmitSuccess = srcState === 'valid' && dstState === 'valid';\n    const isFinishSuccess = srcState !== 'invalid' && dstState !== 'invalid';\n    const expectation = isFinishSuccess\n      ? isSubmitSuccess\n        ? 'Success'\n        : 'SubmitError'\n      : 'FinishError';\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      expectation\n    );\n  });\n\ng.test('texture,device_mismatch')\n  .desc(\n    'Tests copyTextureToTexture cannot be called with src texture or dst texture created from another device.'\n  )\n  .paramsSubcasesOnly([\n    { srcMismatched: false, dstMismatched: false }, // control case\n    { srcMismatched: true, dstMismatched: false },\n    { srcMismatched: false, dstMismatched: true },\n  ] as const)\n  .beforeAllSubcases(t => t.usesMismatchedDevice())\n  .fn(t => {\n    const { srcMismatched, dstMismatched } = t.params;\n\n    const size = { width: 4, height: 4, depthOrArrayLayers: 1 };\n    const format = 'rgba8unorm';\n\n    const srcTextureDevice = srcMismatched ? t.mismatchedDevice : t.device;\n    const srcTexture = t.trackForCleanup(\n      srcTextureDevice.createTexture({\n        size,\n        format,\n        usage: GPUTextureUsage.COPY_SRC,\n      })\n    );\n\n    const dstTextureDevice = dstMismatched ? t.mismatchedDevice : t.device;\n    const dstTexture = t.trackForCleanup(\n      dstTextureDevice.createTexture({\n        size,\n        format,\n        usage: GPUTextureUsage.COPY_DST,\n      })\n    );\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      srcMismatched || dstMismatched ? 'FinishError' : 'Success'\n    );\n  });\n\ng.test('mipmap_level')\n  .desc(\n    `\nTest copyTextureToTexture must specify mipLevels that are in range.\n- for various dimensions\n- for various mip level count in the texture\n- for various copy target mip level (in range and not in range)\n`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', kTextureDimensions)\n      .beginSubcases()\n      .combineWithParams([\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 0 },\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 1, dstCopyLevel: 0 },\n        { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 1 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 2, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 3, dstCopyLevel: 0 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 2 },\n        { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 3 },\n      ] as const)\n      .unless(p => p.dimension === '1d' && (p.srcLevelCount !== 1 || p.dstLevelCount !== 1))\n  )\n\n  .fn(t => {\n    const { srcLevelCount, dstLevelCount, srcCopyLevel, dstCopyLevel, dimension } = t.params;\n\n    const srcTexture = t.createTextureTracked({\n      size: { width: 32, height: 1, depthOrArrayLayers: 1 },\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      mipLevelCount: srcLevelCount,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: { width: 32, height: 1, depthOrArrayLayers: 1 },\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      mipLevelCount: dstLevelCount,\n    });\n\n    const isSuccess = srcCopyLevel < srcLevelCount && dstCopyLevel < dstLevelCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('texture_usage')\n  .desc(\n    `\nTest that copyTextureToTexture source/destination need COPY_SRC/COPY_DST usages.\n- for all possible source texture usages\n- for all possible destination texture usages\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcUsage', kTextureUsages)\n      .combine('dstUsage', kTextureUsages)\n  )\n  .fn(t => {\n    const { srcUsage, dstUsage } = t.params;\n\n    const srcTexture = t.createTextureTracked({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: srcUsage,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: dstUsage,\n    });\n\n    const isSuccess =\n      srcUsage === GPUTextureUsage.COPY_SRC && dstUsage === GPUTextureUsage.COPY_DST;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('sample_count')\n  .desc(\n    `\nTest that textures in copyTextureToTexture must have the same sample count.\n- for various source texture sample count\n- for various destination texture sample count\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcSampleCount', [1, 4])\n      .combine('dstSampleCount', [1, 4])\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && (t.params.srcSampleCount !== 1 || t.params.dstSampleCount !== 1),\n      'multisample textures are not copyable in compatibility mode'\n    );\n  })\n  .fn(t => {\n    const { srcSampleCount, dstSampleCount } = t.params;\n\n    const srcTexture = t.createTextureTracked({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: srcSampleCount,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: dstSampleCount,\n    });\n\n    const isSuccess = srcSampleCount === dstSampleCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 4, height: 4, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('multisampled_copy_restrictions')\n  .desc(\n    `\nTest that copyTextureToTexture of multisampled texture must copy a whole subresource to a whole subresource.\n- for various origin for the source and destination of the copies.\n\nNote: this is only tested for 2D textures as it is the only dimension compatible with multisampling.\nTODO: Check the source and destination constraints separately.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcCopyOrigin', [\n        { x: 0, y: 0, z: 0 },\n        { x: 1, y: 0, z: 0 },\n        { x: 0, y: 1, z: 0 },\n        { x: 1, y: 1, z: 0 },\n      ])\n      .combine('dstCopyOrigin', [\n        { x: 0, y: 0, z: 0 },\n        { x: 1, y: 0, z: 0 },\n        { x: 0, y: 1, z: 0 },\n        { x: 1, y: 1, z: 0 },\n      ])\n      .expand('copyWidth', p => [32 - Math.max(p.srcCopyOrigin.x, p.dstCopyOrigin.x), 16])\n      .expand('copyHeight', p => [16 - Math.max(p.srcCopyOrigin.y, p.dstCopyOrigin.y), 8])\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(t.isCompatibility, 'multisample textures are not copyable in compatibility mode');\n  })\n  .fn(t => {\n    const { srcCopyOrigin, dstCopyOrigin, copyWidth, copyHeight } = t.params;\n\n    const kWidth = 32;\n    const kHeight = 16;\n\n    // Currently we don't support multisampled 2D array textures and the mipmap level count of the\n    // multisampled textures must be 1.\n    const srcTexture = t.createTextureTracked({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: 4,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: 4,\n    });\n\n    const isSuccess = copyWidth === kWidth && copyHeight === kHeight;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: srcCopyOrigin },\n      { texture: dstTexture, origin: dstCopyOrigin },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('texture_format_compatibility')\n  .desc(\n    `\nTest the formats of textures in copyTextureToTexture must be copy-compatible.\n- for all source texture formats\n- for all destination texture formats\n`\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kAllTextureFormats)\n      .filter(t => canCopyFromAllAspectsOfTextureFormat(t.srcFormat))\n      .combine('dstFormat', kAllTextureFormats)\n      .filter(t => canCopyToAllAspectsOfTextureFormat(t.dstFormat))\n      .filter(t => {\n        const srcInfo = getBlockInfoForTextureFormat(t.srcFormat);\n        const dstInfo = getBlockInfoForTextureFormat(t.dstFormat);\n        return (\n          srcInfo.blockWidth === dstInfo.blockWidth && srcInfo.blockHeight === dstInfo.blockHeight\n        );\n      })\n  )\n  .fn(t => {\n    const { srcFormat, dstFormat } = t.params;\n\n    t.skipIfTextureFormatNotSupported(srcFormat, dstFormat);\n    t.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n\n    const srcFormatInfo = getBlockInfoForTextureFormat(srcFormat);\n    const dstFormatInfo = getBlockInfoForTextureFormat(dstFormat);\n\n    const textureSize = {\n      width: lcm(srcFormatInfo.blockWidth, dstFormatInfo.blockWidth),\n      height: lcm(srcFormatInfo.blockHeight, dstFormatInfo.blockHeight),\n      depthOrArrayLayers: 1,\n    };\n\n    const srcTexture = t.createTextureTracked({\n      size: textureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const dstTexture = t.createTextureTracked({\n      size: textureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    // Allow copy between compatible format textures.\n    const srcBaseFormat =\n      getBaseFormatForTextureFormat(srcFormat as ColorTextureFormat) ?? srcFormat;\n    const dstBaseFormat =\n      getBaseFormatForTextureFormat(dstFormat as ColorTextureFormat) ?? dstFormat;\n    const isSuccess = srcBaseFormat === dstBaseFormat;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      textureSize,\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('depth_stencil_copy_restrictions')\n  .desc(\n    `\nTest that depth textures subresources must be entirely copied in copyTextureToTexture\n- for various depth-stencil formats\n- for various copy origin and size offsets\n- for various source and destination texture sizes\n- for various source and destination mip levels\n\nNote: this is only tested for 2D textures as it is the only dimension compatible with depth-stencil.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, width: 0, height: 0 },\n        { x: 1, y: 0, width: 0, height: 0 },\n        { x: 0, y: 1, width: 0, height: 0 },\n        { x: 0, y: 0, width: -1, height: 0 },\n        { x: 0, y: 0, width: 0, height: -1 },\n      ])\n      .combine('srcTextureSize', [\n        { width: 64, height: 64, depthOrArrayLayers: 1 },\n        { width: 64, height: 32, depthOrArrayLayers: 1 },\n        { width: 32, height: 32, depthOrArrayLayers: 1 },\n      ])\n      .combine('dstTextureSize', [\n        { width: 64, height: 64, depthOrArrayLayers: 1 },\n        { width: 64, height: 32, depthOrArrayLayers: 1 },\n        { width: 32, height: 32, depthOrArrayLayers: 1 },\n      ])\n      .combine('srcCopyLevel', [1, 2])\n      .combine('dstCopyLevel', [0, 1])\n  )\n  .fn(t => {\n    const { format, copyBoxOffsets, srcTextureSize, dstTextureSize, srcCopyLevel, dstCopyLevel } =\n      t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const kMipLevelCount = 3;\n\n    const srcTexture = t.createTextureTracked({\n      size: { width: srcTextureSize.width, height: srcTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: { width: dstTextureSize.width, height: dstTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize('2d', srcTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize('2d', dstTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: 0 };\n\n    const copyWidth =\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x;\n    const copyHeight =\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y;\n\n    // Depth/stencil copies must copy whole subresources.\n    const isSuccess =\n      copyOrigin.x === 0 &&\n      copyOrigin.y === 0 &&\n      copyWidth === srcSizeAtLevel.width &&\n      copyHeight === srcSizeAtLevel.height &&\n      copyWidth === dstSizeAtLevel.width &&\n      copyHeight === dstSizeAtLevel.height;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('copy_ranges')\n  .desc(\n    `\nTest that copyTextureToTexture copy boxes must be in range of the subresource.\n- for various dimensions\n- for various offsets to a full copy for the copy origin/size\n- for various copy mip levels\n`\n  )\n  .params(u =>\n    u\n      .combine('dimension', kTextureDimensions)\n      //.beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 1, width: 0, height: 1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 2, width: 0, height: 1, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 0, width: 1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 1 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n        { x: 0, y: 0, z: 2, width: 0, height: 0, depthOrArrayLayers: -1 },\n      ])\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffsets.y !== 0 ||\n            p.copyBoxOffsets.z !== 0 ||\n            p.copyBoxOffsets.height !== 0 ||\n            p.copyBoxOffsets.depthOrArrayLayers !== 0)\n      )\n      .combine('srcCopyLevel', [0, 1, 3])\n      .combine('dstCopyLevel', [0, 1, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(t => {\n    const { dimension, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const textureSize = { width: 16, height: 8, depthOrArrayLayers: 3 };\n    let mipLevelCount = 4;\n    if (dimension === '1d') {\n      mipLevelCount = 1;\n      textureSize.height = 1;\n      textureSize.depthOrArrayLayers = 1;\n    }\n    const kFormat = 'rgba8unorm';\n\n    const srcTexture = t.createTextureTracked({\n      size: textureSize,\n      format: kFormat,\n      dimension,\n      mipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: textureSize,\n      format: kFormat,\n      dimension,\n      mipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      textureSize,\n      kFormat,\n      srcCopyLevel\n    );\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      textureSize,\n      kFormat,\n      dstCopyLevel\n    );\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      textureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    {\n      let isSuccess =\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height;\n\n      if (dimension === '3d') {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= srcSizeAtLevel.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= dstSizeAtLevel.depthOrArrayLayers;\n      } else {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= textureSize.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= textureSize.depthOrArrayLayers;\n      }\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n\n    {\n      let isSuccess =\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height;\n\n      if (dimension === '3d') {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= dstSizeAtLevel.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= srcSizeAtLevel.depthOrArrayLayers;\n      } else {\n        isSuccess =\n          isSuccess &&\n          copyDepth <= textureSize.depthOrArrayLayers &&\n          copyOrigin.z + copyDepth <= textureSize.depthOrArrayLayers;\n      }\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n  });\n\ng.test('copy_within_same_texture')\n  .desc(\n    `\nTest that it is an error to use copyTextureToTexture from one subresource to itself.\n- for various starting source/destination array layers.\n- for various copy sizes in number of array layers\n\nTODO: Extend to check the copy is allowed between different mip levels.\nTODO: Extend to 1D and 3D textures.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcCopyOriginZ', [0, 2, 4])\n      .combine('dstCopyOriginZ', [0, 2, 4])\n      .combine('copyExtentDepth', [1, 2, 3])\n  )\n  .fn(t => {\n    const { srcCopyOriginZ, dstCopyOriginZ, copyExtentDepth } = t.params;\n\n    const kArrayLayerCount = 7;\n\n    const testTexture = t.createTextureTracked({\n      size: { width: 16, height: 16, depthOrArrayLayers: kArrayLayerCount },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess =\n      Math.min(srcCopyOriginZ, dstCopyOriginZ) + copyExtentDepth <=\n      Math.max(srcCopyOriginZ, dstCopyOriginZ);\n    t.TestCopyTextureToTexture(\n      { texture: testTexture, origin: { x: 0, y: 0, z: srcCopyOriginZ } },\n      { texture: testTexture, origin: { x: 0, y: 0, z: dstCopyOriginZ } },\n      { width: 16, height: 16, depthOrArrayLayers: copyExtentDepth },\n      isSuccess ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('copy_aspects')\n  .desc(\n    `\nTest the validations on the member 'aspect' of GPUTexelCopyTextureInfo in CopyTextureToTexture().\n- for all the color and depth-stencil formats: the texture copy aspects must be both 'all'.\n- for all the depth-only formats: the texture copy aspects must be either 'all' or 'depth-only'.\n- for all the stencil-only formats: the texture copy aspects must be either 'all' or 'stencil-only'.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', ['rgba8unorm', ...kDepthStencilFormats] as const)\n      .beginSubcases()\n      .combine('sourceAspect', ['all', 'depth-only', 'stencil-only'] as const)\n      .combine('destinationAspect', ['all', 'depth-only', 'stencil-only'] as const)\n  )\n  .fn(t => {\n    const { format, sourceAspect, destinationAspect } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const kTextureSize = { width: 16, height: 8, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.createTextureTracked({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    // MAINTENANCE_TODO: get the valid aspects from capability_info.ts.\n    const kValidAspectsForFormat = {\n      rgba8unorm: ['all'],\n\n      // kUnsizedDepthStencilFormats\n      depth24plus: ['all', 'depth-only'],\n      'depth24plus-stencil8': ['all'],\n      'depth32float-stencil8': ['all'],\n\n      // kSizedDepthStencilFormats\n      depth32float: ['all', 'depth-only'],\n      stencil8: ['all', 'stencil-only'],\n      depth16unorm: ['all', 'depth-only'],\n    };\n\n    const isSourceAspectValid = kValidAspectsForFormat[format].includes(sourceAspect);\n    const isDestinationAspectValid = kValidAspectsForFormat[format].includes(destinationAspect);\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, aspect: sourceAspect },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, aspect: destinationAspect },\n      kTextureSize,\n      isSourceAspectValid && isDestinationAspectValid ? 'Success' : 'FinishError'\n    );\n  });\n\ng.test('copy_ranges_with_compressed_texture_formats')\n  .desc(\n    `\nTest that copyTextureToTexture copy boxes must be in range of the subresource and aligned to the block size\n- for various dimensions\n- for various offsets to a full copy for the copy origin/size\n- for various copy mip levels\n\nTODO: Express the offsets in \"block size\" so as to be able to test non-4x4 compressed formats\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kCompressedTextureFormats)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 4, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: -4, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 4, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: -4, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n      ])\n      .combine('srcCopyLevel', [0, 1, 2])\n      .combine('dstCopyLevel', [0, 1, 2])\n  )\n  .fn(t => {\n    const { format, dimension, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfCopyTextureToTextureNotSupportedForFormat(format);\n\n    const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(format);\n\n    const kTextureSize = {\n      width: 15 * blockWidth,\n      height: 12 * blockHeight,\n      depthOrArrayLayers: 3,\n    };\n    const kMipLevelCount = 4;\n\n    const srcTexture = t.createTextureTracked({\n      size: kTextureSize,\n      format,\n      dimension,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: kTextureSize,\n      format,\n      dimension,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      kTextureSize,\n      format,\n      srcCopyLevel\n    );\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(\n      dimension,\n      kTextureSize,\n      format,\n      dstCopyLevel\n    );\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      kTextureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    const isSuccessForCompressedFormats =\n      copyOrigin.x % blockWidth === 0 &&\n      copyOrigin.y % blockHeight === 0 &&\n      copyWidth % blockWidth === 0 &&\n      copyHeight % blockHeight === 0;\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess ? 'Success' : 'FinishError'\n      );\n    }\n  });\n"],"mappings":"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"}