{"version":3,"file":"encoder_open_state.spec.js","names":["description","makeTestGroup","keysOf","unreachable","AllFeaturesMaxLimitsGPUTest","vtu","beginRenderPassWithQuerySet","F","createRenderPipelineForTest","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","writeMask","createBindGroupForTest","createBindGroup","entries","binding","resource","createSampler","createBindGroupLayout","visibility","GPUShaderStage","FRAGMENT","sampler","type","g","kEncoderCommandInfo","beginComputePass","beginRenderPass","clearBuffer","copyBufferToBuffer","copyBufferToTexture","copyTextureToBuffer","copyTextureToTexture","insertDebugMarker","popDebugGroup","pushDebugGroup","resolveQuerySet","kEncoderCommands","kRenderPassEncoderCommandInfo","draw","drawIndexed","drawIndexedIndirect","drawIndirect","multiDrawIndexedIndirect","multiDrawIndirect","setIndexBuffer","setBindGroup","setVertexBuffer","setPipeline","setViewport","setScissorRect","setBlendConstant","setStencilReference","beginOcclusionQuery","endOcclusionQuery","executeBundles","kRenderPassEncoderCommands","kRenderBundleEncoderCommandInfo","kRenderBundleEncoderCommands","kComputePassEncoderCommandInfo","dispatchWorkgroups","dispatchWorkgroupsIndirect","kComputePassEncoderCommands","test","desc","params","u","combine","beginSubcases","fn","t","command","finishBeforeCommand","srcBuffer","createBufferTracked","size","usage","GPUBufferUsage","COPY_SRC","GPUTextureUsage","COPY_DST","dstBuffer","QUERY_RESOLVE","textureSize","width","height","textureFormat","srcTexture","createTextureTracked","dstTexture","querySet","createQuerySetTracked","count","encoder","createCommandEncoder","finish","expectValidationError","colorAttachments","buffer","texture","skipIfDeviceDoesNotHaveFeature","renderPass","INDIRECT","VERTEX","pipeline","bindGroup","end","kNumTestPoints","kViewportMinDepth","kViewportMaxDepth","r","b","a","bundleEncoder","createRenderBundleEncoder","colorFormats","computePass","indirectBuffer","computePipeline","createNoOpComputePipeline"],"sources":["../../../../../src/webgpu/api/validation/encoding/encoder_open_state.spec.ts"],"sourcesContent":["export const description = `\nValidation tests to all commands of GPUCommandEncoder, GPUComputePassEncoder, and\nGPURenderPassEncoder when the encoder is not finished.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../../gpu_test.js';\nimport * as vtu from '../validation_test_utils.js';\n\nimport { beginRenderPassWithQuerySet } from './queries/common.js';\n\nclass F extends AllFeaturesMaxLimitsGPUTest {\n  createRenderPipelineForTest(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>();\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `@fragment fn main() {}`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n      },\n    });\n  }\n\n  createBindGroupForTest(): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: this.device.createSampler(),\n        },\n      ],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            sampler: { type: 'filtering' },\n          },\n        ],\n      }),\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ntype EncoderCommands = keyof Omit<GPUCommandEncoder, '__brand' | 'label' | 'finish'>;\nconst kEncoderCommandInfo: {\n  readonly [k in EncoderCommands]: {};\n} = {\n  beginComputePass: {},\n  beginRenderPass: {},\n  clearBuffer: {},\n  copyBufferToBuffer: {},\n  copyBufferToTexture: {},\n  copyTextureToBuffer: {},\n  copyTextureToTexture: {},\n  insertDebugMarker: {},\n  popDebugGroup: {},\n  pushDebugGroup: {},\n  resolveQuerySet: {},\n};\nconst kEncoderCommands = keysOf(kEncoderCommandInfo);\n\n// MAINTENANCE_TODO: Remove multiDrawIndirect and multiDrawIndexedIndirect once https://github.com/gpuweb/gpuweb/pull/2315 is merged.\ntype RenderPassEncoderCommands =\n  | keyof Omit<GPURenderPassEncoder, '__brand' | 'label' | 'end'>\n  | 'multiDrawIndirect'\n  | 'multiDrawIndexedIndirect';\nconst kRenderPassEncoderCommandInfo: {\n  readonly [k in RenderPassEncoderCommands]: {};\n} = {\n  draw: {},\n  drawIndexed: {},\n  drawIndexedIndirect: {},\n  drawIndirect: {},\n  multiDrawIndexedIndirect: {},\n  multiDrawIndirect: {},\n  setIndexBuffer: {},\n  setBindGroup: {},\n  setVertexBuffer: {},\n  setPipeline: {},\n  setViewport: {},\n  setScissorRect: {},\n  setBlendConstant: {},\n  setStencilReference: {},\n  beginOcclusionQuery: {},\n  endOcclusionQuery: {},\n  executeBundles: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kRenderPassEncoderCommands = keysOf(kRenderPassEncoderCommandInfo);\n\ntype RenderBundleEncoderCommands = keyof Omit<\n  GPURenderBundleEncoder,\n  '__brand' | 'label' | 'finish'\n>;\nconst kRenderBundleEncoderCommandInfo: {\n  readonly [k in RenderBundleEncoderCommands]: {};\n} = {\n  draw: {},\n  drawIndexed: {},\n  drawIndexedIndirect: {},\n  drawIndirect: {},\n  setPipeline: {},\n  setBindGroup: {},\n  setIndexBuffer: {},\n  setVertexBuffer: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kRenderBundleEncoderCommands = keysOf(kRenderBundleEncoderCommandInfo);\n\n// MAINTENANCE_TODO: remove the deprecated 'dispatch' and 'dispatchIndirect' here once they're\n// removed from `@webgpu/types`.\ntype ComputePassEncoderCommands = keyof Omit<\n  GPUComputePassEncoder,\n  '__brand' | 'label' | 'end' | 'dispatch' | 'dispatchIndirect'\n>;\nconst kComputePassEncoderCommandInfo: {\n  readonly [k in ComputePassEncoderCommands]: {};\n} = {\n  setBindGroup: {},\n  setPipeline: {},\n  dispatchWorkgroups: {},\n  dispatchWorkgroupsIndirect: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kComputePassEncoderCommands = keysOf(kComputePassEncoderCommandInfo);\n\ng.test('non_pass_commands')\n  .desc(\n    `\n  Test that functions of GPUCommandEncoder generate a validation error if the encoder is already\n  finished.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const srcBuffer = t.createBufferTracked({\n      size: 16,\n      usage: GPUBufferUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n    const dstBuffer = t.createBufferTracked({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const textureSize = { width: 1, height: 1 };\n    const textureFormat = 'rgba8unorm';\n    const srcTexture = t.createTextureTracked({\n      size: textureSize,\n      format: textureFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.createTextureTracked({\n      size: textureSize,\n      format: textureFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const querySet = t.createQuerySetTracked({\n      type: 'occlusion',\n      count: 1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n\n    if (finishBeforeCommand) encoder.finish();\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'beginComputePass':\n          {\n            encoder.beginComputePass();\n          }\n          break;\n        case 'beginRenderPass':\n          {\n            encoder.beginRenderPass({ colorAttachments: [] });\n          }\n          break;\n        case 'clearBuffer':\n          {\n            encoder.clearBuffer(dstBuffer, 0, 16);\n          }\n          break;\n        case 'copyBufferToBuffer':\n          {\n            encoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, 0);\n          }\n          break;\n        case 'copyBufferToTexture':\n          {\n            encoder.copyBufferToTexture(\n              { buffer: srcBuffer },\n              { texture: dstTexture },\n              textureSize\n            );\n          }\n          break;\n        case 'copyTextureToBuffer':\n          {\n            encoder.copyTextureToBuffer(\n              { texture: srcTexture },\n              { buffer: dstBuffer },\n              textureSize\n            );\n          }\n          break;\n        case 'copyTextureToTexture':\n          {\n            encoder.copyTextureToTexture(\n              { texture: srcTexture },\n              { texture: dstTexture },\n              textureSize\n            );\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            encoder.insertDebugMarker('marker');\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            encoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            encoder.popDebugGroup();\n          }\n          break;\n        case 'resolveQuerySet':\n          {\n            encoder.resolveQuerySet(querySet, 0, 1, dstBuffer, 0);\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('render_pass_commands')\n  .desc(\n    `\n    Test that functions of GPURenderPassEncoder generate a validation error if the encoder or the\n    pass is already finished.\n\n    TODO(https://github.com/gpuweb/gpuweb/issues/5207): Resolve whether the error condition\n    \\`finishBeforeCommand !== 'no'\\` is correct, or should be changed to\n    \\`finishBeforeCommand === 'encoder'\\`.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kRenderPassEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', ['no', 'pass', 'encoder'])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n    if (command === 'multiDrawIndirect' || command === 'multiDrawIndexedIndirect') {\n      t.skipIfDeviceDoesNotHaveFeature(\n        'chromium-experimental-multi-draw-indirect' as GPUFeatureName\n      );\n    }\n\n    const querySet = t.createQuerySetTracked({ type: 'occlusion', count: 1 });\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = beginRenderPassWithQuerySet(t, encoder, querySet);\n\n    const buffer = t.createBufferTracked({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.VERTEX,\n    });\n\n    const pipeline = t.createRenderPipelineForTest();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    if (finishBeforeCommand !== 'no') {\n      renderPass.end();\n    }\n    if (finishBeforeCommand === 'encoder') {\n      encoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'draw':\n          {\n            renderPass.draw(1);\n          }\n          break;\n        case 'drawIndexed':\n          {\n            renderPass.drawIndexed(1);\n          }\n          break;\n        case 'drawIndirect':\n          {\n            renderPass.drawIndirect(buffer, 1);\n          }\n          break;\n        case 'setIndexBuffer':\n          {\n            renderPass.setIndexBuffer(buffer, 'uint32');\n          }\n          break;\n        case 'drawIndexedIndirect':\n          {\n            renderPass.drawIndexedIndirect(buffer, 0);\n          }\n          break;\n        case 'multiDrawIndirect':\n          {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (renderPass as any).multiDrawIndirect(buffer, 0, 1);\n          }\n          break;\n        case 'multiDrawIndexedIndirect':\n          {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (renderPass as any).multiDrawIndexedIndirect(buffer, 0, 1);\n          }\n          break;\n        case 'setBindGroup':\n          {\n            renderPass.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setVertexBuffer':\n          {\n            renderPass.setVertexBuffer(1, buffer);\n          }\n          break;\n        case 'setPipeline':\n          {\n            renderPass.setPipeline(pipeline);\n          }\n          break;\n        case 'setViewport':\n          {\n            const kNumTestPoints = 8;\n            const kViewportMinDepth = 0;\n            const kViewportMaxDepth = 1;\n            renderPass.setViewport(0, 0, kNumTestPoints, 0, kViewportMinDepth, kViewportMaxDepth);\n          }\n          break;\n        case 'setScissorRect':\n          {\n            renderPass.setScissorRect(0, 0, 0, 0);\n          }\n          break;\n        case 'setBlendConstant':\n          {\n            renderPass.setBlendConstant({ r: 1.0, g: 1.0, b: 1.0, a: 1.0 });\n          }\n          break;\n        case 'setStencilReference':\n          {\n            renderPass.setStencilReference(0);\n          }\n          break;\n        case 'beginOcclusionQuery':\n          {\n            renderPass.beginOcclusionQuery(0);\n          }\n          break;\n        case 'endOcclusionQuery':\n          {\n            renderPass.endOcclusionQuery();\n          }\n          break;\n        case 'executeBundles':\n          {\n            renderPass.executeBundles([]);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            renderPass.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            renderPass.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            renderPass.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand !== 'no');\n  });\n\ng.test('render_bundle_commands')\n  .desc(\n    `\n    Test that functions of GPURenderBundleEncoder generate a validation error if the encoder or the\n    pass is already finished.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kRenderBundleEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const buffer = t.createBufferTracked({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.VERTEX,\n    });\n\n    const pipeline = t.createRenderPipelineForTest();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n\n    if (finishBeforeCommand) {\n      bundleEncoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'draw':\n          {\n            bundleEncoder.draw(1);\n          }\n          break;\n        case 'drawIndexed':\n          {\n            bundleEncoder.drawIndexed(1);\n          }\n          break;\n        case 'drawIndexedIndirect':\n          {\n            bundleEncoder.drawIndexedIndirect(buffer, 0);\n          }\n          break;\n        case 'drawIndirect':\n          {\n            bundleEncoder.drawIndirect(buffer, 1);\n          }\n          break;\n        case 'setPipeline':\n          {\n            bundleEncoder.setPipeline(pipeline);\n          }\n          break;\n        case 'setBindGroup':\n          {\n            bundleEncoder.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setIndexBuffer':\n          {\n            bundleEncoder.setIndexBuffer(buffer, 'uint32');\n          }\n          break;\n        case 'setVertexBuffer':\n          {\n            bundleEncoder.setVertexBuffer(1, buffer);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            bundleEncoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            bundleEncoder.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            bundleEncoder.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('compute_pass_commands')\n  .desc(\n    `\n    Test that functions of GPUComputePassEncoder generate a validation error if the encoder or the\n    pass is already finished.\n\n    TODO(https://github.com/gpuweb/gpuweb/issues/5207): Resolve whether the error condition\n    \\`finishBeforeCommand !== 'no'\\` is correct, or should be changed to\n    \\`finishBeforeCommand === 'encoder'\\`.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kComputePassEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', ['no', 'pass', 'encoder'])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const encoder = t.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass();\n\n    const indirectBuffer = t.createBufferTracked({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const computePipeline = vtu.createNoOpComputePipeline(t);\n\n    const bindGroup = t.createBindGroupForTest();\n\n    if (finishBeforeCommand !== 'no') {\n      computePass.end();\n    }\n    if (finishBeforeCommand === 'encoder') {\n      encoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'setBindGroup':\n          {\n            computePass.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setPipeline':\n          {\n            computePass.setPipeline(computePipeline);\n          }\n          break;\n        case 'dispatchWorkgroups':\n          {\n            computePass.dispatchWorkgroups(0);\n          }\n          break;\n        case 'dispatchWorkgroupsIndirect':\n          {\n            computePass.dispatchWorkgroupsIndirect(indirectBuffer, 0);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            computePass.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            computePass.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            computePass.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand !== 'no');\n  });\n"],"mappings":"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"}