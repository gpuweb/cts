{"version":3,"file":"in_render_misc.spec.js","names":["description","makeTestGroup","unreachable","kTextureUsages","MaxLimitsTestMixin","ValidationTest","kTextureBindingTypes","IsReadOnlyTextureBindingType","skipIfStorageTexturesUsedAndNotAvailableInFragmentStage","t","usage","numRequired","skipIf","isCompatibility","device","limits","maxStorageTexturesInFragmentStage","F","createBindGroupLayoutForTest","textureUsage","sampleType","visibility","GPUShaderStage","FRAGMENT","bindGroupLayoutEntry","binding","texture","viewDimension","storageTexture","access","format","createBindGroupLayout","entries","createBindGroupForTest","textureView","createBindGroup","layout","resource","g","kTextureSize","kTextureLayers","test","desc","params","u","combine","beforeAllSubcases","fn","useDifferentTextureAsTexture2","baseLayer2","view1Binding","view2Binding","texture0","createTextureTracked","GPUTextureUsage","TEXTURE_BINDING","STORAGE_BINDING","size","textureView0","createView","dimension","baseArrayLayer","arrayLayerCount","bindGroup0","bindGroup1","texture2","textureView2","validBindGroup2","unusedColorTexture","RENDER_ATTACHMENT","encoder","createCommandEncoder","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","storeOp","setBindGroup","end","noConflict","expectValidationError","finish","bindAspect","depthStencilReadOnly","depthStencilTexture","textureBindingViewDimension","conflictedToNonReadOnlyAttachmentBindGroup","aspect","colorTexture","validBindGroup","depthStencilAttachment","depthReadOnly","stencilReadOnly","inRenderPass","textureUsage0","textureUsage1","skipIfLanguageFeatureNotSupported","COMPUTE","fragmentShader","renderPipeline","createRenderPipeline","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","getNoOpShaderCode","fragment","targets","setPipeline","draw","computeShader","pipelineLayout","computePipeline","createComputePipeline","compute","writableStorageTexture","writableStorageTextureView","writableStorageTextureBindGroup","computePassEncoder","beginComputePass","dispatchWorkgroups","success","filter","usage0","usage1","COPY_SRC","COPY_DST","UseTextureOnCommandEncoder","buffer","createBufferWithState","GPUBufferUsage","copyTextureToBuffer","copyBufferToTexture","bindGroup","bindingType","viewUsage"],"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_misc.spec.ts"],"sourcesContent":["export const description = `\nTexture Usages Validation Tests on All Kinds of WebGPU Subresource Usage Scopes.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../../common/util/util.js';\nimport { kTextureUsages } from '../../../../capability_info.js';\nimport { MaxLimitsTestMixin } from '../../../../gpu_test.js';\nimport { ValidationTest } from '../../validation_test.js';\nimport {\n  TextureBindingType,\n  kTextureBindingTypes,\n  IsReadOnlyTextureBindingType,\n} from '../texture/in_render_common.spec.js';\n\nfunction skipIfStorageTexturesUsedAndNotAvailableInFragmentStage(\n  t: ValidationTest,\n  usage: (typeof kTextureBindingTypes)[number] | 'copy-src' | 'copy-dst' | 'color-attachment',\n  numRequired: number\n) {\n  t.skipIf(\n    t.isCompatibility &&\n      (usage === 'writeonly-storage-texture' ||\n        usage === 'readonly-storage-texture' ||\n        usage === 'readwrite-storage-texture') &&\n      !(t.device.limits.maxStorageTexturesInFragmentStage! > numRequired),\n    `maxStorageTexturesInFragmentStage${t.device.limits.maxStorageTexturesInFragmentStage} < ${numRequired}`\n  );\n}\n\nclass F extends ValidationTest {\n  createBindGroupLayoutForTest(\n    textureUsage: TextureBindingType,\n    sampleType: 'unfilterable-float' | 'depth' | 'uint',\n    visibility: number = GPUShaderStage.FRAGMENT\n  ): GPUBindGroupLayout {\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility,\n    };\n\n    switch (textureUsage) {\n      case 'sampled-texture':\n        bindGroupLayoutEntry.texture = { viewDimension: '2d-array', sampleType };\n        break;\n      case 'readonly-storage-texture':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'read-only',\n          format: 'r32float',\n          viewDimension: '2d-array',\n        };\n        break;\n      case 'writeonly-storage-texture':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'r32float',\n          viewDimension: '2d-array',\n        };\n        break;\n      case 'readwrite-storage-texture':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'read-write',\n          format: 'r32float',\n          viewDimension: '2d-array',\n        };\n        break;\n      default:\n        unreachable();\n        break;\n    }\n    return this.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n  }\n\n  createBindGroupForTest(\n    textureView: GPUTextureView,\n    textureUsage: TextureBindingType,\n    sampleType: 'unfilterable-float' | 'depth' | 'uint',\n    visibility: number = GPUShaderStage.FRAGMENT\n  ) {\n    return this.device.createBindGroup({\n      layout: this.createBindGroupLayoutForTest(textureUsage, sampleType, visibility),\n      entries: [{ binding: 0, resource: textureView }],\n    });\n  }\n}\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(F));\n\nconst kTextureSize = 16;\nconst kTextureLayers = 3;\n\ng.test('subresources,set_bind_group_on_same_index_color_texture')\n  .desc(\n    `\n  Test that when one color texture subresource is bound to different bind groups, whether the bind\n  groups are reset by another compatible ones or not, its list of internal usages within one usage\n  scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('useDifferentTextureAsTexture2', [true, false])\n      .combine('baseLayer2', [0, 1] as const)\n      .combine('view1Binding', kTextureBindingTypes)\n      .combine('view2Binding', kTextureBindingTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility,\n      'texture views used in bindgroups must consist of the entire array in compatibility mode. textureView0 does not fit.'\n    );\n  })\n  .fn(t => {\n    const { useDifferentTextureAsTexture2, baseLayer2, view1Binding, view2Binding } = t.params;\n\n    const texture0 = t.createTextureTracked({\n      format: 'r32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const bindGroup0 = t.createBindGroupForTest(textureView0, view1Binding, 'unfilterable-float');\n    const bindGroup1 = t.createBindGroupForTest(textureView0, view2Binding, 'unfilterable-float');\n\n    const texture2 = useDifferentTextureAsTexture2\n      ? t.createTextureTracked({\n          format: 'r32float',\n          usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n          size: [kTextureSize, kTextureSize, kTextureLayers],\n        })\n      : texture0;\n    const textureView2 = texture2.createView({\n      dimension: '2d-array',\n      baseArrayLayer: baseLayer2,\n      arrayLayerCount: kTextureLayers - baseLayer2,\n    });\n    // There should be no conflict between bindGroup0 and validBindGroup2.\n    const validBindGroup2 = t.createBindGroupForTest(\n      textureView2,\n      view2Binding,\n      'unfilterable-float'\n    );\n\n    const unusedColorTexture = t.createTextureTracked({\n      format: 'r32float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: unusedColorTexture.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassEncoder.setBindGroup(0, bindGroup0);\n    renderPassEncoder.setBindGroup(1, bindGroup1);\n    renderPassEncoder.setBindGroup(1, validBindGroup2);\n    renderPassEncoder.end();\n\n    const noConflict =\n      (IsReadOnlyTextureBindingType(view1Binding) && IsReadOnlyTextureBindingType(view2Binding)) ||\n      view1Binding === view2Binding;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !noConflict);\n  });\n\ng.test('subresources,set_bind_group_on_same_index_depth_stencil_texture')\n  .desc(\n    `\n  Test that when one depth stencil texture subresource is bound to different bind groups, whether\n  the bind groups are reset by another compatible ones or not, its list of internal usages within\n  one usage scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('bindAspect', ['depth-only', 'stencil-only'] as const)\n      .combine('depthStencilReadOnly', [true, false])\n  )\n  .fn(t => {\n    const { bindAspect, depthStencilReadOnly } = t.params;\n    const depthStencilTexture = t.createTextureTracked({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n\n    const conflictedToNonReadOnlyAttachmentBindGroup = t.createBindGroupForTest(\n      depthStencilTexture.createView({\n        dimension: '2d-array',\n        aspect: bindAspect,\n      }),\n      'sampled-texture',\n      bindAspect === 'depth-only' ? 'depth' : 'uint'\n    );\n\n    const colorTexture = t.createTextureTracked({\n      format: 'r32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n    const validBindGroup = t.createBindGroupForTest(\n      colorTexture.createView({\n        dimension: '2d-array',\n      }),\n      'sampled-texture',\n      'unfilterable-float'\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthReadOnly: depthStencilReadOnly,\n        stencilReadOnly: depthStencilReadOnly,\n      },\n    });\n    renderPassEncoder.setBindGroup(0, conflictedToNonReadOnlyAttachmentBindGroup);\n    renderPassEncoder.setBindGroup(0, validBindGroup);\n    renderPassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !depthStencilReadOnly);\n  });\n\ng.test('subresources,set_unused_bind_group')\n  .desc(\n    `\n  Test that when one texture subresource is bound to different bind groups and the bind groups are\n  used in the same render or compute pass encoder, its list of internal usages within one usage\n  scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('inRenderPass', [true, false])\n      .combine('textureUsage0', kTextureBindingTypes)\n      .combine('textureUsage1', kTextureBindingTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility,\n      'texture views used in bindgroups must consist of the entire array in compatibility mode. textureView0 does not fit.'\n    );\n  })\n  .fn(t => {\n    const { inRenderPass, textureUsage0, textureUsage1 } = t.params;\n\n    if (\n      textureUsage0 === 'readwrite-storage-texture' ||\n      textureUsage1 === 'readwrite-storage-texture'\n    ) {\n      t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    }\n\n    const texture0 = t.createTextureTracked({\n      format: 'r32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const visibility = inRenderPass ? GPUShaderStage.FRAGMENT : GPUShaderStage.COMPUTE;\n    // bindGroup0 is used by the pipelines, and bindGroup1 is not used by the pipelines.\n    const bindGroup0 = t.createBindGroupForTest(\n      textureView0,\n      textureUsage0,\n      'unfilterable-float',\n      visibility\n    );\n    const bindGroup1 = t.createBindGroupForTest(\n      textureView0,\n      textureUsage1,\n      'unfilterable-float',\n      visibility\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    const colorTexture = t.createTextureTracked({\n      format: 'r32float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    if (inRenderPass) {\n      let fragmentShader = '';\n      switch (textureUsage0) {\n        case 'sampled-texture':\n          fragmentShader = `\n          @group(0) @binding(0) var texture0 : texture_2d_array<f32>;\n          @fragment fn main()\n            -> @location(0) vec4<f32> {\n              return textureLoad(texture0, vec2<i32>(), 0, 0);\n          }\n          `;\n          break;\n        case `readonly-storage-texture`:\n          fragmentShader = `\n          @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read>;\n          @fragment fn main()\n            -> @location(0) vec4<f32> {\n              return textureLoad(texture0, vec2<i32>(), 0);\n          }\n          `;\n          break;\n        case `writeonly-storage-texture`:\n          fragmentShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, write>;\n            @fragment fn main()\n              -> @location(0) vec4<f32> {\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                return vec4f(0, 0, 0, 1);\n            }\n            `;\n          break;\n        case `readwrite-storage-texture`:\n          fragmentShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read_write>;\n            @fragment fn main()\n              -> @location(0) vec4<f32> {\n                let color = textureLoad(texture0, vec2i(), 0);\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                return color;\n            }\n            `;\n          break;\n      }\n\n      const renderPipeline = t.device.createRenderPipeline({\n        layout: t.device.createPipelineLayout({\n          bindGroupLayouts: [\n            t.createBindGroupLayoutForTest(textureUsage0, 'unfilterable-float', visibility),\n          ],\n        }),\n        vertex: {\n          module: t.device.createShaderModule({\n            code: t.getNoOpShaderCode('VERTEX'),\n          }),\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: fragmentShader,\n          }),\n          targets: [{ format: 'r32float' }],\n        },\n      });\n\n      const renderPassEncoder = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorTexture.createView(),\n            loadOp: 'load',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPassEncoder.setBindGroup(0, bindGroup0);\n      renderPassEncoder.setBindGroup(1, bindGroup1);\n      renderPassEncoder.setPipeline(renderPipeline);\n      renderPassEncoder.draw(1);\n      renderPassEncoder.end();\n    } else {\n      let computeShader = '';\n      switch (textureUsage0) {\n        case 'sampled-texture':\n          computeShader = `\n          @group(0) @binding(0) var texture0 : texture_2d_array<f32>;\n          @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n          @compute @workgroup_size(1) fn main() {\n              let value = textureLoad(texture0, vec2i(), 0, 0);\n              textureStore(writableStorage, vec2i(), 0, value);\n          }\n          `;\n          break;\n        case `readonly-storage-texture`:\n          computeShader = `\n          @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read>;\n          @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n          @compute @workgroup_size(1) fn main() {\n              let value = textureLoad(texture0, vec2<i32>(), 0);\n              textureStore(writableStorage, vec2i(), 0, value);\n          }\n          `;\n          break;\n        case `writeonly-storage-texture`:\n          computeShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, write>;\n            @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n            @compute @workgroup_size(1) fn main() {\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                textureStore(writableStorage, vec2i(), 0, vec4f(1, 0, 0, 1));\n            }\n            `;\n          break;\n        case `readwrite-storage-texture`:\n          computeShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read_write>;\n            @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n            @compute @workgroup_size(1) fn main() {\n                let color = textureLoad(texture0, vec2i(), 0);\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                textureStore(writableStorage, vec2i(), 0, color);\n            }\n            `;\n          break;\n      }\n\n      const pipelineLayout = t.device.createPipelineLayout({\n        bindGroupLayouts: [\n          t.createBindGroupLayoutForTest(textureUsage0, 'unfilterable-float', visibility),\n          t.createBindGroupLayoutForTest(\n            'writeonly-storage-texture',\n            'unfilterable-float',\n            visibility\n          ),\n        ],\n      });\n      const computePipeline = t.device.createComputePipeline({\n        layout: pipelineLayout,\n        compute: {\n          module: t.device.createShaderModule({\n            code: computeShader,\n          }),\n        },\n      });\n\n      const writableStorageTexture = t.createTextureTracked({\n        format: 'r32float',\n        usage: GPUTextureUsage.STORAGE_BINDING,\n        size: [kTextureSize, kTextureSize, 1],\n      });\n      const writableStorageTextureView = writableStorageTexture.createView({\n        dimension: '2d-array',\n        baseArrayLayer: 0,\n        arrayLayerCount: 1,\n      });\n      const writableStorageTextureBindGroup = t.createBindGroupForTest(\n        writableStorageTextureView,\n        'writeonly-storage-texture',\n        'unfilterable-float',\n        visibility\n      );\n\n      const computePassEncoder = encoder.beginComputePass();\n      computePassEncoder.setBindGroup(0, bindGroup0);\n      computePassEncoder.setBindGroup(1, writableStorageTextureBindGroup);\n      computePassEncoder.setBindGroup(2, bindGroup1);\n      computePassEncoder.setPipeline(computePipeline);\n      computePassEncoder.dispatchWorkgroups(1);\n      computePassEncoder.end();\n    }\n\n    // In WebGPU SPEC (https://gpuweb.github.io/gpuweb/#programming-model-synchronization):\n    // This specification defines the following usage scopes:\n    // - In a compute pass, each dispatch command (dispatchWorkgroups() or\n    //   dispatchWorkgroupsIndirect()) is one usage scope. A subresource is \"used\" in the usage\n    //   scope if it is potentially accessible by the command. State-setting compute pass commands,\n    //   like setBindGroup(index, bindGroup, dynamicOffsets), do not contribute directly to a usage\n    //   scope.\n    // - One render pass is one usage scope. A subresource is \"used\" in the usage scope if it’s\n    //   referenced by any (state-setting or non-state-setting) command. For example, in\n    //   setBindGroup(index, bindGroup, dynamicOffsets), every subresource in bindGroup is \"used\" in\n    //   the render pass’s usage scope.\n    const success =\n      !inRenderPass ||\n      (IsReadOnlyTextureBindingType(textureUsage0) &&\n        IsReadOnlyTextureBindingType(textureUsage1)) ||\n      textureUsage0 === textureUsage1;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,texture_usages_in_copy_and_render_pass')\n  .desc(\n    `\n  Test that using one texture subresource in a render pass encoder and a copy command is always\n  allowed as WebGPU SPEC (chapter 3.4.5) defines that out of any pass encoder, each command always\n  belongs to one usage scope.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', [\n        'copy-src',\n        'copy-dst',\n        'color-attachment',\n        ...kTextureBindingTypes,\n      ] as const)\n      .combine('usage1', [\n        'copy-src',\n        'copy-dst',\n        'color-attachment',\n        ...kTextureBindingTypes,\n      ] as const)\n      .filter(\n        ({ usage0, usage1 }) =>\n          usage0 === 'copy-src' ||\n          usage0 === 'copy-dst' ||\n          usage1 === 'copy-src' ||\n          usage1 === 'copy-dst'\n      )\n  )\n  .fn(t => {\n    const { usage0, usage1 } = t.params;\n\n    skipIfStorageTexturesUsedAndNotAvailableInFragmentStage(t, usage0, 1);\n    skipIfStorageTexturesUsedAndNotAvailableInFragmentStage(t, usage1, 1);\n\n    const texture = t.createTextureTracked({\n      format: 'r32float',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n\n    const UseTextureOnCommandEncoder = (\n      texture: GPUTexture,\n      usage: 'copy-src' | 'copy-dst' | 'color-attachment' | TextureBindingType,\n      encoder: GPUCommandEncoder\n    ) => {\n      switch (usage) {\n        case 'copy-src': {\n          const buffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_DST,\n          });\n          encoder.copyTextureToBuffer({ texture }, { buffer }, [1, 1, 1]);\n          break;\n        }\n        case 'copy-dst': {\n          const buffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_SRC,\n          });\n          encoder.copyBufferToTexture({ buffer }, { texture }, [1, 1, 1]);\n          break;\n        }\n        case 'color-attachment': {\n          const renderPassEncoder = encoder.beginRenderPass({\n            colorAttachments: [{ view: texture.createView(), loadOp: 'load', storeOp: 'store' }],\n          });\n          renderPassEncoder.end();\n          break;\n        }\n        case 'sampled-texture':\n        case 'readonly-storage-texture':\n        case 'writeonly-storage-texture':\n        case 'readwrite-storage-texture': {\n          const colorTexture = t.createTextureTracked({\n            format: 'r32float',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            size: [kTextureSize, kTextureSize, 1],\n          });\n          const renderPassEncoder = encoder.beginRenderPass({\n            colorAttachments: [\n              { view: colorTexture.createView(), loadOp: 'load', storeOp: 'store' },\n            ],\n          });\n          const bindGroup = t.createBindGroupForTest(\n            texture.createView({\n              dimension: '2d-array',\n            }),\n            usage,\n            'unfilterable-float'\n          );\n          renderPassEncoder.setBindGroup(0, bindGroup);\n          renderPassEncoder.end();\n          break;\n        }\n      }\n    };\n    const encoder = t.device.createCommandEncoder();\n    UseTextureOnCommandEncoder(texture, usage0, encoder);\n    UseTextureOnCommandEncoder(texture, usage1, encoder);\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n\ng.test('subresources,texture_view_usages')\n  .desc(\n    `\n  Test that the usages of the texture view are used to validate compatibility in command encoding\n  instead of the usages of the base texture.`\n  )\n  .params(u =>\n    u\n      .combine('bindingType', ['color-attachment', ...kTextureBindingTypes] as const)\n      .combine('viewUsage', [0, ...kTextureUsages])\n  )\n  .fn(t => {\n    const { bindingType, viewUsage } = t.params;\n\n    skipIfStorageTexturesUsedAndNotAvailableInFragmentStage(t, bindingType, 1);\n\n    const texture = t.createTextureTracked({\n      format: 'r32float',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n\n    switch (bindingType) {\n      case 'color-attachment': {\n        const encoder = t.device.createCommandEncoder();\n        const renderPassEncoder = encoder.beginRenderPass({\n          colorAttachments: [\n            { view: texture.createView({ usage: viewUsage }), loadOp: 'load', storeOp: 'store' },\n          ],\n        });\n        renderPassEncoder.end();\n\n        const success = viewUsage === 0 || (viewUsage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0;\n\n        t.expectValidationError(() => {\n          encoder.finish();\n        }, !success);\n        break;\n      }\n      case 'sampled-texture':\n      case 'readonly-storage-texture':\n      case 'writeonly-storage-texture':\n      case 'readwrite-storage-texture':\n        {\n          let success = true;\n          if (viewUsage !== 0) {\n            if (bindingType === 'sampled-texture') {\n              if ((viewUsage & GPUTextureUsage.TEXTURE_BINDING) === 0) success = false;\n            } else {\n              if ((viewUsage & GPUTextureUsage.STORAGE_BINDING) === 0) success = false;\n            }\n          }\n\n          t.expectValidationError(() => {\n            t.createBindGroupForTest(\n              texture.createView({\n                dimension: '2d-array',\n                usage: viewUsage,\n              }),\n              bindingType,\n              'unfilterable-float'\n            );\n          }, !success);\n        }\n        break;\n      default:\n        unreachable();\n    }\n  });\n"],"mappings":"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"}