{"version":3,"file":"in_pass_misc.spec.js","names":["description","makeTestGroup","unreachable","MaxLimitsTestMixin","BufferResourceUsageTest","kAllBufferUsages","skipIfStorageBuffersUsedAndNotAvailableInStages","g","kBufferSize","test","desc","params","u","combine","fn","t","usage0","usage1","kUsages","GPUBufferUsage","UNIFORM","STORAGE","INDIRECT","buffer","createBufferWithState","size","usage","anotherBuffer","bindGroupLayouts","createBindGroupLayoutForTest","push","pipelineLayout","device","createPipelineLayout","computePipeline","createNoOpComputePipeline","encoder","createCommandEncoder","computePassEncoder","beginComputePass","setPipeline","bindGroup0","createBindGroupForTest","setBindGroup","anotherBindGroup","bindGroup1","dispatchWorkgroups","dispatchWorkgroupsIndirect","end","expectValidationError","finish","unless","VERTEX","INDEX","renderPassEncoder","beginSimpleRenderPass","vertexBufferCount","length","setVertexBuffer","setIndexBuffer","renderPipeline","createRenderPipelineForTest","indexBuffer","drawIndexedIndirect","drawIndirect","drawIndexed","draw","fail","pass","IsCopy","IsValidComputeUsage","COPY_SRC","COPY_DST","UseBufferOnCommandEncoder","destinationBuffer","copyBufferToBuffer","sourceBuffer","bindGroup","createNoOpRenderPipeline"],"sources":["../../../../../../src/webgpu/api/validation/resource_usages/buffer/in_pass_misc.spec.ts"],"sourcesContent":["export const description = `\nTest other buffer usage validation rules that are not tests in ./in_pass_encoder.spec.js.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../../common/util/util.js';\nimport { MaxLimitsTestMixin } from '../../../../gpu_test.js';\n\nimport {\n  BufferUsage,\n  BufferResourceUsageTest,\n  kAllBufferUsages,\n  skipIfStorageBuffersUsedAndNotAvailableInStages,\n} from './in_pass_encoder.spec.js';\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(BufferResourceUsageTest));\n\nconst kBufferSize = 256;\n\ng.test('subresources,reset_buffer_usage_before_dispatch')\n  .desc(\n    `\nTest that the buffer usages which are reset by another state-setting commands before a dispatch call\ndo not contribute directly to any usage scope in a compute pass.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', ['uniform', 'storage', 'read-only-storage'] as const)\n      .combine('usage1', ['uniform', 'storage', 'read-only-storage', 'indirect'] as const)\n  )\n  .fn(t => {\n    const { usage0, usage1 } = t.params;\n\n    const kUsages = GPUBufferUsage.UNIFORM | GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT;\n    const buffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n    const anotherBuffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n\n    const bindGroupLayouts: GPUBindGroupLayout[] = [\n      t.createBindGroupLayoutForTest(usage0, 'compute'),\n    ];\n    if (usage1 !== 'indirect') {\n      bindGroupLayouts.push(t.createBindGroupLayoutForTest(usage1, 'compute'));\n    }\n    const pipelineLayout = t.device.createPipelineLayout({ bindGroupLayouts });\n    const computePipeline = t.createNoOpComputePipeline(pipelineLayout);\n\n    const encoder = t.device.createCommandEncoder();\n    const computePassEncoder = encoder.beginComputePass();\n    computePassEncoder.setPipeline(computePipeline);\n\n    // Set usage0 for buffer at bind group index 0\n    const bindGroup0 = t.createBindGroupForTest(buffer, 0, usage0, 'compute');\n    computePassEncoder.setBindGroup(0, bindGroup0);\n\n    // Reset bind group index 0 with another bind group that uses anotherBuffer\n    const anotherBindGroup = t.createBindGroupForTest(anotherBuffer, 0, usage0, 'compute');\n    computePassEncoder.setBindGroup(0, anotherBindGroup);\n\n    // Set usage1 for buffer\n    switch (usage1) {\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        const bindGroup1 = t.createBindGroupForTest(buffer, 0, usage1, 'compute');\n        computePassEncoder.setBindGroup(1, bindGroup1);\n        computePassEncoder.dispatchWorkgroups(1);\n        break;\n      }\n      case 'indirect': {\n        computePassEncoder.dispatchWorkgroupsIndirect(buffer, 0);\n        break;\n      }\n    }\n    computePassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n\ng.test('subresources,reset_buffer_usage_before_draw')\n  .desc(\n    `\nTest that the buffer usages which are reset by another state-setting commands before a draw call\nstill contribute directly to the usage scope of the draw call.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', ['uniform', 'storage', 'read-only-storage', 'vertex', 'index'] as const)\n      .combine('usage1', kAllBufferUsages)\n      .unless(t => {\n        return t.usage0 === 'index' && t.usage1 === 'indirect';\n      })\n  )\n  .fn(t => {\n    const { usage0, usage1 } = t.params;\n\n    skipIfStorageBuffersUsedAndNotAvailableInStages(t, usage0, 'fragment', 1);\n    skipIfStorageBuffersUsedAndNotAvailableInStages(t, usage1, 'fragment', 1);\n\n    const kUsages =\n      GPUBufferUsage.UNIFORM |\n      GPUBufferUsage.STORAGE |\n      GPUBufferUsage.INDIRECT |\n      GPUBufferUsage.VERTEX |\n      GPUBufferUsage.INDEX;\n    const buffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n    const anotherBuffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n\n    const bindGroupLayouts: GPUBindGroupLayout[] = [];\n    let vertexBufferCount = 0;\n\n    // Set buffer as usage0 and reset buffer with anotherBuffer as usage0\n    switch (usage0) {\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        const bindGroup0 = t.createBindGroupForTest(buffer, 0, usage0, 'fragment');\n        renderPassEncoder.setBindGroup(bindGroupLayouts.length, bindGroup0);\n\n        const anotherBindGroup = t.createBindGroupForTest(anotherBuffer, 0, usage0, 'fragment');\n        renderPassEncoder.setBindGroup(bindGroupLayouts.length, anotherBindGroup);\n\n        bindGroupLayouts.push(t.createBindGroupLayoutForTest(usage0, 'fragment'));\n        break;\n      }\n      case 'vertex': {\n        renderPassEncoder.setVertexBuffer(vertexBufferCount, buffer);\n        renderPassEncoder.setVertexBuffer(vertexBufferCount, anotherBuffer);\n\n        ++vertexBufferCount;\n        break;\n      }\n      case 'index': {\n        renderPassEncoder.setIndexBuffer(buffer, 'uint16');\n        renderPassEncoder.setIndexBuffer(anotherBuffer, 'uint16');\n        break;\n      }\n    }\n\n    // Set buffer as usage1\n    switch (usage1) {\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        const bindGroup1 = t.createBindGroupForTest(buffer, 0, usage1, 'fragment');\n        renderPassEncoder.setBindGroup(bindGroupLayouts.length, bindGroup1);\n\n        bindGroupLayouts.push(t.createBindGroupLayoutForTest(usage1, 'fragment'));\n        break;\n      }\n      case 'vertex': {\n        renderPassEncoder.setVertexBuffer(vertexBufferCount, buffer);\n        ++vertexBufferCount;\n        break;\n      }\n      case 'index': {\n        renderPassEncoder.setIndexBuffer(buffer, 'uint16');\n        break;\n      }\n      case 'indirect':\n      case 'indexedIndirect':\n        break;\n    }\n\n    // Add draw call\n    const pipelineLayout = t.device.createPipelineLayout({\n      bindGroupLayouts,\n    });\n    const renderPipeline = t.createRenderPipelineForTest(pipelineLayout, vertexBufferCount);\n    renderPassEncoder.setPipeline(renderPipeline);\n    switch (usage1) {\n      case 'indexedIndirect': {\n        if (usage0 !== 'index') {\n          const indexBuffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.INDEX,\n          });\n          renderPassEncoder.setIndexBuffer(indexBuffer, 'uint16');\n        }\n        renderPassEncoder.drawIndexedIndirect(buffer, 0);\n        break;\n      }\n      case 'indirect': {\n        renderPassEncoder.drawIndirect(buffer, 0);\n        break;\n      }\n      case 'index': {\n        renderPassEncoder.drawIndexed(1);\n        break;\n      }\n      case 'vertex':\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        if (usage0 === 'index') {\n          renderPassEncoder.drawIndexed(1);\n        } else {\n          renderPassEncoder.draw(1);\n        }\n        break;\n      }\n    }\n\n    renderPassEncoder.end();\n\n    const fail = (usage0 === 'storage') !== (usage1 === 'storage');\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, fail);\n  });\n\ng.test('subresources,buffer_usages_in_copy_and_pass')\n  .desc(\n    `\n  Test that using one buffer in a copy command, a render or compute pass encoder is always allowed\n  as WebGPU SPEC (chapter 3.4.5) defines that out of any pass encoder, each command belongs to one\n  separated usage scope.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', [\n        'copy-src',\n        'copy-dst',\n        'uniform',\n        'storage',\n        'read-only-storage',\n        'vertex',\n        'index',\n        'indirect',\n        'indexedIndirect',\n      ] as const)\n      .combine('usage1', [\n        'copy-src',\n        'copy-dst',\n        'uniform',\n        'storage',\n        'read-only-storage',\n        'vertex',\n        'index',\n        'indirect',\n        'indexedIndirect',\n      ] as const)\n      .combine('pass', ['render', 'compute'] as const)\n      .unless(({ usage0, usage1, pass }) => {\n        const IsCopy = (usage: BufferUsage | 'copy-src' | 'copy-dst') => {\n          return usage === 'copy-src' || usage === 'copy-dst';\n        };\n        // We intend to test copy usages in this test.\n        if (!IsCopy(usage0) && !IsCopy(usage1)) {\n          return true;\n        }\n        // When both usage0 and usage1 are copy usages, 'pass' is meaningless so in such situation\n        // we just need to reserve one value as 'pass'.\n        if (IsCopy(usage0) && IsCopy(usage1)) {\n          return pass === 'compute';\n        }\n\n        const IsValidComputeUsage = (usage: BufferUsage | 'copy-src' | 'copy-dst') => {\n          switch (usage) {\n            case 'vertex':\n            case 'index':\n            case 'indexedIndirect':\n              return false;\n            default:\n              return true;\n          }\n        };\n        if (pass === 'compute') {\n          return !IsValidComputeUsage(usage0) || !IsValidComputeUsage(usage1);\n        }\n\n        return false;\n      })\n  )\n  .fn(t => {\n    const { usage0, usage1, pass } = t.params;\n\n    skipIfStorageBuffersUsedAndNotAvailableInStages(\n      t,\n      usage0,\n      pass === 'render' ? 'fragment' : 'compute',\n      1\n    );\n    skipIfStorageBuffersUsedAndNotAvailableInStages(\n      t,\n      usage1,\n      pass === 'render' ? 'fragment' : 'compute',\n      1\n    );\n\n    const kUsages =\n      GPUBufferUsage.COPY_SRC |\n      GPUBufferUsage.COPY_DST |\n      GPUBufferUsage.UNIFORM |\n      GPUBufferUsage.STORAGE |\n      GPUBufferUsage.INDIRECT |\n      GPUBufferUsage.VERTEX |\n      GPUBufferUsage.INDEX;\n    const buffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n\n    const UseBufferOnCommandEncoder = (\n      usage:\n        | 'copy-src'\n        | 'copy-dst'\n        | 'uniform'\n        | 'storage'\n        | 'read-only-storage'\n        | 'vertex'\n        | 'index'\n        | 'indirect'\n        | 'indexedIndirect',\n      encoder: GPUCommandEncoder\n    ) => {\n      switch (usage) {\n        case 'copy-src': {\n          const destinationBuffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_DST,\n          });\n          encoder.copyBufferToBuffer(buffer, 0, destinationBuffer, 0, 4);\n          break;\n        }\n        case 'copy-dst': {\n          const sourceBuffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_SRC,\n          });\n          encoder.copyBufferToBuffer(sourceBuffer, 0, buffer, 0, 4);\n          break;\n        }\n        case 'uniform':\n        case 'storage':\n        case 'read-only-storage': {\n          switch (pass) {\n            case 'render': {\n              const bindGroup = t.createBindGroupForTest(buffer, 0, usage, 'fragment');\n              const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n              renderPassEncoder.setBindGroup(0, bindGroup);\n              renderPassEncoder.end();\n              break;\n            }\n            case 'compute': {\n              const bindGroup = t.createBindGroupForTest(buffer, 0, usage, 'compute');\n              const computePassEncoder = encoder.beginComputePass();\n              computePassEncoder.setBindGroup(0, bindGroup);\n              computePassEncoder.end();\n              break;\n            }\n            default:\n              unreachable();\n          }\n          break;\n        }\n        case 'vertex': {\n          const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n          renderPassEncoder.setVertexBuffer(0, buffer);\n          renderPassEncoder.end();\n          break;\n        }\n        case 'index': {\n          const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n          renderPassEncoder.setIndexBuffer(buffer, 'uint16');\n          renderPassEncoder.end();\n          break;\n        }\n        case 'indirect': {\n          switch (pass) {\n            case 'render': {\n              const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n              const renderPipeline = t.createNoOpRenderPipeline();\n              renderPassEncoder.setPipeline(renderPipeline);\n              renderPassEncoder.drawIndirect(buffer, 0);\n              renderPassEncoder.end();\n              break;\n            }\n            case 'compute': {\n              const computePassEncoder = encoder.beginComputePass();\n              const computePipeline = t.createNoOpComputePipeline();\n              computePassEncoder.setPipeline(computePipeline);\n              computePassEncoder.dispatchWorkgroupsIndirect(buffer, 0);\n              computePassEncoder.end();\n              break;\n            }\n            default:\n              unreachable();\n          }\n          break;\n        }\n        case 'indexedIndirect': {\n          const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n          const renderPipeline = t.createNoOpRenderPipeline();\n          renderPassEncoder.setPipeline(renderPipeline);\n          const indexBuffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.INDEX,\n          });\n          renderPassEncoder.setIndexBuffer(indexBuffer, 'uint16');\n          renderPassEncoder.drawIndexedIndirect(buffer, 0);\n          renderPassEncoder.end();\n          break;\n        }\n        default:\n          unreachable();\n      }\n    };\n\n    const encoder = t.device.createCommandEncoder();\n    UseBufferOnCommandEncoder(usage0, encoder);\n    UseBufferOnCommandEncoder(usage1, encoder);\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n"],"mappings":"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"}