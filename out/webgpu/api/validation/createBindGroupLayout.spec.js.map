{"version":3,"file":"createBindGroupLayout.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","kShaderStages","kShaderStageCombinations","kStorageTextureAccessValues","kTextureSampleTypes","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","getBindingLimitForBindingType","kAllTextureFormats","kTextureFormatInfo","MaxLimitsTestMixin","ValidationTest","clone","descriptor","JSON","parse","stringify","isValidBufferTypeForStages","device","visibility","type","GPUShaderStage","VERTEX","limits","maxStorageBuffersInVertexStage","FRAGMENT","maxStorageBuffersInFragmentStage","isValidStorageTextureForStages","maxStorageTexturesInVertexStage","maxStorageTexturesInFragmentStage","isValidBGLEntryForStages","entry","storageTexture","buffer","g","test","desc","paramsSubcasesOnly","bindings","_valid","fn","t","params","entries","binding","push","COMPUTE","expectValidationError","createBindGroupLayout","u","combine","bindingVariant","maxBindingsPerBindGroup","success","beginSubcases","info","validStages","shaderStage","undefined","access","appliedAccess","format","viewDimension","sampleType","texture","multisampled","extraDynamicBuffers","staticBuffers","limitName","perPipelineLimitClass","maxDynamicLimit","bufferCount","dynamicBufferCount","perStageLimit","perStageLimitClass","maxLimits","i","hasDynamicOffset","length","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","class","sampler","kMaxResourcesCases","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","maxedTypeInfo","maxedCount","extraTypeInfo","skipIf","maxResourceBindings","goodDescriptor","newDescriptor","newBindingCountsTowardSamePerStageLimit","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","skipIfTextureFormatNotUsableAsStorageTexture","color","storage","readWriteStorage"],"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: make sure tests are complete.\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kShaderStages,\n  kShaderStageCombinations,\n  kStorageTextureAccessValues,\n  kTextureSampleTypes,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes,\n  BGLEntry,\n  getBindingLimitForBindingType,\n} from '../../capability_info.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../format_info.js';\nimport { MaxLimitsTestMixin } from '../../gpu_test.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nfunction isValidBufferTypeForStages(\n  device: GPUDevice,\n  visibility: number,\n  type: GPUBufferBindingType | undefined\n) {\n  if (type === 'read-only-storage' || type === 'storage') {\n    if (visibility & GPUShaderStage.VERTEX) {\n      if (!(device.limits.maxStorageBuffersInVertexStage! > 0)) {\n        return false;\n      }\n    }\n\n    if (visibility & GPUShaderStage.FRAGMENT) {\n      if (!(device.limits.maxStorageBuffersInFragmentStage! > 0)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isValidStorageTextureForStages(device: GPUDevice, visibility: number) {\n  if (visibility & GPUShaderStage.VERTEX) {\n    if (!(device.limits.maxStorageTexturesInVertexStage! > 0)) {\n      return false;\n    }\n  }\n\n  if (visibility & GPUShaderStage.FRAGMENT) {\n    if (!(device.limits.maxStorageTexturesInFragmentStage! > 0)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isValidBGLEntryForStages(device: GPUDevice, visibility: number, entry: BGLEntry) {\n  return entry.storageTexture\n    ? isValidStorageTextureForStages(device, visibility)\n    : entry.buffer\n    ? isValidBufferTypeForStages(device, visibility, entry.buffer?.type)\n    : true;\n}\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(ValidationTest));\n\ng.test('duplicate_bindings')\n  .desc('Test that uniqueness of binding numbers across entries is enforced.')\n  .paramsSubcasesOnly([\n    { bindings: [0, 1], _valid: true },\n    { bindings: [0, 0], _valid: false },\n  ])\n  .fn(t => {\n    const { bindings, _valid } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    for (const binding of bindings) {\n      entries.push({\n        binding,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' as const },\n      });\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !_valid);\n  });\n\ng.test('maximum_binding_limit')\n  .desc(\n    `\n  Test that a validation error is generated if the binding number exceeds the maximum binding limit.\n\n  TODO: Need to also test with higher limits enabled on the device, once we have a way to do that.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('bindingVariant', [1, 4, 8, 256, 'default', 'default-minus-one'] as const)\n  )\n  .fn(t => {\n    const { bindingVariant } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    const binding =\n      bindingVariant === 'default'\n        ? t.device.limits.maxBindingsPerBindGroup\n        : bindingVariant === 'default-minus-one'\n        ? t.device.limits.maxBindingsPerBindGroup - 1\n        : bindingVariant;\n\n    entries.push({\n      binding,\n      visibility: GPUShaderStage.COMPUTE,\n      buffer: { type: 'storage' as const },\n    });\n\n    const success = binding < t.device.limits.maxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !success);\n  });\n\ng.test('visibility')\n  .desc(\n    `\n    Test that only the appropriate combinations of visibilities are allowed for each resource type.\n    - Test each possible combination of shader stage visibilities.\n    - Test each type of bind group resource.`\n  )\n  .params(u =>\n    u\n      .combine('visibility', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(t => {\n    const { visibility, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const success =\n      (visibility & ~info.validStages) === 0 &&\n      isValidBGLEntryForStages(t.device, visibility, entry);\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, ...entry }],\n      });\n    }, !success);\n  });\n\ng.test('visibility,VERTEX_shader_stage_buffer_type')\n  .desc(\n    `\n  Test that a validation error is generated if the buffer type is 'storage' when the\n  visibility of the entry includes VERTEX.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('shaderStage', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('type', kBufferBindingTypes)\n  )\n  .fn(t => {\n    const { shaderStage, type } = t.params;\n\n    const success =\n      !(type === 'storage' && shaderStage & GPUShaderStage.VERTEX) &&\n      isValidBufferTypeForStages(t.device, shaderStage, type);\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: shaderStage,\n            buffer: { type },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('visibility,VERTEX_shader_stage_storage_texture_access')\n  .desc(\n    `\n  Test that a validation error is generated if the access value is 'write-only' when the\n  visibility of the entry includes VERTEX.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('shaderStage', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('access', [undefined, ...kStorageTextureAccessValues])\n  )\n  .fn(t => {\n    const { shaderStage, access } = t.params;\n\n    const appliedAccess = access ?? 'write-only';\n    const success =\n      !(\n        // If visibility includes VERETX, storageTexture.access must be \"read-only\"\n        (shaderStage & GPUShaderStage.VERTEX && appliedAccess !== 'read-only')\n      ) && isValidStorageTextureForStages(t.device, shaderStage);\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: shaderStage,\n            storageTexture: { access, format: 'r32uint' },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('multisampled_validation')\n  .desc(\n    `\n  Test that multisampling is only allowed if view dimensions is \"2d\" and the sampleType is not\n  \"float\".\n  `\n  )\n  .params(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n      .beginSubcases()\n      .combine('sampleType', [undefined, ...kTextureSampleTypes])\n  )\n  .fn(t => {\n    const { viewDimension, sampleType } = t.params;\n\n    const success =\n      (viewDimension === '2d' || viewDimension === undefined) &&\n      (sampleType ?? 'float') !== 'float';\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            texture: { multisampled: true, viewDimension, sampleType },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('max_dynamic_buffers')\n  .desc(\n    `\n    Test that limits on the maximum number of dynamic buffers are enforced.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers works.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(u =>\n    u\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .combine('extraDynamicBuffers', [0, 1])\n      .combine('staticBuffers', [0, 1])\n  )\n  .fn(t => {\n    const { type, extraDynamicBuffers, staticBuffers } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n\n    const limitName = info.perPipelineLimitClass.maxDynamicLimit;\n    const bufferCount = limitName ? t.device.limits[limitName]! : 0;\n    const dynamicBufferCount = bufferCount + extraDynamicBuffers;\n    const perStageLimit = t.device.limits[info.perStageLimitClass.maxLimits.COMPUTE]!;\n\n    const entries = [];\n    for (let i = 0; i < dynamicBufferCount; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    for (let i = dynamicBufferCount; i < dynamicBufferCount + staticBuffers; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: false },\n      });\n    }\n\n    const descriptor = {\n      entries,\n    };\n\n    t.expectValidationError(\n      () => {\n        t.device.createBindGroupLayout(descriptor);\n      },\n      extraDynamicBuffers > 0 || entries.length > perStageLimit\n    );\n  });\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(entry: BGLEntry, extraTypeSame: boolean) {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    yield entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nconst kMaxResourcesCases = kUnitCaseParamsBuilder\n  .combine('maxedEntry', allBindingEntries(false))\n  .beginSubcases()\n  .combine('maxedVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.maxedEntry).validStages & p.maxedVisibility) !== 0)\n  .expand('extraEntry', p => [\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, true),\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, false),\n  ])\n  .combine('extraVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless limitInfo.maxBindingsPerBindGroup.default is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded in a\n    single bind group layout.\n    - Test each binding type.\n    - Test that creation of a bind group layout using the maximum number of bindings works.\n    - Test that creation of a bind group layout using the maximum number of bindings + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(kMaxResourcesCases)\n  .fn(t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = getBindingLimitForBindingType(t.device, maxedVisibility, maxedEntry);\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    t.skipIf(!isValidBGLEntryForStages(t.device, extraVisibility, extraEntry));\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Add an entry counting towards the same limit. It should produce a validation error.\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      ...extraEntry,\n    });\n\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded across\n    multiple bind group layouts when creating a pipeline layout.\n    - Test each binding type.\n    - Test that creation of a pipeline using the maximum number of bindings works.\n    - Test that creation of a pipeline using the maximum number of bindings + 1 fails.\n  `\n  )\n  .params(kMaxResourcesCases)\n  .fn(t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = getBindingLimitForBindingType(t.device, maxedVisibility, maxedEntry);\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    t.skipIf(!isValidBGLEntryForStages(t.device, extraVisibility, extraEntry));\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          ...extraEntry,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\ng.test('storage_texture,layout_dimension')\n  .desc(\n    `\n  Test that viewDimension is not cube or cube-array if storageTextureLayout is not undefined.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n  )\n  .fn(t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension !== 'cube' && viewDimension !== `cube-array`;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: { format: 'rgba8unorm', viewDimension },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('storage_texture,formats')\n  .desc(\n    `\n  Test that a validation error is generated if the format doesn't support the storage usage. A\n  validation error is also generated if the format doesn't support the 'read-write' storage access\n  when the storage access is 'read-write'.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', kAllTextureFormats) //\n      .combine('access', kStorageTextureAccessValues)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n    t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n  })\n  .fn(t => {\n    const { format, access } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const success =\n      info.color?.storage && !(access === 'read-write' && !info.color?.readWriteStorage);\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: { format, access },\n          },\n        ],\n      });\n    }, !success);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAAC,CAED,SAASC,sBAAsB,QAAQ,6CAA6C;AACpF,SAASC,aAAa,QAAQ,yCAAyC;AACvE;EACEC,aAAa;EACbC,wBAAwB;EACxBC,2BAA2B;EAC3BC,mBAAmB;EACnBC,sBAAsB;EACtBC,iBAAiB;EACjBC,eAAe;EACfC,qBAAqB;EACrBC,mBAAmB;;EAEnBC,6BAA6B;AACxB,0BAA0B;AACjC,SAASC,kBAAkB,EAAEC,kBAAkB,QAAQ,sBAAsB;AAC7E,SAASC,kBAAkB,QAAQ,mBAAmB;;AAEtD,SAASC,cAAc,QAAQ,sBAAsB;;AAErD,SAASC,KAAKA,CAAyCC,UAAa,EAAK;EACvE,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,UAAU,CAAC,CAAC;AAC/C;;AAEA,SAASI,0BAA0BA;AACjCC,MAAiB;AACjBC,UAAkB;AAClBC,IAAsC;AACtC;EACA,IAAIA,IAAI,KAAK,mBAAmB,IAAIA,IAAI,KAAK,SAAS,EAAE;IACtD,IAAID,UAAU,GAAGE,cAAc,CAACC,MAAM,EAAE;MACtC,IAAI,EAAEJ,MAAM,CAACK,MAAM,CAACC,8BAA8B,GAAI,CAAC,CAAC,EAAE;QACxD,OAAO,KAAK;MACd;IACF;;IAEA,IAAIL,UAAU,GAAGE,cAAc,CAACI,QAAQ,EAAE;MACxC,IAAI,EAAEP,MAAM,CAACK,MAAM,CAACG,gCAAgC,GAAI,CAAC,CAAC,EAAE;QAC1D,OAAO,KAAK;MACd;IACF;EACF;;EAEA,OAAO,IAAI;AACb;;AAEA,SAASC,8BAA8BA,CAACT,MAAiB,EAAEC,UAAkB,EAAE;EAC7E,IAAIA,UAAU,GAAGE,cAAc,CAACC,MAAM,EAAE;IACtC,IAAI,EAAEJ,MAAM,CAACK,MAAM,CAACK,+BAA+B,GAAI,CAAC,CAAC,EAAE;MACzD,OAAO,KAAK;IACd;EACF;;EAEA,IAAIT,UAAU,GAAGE,cAAc,CAACI,QAAQ,EAAE;IACxC,IAAI,EAAEP,MAAM,CAACK,MAAM,CAACM,iCAAiC,GAAI,CAAC,CAAC,EAAE;MAC3D,OAAO,KAAK;IACd;EACF;;EAEA,OAAO,IAAI;AACb;;AAEA,SAASC,wBAAwBA,CAACZ,MAAiB,EAAEC,UAAkB,EAAEY,KAAe,EAAE;EACxF,OAAOA,KAAK,CAACC,cAAc;EACvBL,8BAA8B,CAACT,MAAM,EAAEC,UAAU,CAAC;EAClDY,KAAK,CAACE,MAAM;EACZhB,0BAA0B,CAACC,MAAM,EAAEC,UAAU,EAAEY,KAAK,CAACE,MAAM,EAAEb,IAAI,CAAC;EAClE,IAAI;AACV;;AAEA,OAAO,MAAMc,CAAC,GAAGrC,aAAa,CAACa,kBAAkB,CAACC,cAAc,CAAC,CAAC;;AAElEuB,CAAC,CAACC,IAAI,CAAC,oBAAoB,CAAC;AACzBC,IAAI,CAAC,qEAAqE,CAAC;AAC3EC,kBAAkB,CAAC;AAClB,EAAEC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,MAAM,EAAE,IAAI,CAAC,CAAC;AAClC,EAAED,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,MAAM,EAAE,KAAK,CAAC,CAAC;AACpC,CAAC;AACDC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEH,QAAQ,EAAEC,MAAM,CAAC,CAAC,GAAGE,CAAC,CAACC,MAAM;EACrC,MAAMC,OAAuC,GAAG,EAAE;;EAElD,KAAK,MAAMC,OAAO,IAAIN,QAAQ,EAAE;IAC9BK,OAAO,CAACE,IAAI,CAAC;MACXD,OAAO;MACPzB,UAAU,EAAEE,cAAc,CAACyB,OAAO;MAClCb,MAAM,EAAE,EAAEb,IAAI,EAAE,SAAkB,CAAC;IACrC,CAAC,CAAC;EACJ;;EAEAqB,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACJ,MAAM,CAAC;AACb,CAAC,CAAC;;AAEJL,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,IAAI;EACF;AACL;AACA;AACA;AACA;AACE,CAAC;AACAC,kBAAkB,CAAC,CAAAY,CAAC;AACnBA,CAAC,CAACC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,mBAAmB,CAAU;AACrF,CAAC;AACAV,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEU,cAAc,CAAC,CAAC,GAAGV,CAAC,CAACC,MAAM;EACnC,MAAMC,OAAuC,GAAG,EAAE;;EAElD,MAAMC,OAAO;EACXO,cAAc,KAAK,SAAS;EACxBV,CAAC,CAACvB,MAAM,CAACK,MAAM,CAAC6B,uBAAuB;EACvCD,cAAc,KAAK,mBAAmB;EACtCV,CAAC,CAACvB,MAAM,CAACK,MAAM,CAAC6B,uBAAuB,GAAG,CAAC;EAC3CD,cAAc;;EAEpBR,OAAO,CAACE,IAAI,CAAC;IACXD,OAAO;IACPzB,UAAU,EAAEE,cAAc,CAACyB,OAAO;IAClCb,MAAM,EAAE,EAAEb,IAAI,EAAE,SAAkB,CAAC;EACrC,CAAC,CAAC;;EAEF,MAAMiC,OAAO,GAAGT,OAAO,GAAGH,CAAC,CAACvB,MAAM,CAACK,MAAM,CAAC6B,uBAAuB;;EAEjEX,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACU,OAAO,CAAC;AACd,CAAC,CAAC;;AAEJnB,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,YAAY,EAAEnD,wBAAwB,CAAC;AAC/CuD,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,OAAO,EAAE/C,iBAAiB,CAAC,KAAK,CAAC;AAC9C,CAAC;AACAqC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEtB,UAAU,EAAEY,KAAK,CAAC,CAAC,GAAGU,CAAC,CAACC,MAAM;EACtC,MAAMa,IAAI,GAAGnD,eAAe,CAAC2B,KAAK,CAAC;;EAEnC,MAAMsB,OAAO;EACX,CAAClC,UAAU,GAAG,CAACoC,IAAI,CAACC,WAAW,MAAM,CAAC;EACtC1B,wBAAwB,CAACW,CAAC,CAACvB,MAAM,EAAEC,UAAU,EAAEY,KAAK,CAAC;;EAEvDU,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,EAAEzB,UAAU,EAAE,GAAGY,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ,CAAC,EAAE,CAACsB,OAAO,CAAC;AACd,CAAC,CAAC;;AAEJnB,CAAC,CAACC,IAAI,CAAC,4CAA4C,CAAC;AACjDC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,aAAa,EAAEnD,wBAAwB,CAAC;AAChDuD,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,MAAM,EAAE5C,mBAAmB;AACxC,CAAC;AACAkC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEgB,WAAW,EAAErC,IAAI,CAAC,CAAC,GAAGqB,CAAC,CAACC,MAAM;;EAEtC,MAAMW,OAAO;EACX,EAAEjC,IAAI,KAAK,SAAS,IAAIqC,WAAW,GAAGpC,cAAc,CAACC,MAAM,CAAC;EAC5DL,0BAA0B,CAACwB,CAAC,CAACvB,MAAM,EAAEuC,WAAW,EAAErC,IAAI,CAAC;;EAEzDqB,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVzB,UAAU,EAAEsC,WAAW;QACvBxB,MAAM,EAAE,EAAEb,IAAI,CAAC;MACjB,CAAC;;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACiC,OAAO,CAAC;AACd,CAAC,CAAC;;AAEJnB,CAAC,CAACC,IAAI,CAAC,uDAAuD,CAAC;AAC5DC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,aAAa,EAAEnD,wBAAwB,CAAC;AAChDuD,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,QAAQ,EAAE,CAACQ,SAAS,EAAE,GAAG1D,2BAA2B,CAAC;AAClE,CAAC;AACAwC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEgB,WAAW,EAAEE,MAAM,CAAC,CAAC,GAAGlB,CAAC,CAACC,MAAM;;EAExC,MAAMkB,aAAa,GAAGD,MAAM,IAAI,YAAY;EAC5C,MAAMN,OAAO;EACX;EACE;EACCI,WAAW,GAAGpC,cAAc,CAACC,MAAM,IAAIsC,aAAa,KAAK,WAAW,CACtE;EAAIjC,8BAA8B,CAACc,CAAC,CAACvB,MAAM,EAAEuC,WAAW,CAAC;;EAE5DhB,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVzB,UAAU,EAAEsC,WAAW;QACvBzB,cAAc,EAAE,EAAE2B,MAAM,EAAEE,MAAM,EAAE,SAAS,CAAC;MAC9C,CAAC;;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACR,OAAO,CAAC;AACd,CAAC,CAAC;;AAEJnB,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;AAC9BC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,eAAe,EAAE,CAACQ,SAAS,EAAE,GAAGxD,sBAAsB,CAAC,CAAC;AAChEoD,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,YAAY,EAAE,CAACQ,SAAS,EAAE,GAAGzD,mBAAmB,CAAC;AAC9D,CAAC;AACAuC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEqB,aAAa,EAAEC,UAAU,CAAC,CAAC,GAAGtB,CAAC,CAACC,MAAM;;EAE9C,MAAMW,OAAO;EACX,CAACS,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAKJ,SAAS;EACtD,CAACK,UAAU,IAAI,OAAO,MAAM,OAAO;;EAErCtB,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVzB,UAAU,EAAEE,cAAc,CAACyB,OAAO;QAClCkB,OAAO,EAAE,EAAEC,YAAY,EAAE,IAAI,EAAEH,aAAa,EAAEC,UAAU,CAAC;MAC3D,CAAC;;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,OAAO,CAAC;AACd,CAAC,CAAC;;AAEJnB,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;AAC1BC,IAAI;EACF;AACL;AACA;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAE5C,mBAAmB,CAAC;AACpCgD,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACtCA,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AACpC,CAAC;AACAV,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAErB,IAAI,EAAE8C,mBAAmB,EAAEC,aAAa,CAAC,CAAC,GAAG1B,CAAC,CAACC,MAAM;EAC7D,MAAMa,IAAI,GAAGlD,qBAAqB,CAAC,EAAEe,IAAI,CAAC,CAAC,CAAC;;EAE5C,MAAMgD,SAAS,GAAGb,IAAI,CAACc,qBAAqB,CAACC,eAAe;EAC5D,MAAMC,WAAW,GAAGH,SAAS,GAAG3B,CAAC,CAACvB,MAAM,CAACK,MAAM,CAAC6C,SAAS,CAAC,GAAI,CAAC;EAC/D,MAAMI,kBAAkB,GAAGD,WAAW,GAAGL,mBAAmB;EAC5D,MAAMO,aAAa,GAAGhC,CAAC,CAACvB,MAAM,CAACK,MAAM,CAACgC,IAAI,CAACmB,kBAAkB,CAACC,SAAS,CAAC7B,OAAO,CAAE;;EAEjF,MAAMH,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIiC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,kBAAkB,EAAEI,CAAC,EAAE,EAAE;IAC3CjC,OAAO,CAACE,IAAI,CAAC;MACXD,OAAO,EAAEgC,CAAC;MACVzD,UAAU,EAAEE,cAAc,CAACyB,OAAO;MAClCb,MAAM,EAAE,EAAEb,IAAI,EAAEyD,gBAAgB,EAAE,IAAI,CAAC;IACzC,CAAC,CAAC;EACJ;;EAEA,KAAK,IAAID,CAAC,GAAGJ,kBAAkB,EAAEI,CAAC,GAAGJ,kBAAkB,GAAGL,aAAa,EAAES,CAAC,EAAE,EAAE;IAC5EjC,OAAO,CAACE,IAAI,CAAC;MACXD,OAAO,EAAEgC,CAAC;MACVzD,UAAU,EAAEE,cAAc,CAACyB,OAAO;MAClCb,MAAM,EAAE,EAAEb,IAAI,EAAEyD,gBAAgB,EAAE,KAAK,CAAC;IAC1C,CAAC,CAAC;EACJ;;EAEA,MAAMhE,UAAU,GAAG;IACjB8B;EACF,CAAC;;EAEDF,CAAC,CAACM,qBAAqB;IACrB,MAAM;MACJN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAACnC,UAAU,CAAC;IAC5C,CAAC;IACDqD,mBAAmB,GAAG,CAAC,IAAIvB,OAAO,CAACmC,MAAM,GAAGL;EAC9C,CAAC;AACH,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUM,gCAAgCA,CAAChD,KAAe,EAAEiD,aAAsB,EAAE;EAClF,IAAIA,aAAa,EAAE;IACjB,MAAMzB,IAAI,GAAGnD,eAAe,CAAC2B,KAAK,CAAC;IACnC,KAAK,MAAMkD,KAAK,IAAI9E,iBAAiB,CAAC,KAAK,CAAC,EAAE;MAC5C,MAAM+E,SAAS,GAAG9E,eAAe,CAAC6E,KAAK,CAAC;MACxC,IAAI1B,IAAI,CAACmB,kBAAkB,CAACS,KAAK,KAAKD,SAAS,CAACR,kBAAkB,CAACS,KAAK,EAAE;QACxE,MAAMF,KAAK;MACb;IACF;EACF,CAAC,MAAM;IACL,MAAMlD,KAAK,CAACqD,OAAO,GAAG,EAAEpB,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAEoB,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;EACzD;AACF;;AAEA,MAAMC,kBAAkB,GAAGzF,sBAAsB;AAC9CsD,OAAO,CAAC,YAAY,EAAE/C,iBAAiB,CAAC,KAAK,CAAC,CAAC;AAC/CmD,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,iBAAiB,EAAEpD,aAAa,CAAC;AACzCwF,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACnF,eAAe,CAACmF,CAAC,CAACC,UAAU,CAAC,CAAChC,WAAW,GAAG+B,CAAC,CAACE,eAAe,MAAM,CAAC,CAAC;AAClFC,MAAM,CAAC,YAAY,EAAE,CAAAH,CAAC,KAAI;AACzB,GAAGR,gCAAgC,CAACQ,CAAC,CAACC,UAAU,EAAE,IAAI,CAAC;AACvD,GAAGT,gCAAgC,CAACQ,CAAC,CAACC,UAAU,EAAE,KAAK,CAAC;AACzD,CAAC;AACDtC,OAAO,CAAC,iBAAiB,EAAEpD,aAAa,CAAC;AACzCwF,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACnF,eAAe,CAACmF,CAAC,CAACI,UAAU,CAAC,CAACnC,WAAW,GAAG+B,CAAC,CAACK,eAAe,MAAM,CAAC,CAAC;;AAErF;AACA;AACA1D,CAAC,CAACC,IAAI,CAAC,8CAA8C,CAAC;AACnDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC2C,kBAAkB,CAAC;AAC1B7C,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE+C,UAAU,EAAEG,UAAU,EAAEF,eAAe,EAAEG,eAAe,CAAC,CAAC,GAAGnD,CAAC,CAACC,MAAM;EAC7E,MAAMmD,aAAa,GAAGzF,eAAe,CAACoF,UAAU,CAAC;EACjD,MAAMM,UAAU,GAAGvF,6BAA6B,CAACkC,CAAC,CAACvB,MAAM,EAAEuE,eAAe,EAAED,UAAU,CAAC;EACvF,MAAMO,aAAa,GAAG3F,eAAe,CAACuF,UAAU,CAAC;;EAEjDlD,CAAC,CAACuD,MAAM,CAAC,CAAClE,wBAAwB,CAACW,CAAC,CAACvB,MAAM,EAAE0E,eAAe,EAAED,UAAU,CAAC,CAAC;;EAE1E,MAAMM,mBAA8C,GAAG,EAAE;EACzD,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,UAAU,EAAElB,CAAC,EAAE,EAAE;IACnCqB,mBAAmB,CAACpD,IAAI,CAAC;MACvBD,OAAO,EAAEgC,CAAC;MACVzD,UAAU,EAAEsE,eAAe;MAC3B,GAAGD;IACL,CAAC,CAAC;EACJ;;EAEA,MAAMU,cAAc,GAAG,EAAEvD,OAAO,EAAEsD,mBAAmB,CAAC,CAAC;;EAEvD;EACAxD,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAACkD,cAAc,CAAC;;EAE9C;EACA,MAAMC,aAAa,GAAGvF,KAAK,CAACsF,cAAc,CAAC;EAC3CC,aAAa,CAACxD,OAAO,CAACE,IAAI,CAAC;IACzBD,OAAO,EAAEkD,UAAU;IACnB3E,UAAU,EAAEyE,eAAe;IAC3B,GAAGD;EACL,CAAC,CAAC;;EAEF,MAAMS,uCAAuC;EAC3C,CAACX,eAAe,GAAGG,eAAe,MAAM,CAAC;EACzCC,aAAa,CAACnB,kBAAkB,CAACS,KAAK,KAAKY,aAAa,CAACrB,kBAAkB,CAACS,KAAK;;EAEnF1C,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAACmD,aAAa,CAAC;EAC/C,CAAC,EAAEC,uCAAuC,CAAC;AAC7C,CAAC,CAAC;;AAEJ;AACA;AACA;AACAlE,CAAC,CAACC,IAAI,CAAC,4CAA4C,CAAC;AACjDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC2C,kBAAkB,CAAC;AAC1B7C,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAE+C,UAAU,EAAEG,UAAU,EAAEF,eAAe,EAAEG,eAAe,CAAC,CAAC,GAAGnD,CAAC,CAACC,MAAM;EAC7E,MAAMmD,aAAa,GAAGzF,eAAe,CAACoF,UAAU,CAAC;EACjD,MAAMM,UAAU,GAAGvF,6BAA6B,CAACkC,CAAC,CAACvB,MAAM,EAAEuE,eAAe,EAAED,UAAU,CAAC;EACvF,MAAMO,aAAa,GAAG3F,eAAe,CAACuF,UAAU,CAAC;;EAEjDlD,CAAC,CAACuD,MAAM,CAAC,CAAClE,wBAAwB,CAACW,CAAC,CAACvB,MAAM,EAAE0E,eAAe,EAAED,UAAU,CAAC,CAAC;;EAE1E,MAAMM,mBAA8C,GAAG,EAAE;EACzD,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,UAAU,EAAElB,CAAC,EAAE,EAAE;IACnCqB,mBAAmB,CAACpD,IAAI,CAAC;MACvBD,OAAO,EAAEgC,CAAC;MACVzD,UAAU,EAAEsE,eAAe;MAC3B,GAAGD;IACL,CAAC,CAAC;EACJ;;EAEA,MAAMa,UAAU,GAAG5D,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC,EAAEL,OAAO,EAAEsD,mBAAmB,CAAC,CAAC,CAAC;;EAEnF;EACAxD,CAAC,CAACvB,MAAM,CAACoF,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;;EAEjE,MAAMG,WAAW,GAAG/D,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;IACjDL,OAAO,EAAE;IACP;MACEC,OAAO,EAAE,CAAC;MACVzB,UAAU,EAAEyE,eAAe;MAC3B,GAAGD;IACL,CAAC;;EAEL,CAAC,CAAC;;EAEF;EACA,MAAMS,uCAAuC;EAC3C,CAACX,eAAe,GAAGG,eAAe,MAAM,CAAC;EACzCC,aAAa,CAACnB,kBAAkB,CAACS,KAAK,KAAKY,aAAa,CAACrB,kBAAkB,CAACS,KAAK;;EAEnF1C,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAACoF,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,CAACF,UAAU,EAAEG,WAAW,CAAC,CAAC,CAAC,CAAC;EAChF,CAAC,EAAEJ,uCAAuC,CAAC;AAC7C,CAAC,CAAC;;AAEJlE,CAAC,CAACC,IAAI,CAAC,kCAAkC,CAAC;AACvCC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,eAAe,EAAE,CAACQ,SAAS,EAAE,GAAGxD,sBAAsB,CAAC;AACpE,CAAC;AACAsC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEqB,aAAa,CAAC,CAAC,GAAGrB,CAAC,CAACC,MAAM;;EAElC,MAAMW,OAAO,GAAGS,aAAa,KAAK,MAAM,IAAIA,aAAa,KAAM,YAAW;;EAE1ErB,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVzB,UAAU,EAAEE,cAAc,CAACyB,OAAO;QAClCd,cAAc,EAAE,EAAE6B,MAAM,EAAE,YAAY,EAAEC,aAAa,CAAC;MACxD,CAAC;;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACT,OAAO,CAAC;AACd,CAAC,CAAC;;AAEJnB,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;AAC9BC,IAAI;EACF;AACL;AACA;AACA;AACA;AACE,CAAC;AACAM,MAAM,CAAC,CAAAO,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,QAAQ,EAAE1C,kBAAkB,CAAC,CAAC;AAAA,CACtC0C,OAAO,CAAC,QAAQ,EAAElD,2BAA2B;AAClD,CAAC;AACAyG,iBAAiB,CAAC,CAAAhE,CAAC,KAAI;EACtBA,CAAC,CAACiE,0CAA0C,CAACjE,CAAC,CAACC,MAAM,CAACmB,MAAM,CAAC;EAC7DpB,CAAC,CAACkE,4CAA4C,CAAClE,CAAC,CAACC,MAAM,CAACmB,MAAM,CAAC;AACjE,CAAC,CAAC;AACDrB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEoB,MAAM,EAAEF,MAAM,CAAC,CAAC,GAAGlB,CAAC,CAACC,MAAM;EACnC,MAAMa,IAAI,GAAG9C,kBAAkB,CAACoD,MAAM,CAAC;;EAEvC,MAAMR,OAAO;EACXE,IAAI,CAACqD,KAAK,EAAEC,OAAO,IAAI,EAAElD,MAAM,KAAK,YAAY,IAAI,CAACJ,IAAI,CAACqD,KAAK,EAAEE,gBAAgB,CAAC;;EAEpFrE,CAAC,CAACM,qBAAqB,CAAC,MAAM;IAC5BN,CAAC,CAACvB,MAAM,CAAC8B,qBAAqB,CAAC;MAC7BL,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVzB,UAAU,EAAEE,cAAc,CAACyB,OAAO;QAClCd,cAAc,EAAE,EAAE6B,MAAM,EAAEF,MAAM,CAAC;MACnC,CAAC;;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACN,OAAO,CAAC;AACd,CAAC,CAAC"}