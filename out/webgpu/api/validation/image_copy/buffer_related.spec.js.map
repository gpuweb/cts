{"version":3,"file":"buffer_related.spec.js","names":["description","makeTestGroup","kTextureDimensions","GPUConst","getBlockInfoForSizedTextureFormat","isDepthOrStencilTextureFormat","kSizedTextureFormats","textureDimensionAndFormatCompatible","kResourceStates","kImageCopyTypes","ImageCopyTest","formatCopyableWithMethod","g","test","desc","params","u","combine","fn","t","method","state","buffer","createBufferWithState","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","submit","success","texture","createTextureTracked","width","height","depthOrArrayLayers","format","GPUTextureUsage","testBuffer","bytesPerRow","dataSize","paramsSubcasesOnly","beforeAllSubcases","usesMismatchedDevice","mismatched","sourceDevice","mismatchedDevice","device","trackForCleanup","createBuffer","beginSubcases","BufferUsage","UNIFORM","createBufferTracked","filter","dimension","undefined","expand","p","copyHeightInBlocks","unless","_textureHeightInBlocks","bytesPerBlock","skipIfTextureFormatNotSupported","info","blockWidth","blockHeight","copySize"],"sources":["../../../../../src/webgpu/api/validation/image_copy/buffer_related.spec.ts"],"sourcesContent":["export const description = `Validation tests for buffer related parameters for buffer <-> texture copies`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureDimensions } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  getBlockInfoForSizedTextureFormat,\n  isDepthOrStencilTextureFormat,\n  kSizedTextureFormats,\n  textureDimensionAndFormatCompatible,\n} from '../../../format_info.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport { ImageCopyTest, formatCopyableWithMethod } from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('buffer_state')\n  .desc(\n    `\nTest that the buffer must be valid and not destroyed.\n- for all buffer <-> texture copy methods\n- for various buffer states\n`\n  )\n  .params(u =>\n    u //\n      // B2B copy validations are at api,validation,encoding,cmds,copyBufferToBuffer.spec.ts\n      .combine('method', ['CopyB2T', 'CopyT2B'] as const)\n      .combine('state', kResourceStates)\n  )\n  .fn(t => {\n    const { method, state } = t.params;\n\n    // A valid buffer.\n    const buffer = t.createBufferWithState(state, {\n      size: 16,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    // Invalid buffer will fail finish, and destroyed buffer will fail submit\n    const submit = state !== 'invalid';\n    const success = state === 'valid';\n\n    const texture = t.createTextureTracked({\n      size: { width: 2, height: 2, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testBuffer(\n      buffer,\n      texture,\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 16, method, success, submit }\n    );\n  });\n\ng.test('buffer,device_mismatch')\n  .desc('Tests the image copies cannot be called with a buffer created from another device')\n  .paramsSubcasesOnly(u =>\n    u.combine('method', ['CopyB2T', 'CopyT2B'] as const).combine('mismatched', [true, false])\n  )\n  .beforeAllSubcases(t => t.usesMismatchedDevice())\n  .fn(t => {\n    const { method, mismatched } = t.params;\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const buffer = t.trackForCleanup(\n      sourceDevice.createBuffer({\n        size: 16,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n      })\n    );\n\n    const texture = t.createTextureTracked({\n      size: { width: 2, height: 2, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = !mismatched;\n\n    // Expect success in both finish and submit, or validation error in finish\n    t.testBuffer(\n      buffer,\n      texture,\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 16, method, success, submit: success }\n    );\n  });\n\ng.test('usage')\n  .desc(\n    `\nTest the buffer must have the appropriate COPY_SRC/COPY_DST usage.\nTODO update such that it tests\n- for all buffer source usages\n- for all buffer destination usages\n`\n  )\n  .params(u =>\n    u\n      // B2B copy validations are at api,validation,encoding,cmds,copyBufferToBuffer.spec.ts\n      .combine('method', ['CopyB2T', 'CopyT2B'] as const)\n      .beginSubcases()\n      .combine('usage', [\n        GPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.UNIFORM,\n        GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.UNIFORM,\n        GPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.COPY_DST,\n      ])\n  )\n  .fn(t => {\n    const { method, usage } = t.params;\n\n    const buffer = t.createBufferTracked({\n      size: 16,\n      usage,\n    });\n\n    const success =\n      method === 'CopyB2T'\n        ? (usage & GPUBufferUsage.COPY_SRC) !== 0\n        : (usage & GPUBufferUsage.COPY_DST) !== 0;\n\n    const texture = t.createTextureTracked({\n      size: { width: 2, height: 2, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // Expect success in both finish and submit, or validation error in finish\n    t.testBuffer(\n      buffer,\n      texture,\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 16, method, success, submit: success }\n    );\n  });\n\ng.test('bytes_per_row_alignment')\n  .desc(\n    `\nTest that bytesPerRow must be a multiple of 256 for CopyB2T and CopyT2B if it is required.\n- for all copy methods between linear data and textures\n- for all texture dimensions\n- for all sized formats.\n- for various bytesPerRow aligned to 256 or not\n- for various number of blocks rows copied\n`\n  )\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('bytesPerRow', [undefined, 0, 1, 255, 256, 257, 512])\n      .combine('copyHeightInBlocks', [0, 1, 2, 3])\n      .expand('_textureHeightInBlocks', p => [\n        p.copyHeightInBlocks === 0 ? 1 : p.copyHeightInBlocks,\n      ])\n      .unless(p => p.dimension === '1d' && p.copyHeightInBlocks > 1)\n      // Depth/stencil format copies must copy the whole subresource.\n      .unless(p => {\n        return (\n          isDepthOrStencilTextureFormat(p.format) &&\n          p.copyHeightInBlocks !== p._textureHeightInBlocks\n        );\n      })\n      // bytesPerRow must be specified and it must be equal or greater than the bytes size of each row if we are copying multiple rows.\n      // Note that we are copying one single block on each row in this test.\n      .filter(\n        ({ format, bytesPerRow, copyHeightInBlocks }) =>\n          (bytesPerRow === undefined && copyHeightInBlocks <= 1) ||\n          (bytesPerRow !== undefined &&\n            bytesPerRow >= getBlockInfoForSizedTextureFormat(format).bytesPerBlock)\n      )\n  )\n  .fn(t => {\n    const { method, dimension, format, bytesPerRow, copyHeightInBlocks, _textureHeightInBlocks } =\n      t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const info = getBlockInfoForSizedTextureFormat(format);\n\n    const buffer = t.createBufferTracked({\n      size: 512 * 8 * 16,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    let success = false;\n    // writeTexture doesn't require bytesPerRow to be 256-byte aligned.\n    if (method === 'WriteTexture') success = true;\n    // If the copy height <= 1, bytesPerRow is not required.\n    if (copyHeightInBlocks <= 1 && bytesPerRow === undefined) success = true;\n    // If bytesPerRow > 0 and it is a multiple of 256, it will succeed if other parameters are valid.\n    if (bytesPerRow !== undefined && bytesPerRow > 0 && bytesPerRow % 256 === 0) success = true;\n\n    const size = [info.blockWidth, _textureHeightInBlocks * info.blockHeight, 1];\n    const texture = t.createTextureTracked({\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const copySize = [info.blockWidth, copyHeightInBlocks * info.blockHeight, 1];\n\n    // Expect success in both finish and submit, or validation error in finish\n    t.testBuffer(buffer, texture, { bytesPerRow }, copySize, {\n      dataSize: 512 * 8 * 16,\n      method,\n      success,\n      submit: success,\n    });\n  });\n"],"mappings":"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"}