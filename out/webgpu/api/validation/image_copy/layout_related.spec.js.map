{"version":3,"file":"layout_related.spec.js","names":["description","makeTestGroup","assert","kTextureDimensions","kSizedTextureFormats","textureFormatAndDimensionPossiblyCompatible","getBlockInfoForTextureFormat","isDepthOrStencilTextureFormat","getBlockInfoForSizedTextureFormat","getBlockInfoForColorTextureFormat","getMaxValidTextureSizeForFormatAndDimension","align","bytesInACompleteRow","dataBytesForCopyOrOverestimate","dataBytesForCopyOrFail","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForOffset","texelBlockAlignmentTestExpanderForRowsPerImage","formatCopyableWithMethod","g","test","desc","params","u","combine","combineWithParams","dimension","size","beginSubcases","undefined","unless","p","copyHeightInBlocks","copyDepth","fn","t","rowsPerImage","method","format","copyHeight","blockHeight","texture","createTextureTracked","usage","GPUTextureUsage","COPY_SRC","COPY_DST","layout","bytesPerRow","copySize","width","height","depthOrArrayLayers","minDataSizeOrOverestimate","copyValid","testRun","dataSize","success","_success","filter","bytesPerRowPadding","rowsPerImagePaddingInBlocks","copyWidthInBlocks","_offsetMultiplier","expand","bytesPerBlock","offset","skipIfTextureFormatNotSupported","skipIfTextureFormatAndDimensionNotCompatible","info","maxSize","device","bytesPerRowAlignment","copyWidth","Math","min","blockWidth","minDataSize","createAlignedTexture","expandWithParams","widthInBlocks","x","y","z","offsetInBlocks","dataSizeInBlocks"],"sources":["../../../../../src/webgpu/api/validation/image_copy/layout_related.spec.ts"],"sourcesContent":["export const description = `Validation tests for the linear data layout of linear data <-> texture copies\n\nTODO check if the tests need to be updated to support aspects of depth-stencil textures`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { kTextureDimensions } from '../../../capability_info.js';\nimport {\n  kSizedTextureFormats,\n  textureFormatAndDimensionPossiblyCompatible,\n  getBlockInfoForTextureFormat,\n  isDepthOrStencilTextureFormat,\n  getBlockInfoForSizedTextureFormat,\n  getBlockInfoForColorTextureFormat,\n  getMaxValidTextureSizeForFormatAndDimension,\n} from '../../../format_info.js';\nimport { align } from '../../../util/math.js';\nimport {\n  bytesInACompleteRow,\n  dataBytesForCopyOrOverestimate,\n  dataBytesForCopyOrFail,\n  kImageCopyTypes,\n} from '../../../util/texture/layout.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForOffset,\n  texelBlockAlignmentTestExpanderForRowsPerImage,\n  formatCopyableWithMethod,\n} from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('bound_on_rows_per_image')\n  .desc(\n    `\nTest that rowsPerImage must be at least the copy height (if defined).\n- for various copy methods\n- for all texture dimensions\n- for various values of rowsPerImage including undefined\n- for various copy heights\n- for various copy depths\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { dimension: '1d', size: [4, 1, 1] },\n        { dimension: '2d', size: [4, 4, 1] },\n        { dimension: '2d', size: [4, 4, 3] },\n        { dimension: '3d', size: [4, 4, 3] },\n      ] as const)\n      .beginSubcases()\n      .combine('rowsPerImage', [undefined, 0, 1, 2, 1024])\n      .combine('copyHeightInBlocks', [0, 1, 2])\n      .combine('copyDepth', [1, 3])\n      .unless(p => p.dimension === '1d' && p.copyHeightInBlocks !== 1)\n      .unless(p => p.copyDepth > p.size[2])\n  )\n  .fn(t => {\n    const { rowsPerImage, copyHeightInBlocks, copyDepth, dimension, size, method } = t.params;\n\n    const format = 'rgba8unorm';\n    const copyHeight = copyHeightInBlocks * getBlockInfoForTextureFormat(format).blockHeight;\n\n    const texture = t.createTextureTracked({\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const layout = { bytesPerRow: 1024, rowsPerImage };\n    const copySize = { width: 0, height: copyHeight, depthOrArrayLayers: copyDepth };\n    const { minDataSizeOrOverestimate, copyValid } = dataBytesForCopyOrOverestimate({\n      layout,\n      format,\n      copySize,\n      method,\n    });\n\n    t.testRun({ texture }, layout, copySize, {\n      dataSize: minDataSizeOrOverestimate,\n      method,\n      success: copyValid,\n    });\n  });\n\ng.test('copy_end_overflows_u64')\n  .desc(\n    `\nTest an error is produced when offset+requiredBytesInCopy overflows GPUSize64.\n- for various copy methods\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combineWithParams([\n        { bytesPerRow: 2 ** 31, rowsPerImage: 2 ** 31, depthOrArrayLayers: 1, _success: true }, // success case\n        { bytesPerRow: 2 ** 31, rowsPerImage: 2 ** 31, depthOrArrayLayers: 16, _success: false }, // bytesPerRow * rowsPerImage * (depthOrArrayLayers - 1) overflows.\n      ])\n  )\n  .fn(t => {\n    const { method, bytesPerRow, rowsPerImage, depthOrArrayLayers, _success } = t.params;\n\n    const texture = t.createTextureTracked({\n      size: [1, 1, depthOrArrayLayers],\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testRun(\n      { texture },\n      { bytesPerRow, rowsPerImage },\n      { width: 1, height: 1, depthOrArrayLayers },\n      {\n        dataSize: 10000,\n        method,\n        success: _success,\n      }\n    );\n  });\n\ng.test('required_bytes_in_copy')\n  .desc(\n    `\nTest the computation of requiredBytesInCopy by computing the minimum data size for the copy and checking success/error at the boundary.\n- for various copy methods\n- for all formats\n- for all dimensions\n- for various extra bytesPerRow/rowsPerImage\n- for various copy sizes\n- for various offsets in the linear data\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .beginSubcases()\n      .combineWithParams([\n        { bytesPerRowPadding: 0, rowsPerImagePaddingInBlocks: 0 }, // no padding\n        { bytesPerRowPadding: 0, rowsPerImagePaddingInBlocks: 6 }, // rowsPerImage padding\n        { bytesPerRowPadding: 6, rowsPerImagePaddingInBlocks: 0 }, // bytesPerRow padding\n        { bytesPerRowPadding: 15, rowsPerImagePaddingInBlocks: 17 }, // both paddings\n      ])\n      .combineWithParams([\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 4, copyDepth: 5, _offsetMultiplier: 0 }, // standard copy\n        { copyWidthInBlocks: 5, copyHeightInBlocks: 4, copyDepth: 3, _offsetMultiplier: 11 }, // standard copy, offset > 0\n        { copyWidthInBlocks: 256, copyHeightInBlocks: 3, copyDepth: 2, _offsetMultiplier: 0 }, // copyWidth is 256-aligned\n        { copyWidthInBlocks: 0, copyHeightInBlocks: 4, copyDepth: 5, _offsetMultiplier: 0 }, // empty copy because of width\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 0, copyDepth: 5, _offsetMultiplier: 0 }, // empty copy because of height\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 4, copyDepth: 0, _offsetMultiplier: 13 }, // empty copy because of depth, offset > 0\n        { copyWidthInBlocks: 1, copyHeightInBlocks: 4, copyDepth: 5, _offsetMultiplier: 0 }, // copyWidth = 1\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 1, copyDepth: 5, _offsetMultiplier: 15 }, // copyHeight = 1, offset > 0\n        { copyWidthInBlocks: 5, copyHeightInBlocks: 4, copyDepth: 1, _offsetMultiplier: 0 }, // copyDepth = 1\n        { copyWidthInBlocks: 7, copyHeightInBlocks: 1, copyDepth: 1, _offsetMultiplier: 0 }, // copyHeight = 1 and copyDepth = 1\n      ])\n      // The test texture size will be rounded up from the copy size to the next valid texture size.\n      // If the format is a depth/stencil format, its copy size must equal to subresource's size.\n      // So filter out depth/stencil cases where the rounded-up texture size would be different from the copy size.\n      .filter(({ format, copyWidthInBlocks, copyHeightInBlocks, copyDepth }) => {\n        return (\n          !isDepthOrStencilTextureFormat(format) ||\n          (copyWidthInBlocks > 0 && copyHeightInBlocks > 0 && copyDepth > 0)\n        );\n      })\n      .unless(p => p.dimension === '1d' && (p.copyHeightInBlocks > 1 || p.copyDepth > 1))\n      .expand('offset', p => {\n        if (isDepthOrStencilTextureFormat(p.format)) {\n          return [p._offsetMultiplier * 4];\n        }\n        return [p._offsetMultiplier * getBlockInfoForSizedTextureFormat(p.format).bytesPerBlock];\n      })\n  )\n  .fn(t => {\n    const {\n      offset,\n      bytesPerRowPadding,\n      rowsPerImagePaddingInBlocks,\n      copyWidthInBlocks,\n      copyHeightInBlocks,\n      copyDepth,\n      format,\n      dimension,\n      method,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    const info = getBlockInfoForSizedTextureFormat(format);\n    const maxSize = getMaxValidTextureSizeForFormatAndDimension(t.device, format, dimension);\n\n    // In the CopyB2T and CopyT2B cases we need to have bytesPerRow 256-aligned,\n    // to make this happen we align the bytesInACompleteRow value and multiply\n    // bytesPerRowPadding by 256.\n    const bytesPerRowAlignment = method === 'WriteTexture' ? 1 : 256;\n    const copyWidth = Math.min(copyWidthInBlocks * info.blockWidth, maxSize[0]);\n    const copyHeight = Math.min(copyHeightInBlocks * info.blockHeight, maxSize[1]);\n    const rowsPerImage = copyHeight + rowsPerImagePaddingInBlocks * info.blockHeight;\n    const bytesPerRow =\n      align(bytesInACompleteRow(copyWidth, format), bytesPerRowAlignment) +\n      bytesPerRowPadding * bytesPerRowAlignment;\n    const copySize = { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth };\n\n    const layout = { offset, bytesPerRow, rowsPerImage };\n    const minDataSize = dataBytesForCopyOrFail({ layout, format, copySize, method });\n\n    const texture = t.createAlignedTexture(format, copySize, undefined, dimension);\n\n    t.testRun({ texture }, layout, copySize, {\n      dataSize: minDataSize,\n      method,\n      success: true,\n    });\n\n    if (minDataSize > 0) {\n      t.testRun({ texture }, layout, copySize, {\n        dataSize: minDataSize - 1,\n        method,\n        success: false,\n      });\n    }\n  });\n\ng.test('rows_per_image_alignment')\n  .desc(\n    `\nTest that rowsPerImage has no alignment constraints.\n- for various copy methods\n- for all sized format\n- for all dimensions\n- for various rowsPerImage\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .beginSubcases()\n      .expand('rowsPerImage', texelBlockAlignmentTestExpanderForRowsPerImage)\n      // Copy height is info.blockHeight, so rowsPerImage must be equal or greater than it.\n      .filter(\n        ({ rowsPerImage, format }) =>\n          rowsPerImage >= getBlockInfoForSizedTextureFormat(format).blockHeight\n      )\n  )\n  .fn(t => {\n    const { rowsPerImage, format, dimension, method } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    const info = getBlockInfoForSizedTextureFormat(format);\n\n    const size = { width: info.blockWidth, height: info.blockHeight, depthOrArrayLayers: 1 };\n    const texture = t.createTextureTracked({\n      size,\n      format,\n      dimension,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testRun({ texture }, { bytesPerRow: 256, rowsPerImage }, size, {\n      dataSize: info.bytesPerBlock,\n      method,\n      success: true,\n    });\n  });\n\ng.test('offset_alignment')\n  .desc(\n    `\nTest the alignment requirement on the linear data offset (block size, or 4 for depth-stencil).\n- for various copy methods\n- for all sized formats\n- for all dimensions\n- for various linear data offsets\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .beginSubcases()\n      .expand('offset', texelBlockAlignmentTestExpanderForOffset)\n  )\n  .fn(t => {\n    const { format, dimension, offset, method } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    const info = getBlockInfoForSizedTextureFormat(format);\n\n    const size = { width: info.blockWidth, height: info.blockHeight, depthOrArrayLayers: 1 };\n    const texture = t.createTextureTracked({\n      size,\n      format,\n      dimension,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    let success = false;\n    if (method === 'WriteTexture') success = true;\n    if (isDepthOrStencilTextureFormat(format)) {\n      if (offset % 4 === 0) success = true;\n    } else {\n      if (offset % info.bytesPerBlock === 0) success = true;\n    }\n\n    t.testRun({ texture }, { offset, bytesPerRow: 256 }, size, {\n      dataSize: offset + info.bytesPerBlock,\n      method,\n      success,\n    });\n  });\n\ng.test('bound_on_bytes_per_row')\n  .desc(\n    `\nTest that bytesPerRow, if specified must be big enough for a full copy row.\n- for various copy methods\n- for all sized formats\n- for all dimension\n- for various copy heights\n- for various copy depths\n- for various combinations of bytesPerRow and copy width.\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .beginSubcases()\n      .combine('copyHeightInBlocks', [1, 2])\n      .combine('copyDepth', [1, 2])\n      .unless(p => p.dimension === '1d' && (p.copyHeightInBlocks > 1 || p.copyDepth > 1))\n      .expandWithParams(p => {\n        const info = getBlockInfoForSizedTextureFormat(p.format);\n        // We currently have a built-in assumption that for all formats, 128 % bytesPerBlock === 0.\n        // This assumption ensures that all division below results in integers.\n        assert(128 % info.bytesPerBlock === 0);\n        return [\n          // Copying exact fit with aligned bytesPerRow should work.\n          {\n            bytesPerRow: 256,\n            widthInBlocks: 256 / info.bytesPerBlock,\n            copyWidthInBlocks: 256 / info.bytesPerBlock,\n            _success: true,\n          },\n          // Copying into smaller texture when padding in bytesPerRow is enough should work unless\n          // it is a depth/stencil typed format.\n          {\n            bytesPerRow: 256,\n            widthInBlocks: 256 / info.bytesPerBlock,\n            copyWidthInBlocks: 256 / info.bytesPerBlock - 1,\n            _success: !isDepthOrStencilTextureFormat(p.format),\n          },\n          // Unaligned bytesPerRow should not work unless the method is 'WriteTexture'.\n          {\n            bytesPerRow: 128,\n            widthInBlocks: 128 / info.bytesPerBlock,\n            copyWidthInBlocks: 128 / info.bytesPerBlock,\n            _success: p.method === 'WriteTexture',\n          },\n          {\n            bytesPerRow: 384,\n            widthInBlocks: 384 / info.bytesPerBlock,\n            copyWidthInBlocks: 384 / info.bytesPerBlock,\n            _success: p.method === 'WriteTexture',\n          },\n          // When bytesPerRow is smaller than bytesInLastRow copying should fail.\n          {\n            bytesPerRow: 256,\n            widthInBlocks: (2 * 256) / info.bytesPerBlock,\n            copyWidthInBlocks: (2 * 256) / info.bytesPerBlock,\n            _success: false,\n          },\n          // When copyHeightInBlocks > 1, bytesPerRow must be specified.\n          {\n            bytesPerRow: undefined,\n            widthInBlocks: 256 / info.bytesPerBlock,\n            copyWidthInBlocks: 256 / info.bytesPerBlock,\n            _success: !(p.copyHeightInBlocks > 1 || p.copyDepth > 1),\n          },\n        ];\n      })\n  )\n  .fn(t => {\n    const {\n      method,\n      format,\n      dimension,\n      bytesPerRow,\n      widthInBlocks,\n      copyWidthInBlocks,\n      copyHeightInBlocks,\n      copyDepth,\n      _success,\n    } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    const info = getBlockInfoForSizedTextureFormat(format);\n\n    // We create an aligned texture using the widthInBlocks which may be different from the\n    // copyWidthInBlocks. This allows us to test scenarios where the two may be different.\n    const texture = t.createAlignedTexture(\n      format,\n      {\n        width: widthInBlocks * info.blockWidth,\n        height: copyHeightInBlocks * info.blockHeight,\n        depthOrArrayLayers: copyDepth,\n      },\n      { x: 0, y: 0, z: 0 },\n      dimension\n    );\n\n    const layout = { bytesPerRow, rowsPerImage: copyHeightInBlocks };\n    const copySize = {\n      width: copyWidthInBlocks * info.blockWidth,\n      height: copyHeightInBlocks * info.blockHeight,\n      depthOrArrayLayers: copyDepth,\n    };\n    const { minDataSizeOrOverestimate } = dataBytesForCopyOrOverestimate({\n      layout,\n      format,\n      copySize,\n      method,\n    });\n\n    t.testRun({ texture }, layout, copySize, {\n      dataSize: minDataSizeOrOverestimate,\n      method,\n      success: _success,\n    });\n  });\n\ng.test('bound_on_offset')\n  .desc(\n    `\nTest that the offset cannot be larger than the linear data size (even for an empty copy).\n- for various offsets and data sizes\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('offsetInBlocks', [0, 1, 2])\n      .combine('dataSizeInBlocks', [0, 1, 2])\n  )\n  .fn(t => {\n    const { offsetInBlocks, dataSizeInBlocks, method } = t.params;\n\n    const format = 'rgba8unorm';\n    const info = getBlockInfoForColorTextureFormat(format);\n    const offset = offsetInBlocks * info.bytesPerBlock;\n    const dataSize = dataSizeInBlocks * info.bytesPerBlock;\n\n    const texture = t.createTextureTracked({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = offset <= dataSize;\n\n    t.testRun(\n      { texture },\n      { offset, bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize, method, success }\n    );\n  });\n"],"mappings":"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"}