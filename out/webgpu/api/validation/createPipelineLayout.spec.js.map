{"version":3,"file":"createPipelineLayout.spec.js","names":["description","makeTestGroup","count","bufferBindingTypeInfo","getBindingLimitForBindingType","kBufferBindingTypes","GPUConst","MaxLimitsTestMixin","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","type","visibility","params","info","maxDynamicLimit","perPipelineLimitClass","limit","device","buffer","maxDynamic","Math","min","limits","skipIf","maxDynamicBufferBindings","binding","push","hasDynamicOffset","maxDynamicBufferBindGroupLayout","createBindGroupLayout","entries","goodDescriptor","goodPipelineLayoutDescriptor","bindGroupLayouts","createPipelineLayout","badDescriptor","badPipelineLayoutDescriptor","expectValidationError","bindGroupLayoutDescriptor","maxBindGroupLayouts","map","layout0Mismatched","layout1Mismatched","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","bglDescriptor","layout0","mismatchedDevice","layout1","MaybeNullBindGroupLayoutTypes","expand","p","_bglCount","_bgl0","_bgl1","_bgl2","_bgl3","slice","filter","x","nonEmptyBindGroupLayout","ShaderStage","COMPUTE","texture","bindGroupLayoutType","kShouldError","pipelineType","emptyBindGroupLayoutType","emptyBindGroupLayoutIndex","emptyBindGroupLayoutIndexMissedInShader","i","FRAGMENT","layout","declarations","statement","shouldError","code","shaderModule","createShaderModule","createRenderPipeline","vertex","module","fragment","targets","format","createComputePipeline","compute","setBindGroupOnEmptyBindGroupLayoutIndex","bindGroups","createBufferTracked","usage","GPUBufferUsage","COPY_DST","UNIFORM","size","bindGroup","createBindGroup","resource","renderPipeline","renderTarget","createTextureTracked","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","commandEncoder","createCommandEncoder","renderPassEncoder","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","setBindGroup","setPipeline","draw","end","queue","submit","finish","computePipeline","computePassEncoder","beginComputePass","dispatchWorkgroups"],"sources":["../../../../src/webgpu/api/validation/createPipelineLayout.spec.ts"],"sourcesContent":["export const description = `\ncreatePipelineLayout validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { count } from '../../../common/util/util.js';\nimport {\n  bufferBindingTypeInfo,\n  getBindingLimitForBindingType,\n  kBufferBindingTypes,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport { MaxLimitsTestMixin } from '../../gpu_test.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(MaxLimitsTestMixin(ValidationTest));\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .desc(\n    `\n    Test that creating a pipeline layout fails with a validation error if the number of dynamic\n    buffers exceeds the maximum value in the pipeline layout.\n    - Test that creation of a pipeline using the maximum number of dynamic buffers added a dynamic\n      buffer fails.\n\n    TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('visibility', [0, 2, 4, 6])\n      .combine('type', kBufferBindingTypes)\n  )\n  .fn(t => {\n    const { type, visibility } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n    const { maxDynamicLimit } = info.perPipelineLimitClass;\n    const limit = getBindingLimitForBindingType(t.device, visibility, { buffer: { type } });\n    const maxDynamic = Math.min(maxDynamicLimit ? t.device.limits[maxDynamicLimit]! : 0, limit);\n\n    t.skipIf(limit === 0, `binding limit for ${type} === 0`);\n\n    const maxDynamicBufferBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let binding = 0; binding < maxDynamic; binding++) {\n      maxDynamicBufferBindings.push({\n        binding,\n        visibility,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    const maxDynamicBufferBindGroupLayout = t.device.createBindGroupLayout({\n      entries: maxDynamicBufferBindings,\n    });\n\n    const goodDescriptor = {\n      entries: [{ binding: 0, visibility, buffer: { type, hasDynamicOffset: false } }],\n    };\n\n    if (limit > maxDynamic) {\n      const goodPipelineLayoutDescriptor = {\n        bindGroupLayouts: [\n          maxDynamicBufferBindGroupLayout,\n          t.device.createBindGroupLayout(goodDescriptor),\n        ],\n      };\n\n      // Control case\n      t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n    }\n\n    // Check dynamic buffers exceed maximum in pipeline layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[0].buffer.hasDynamicOffset = true;\n\n    const badPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(badDescriptor),\n      ],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n    });\n  });\n\ng.test('number_of_bind_group_layouts_exceeds_the_maximum_value')\n  .desc(\n    `\n    Test that creating a pipeline layout fails with a validation error if the number of bind group\n    layouts exceeds the maximum value in the pipeline layout.\n    - Test that creation of a pipeline using the maximum number of bind groups added a bind group\n      fails.\n  `\n  )\n  .fn(t => {\n    const bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\n      entries: [],\n    };\n\n    // 4 is the maximum number of bind group layouts.\n    const maxBindGroupLayouts = [1, 2, 3, 4].map(() =>\n      t.device.createBindGroupLayout(bindGroupLayoutDescriptor)\n    );\n\n    const goodPipelineLayoutDescriptor = {\n      bindGroupLayouts: maxBindGroupLayouts,\n    };\n\n    // Control case\n    t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n    // Check bind group layouts exceed maximum in pipeline layout.\n    const badPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        ...maxBindGroupLayouts,\n        t.device.createBindGroupLayout(bindGroupLayoutDescriptor),\n      ],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n    });\n  });\n\ng.test('bind_group_layouts,device_mismatch')\n  .desc(\n    `\n    Tests createPipelineLayout cannot be called with bind group layouts created from another device\n    Test with two layouts to make sure all layouts can be validated:\n    - layout0 and layout1 from same device\n    - layout0 and layout1 from different device\n    `\n  )\n  .paramsSubcasesOnly([\n    { layout0Mismatched: false, layout1Mismatched: false }, // control case\n    { layout0Mismatched: true, layout1Mismatched: false },\n    { layout0Mismatched: false, layout1Mismatched: true },\n  ])\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { layout0Mismatched, layout1Mismatched } = t.params;\n\n    const mismatched = layout0Mismatched || layout1Mismatched;\n\n    const bglDescriptor: GPUBindGroupLayoutDescriptor = {\n      entries: [],\n    };\n\n    const layout0 = layout0Mismatched\n      ? t.mismatchedDevice.createBindGroupLayout(bglDescriptor)\n      : t.device.createBindGroupLayout(bglDescriptor);\n    const layout1 = layout1Mismatched\n      ? t.mismatchedDevice.createBindGroupLayout(bglDescriptor)\n      : t.device.createBindGroupLayout(bglDescriptor);\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [layout0, layout1] });\n    }, mismatched);\n  });\n\nconst MaybeNullBindGroupLayoutTypes = ['Null', 'Undefined', 'Empty', 'NonEmpty'] as const;\n\ng.test('bind_group_layouts,null_bind_group_layouts')\n  .desc(\n    `\n    Tests that it is valid to create a pipeline layout with null bind group layouts.\n    `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('_bglCount', [1, 2, 3, 4] as const)\n      .combine('_bgl0', MaybeNullBindGroupLayoutTypes)\n      .expand('_bgl1', p => (p._bglCount > 1 ? MaybeNullBindGroupLayoutTypes : (['Null'] as const)))\n      .expand('_bgl2', p => (p._bglCount > 2 ? MaybeNullBindGroupLayoutTypes : (['Null'] as const)))\n      .expand('_bgl3', p => (p._bglCount > 3 ? MaybeNullBindGroupLayoutTypes : (['Null'] as const)))\n      // Flatten the result down into a single subcase arg which is an array of BGL types.\n      .expand('bindGroupLayouts', p => [[p._bgl0, p._bgl1, p._bgl2, p._bgl3].slice(0, p._bglCount)])\n      // Only test combinations where exactly one of the BGLs is null|undefined|empty.\n      .filter(p => count(p.bindGroupLayouts, x => x !== 'NonEmpty') === 1)\n  )\n  .fn(t => {\n    const nonEmptyBindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUConst.ShaderStage.COMPUTE,\n          texture: {},\n        },\n      ],\n    });\n\n    const bindGroupLayouts = t.params.bindGroupLayouts.map(bindGroupLayoutType => {\n      switch (bindGroupLayoutType) {\n        case 'Null':\n          return null;\n        case 'Undefined':\n          return undefined;\n        case 'Empty':\n          return t.device.createBindGroupLayout({ entries: [] });\n        case 'NonEmpty':\n          return nonEmptyBindGroupLayout;\n      }\n    });\n\n    const kShouldError = false;\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts });\n    }, kShouldError);\n  });\n\ng.test('bind_group_layouts,create_pipeline_with_null_bind_group_layouts')\n  .desc(\n    `\n  Tests that it is valid to create a render pipeline or compute pipeline with a pipeline layout\n  created with null bind group layouts as long as the pipeline layout matches the declarations in\n  the shaders.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('pipelineType', ['Render', 'Compute'] as const)\n      .combine('emptyBindGroupLayoutType', ['Null', 'Undefined'] as const)\n      .combine('emptyBindGroupLayoutIndex', [0, 1, 2, 3] as const)\n      .combine('emptyBindGroupLayoutIndexMissedInShader', [true, false])\n  )\n  .fn(t => {\n    const {\n      pipelineType,\n      emptyBindGroupLayoutType,\n      emptyBindGroupLayoutIndex,\n      emptyBindGroupLayoutIndexMissedInShader,\n    } = t.params;\n\n    const bindGroupLayouts: (GPUBindGroupLayout | null | undefined)[] = [];\n    for (let i = 0; i < 4; ++i) {\n      if (i === emptyBindGroupLayoutIndex) {\n        switch (emptyBindGroupLayoutType) {\n          case 'Null':\n            bindGroupLayouts.push(null);\n            break;\n          case 'Undefined':\n            bindGroupLayouts.push(undefined);\n            break;\n        }\n      } else {\n        const nonEmptyBindGroupLayout = t.device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.FRAGMENT,\n              buffer: {\n                type: 'uniform',\n              },\n            },\n          ],\n        });\n        bindGroupLayouts.push(nonEmptyBindGroupLayout);\n      }\n    }\n    const layout = t.device.createPipelineLayout({ bindGroupLayouts });\n\n    let declarations = '';\n    let statement = '_ = 1';\n    for (let i = 0; i < 4; ++i) {\n      if (emptyBindGroupLayoutIndexMissedInShader && i === emptyBindGroupLayoutIndex) {\n        continue;\n      }\n      declarations += `@group(${i}) @binding(0) var<uniform> input${i} : u32;\\n`;\n      statement += ` + input${i}`;\n    }\n\n    const shouldError = !emptyBindGroupLayoutIndexMissedInShader;\n\n    switch (pipelineType) {\n      case 'Render': {\n        const code = `\n        ${declarations}\n        @vertex\n        fn vert_main() -> @builtin(position) vec4f {\n            return vec4f(0.0, 0.0, 0.0, 1.0);\n        }\n\n        @fragment\n        fn frag_main() -> @location(0) vec4f {\n            ${statement};\n            return vec4f(0.0, 0.0, 0.0, 1.0);\n        }\n        `;\n        const shaderModule = t.device.createShaderModule({\n          code,\n        });\n\n        t.expectValidationError(() => {\n          t.device.createRenderPipeline({\n            layout,\n            vertex: {\n              module: shaderModule,\n            },\n            fragment: {\n              module: shaderModule,\n              targets: [\n                {\n                  format: 'rgba8unorm',\n                },\n              ],\n            },\n          });\n        }, shouldError);\n        break;\n      }\n\n      case 'Compute': {\n        const code = `\n        ${declarations}\n        @compute @workgroup_size(1) fn cs_main() {\n          ${statement};\n        }\n        `;\n        const shaderModule = t.device.createShaderModule({\n          code,\n        });\n        t.expectValidationError(() => {\n          t.device.createComputePipeline({\n            layout,\n            compute: {\n              module: shaderModule,\n            },\n          });\n        }, shouldError);\n        break;\n      }\n    }\n  });\n\ng.test('bind_group_layouts,set_pipeline_with_null_bind_group_layouts')\n  .desc(\n    `\n  Tests that it is valid to use a render pipeline or compute pipeline with null bind group layouts\n  used in the pipeline layout in a render pass encoder or compute pass encoder.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('pipelineType', ['Render', 'Compute'] as const)\n      .combine('emptyBindGroupLayoutType', ['Null', 'Undefined'] as const)\n      .combine('emptyBindGroupLayoutIndex', [0, 1, 2, 3] as const)\n      .combine('setBindGroupOnEmptyBindGroupLayoutIndex', [true, false])\n  )\n  .fn(t => {\n    const {\n      pipelineType,\n      emptyBindGroupLayoutType,\n      emptyBindGroupLayoutIndex,\n      setBindGroupOnEmptyBindGroupLayoutIndex,\n    } = t.params;\n\n    const nonEmptyBindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.FRAGMENT,\n          buffer: {\n            type: 'uniform',\n          },\n        },\n      ],\n    });\n    const bindGroups: GPUBindGroup[] = [];\n    const bindGroupLayouts: (GPUBindGroupLayout | null | undefined)[] = [];\n    let declarations = '';\n    let statement = '_ = 1';\n    for (let i = 0; i < 4; ++i) {\n      if (i === emptyBindGroupLayoutIndex) {\n        switch (emptyBindGroupLayoutType) {\n          case 'Null':\n            bindGroupLayouts.push(null);\n            break;\n          case 'Undefined':\n            bindGroupLayouts.push(undefined);\n            break;\n        }\n      } else {\n        bindGroupLayouts.push(nonEmptyBindGroupLayout);\n        declarations += `@group(${i}) @binding(0) var<uniform> input${i} : u32;\\n`;\n        statement += ` + input${i}`;\n      }\n\n      const buffer = t.createBufferTracked({\n        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n        size: 4,\n      });\n      const bindGroup = t.device.createBindGroup({\n        layout: nonEmptyBindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer,\n            },\n          },\n        ],\n      });\n      bindGroups.push(bindGroup);\n    }\n    const layout = t.device.createPipelineLayout({ bindGroupLayouts });\n\n    const shouldError = false;\n    switch (pipelineType) {\n      case 'Render': {\n        const code = `\n      ${declarations}\n      @vertex\n      fn vert_main() -> @builtin(position) vec4f {\n          return vec4f(0.0, 0.0, 0.0, 1.0);\n      }\n      @fragment\n      fn frag_main() -> @location(0) vec4f {\n          ${statement};\n          return vec4f(0.0, 0.0, 0.0, 1.0);\n      }\n      `;\n        const shaderModule = t.device.createShaderModule({\n          code,\n        });\n\n        const format = 'rgba8unorm';\n        const renderPipeline = t.device.createRenderPipeline({\n          layout,\n          vertex: {\n            module: shaderModule,\n          },\n          fragment: {\n            module: shaderModule,\n            targets: [\n              {\n                format,\n              },\n            ],\n          },\n        });\n\n        const renderTarget = t.createTextureTracked({\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n          size: [1, 1, 1],\n          format,\n        });\n        const commandEncoder = t.device.createCommandEncoder();\n        const renderPassEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              loadOp: 'load',\n              storeOp: 'store',\n            },\n          ],\n        });\n        for (let i = 0; i < 4; ++i) {\n          if (!setBindGroupOnEmptyBindGroupLayoutIndex && i === emptyBindGroupLayoutIndex) {\n            continue;\n          }\n          renderPassEncoder.setBindGroup(i, bindGroups[i]);\n        }\n        renderPassEncoder.setPipeline(renderPipeline);\n        renderPassEncoder.draw(1);\n        renderPassEncoder.end();\n\n        t.expectValidationError(() => {\n          t.queue.submit([commandEncoder.finish()]);\n        }, shouldError);\n        break;\n      }\n\n      case 'Compute': {\n        const code = `\n      ${declarations}\n      @compute @workgroup_size(1) fn cs_main() {\n        ${statement};\n      }\n      `;\n        const shaderModule = t.device.createShaderModule({\n          code,\n        });\n\n        const computePipeline = t.device.createComputePipeline({\n          layout,\n          compute: {\n            module: shaderModule,\n          },\n        });\n        const commandEncoder = t.device.createCommandEncoder();\n        const computePassEncoder = commandEncoder.beginComputePass();\n        for (let i = 0; i < 4; ++i) {\n          if (!setBindGroupOnEmptyBindGroupLayoutIndex && i === emptyBindGroupLayoutIndex) {\n            continue;\n          }\n          computePassEncoder.setBindGroup(i, bindGroups[i]);\n        }\n        computePassEncoder.setPipeline(computePipeline);\n        computePassEncoder.dispatchWorkgroups(1);\n        computePassEncoder.end();\n\n        t.expectValidationError(() => {\n          t.queue.submit([commandEncoder.finish()]);\n        }, shouldError);\n        break;\n      }\n    }\n  });\n"],"mappings":"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"}