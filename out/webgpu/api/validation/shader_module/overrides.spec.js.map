{"version":3,"file":"overrides.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsValidationTest","g","test","desc","fn","t","expectValidationError","device","createShaderModule","code"],"sources":["../../../../../src/webgpu/api/validation/shader_module/overrides.spec.ts"],"sourcesContent":["export const description = `\nThis tests overrides numeric identifiers should not conflict.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsValidationTest);\n\ng.test('id_conflict')\n  .desc(\n    `\nTests that overrides' explicit numeric identifier should not conflict.\n`\n  )\n  .fn(t => {\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1234) override c0: u32;\n@id(4321) override c1: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n  _ = c1;\n}\n          `,\n      });\n    }, false);\n\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1234) override c0: u32;\n@id(1234) override c1: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n  _ = c1;\n}\n          `,\n      });\n    }, true);\n  });\n\ng.test('name_conflict')\n  .desc(\n    `\nTests that overrides' variable name should not conflict, regardless of their numeric identifiers.\n`\n  )\n  .fn(t => {\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\noverride c0: u32;\noverride c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `,\n      });\n    }, true);\n\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1) override c0: u32;\noverride c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `,\n      });\n    }, true);\n\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1) override c0: u32;\n@id(2) override c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `,\n      });\n    }, true);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,kCAAkC,QAAQ,uBAAuB;;AAE1E,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,kCAAkC,CAAC;;AAElEC,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC;AAClBC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACPA,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CAAC;EACJ,CAAC,EAAE,KAAK,CAAC;;EAETJ,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AACV,CAAC,CAAC;;AAEJR,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACPA,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;;EAERJ,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;;EAERJ,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AACV,CAAC,CAAC"}