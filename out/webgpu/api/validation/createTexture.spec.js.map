{"version":3,"file":"createTexture.spec.js","names":["description","AllFeaturesMaxLimitsGPUTest","makeTestGroup","assert","makeValueTestVariant","kTextureDimensions","kTextureUsages","GPUConst","kAllTextureFormats","kCompressedTextureFormats","kUncompressedTextureFormats","kRegularTextureFormats","kFeaturesForFormats","filterFormatsByFeature","textureFormatAndDimensionPossiblyCompatible","getBlockInfoForTextureFormat","isTextureFormatMultisampled","isTextureFormatColorRenderable","isTextureFormatPossiblyUsableAsColorRenderAttachment","isTextureFormatPossiblyStorageReadable","isColorTextureFormat","textureFormatsAreViewCompatible","textureDimensionAndFormatCompatibleForDevice","getMaxValidTextureSizeForFormatAndDimension","isTextureFormatUsableWithStorageAccessMode","maxMipLevelCount","g","test","desc","params","u","combine","undefined","beginSubcases","filter","dimension","format","fn","t","zeroArgument","skipIfTextureFormatNotSupported","skipIfTextureFormatAndDimensionNotCompatible","info","size","blockWidth","blockHeight","mipLevelCount","usage","GPUTextureUsage","TEXTURE_BINDING","descriptor","success","expectValidationError","createTextureTracked","device","unless","largestDimension","kTargetMipLevelCount","kTargetLargeSize","largeSize","Math","floor","combineWithParams","sampleCount","RENDER_ATTACHMENT","arrayLayerCount","expand","usageSet","Set","usage0","usage1","add","TextureUsage","STORAGE_BINDING","skipIfTextureFormatNotUsableAsRenderAttachment","satisfyWithStorageUsageRequirement","shouldError","expandWithParams","p","_success","mult","widthVariant","height","depthOrArrayLayers","width","makeLimitVariant","limits","maxTextureDimension1D","sizeVariant","maxTextureDimension2D","maxTextureArrayLayers","map","limit","ndx","maxTextureDimension3D","variant","appliedDimension","formatFeature","viewFormatFeature","viewFormat","compatible","viewFormats"],"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"sourcesContent":["export const description = `createTexture validation tests.`;\n\nimport { AllFeaturesMaxLimitsGPUTest } from '../.././gpu_test.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, makeValueTestVariant } from '../../../common/util/util.js';\nimport { kTextureDimensions, kTextureUsages } from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kAllTextureFormats,\n  kCompressedTextureFormats,\n  kUncompressedTextureFormats,\n  kRegularTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  textureFormatAndDimensionPossiblyCompatible,\n  getBlockInfoForTextureFormat,\n  isTextureFormatMultisampled,\n  isTextureFormatColorRenderable,\n  isTextureFormatPossiblyUsableAsColorRenderAttachment,\n  isTextureFormatPossiblyStorageReadable,\n  isColorTextureFormat,\n  textureFormatsAreViewCompatible,\n  textureDimensionAndFormatCompatibleForDevice,\n  getMaxValidTextureSizeForFormatAndDimension,\n  isTextureFormatUsableWithStorageAccessMode,\n} from '../../format_info.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('zero_size_and_usage')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount, usage for every dimension, and\n    representative formats.\n  `\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', [\n        'rgba8unorm',\n        'rgb10a2unorm',\n        'bc1-rgba-unorm',\n        'depth24plus-stencil8',\n      ] as const)\n      .beginSubcases()\n      .combine('zeroArgument', [\n        'none',\n        'width',\n        'height',\n        'depthOrArrayLayers',\n        'mipLevelCount',\n        'usage',\n      ] as const)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n  )\n  .fn(t => {\n    const { dimension, zeroArgument, format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n\n    const info = getBlockInfoForTextureFormat(format);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    let mipLevelCount = 1;\n    let usage = GPUTextureUsage.TEXTURE_BINDING;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      case 'usage':\n        usage = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success = zeroArgument === 'none';\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('dimension_type_and_format_compatibility')\n  .desc(\n    `Test every dimension type on every format. Note that compressed formats and depth/stencil formats are not valid\n    for 1D dimension types while it depends on the format for 3D types.`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kAllTextureFormats)\n  )\n  .fn(t => {\n    const { dimension, format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const info = getBlockInfoForTextureFormat(format);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(\n      () => {\n        t.createTextureTracked(descriptor);\n      },\n      !textureDimensionAndFormatCompatibleForDevice(t.device, dimension, format)\n    );\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kAllTextureFormats)\n      .beginSubcases()\n      .combine('mipLevelCount', [1, 2, 3, 6, 7])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .combine('largestDimension', [0, 1, 2])\n      .unless(({ dimension, largestDimension }) => dimension === '1d' && largestDimension > 0)\n  )\n  .fn(t => {\n    const { dimension, format, mipLevelCount, largestDimension } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    const info = getBlockInfoForTextureFormat(format);\n\n    // Compute dimensions such that the dimensions are in range [17, 32] and aligned with the\n    // format block size so that there will be exactly 6 mip levels.\n    const kTargetMipLevelCount = 5;\n    const kTargetLargeSize = (1 << kTargetMipLevelCount) - 1;\n    const largeSize = [\n      Math.floor(kTargetLargeSize / info.blockWidth) * info.blockWidth,\n      Math.floor(kTargetLargeSize / info.blockHeight) * info.blockHeight,\n      kTargetLargeSize,\n    ];\n    assert(17 <= largeSize[0] && largeSize[0] <= 32);\n    assert(17 <= largeSize[1] && largeSize[1] <= 32);\n\n    // Note that compressed formats are not valid for 1D. They have already been filtered out for 1D\n    // in this test. So there is no dilemma about size.width equals 1 vs\n    // size.width % info.blockHeight equals 0 for 1D compressed formats.\n    const size = [info.blockWidth, info.blockHeight, 1];\n    size[largestDimension] = largeSize[largestDimension];\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success = mipLevelCount <= maxMipLevelCount(descriptor);\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .params(u =>\n    u //\n      .combine('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const)\n      .beginSubcases()\n      .combineWithParams([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % getBlockInfoForTextureFormat(format).blockWidth !== 0 ||\n            size[1] % getBlockInfoForTextureFormat(format).blockHeight !== 0)\n      )\n  )\n  .fn(t => {\n    const { format, size, dimension } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n\n    const descriptor = {\n      size,\n      mipLevelCount: 0,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.createTextureTracked(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(\n    `Test texture creation with various (valid or invalid) sample count and all formats. Note that 1D and 3D textures can't support multisample.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kAllTextureFormats)\n      .beginSubcases()\n      .combine('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256])\n  )\n  .fn(t => {\n    const { dimension, sampleCount, format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const info = getBlockInfoForTextureFormat(format);\n\n    const usage =\n      sampleCount > 1\n        ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n        : GPUTextureUsage.TEXTURE_BINDING;\n    const descriptor = {\n      size: [32 * info.blockWidth, 32 * info.blockHeight, 1],\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 || (sampleCount === 4 && isTextureFormatMultisampled(t.device, format));\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount,\n     format, and usage varies. Texture can be single sample (sampleCount is 1) or multi-sample\n     (sampleCount is 4). Multisample texture requires that\n     1) its dimension is 2d or undefined,\n     2) its format supports multisample,\n     3) its mipLevelCount and arrayLayerCount are 1,\n     4) its usage doesn't include STORAGE_BINDING,\n     5) its usage includes RENDER_ATTACHMENT.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kAllTextureFormats)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n      .combine('arrayLayerCount', [1, 2])\n      .unless(\n        ({ dimension, arrayLayerCount }) =>\n          arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n      )\n      .combine('mipLevelCount', [1, 2])\n      .expand('usage', () => {\n        const usageSet = new Set<number>();\n        for (const usage0 of kTextureUsages) {\n          for (const usage1 of kTextureUsages) {\n            usageSet.add(usage0 | usage1);\n          }\n        }\n        return usageSet;\n      })\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .unless(({ usage, format, mipLevelCount, dimension }) => {\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n            (!isTextureFormatPossiblyUsableAsColorRenderAttachment(format) ||\n              dimension !== '2d')) ||\n          ((usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 &&\n            !isTextureFormatPossiblyStorageReadable(format)) ||\n          (mipLevelCount !== 1 && dimension === '1d')\n        );\n      })\n  )\n  .fn(t => {\n    const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    if ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0) {\n      t.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n    }\n    const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(format);\n\n    const size =\n      dimension === '1d'\n        ? [32 * blockWidth, 1 * blockHeight, 1]\n        : dimension === '2d' || dimension === undefined\n        ? [32 * blockWidth, 32 * blockHeight, arrayLayerCount]\n        : [32 * blockWidth, 32 * blockHeight, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const satisfyWithStorageUsageRequirement =\n      (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0 ||\n      isTextureFormatUsableWithStorageAccessMode(t.device, format, 'write-only');\n\n    const success =\n      (sampleCount === 1 && satisfyWithStorageUsageRequirement) ||\n      (sampleCount === 4 &&\n        isTextureFormatMultisampled(t.device, format) &&\n        (dimension === '2d' || dimension === undefined) &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n        (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0);\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('sample_count,1d_2d_array_3d')\n  .desc(`Test that you can not create 1d, 2d_array, and 3d multisampled textures`)\n  .params(u =>\n    u.combineWithParams([\n      { dimension: '2d', size: [4, 4, 1], shouldError: false },\n      { dimension: '1d', size: [4, 1, 1], shouldError: true },\n      { dimension: '2d', size: [4, 4, 4], shouldError: true },\n      { dimension: '2d', size: [4, 4, 6], shouldError: true },\n      { dimension: '3d', size: [4, 4, 4], shouldError: true },\n    ] as const)\n  )\n  .fn(t => {\n    const { dimension, size, shouldError } = t.params;\n\n    t.expectValidationError(() => {\n      t.createTextureTracked({\n        size,\n        dimension,\n        sampleCount: 4,\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n    It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kUncompressedTextureFormats)\n      .beginSubcases()\n      .combine('size', [[1], [1, 1], [1, 1, 1]])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n  )\n  .fn(t => {\n    const { dimension, format, size } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.createTextureTracked(descriptor);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n    It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      // Compressed formats are invalid for 1D.\n      .combine('dimension', [undefined, '2d', '3d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n      .beginSubcases()\n      .expandWithParams(p => {\n        const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(p.format);\n        return [\n          { size: [1], _success: false },\n          { size: [blockWidth], _success: false },\n          { size: [1, 1], _success: false },\n          { size: [blockWidth, blockHeight], _success: true },\n          { size: [1, 1, 1], _success: false },\n          { size: [blockWidth, blockHeight, 1], _success: true },\n        ];\n      })\n  )\n  .fn(t => {\n    const { dimension, format, size, _success } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !_success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .params(u =>\n    u //\n      // Compressed and depth-stencil textures are invalid for 1D.\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('widthVariant', [\n        { mult: 1, add: -1 },\n        { mult: 1, add: 0 },\n        { mult: 1, add: 1 },\n      ])\n      .combine('height', [1, 2])\n      .combine('depthOrArrayLayers', [1, 2])\n  )\n  .fn(t => {\n    const { format, widthVariant, height, depthOrArrayLayers } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const width = t.makeLimitVariant('maxTextureDimension1D', widthVariant);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      width <= t.device.limits.maxTextureDimension1D && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kUncompressedTextureFormats)\n      .combine(\n        'sizeVariant',\n        /* prettier-ignore */ [\n          // Test the bound of width\n          [{ mult: 1, add: -1 }, { mult: 0, add:  1 }, { mult: 0, add:  1 }],\n          [{ mult: 1, add:  0 }, { mult: 0, add:  1 }, { mult: 0, add:  1 }],\n          [{ mult: 1, add:  1 }, { mult: 0, add:  1 }, { mult: 0, add:  1 }],\n          // Test the bound of height\n          [{ mult: 0, add:  1 }, { mult: 1, add: -1 }, { mult: 0, add:  1 }],\n          [{ mult: 0, add:  1 }, { mult: 1, add:  0 }, { mult: 0, add:  1 }],\n          [{ mult: 0, add:  1 }, { mult: 1, add:  1 }, { mult: 0, add:  1 }],\n          // Test the bound of array layers\n          [{ mult: 0, add:  1 }, { mult: 0, add:  1 }, { mult: 1, add: -1 }],\n          [{ mult: 0, add:  1 }, { mult: 0, add:  1 }, { mult: 1, add:  0 }],\n          [{ mult: 0, add:  1 }, { mult: 0, add:  1 }, { mult: 1, add:  1 }],\n        ]\n      )\n  )\n  .fn(t => {\n    const { dimension, format, sizeVariant } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const size = [\n      t.device.limits.maxTextureDimension2D,\n      t.device.limits.maxTextureDimension2D,\n      t.device.limits.maxTextureArrayLayers,\n    ].map((limit, ndx) => makeValueTestVariant(limit, sizeVariant[ndx]));\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= t.device.limits.maxTextureDimension2D &&\n      size[1] <= t.device.limits.maxTextureDimension2D &&\n      size[2] <= t.device.limits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .expand('sizeVariant', p => {\n        const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(p.format);\n        return [\n          // Test the bound of width\n          [\n            { mult: 1, add: -1 },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: -blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: -blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: 0 },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: 0 },\n            { mult: 0, add: blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          // Test the bound of height\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: -1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: -blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 1, add: -blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: 0 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 1, add: 0 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: +1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: +blockWidth },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 1, add: +blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          // Test the bound of array layers\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 1, add: +1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 1, add: +1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: +1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: +1 },\n          ],\n        ];\n      })\n  )\n  .fn(t => {\n    const { dimension, format, sizeVariant } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const info = getBlockInfoForTextureFormat(format);\n    const size = getMaxValidTextureSizeForFormatAndDimension(t.device, format, '2d').map(\n      (limit, ndx) => makeValueTestVariant(limit, sizeVariant[ndx])\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= t.device.limits.maxTextureDimension2D &&\n      size[1] <= t.device.limits.maxTextureDimension2D &&\n      size[2] <= t.device.limits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(\n    `Test texture size requirement for 3D texture with uncompressed format. Note that depth/stencil formats are invalid for 3D textures, so we only test regular formats.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine(\n        'sizeVariant',\n        /* prettier-ignore */ [\n          // Test the bound of width\n          [{ mult: 1, add: -1 }, { mult: 0, add:  1 }, { mult: 0, add:  1 }],\n          [{ mult: 1, add:  0 }, { mult: 0, add:  1 }, { mult: 0, add:  1 }],\n          [{ mult: 1, add: +1 }, { mult: 0, add:  1 }, { mult: 0, add:  1 }],\n          // Test the bound of height\n          [{ mult: 0, add:  1 }, { mult: 1, add: -1 }, { mult: 0, add:  1 }],\n          [{ mult: 0, add:  1 }, { mult: 1, add:  0 }, { mult: 0, add:  1 }],\n          [{ mult: 0, add:  1 }, { mult: 1, add: +1 }, { mult: 0, add:  1 }],\n          // Test the bound of depth\n          [{ mult: 0, add:  1 }, { mult: 0, add:  1 }, { mult: 1, add: -1 }],\n          [{ mult: 0, add:  1 }, { mult: 0, add:  1 }, { mult: 1, add:  0 }],\n          [{ mult: 0, add:  1 }, { mult: 0, add:  1 }, { mult: 1, add: +1 }],\n        ]\n      )\n  )\n  .fn(t => {\n    const { format, sizeVariant } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, '3d');\n    const maxTextureDimension3D = t.device.limits.maxTextureDimension3D;\n    const size = sizeVariant.map(variant => t.makeLimitVariant('maxTextureDimension3D', variant));\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= maxTextureDimension3D &&\n      size[1] <= maxTextureDimension3D &&\n      size[2] <= maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .params(u =>\n    u //\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .expand('sizeVariant', p => {\n        const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(p.format);\n        return [\n          // Test the bound of width\n          [\n            { mult: 1, add: -1 },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: -blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: -blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: 0 },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: 0 },\n            { mult: 0, add: blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: +1 },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: +blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 1, add: +blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          // Test the bound of height\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: -1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: -blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 1, add: -blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: 0 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 1, add: 0 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: +1 },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 1, add: +blockWidth },\n            { mult: 0, add: 1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 1, add: +blockHeight },\n            { mult: 0, add: 1 },\n          ],\n          // Test the bound of depth\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: -1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: 0 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: 1 },\n            { mult: 1, add: +1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: 1 },\n            { mult: 1, add: +1 },\n          ],\n          [\n            { mult: 0, add: 1 },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: +1 },\n          ],\n          [\n            { mult: 0, add: blockWidth },\n            { mult: 0, add: blockHeight },\n            { mult: 1, add: +1 },\n          ],\n        ];\n      })\n  )\n  .fn(t => {\n    const { format, sizeVariant } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, '3d');\n    const maxTextureDimension3D = t.device.limits.maxTextureDimension3D;\n    const info = getBlockInfoForTextureFormat(format);\n    const size = getMaxValidTextureSizeForFormatAndDimension(t.device, format, '3d').map(\n      (limit, ndx) => makeValueTestVariant(limit, sizeVariant[ndx])\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= maxTextureDimension3D &&\n      size[1] <= maxTextureDimension3D &&\n      size[2] <= maxTextureDimension3D &&\n      textureDimensionAndFormatCompatibleForDevice(t.device, '3d', format);\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('texture_usage')\n  .desc(\n    `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kAllTextureFormats)\n      .beginSubcases()\n      // If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n      .combine('usage0', kTextureUsages)\n      .combine('usage1', kTextureUsages)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) =>\n        textureFormatAndDimensionPossiblyCompatible(dimension, format)\n      )\n  )\n  .fn(t => {\n    const { dimension, format, usage0, usage1 } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureFormatAndDimensionNotCompatible(format, dimension);\n    const info = getBlockInfoForTextureFormat(format);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    const usage = usage0 | usage1;\n    const descriptor = {\n      size,\n      dimension,\n      format,\n      usage,\n    };\n\n    let success = true;\n    const appliedDimension = dimension ?? '2d';\n    // Note that we unconditionally test copy usages for all formats and\n    // expect failure if copying from or to is not supported.\n    if (usage & GPUTextureUsage.STORAGE_BINDING) {\n      if (!isTextureFormatUsableWithStorageAccessMode(t.device, format, 'write-only'))\n        success = false;\n    }\n    if (usage & GPUTextureUsage.RENDER_ATTACHMENT) {\n      if (appliedDimension === '1d') success = false;\n      if (isColorTextureFormat(format) && !isTextureFormatColorRenderable(t.device, format))\n        success = false;\n    }\n\n    t.expectValidationError(() => {\n      t.createTextureTracked(descriptor);\n    }, !success);\n  });\n\ng.test('viewFormats')\n  .desc(\n    `Test creating a texture with viewFormats list for all {texture format}x{view format}. Only compatible view formats should be valid.`\n  )\n  .params(u =>\n    u\n      .combine('formatFeature', kFeaturesForFormats)\n      .combine('viewFormatFeature', kFeaturesForFormats)\n      .beginSubcases()\n      .expand('format', ({ formatFeature }) =>\n        filterFormatsByFeature(formatFeature, kAllTextureFormats)\n      )\n      .expand('viewFormat', ({ viewFormatFeature }) =>\n        filterFormatsByFeature(viewFormatFeature, kAllTextureFormats)\n      )\n  )\n  .fn(t => {\n    const { format, viewFormat } = t.params;\n    t.skipIfTextureFormatNotSupported(format, viewFormat);\n\n    const { blockWidth, blockHeight } = getBlockInfoForTextureFormat(format);\n    const compatible = textureFormatsAreViewCompatible(t.device, format, viewFormat);\n\n    // Test the viewFormat in the list.\n    t.expectValidationError(() => {\n      t.createTextureTracked({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat],\n      });\n    }, !compatible);\n\n    // Test the viewFormat and the texture format in the list.\n    t.expectValidationError(() => {\n      t.createTextureTracked({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, format],\n      });\n    }, !compatible);\n\n    // Test the viewFormat multiple times in the list.\n    t.expectValidationError(() => {\n      t.createTextureTracked({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, viewFormat],\n      });\n    }, !compatible);\n  });\n"],"mappings":"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"}