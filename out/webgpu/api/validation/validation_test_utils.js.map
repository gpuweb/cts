{"version":3,"file":"validation_test_utils.js","names":["kMaxQueryCount","createTextureWithState","t","state","descriptor","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","createTextureTracked","getErrorTexture","texture","destroy","createBufferWithState","GPUBufferUsage","VERTEX","createBufferTracked","device","pushErrorScope","buffer","MAP_READ","popErrorScope","createQuerySetWithState","desc","type","count","createQuerySetTracked","expectGPUError","queryset","getStorageBuffer","STORAGE","getUniformBuffer","UNIFORM","getErrorBuffer","getErrorSampler","sampler","createSampler","lodMinClamp","getSampledTexture","sampleCount","getStorageTexture","getRenderTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","minFilter","compare","getDeviceMismatchedStorageBuffer","trackForCleanup","mismatchedDevice","createBuffer","getDeviceMismatchedUniformBuffer","getDeviceMismatchedTexture","createTexture","getDeviceMismatchedSampledTexture","getDeviceMismatchedStorageTexture","getDeviceMismatchedRenderTexture","getDeviceMismatchedBindingResource","getNoOpShaderCode","stage","createRenderPipelineWithState","createNoOpRenderPipeline","createErrorRenderPipeline","layout","colorFormat","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","writeMask","primitive","topology","pipeline","createNoOpComputePipeline","createComputePipeline","compute","createErrorComputePipeline","createInvalidShaderModule","shaderModule","doCreateRenderPipelineTest","isAsync","_success","errorTypeName","shouldResolve","createRenderPipelineAsync","shouldReject","expectValidationError","shouldThrow","doCreateComputePipelineTest","createComputePipelineAsync"],"sources":["../../../../src/webgpu/api/validation/validation_test_utils.ts"],"sourcesContent":["import {\n  ValidBindableResource,\n  BindableResource,\n  kMaxQueryCount,\n  ShaderStageKey,\n} from '../../capability_info.js';\nimport { ResourceState, GPUTest } from '../../gpu_test.js';\n\nexport function createTextureWithState(\n  t: GPUTest,\n  state: ResourceState,\n  descriptor?: Readonly<GPUTextureDescriptor>\n): GPUTexture {\n  descriptor = descriptor ?? {\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage:\n      GPUTextureUsage.COPY_SRC |\n      GPUTextureUsage.COPY_DST |\n      GPUTextureUsage.TEXTURE_BINDING |\n      GPUTextureUsage.STORAGE_BINDING |\n      GPUTextureUsage.RENDER_ATTACHMENT,\n  };\n\n  switch (state) {\n    case 'valid':\n      return t.createTextureTracked(descriptor);\n    case 'invalid':\n      return getErrorTexture(t);\n    case 'destroyed': {\n      const texture = t.createTextureTracked(descriptor);\n      texture.destroy();\n      return texture;\n    }\n  }\n}\n\n/**\n * Create a GPUTexture in the specified state. A `descriptor` may optionally be passed;\n * if `state` is `'invalid'`, it will be modified to add an invalid combination of usages.\n */\nexport function createBufferWithState(\n  t: GPUTest,\n  state: ResourceState,\n  descriptor?: Readonly<GPUBufferDescriptor>\n): GPUBuffer {\n  descriptor = descriptor ?? {\n    size: 4,\n    usage: GPUBufferUsage.VERTEX,\n  };\n\n  switch (state) {\n    case 'valid':\n      return t.createBufferTracked(descriptor);\n\n    case 'invalid': {\n      // Make the buffer invalid because of an invalid combination of usages but keep the\n      // descriptor passed as much as possible (for mappedAtCreation and friends).\n      t.device.pushErrorScope('validation');\n      const buffer = t.createBufferTracked({\n        ...descriptor,\n        usage: descriptor.usage | GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_SRC,\n      });\n      void t.device.popErrorScope();\n      return buffer;\n    }\n    case 'destroyed': {\n      const buffer = t.createBufferTracked(descriptor);\n      buffer.destroy();\n      return buffer;\n    }\n  }\n}\n\n/**\n * Create a GPUQuerySet in the specified state.\n * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n */\nexport function createQuerySetWithState(\n  t: GPUTest,\n  state: ResourceState,\n  desc?: Readonly<GPUQuerySetDescriptor>\n): GPUQuerySet {\n  const descriptor = { type: 'occlusion' as const, count: 2, ...desc };\n\n  switch (state) {\n    case 'valid':\n      return t.createQuerySetTracked(descriptor);\n    case 'invalid': {\n      // Make the queryset invalid because of the count out of bounds.\n      descriptor.count = kMaxQueryCount + 1;\n      return t.expectGPUError('validation', () => t.createQuerySetTracked(descriptor));\n    }\n    case 'destroyed': {\n      const queryset = t.createQuerySetTracked(descriptor);\n      queryset.destroy();\n      return queryset;\n    }\n  }\n}\n\n/** Create an arbitrarily-sized GPUBuffer with the STORAGE usage. */\nexport function getStorageBuffer(t: GPUTest): GPUBuffer {\n  return t.createBufferTracked({ size: 1024, usage: GPUBufferUsage.STORAGE });\n}\n\n/** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage. */\nexport function getUniformBuffer(t: GPUTest): GPUBuffer {\n  return t.createBufferTracked({ size: 1024, usage: GPUBufferUsage.UNIFORM });\n}\n\n/** Return an invalid GPUBuffer. */\nexport function getErrorBuffer(t: GPUTest): GPUBuffer {\n  return createBufferWithState(t, 'invalid');\n}\n\n/** Return an invalid GPUSampler. */\nexport function getErrorSampler(t: GPUTest): GPUSampler {\n  t.device.pushErrorScope('validation');\n  const sampler = t.device.createSampler({ lodMinClamp: -1 });\n  void t.device.popErrorScope();\n  return sampler;\n}\n\n/**\n * Return an arbitrarily-configured GPUTexture with the `TEXTURE_BINDING` usage and specified\n * sampleCount. The `RENDER_ATTACHMENT` usage will also be specified if sampleCount > 1 as is\n * required by WebGPU SPEC.\n */\nexport function getSampledTexture(t: GPUTest, sampleCount: number = 1): GPUTexture {\n  const usage =\n    sampleCount > 1\n      ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n      : GPUTextureUsage.TEXTURE_BINDING;\n  return t.createTextureTracked({\n    size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage,\n    sampleCount,\n  });\n}\n\n/** Return an arbitrarily-configured GPUTexture with the `STORAGE_BINDING` usage. */\nfunction getStorageTexture(t: GPUTest, format: GPUTextureFormat): GPUTexture {\n  return t.createTextureTracked({\n    size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n  });\n}\n\n/** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage. */\nexport function getRenderTexture(t: GPUTest, sampleCount: number = 1): GPUTexture {\n  return t.createTextureTracked({\n    size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount,\n  });\n}\n\n/** Return an invalid GPUTexture. */\nexport function getErrorTexture(t: GPUTest): GPUTexture {\n  t.device.pushErrorScope('validation');\n  const texture = t.createTextureTracked({\n    size: { width: 0, height: 0, depthOrArrayLayers: 0 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n  });\n  void t.device.popErrorScope();\n  return texture;\n}\n\n/** Return an invalid GPUTextureView (created from an invalid GPUTexture). */\nexport function getErrorTextureView(t: GPUTest): GPUTextureView {\n  t.device.pushErrorScope('validation');\n  const view = getErrorTexture(t).createView();\n  void t.device.popErrorScope();\n  return view;\n}\n\n/**\n * Return an arbitrary object of the specified {@link webgpu/capability_info!BindableResource} type\n * (e.g. `'errorBuf'`, `'nonFiltSamp'`, `sampledTexMS`, etc.)\n */\nexport function getBindingResource(t: GPUTest, bindingType: BindableResource): GPUBindingResource {\n  switch (bindingType) {\n    case 'errorBuf':\n      return { buffer: getErrorBuffer(t) };\n    case 'errorSamp':\n      return getErrorSampler(t);\n    case 'errorTex':\n      return getErrorTextureView(t);\n    case 'uniformBuf':\n      return { buffer: getUniformBuffer(t) };\n    case 'storageBuf':\n      return { buffer: getStorageBuffer(t) };\n    case 'filtSamp':\n      return t.device.createSampler({ minFilter: 'linear' });\n    case 'nonFiltSamp':\n      return t.device.createSampler();\n    case 'compareSamp':\n      return t.device.createSampler({ compare: 'never' });\n    case 'sampledTex':\n      return getSampledTexture(t, 1).createView();\n    case 'sampledTexMS':\n      return getSampledTexture(t, 4).createView();\n    case 'readonlyStorageTex':\n    case 'writeonlyStorageTex':\n    case 'readwriteStorageTex':\n      return getStorageTexture(t, 'r32float').createView();\n  }\n}\n\n/** Create an arbitrarily-sized GPUBuffer with the STORAGE usage from mismatched device. */\nexport function getDeviceMismatchedStorageBuffer(t: GPUTest): GPUBuffer {\n  return t.trackForCleanup(\n    t.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.STORAGE })\n  );\n}\n\n/** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage from mismatched device. */\nexport function getDeviceMismatchedUniformBuffer(t: GPUTest): GPUBuffer {\n  return t.trackForCleanup(\n    t.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.UNIFORM })\n  );\n}\n\n/** Return a GPUTexture with descriptor from mismatched device. */\nexport function getDeviceMismatchedTexture(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n): GPUTexture {\n  return t.trackForCleanup(t.mismatchedDevice.createTexture(descriptor));\n}\n\n/** Return an arbitrarily-configured GPUTexture with the `SAMPLED` usage from mismatched device. */\nexport function getDeviceMismatchedSampledTexture(t: GPUTest, sampleCount: number = 1): GPUTexture {\n  return getDeviceMismatchedTexture(t, {\n    size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n    sampleCount,\n  });\n}\n\n/** Return an arbitrarily-configured GPUTexture with the `STORAGE` usage from mismatched device. */\nexport function getDeviceMismatchedStorageTexture(\n  t: GPUTest,\n  format: GPUTextureFormat\n): GPUTexture {\n  return getDeviceMismatchedTexture(t, {\n    size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n  });\n}\n\n/** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage from mismatched device. */\nexport function getDeviceMismatchedRenderTexture(t: GPUTest, sampleCount: number = 1): GPUTexture {\n  return getDeviceMismatchedTexture(t, {\n    size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount,\n  });\n}\n\nexport function getDeviceMismatchedBindingResource(\n  t: GPUTest,\n  bindingType: ValidBindableResource\n): GPUBindingResource {\n  switch (bindingType) {\n    case 'uniformBuf':\n      return { buffer: getDeviceMismatchedUniformBuffer(t) };\n    case 'storageBuf':\n      return { buffer: getDeviceMismatchedStorageBuffer(t) };\n    case 'filtSamp':\n      return t.mismatchedDevice.createSampler({ minFilter: 'linear' });\n    case 'nonFiltSamp':\n      return t.mismatchedDevice.createSampler();\n    case 'compareSamp':\n      return t.mismatchedDevice.createSampler({ compare: 'never' });\n    case 'sampledTex':\n      return getDeviceMismatchedSampledTexture(t, 1).createView();\n    case 'sampledTexMS':\n      return getDeviceMismatchedSampledTexture(t, 4).createView();\n    case 'readonlyStorageTex':\n    case 'writeonlyStorageTex':\n    case 'readwriteStorageTex':\n      return getDeviceMismatchedStorageTexture(t, 'r32float').createView();\n  }\n}\n\n/** Return a no-op shader code snippet for the specified shader stage. */\nexport function getNoOpShaderCode(stage: ShaderStageKey): string {\n  switch (stage) {\n    case 'VERTEX':\n      return `\n        @vertex fn main() -> @builtin(position) vec4<f32> {\n          return vec4<f32>();\n        }\n      `;\n    case 'FRAGMENT':\n      return `@fragment fn main() {}`;\n    case 'COMPUTE':\n      return `@compute @workgroup_size(1) fn main() {}`;\n  }\n}\n\n/** Create a GPURenderPipeline in the specified state. */\nexport function createRenderPipelineWithState(\n  t: GPUTest,\n  state: 'valid' | 'invalid'\n): GPURenderPipeline {\n  return state === 'valid' ? createNoOpRenderPipeline(t) : createErrorRenderPipeline(t);\n}\n\n/** Return a GPURenderPipeline with default options and no-op vertex and fragment shaders. */\nexport function createNoOpRenderPipeline(\n  t: GPUTest,\n  layout: GPUPipelineLayout | GPUAutoLayoutMode = 'auto',\n  colorFormat: GPUTextureFormat = 'rgba8unorm'\n): GPURenderPipeline {\n  return t.device.createRenderPipeline({\n    layout,\n    vertex: {\n      module: t.device.createShaderModule({\n        code: getNoOpShaderCode('VERTEX'),\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: getNoOpShaderCode('FRAGMENT'),\n      }),\n      entryPoint: 'main',\n      targets: [{ format: colorFormat, writeMask: 0 }],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n}\n\n/** Return an invalid GPURenderPipeline. */\nexport function createErrorRenderPipeline(t: GPUTest): GPURenderPipeline {\n  t.device.pushErrorScope('validation');\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: '',\n      }),\n      entryPoint: '',\n    },\n  });\n  void t.device.popErrorScope();\n  return pipeline;\n}\n\n/** Return a GPUComputePipeline with a no-op shader. */\nexport function createNoOpComputePipeline(\n  t: GPUTest,\n  layout: GPUPipelineLayout | GPUAutoLayoutMode = 'auto'\n): GPUComputePipeline {\n  return t.device.createComputePipeline({\n    layout,\n    compute: {\n      module: t.device.createShaderModule({\n        code: getNoOpShaderCode('COMPUTE'),\n      }),\n      entryPoint: 'main',\n    },\n  });\n}\n\n/** Return an invalid GPUComputePipeline. */\nexport function createErrorComputePipeline(t: GPUTest): GPUComputePipeline {\n  t.device.pushErrorScope('validation');\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: '',\n      }),\n      entryPoint: '',\n    },\n  });\n  void t.device.popErrorScope();\n  return pipeline;\n}\n\n/** Return an invalid GPUShaderModule. */\nexport function createInvalidShaderModule(t: GPUTest): GPUShaderModule {\n  t.device.pushErrorScope('validation');\n  const code = 'deadbeaf'; // Something make no sense\n  const shaderModule = t.device.createShaderModule({ code });\n  void t.device.popErrorScope();\n  return shaderModule;\n}\n\n/** Helper for testing createRenderPipeline(Async) validation */\nexport function doCreateRenderPipelineTest(\n  t: GPUTest,\n  isAsync: boolean,\n  _success: boolean,\n  descriptor: GPURenderPipelineDescriptor,\n  errorTypeName: 'GPUPipelineError' | 'TypeError' = 'GPUPipelineError'\n) {\n  if (isAsync) {\n    if (_success) {\n      t.shouldResolve(t.device.createRenderPipelineAsync(descriptor));\n    } else {\n      t.shouldReject(errorTypeName, t.device.createRenderPipelineAsync(descriptor));\n    }\n  } else {\n    if (errorTypeName === 'GPUPipelineError') {\n      t.expectValidationError(() => {\n        t.device.createRenderPipeline(descriptor);\n      }, !_success);\n    } else {\n      t.shouldThrow(_success ? false : errorTypeName, () => {\n        t.device.createRenderPipeline(descriptor);\n      });\n    }\n  }\n}\n\n/** Helper for testing createComputePipeline(Async) validation */\nexport function doCreateComputePipelineTest(\n  t: GPUTest,\n  isAsync: boolean,\n  _success: boolean,\n  descriptor: GPUComputePipelineDescriptor,\n  errorTypeName: 'GPUPipelineError' | 'TypeError' = 'GPUPipelineError'\n) {\n  if (isAsync) {\n    if (_success) {\n      t.shouldResolve(t.device.createComputePipelineAsync(descriptor));\n    } else {\n      t.shouldReject(errorTypeName, t.device.createComputePipelineAsync(descriptor));\n    }\n  } else {\n    if (errorTypeName === 'GPUPipelineError') {\n      t.expectValidationError(() => {\n        t.device.createComputePipeline(descriptor);\n      }, !_success);\n    } else {\n      t.shouldThrow(_success ? false : errorTypeName, () => {\n        t.device.createComputePipeline(descriptor);\n      });\n    }\n  }\n}\n"],"mappings":"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"}