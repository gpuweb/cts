{"version":3,"file":"capability_info.js","names":["keysOf","makeTable","makeTableRenameAndFilter","numericKeysOf","assertTypeTrue","unreachable","GPUConst","kMaxUnsignedLongValue","kMaxUnsignedLongLongValue","kMaxQueryCount","kQueryTypeInfo","feature","undefined","kQueryTypes","kBufferSizeAlignment","kBufferUsageCopyInfo","BufferUsage","COPY_SRC","COPY_DST","kBufferUsageCopy","kBufferUsageKeys","kBufferUsageInfo","kBufferUsages","Object","values","kAllBufferUsageBits","reduce","previousSet","currentUsage","kErrorScopeFilterInfo","generatable","kErrorScopeFilters","kGeneratableErrorScopeFilters","filter","e","kCanvasTextureFormats","kCanvasAlphaModesInfo","kCanvasAlphaModes","kCanvasColorSpacesInfo","kCanvasColorSpaces","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kCompareFunctionInfo","kCompareFunctions","kStencilOperationInfo","kStencilOperations","kTextureUsageTypeInfo","Number","TextureUsage","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","kTextureUsageType","kTextureUsageCopyInfo","kTextureUsageCopy","kTextureUsageInfo","kTextureUsages","kTextureViewDimensionInfo","storage","kTextureViewDimensions","kVertexFormatInfo","kVertexFormats","kBindableResources","kMinDynamicBufferOffsetAlignment","kPerStageBindingLimits","class","maxLimits","COMPUTE","FRAGMENT","VERTEX","kPerPipelineBindingLimits","maxDynamicLimit","kBindingKind","uniformBuf","resource","perStageLimitClass","perPipelineLimitClass","storageBuf","filtSamp","sampler","nonFiltSamp","compareSamp","sampledTex","sampledTexMS","readonlyStorageTex","writeonlyStorageTex","readwriteStorageTex","kValidStagesAll","validStages","ShaderStage","kValidStagesStorageWrite","bufferBindingTypeInfo","d","type","usage","UNIFORM","STORAGE","kBufferBindingTypes","samplerBindingTypeInfo","kSamplerBindingTypes","sampledTextureBindingTypeInfo","multisampled","kTextureSampleTypes","storageTextureBindingTypeInfo","access","wgslAccess","kStorageTextureAccessValues","texBindingTypeInfo","texture","storageTexture","bindingTypeInfo","buffer","bufferBindingEntries","includeUndefined","samplerBindingEntries","textureBindingEntries","sampleType","storageTextureBindingEntries","format","sampledAndStorageBindingEntries","allBindingEntries","kShaderStageKeys","keys","kShaderStages","kShaderStageCombinations","kShaderStageCombinationsWithStage","kTextureSampleCounts","kMipmapFilterModes","kAddressModes","kBlendFactors","IsDualSourceBlendingFactor","blendFactor","kBlendOperations","kPrimitiveTopology","kIndexFormat","kLimitInfoKeys","kLimitInfoDefaults","kLimitInfoData","kFeatureLevels","kLimitKeys","kLimitInfoCore","default","kLimitInfoCompatibility","kLimitInfos","core","compatibility","kLimitClasses","fromEntries","entries","map","k","c","getDefaultLimits","featureLevel","getDefaultLimitsForAdapter","adapter","adapterExtensions","isCompatibilityMode","kEachStage","shaderStageFlagToStageName","stage","getBindingLimitForBindingType","device","visibility","info","limits","length","Math","min","kLimits","kMaxColorAttachmentsToTest","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize","kFeatureNameInfo","kFeatureNames","kKnownWGSLLanguageFeatures"],"sources":["../../src/webgpu/capability_info.ts"],"sourcesContent":["// MAINTENANCE_TODO: The generated Typedoc for this file is hard to navigate because it's\n// alphabetized. Consider using namespaces or renames to fix this?\n\n/* eslint-disable no-sparse-arrays */\n\nimport {\n  keysOf,\n  makeTable,\n  makeTableRenameAndFilter,\n  numericKeysOf,\n  valueof,\n} from '../common/util/data_tables.js';\nimport { assertTypeTrue, TypeEqual } from '../common/util/types.js';\nimport { unreachable } from '../common/util/util.js';\n\nimport { GPUConst, kMaxUnsignedLongValue, kMaxUnsignedLongLongValue } from './constants.js';\n\n// Base device limits can be found in constants.ts.\n\n// Queries\n\n/** Maximum number of queries in GPUQuerySet, by spec. */\nexport const kMaxQueryCount = 4096;\n/** Per-GPUQueryType info. */\nexport type QueryTypeInfo = {\n  /** Optional feature required to use this GPUQueryType. */\n  readonly feature: GPUFeatureName | undefined;\n  // Add fields as needed\n};\nexport const kQueryTypeInfo: {\n  readonly [k in GPUQueryType]: QueryTypeInfo;\n} =\n  /* prettier-ignore */ {\n  'occlusion': { feature:  undefined },\n  'timestamp': { feature: 'timestamp-query' },\n};\n/** List of all GPUQueryType values. */\nexport const kQueryTypes = keysOf(kQueryTypeInfo);\n\n// Buffers\n\n/** Required alignment of a GPUBuffer size, by spec. */\nexport const kBufferSizeAlignment = 4;\n\n/** Per-GPUBufferUsage copy info. */\nexport const kBufferUsageCopyInfo: {\n  readonly [name: string]: GPUBufferUsageFlags;\n} =\n  /* prettier-ignore */ {\n  'COPY_NONE':    0,\n  'COPY_SRC':     GPUConst.BufferUsage.COPY_SRC,\n  'COPY_DST':     GPUConst.BufferUsage.COPY_DST,\n  'COPY_SRC_DST': GPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.COPY_DST,\n};\n/** List of all GPUBufferUsage copy values. */\nexport const kBufferUsageCopy = keysOf(kBufferUsageCopyInfo);\n\n/** Per-GPUBufferUsage keys and info. */\ntype BufferUsageKey = keyof typeof GPUConst.BufferUsage;\nexport const kBufferUsageKeys = keysOf(GPUConst.BufferUsage);\nexport const kBufferUsageInfo: {\n  readonly [k in BufferUsageKey]: GPUBufferUsageFlags;\n} = {\n  ...GPUConst.BufferUsage,\n};\n\n/** List of all GPUBufferUsage values. */\nexport const kBufferUsages = Object.values(GPUConst.BufferUsage);\nexport const kAllBufferUsageBits = kBufferUsages.reduce(\n  (previousSet, currentUsage) => previousSet | currentUsage,\n  0\n);\n\n// Errors\n\n/** Per-GPUErrorFilter info. */\nexport const kErrorScopeFilterInfo: {\n  readonly [k in GPUErrorFilter]: {\n    generatable: boolean;\n  };\n} =\n  /* prettier-ignore */ {\n  'internal':      { generatable: false },\n  'out-of-memory': { generatable: true },\n  'validation':    { generatable: true },\n};\n/** List of all GPUErrorFilter values. */\nexport const kErrorScopeFilters = keysOf(kErrorScopeFilterInfo);\nexport const kGeneratableErrorScopeFilters = kErrorScopeFilters.filter(\n  e => kErrorScopeFilterInfo[e].generatable\n);\n\n// Canvases\n\n// The formats of GPUTextureFormat for canvas context.\nexport const kCanvasTextureFormats = ['bgra8unorm', 'rgba8unorm', 'rgba16float'] as const;\n\n// The alpha mode for canvas context.\nexport const kCanvasAlphaModesInfo: {\n  readonly [k in GPUCanvasAlphaMode]: {};\n} = /* prettier-ignore */ {\n  'opaque':        {},\n  'premultiplied': {},\n};\nexport const kCanvasAlphaModes = keysOf(kCanvasAlphaModesInfo);\n\n// The color spaces for canvas context\nexport const kCanvasColorSpacesInfo: {\n  readonly [k in PredefinedColorSpace]: {};\n} = /* prettier-ignore */ {\n  'srgb':       {},\n  'display-p3': {},\n};\nexport const kCanvasColorSpaces = keysOf(kCanvasColorSpacesInfo);\n\n// Textures (except for texture format info)\n\n/** Per-GPUTextureDimension info. */\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {};\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\n/** Per-GPUTextureAspect info. */\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {};\n} = /* prettier-ignore */ {\n  'all':          {},\n  'depth-only':   {},\n  'stencil-only': {},\n};\n/** List of all GPUTextureAspect values. */\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\n// Misc\n\n/** Per-GPUCompareFunction info. */\nexport const kCompareFunctionInfo: {\n  readonly [k in GPUCompareFunction]: {};\n} =\n  /* prettier-ignore */ {\n  'never':         {},\n  'less':          {},\n  'equal':         {},\n  'less-equal':    {},\n  'greater':       {},\n  'not-equal':     {},\n  'greater-equal': {},\n  'always':        {},\n};\n/** List of all GPUCompareFunction values. */\nexport const kCompareFunctions = keysOf(kCompareFunctionInfo);\n\n/** Per-GPUStencilOperation info. */\nexport const kStencilOperationInfo: {\n  readonly [k in GPUStencilOperation]: {};\n} =\n  /* prettier-ignore */ {\n  'keep':            {},\n  'zero':            {},\n  'replace':         {},\n  'invert':          {},\n  'increment-clamp': {},\n  'decrement-clamp': {},\n  'increment-wrap':  {},\n  'decrement-wrap':  {},\n};\n/** List of all GPUStencilOperation values. */\nexport const kStencilOperations = keysOf(kStencilOperationInfo);\n\n// More textures (except for texture format info)\n\n/** Per-GPUTextureUsage type info. */\nexport const kTextureUsageTypeInfo: {\n  readonly [name: string]: number;\n} =\n  /* prettier-ignore */ {\n  'texture': Number(GPUConst.TextureUsage.TEXTURE_BINDING),\n  'storage': Number(GPUConst.TextureUsage.STORAGE_BINDING),\n  'render':  Number(GPUConst.TextureUsage.RENDER_ATTACHMENT),\n};\n/** List of all GPUTextureUsage type values. */\nexport const kTextureUsageType = keysOf(kTextureUsageTypeInfo);\n\n/** Per-GPUTextureUsage copy info. */\nexport const kTextureUsageCopyInfo: {\n  readonly [name: string]: number;\n} =\n  /* prettier-ignore */ {\n  'none':     0,\n  'src':      Number(GPUConst.TextureUsage.COPY_SRC),\n  'dst':      Number(GPUConst.TextureUsage.COPY_DST),\n  'src-dest': Number(GPUConst.TextureUsage.COPY_SRC) | Number(GPUConst.TextureUsage.COPY_DST),\n};\n/** List of all GPUTextureUsage copy values. */\nexport const kTextureUsageCopy = keysOf(kTextureUsageCopyInfo);\n\n/** Per-GPUTextureUsage info. */\nexport const kTextureUsageInfo: {\n  readonly [k in valueof<typeof GPUConst.TextureUsage>]: {};\n} = {\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.TEXTURE_BINDING]: {},\n  [GPUConst.TextureUsage.STORAGE_BINDING]: {},\n  [GPUConst.TextureUsage.RENDER_ATTACHMENT]: {},\n};\n/** List of all GPUTextureUsage values. */\nexport const kTextureUsages = numericKeysOf<GPUTextureUsageFlags>(kTextureUsageInfo);\n\n// Texture View\n\n/** Per-GPUTextureViewDimension info. */\nexport type TextureViewDimensionInfo = {\n  /** Whether a storage texture view can have this view dimension. */\n  readonly storage: boolean;\n  // Add fields as needed\n};\n/** Per-GPUTextureViewDimension info. */\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: TextureViewDimensionInfo;\n} =\n  /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Vertex formats\n\n/** Per-GPUVertexFormat info. */\n// Exists just for documentation. Otherwise could be inferred by `makeTable`.\nexport type VertexFormatInfo = {\n  /** Number of bytes in each component. */\n  readonly bytesPerComponent: 1 | 2 | 4 | 'packed';\n  /** The data encoding (float, normalized, or integer) for each component. */\n  readonly type: 'float' | 'unorm' | 'snorm' | 'uint' | 'sint';\n  /** Number of components. */\n  readonly componentCount: 1 | 2 | 3 | 4;\n  /** Size in bytes. */\n  readonly byteSize: 1 | 2 | 4 | 8 | 12 | 16;\n  /** The completely matching WGSL type for vertex format */\n  readonly wgslType:\n    | 'f32'\n    | 'vec2<f32>'\n    | 'vec3<f32>'\n    | 'vec4<f32>'\n    | 'u32'\n    | 'vec2<u32>'\n    | 'vec3<u32>'\n    | 'vec4<u32>'\n    | 'i32'\n    | 'vec2<i32>'\n    | 'vec3<i32>'\n    | 'vec4<i32>';\n  // Add fields as needed\n};\n/** Per-GPUVertexFormat info. */\nexport const kVertexFormatInfo: {\n  readonly [k in GPUVertexFormat]: VertexFormatInfo;\n} =\n  /* prettier-ignore */ makeTable(\n                     ['bytesPerComponent',   'type', 'componentCount', 'byteSize',  'wgslType'] as const,\n                     [                   ,         ,                 ,           ,            ] as const, {\n  // 8 bit components\n  'uint8':           [                  1,   'uint',                1,          1,       'u32'],\n  'uint8x2':         [                  1,   'uint',                2,          2, 'vec2<u32>'],\n  'uint8x4':         [                  1,   'uint',                4,          4, 'vec4<u32>'],\n  'sint8':           [                  1,   'sint',                1,          1,       'i32'],\n  'sint8x2':         [                  1,   'sint',                2,          2, 'vec2<i32>'],\n  'sint8x4':         [                  1,   'sint',                4,          4, 'vec4<i32>'],\n  'unorm8':          [                  1,  'unorm',                1,          1,       'f32'],\n  'unorm8x2':        [                  1,  'unorm',                2,          2, 'vec2<f32>'],\n  'unorm8x4':        [                  1,  'unorm',                4,          4, 'vec4<f32>'],\n  'snorm8':          [                  1,  'snorm',                1,          1,       'f32'],\n  'snorm8x2':        [                  1,  'snorm',                2,          2, 'vec2<f32>'],\n  'snorm8x4':        [                  1,  'snorm',                4,          4, 'vec4<f32>'],\n  // 16 bit components\n  'uint16':          [                  2,   'uint',                1,          2,       'u32'],\n  'uint16x2':        [                  2,   'uint',                2,          4, 'vec2<u32>'],\n  'uint16x4':        [                  2,   'uint',                4,          8, 'vec4<u32>'],\n  'sint16':          [                  2,   'sint',                1,          2,       'i32'],\n  'sint16x2':        [                  2,   'sint',                2,          4, 'vec2<i32>'],\n  'sint16x4':        [                  2,   'sint',                4,          8, 'vec4<i32>'],\n  'unorm16':         [                  2,  'unorm',                1,          2,       'f32'],\n  'unorm16x2':       [                  2,  'unorm',                2,          4, 'vec2<f32>'],\n  'unorm16x4':       [                  2,  'unorm',                4,          8, 'vec4<f32>'],\n  'snorm16':         [                  2,  'snorm',                1,          2,       'f32'],\n  'snorm16x2':       [                  2,  'snorm',                2,          4, 'vec2<f32>'],\n  'snorm16x4':       [                  2,  'snorm',                4,          8, 'vec4<f32>'],\n  'float16':         [                  2,  'float',                1,          2,      'f32'],\n  'float16x2':       [                  2,  'float',                2,          4, 'vec2<f32>'],\n  'float16x4':       [                  2,  'float',                4,          8, 'vec4<f32>'],\n  // 32 bit components\n  'float32':         [                  4,  'float',                1,          4,       'f32'],\n  'float32x2':       [                  4,  'float',                2,          8, 'vec2<f32>'],\n  'float32x3':       [                  4,  'float',                3,         12, 'vec3<f32>'],\n  'float32x4':       [                  4,  'float',                4,         16, 'vec4<f32>'],\n  'uint32':          [                  4,   'uint',                1,          4,       'u32'],\n  'uint32x2':        [                  4,   'uint',                2,          8, 'vec2<u32>'],\n  'uint32x3':        [                  4,   'uint',                3,         12, 'vec3<u32>'],\n  'uint32x4':        [                  4,   'uint',                4,         16, 'vec4<u32>'],\n  'sint32':          [                  4,   'sint',                1,          4,       'i32'],\n  'sint32x2':        [                  4,   'sint',                2,          8, 'vec2<i32>'],\n  'sint32x3':        [                  4,   'sint',                3,         12, 'vec3<i32>'],\n  'sint32x4':        [                  4,   'sint',                4,         16, 'vec4<i32>'],\n  // 32 bit packed\n  'unorm10-10-10-2': [           'packed',  'unorm',                4,          4, 'vec4<f32>'],\n  'unorm8x4-bgra':   [           'packed',  'unorm',                4,          4, 'vec4<f32>'],\n} as const);\n/** List of all GPUVertexFormat values. */\nexport const kVertexFormats = keysOf(kVertexFormatInfo);\n\n// Typedefs for bindings\n\n/**\n * Classes of `PerShaderStage` binding limits. Two bindings with the same class\n * count toward the same `PerShaderStage` limit(s) in the spec (if any).\n */\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'readonlyStorageTex'\n  | 'writeonlyStorageTex'\n  | 'readwriteStorageTex';\n/**\n * Classes of `PerPipelineLayout` binding limits. Two bindings with the same class\n * count toward the same `PerPipelineLayout` limit(s) in the spec (if any).\n */\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\nexport type ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'filtSamp'\n  | 'nonFiltSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'sampledTexMS'\n  | 'readonlyStorageTex'\n  | 'writeonlyStorageTex'\n  | 'readwriteStorageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\n\n/**\n * Types of resource binding which have distinct binding rules, by spec\n * (e.g. filtering vs non-filtering sampler, multisample vs non-multisample texture).\n */\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\nexport const kBindableResources = [\n  'uniformBuf',\n  'storageBuf',\n  'filtSamp',\n  'nonFiltSamp',\n  'compareSamp',\n  'sampledTex',\n  'sampledTexMS',\n  'readonlyStorageTex',\n  'writeonlyStorageTex',\n  'readwriteStorageTex',\n  'errorBuf',\n  'errorSamp',\n  'errorTex',\n] as const;\nassertTypeTrue<TypeEqual<BindableResource, (typeof kBindableResources)[number]>>();\n\n// Bindings\n\n/** Dynamic buffer offsets require offset to be divisible by 256, by spec. */\nexport const kMinDynamicBufferOffsetAlignment = 256;\n\n/** Default `PerShaderStage` binding limits, by spec. */\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    /** Which `PerShaderStage` binding limit class. */\n    readonly class: k;\n    /** Maximum number of allowed bindings in that class. */\n    readonly maxLimits: { [key in ShaderStageKey]: (typeof kLimits)[number] };\n    // Add fields as needed\n  };\n} =\n  /* prettier-ignore */ {\n  'uniformBuf':          { class: 'uniformBuf', maxLimits: { COMPUTE: 'maxUniformBuffersPerShaderStage', FRAGMENT: 'maxUniformBuffersPerShaderStage', VERTEX: 'maxUniformBuffersPerShaderStage' } },\n  'storageBuf':          { class: 'storageBuf', maxLimits: { COMPUTE: 'maxStorageBuffersPerShaderStage', FRAGMENT: 'maxStorageBuffersInFragmentStage', VERTEX: 'maxStorageBuffersInVertexStage' } },\n  'sampler':             { class: 'sampler',    maxLimits: { COMPUTE: 'maxSamplersPerShaderStage', FRAGMENT: 'maxSamplersPerShaderStage', VERTEX: 'maxSamplersPerShaderStage' } },\n  'sampledTex':          { class: 'sampledTex', maxLimits: { COMPUTE: 'maxSampledTexturesPerShaderStage', FRAGMENT: 'maxSampledTexturesPerShaderStage', VERTEX: 'maxSampledTexturesPerShaderStage' } },\n  'readonlyStorageTex':  { class: 'readonlyStorageTex', maxLimits: { COMPUTE: 'maxStorageTexturesPerShaderStage', FRAGMENT: 'maxStorageTexturesInFragmentStage', VERTEX: 'maxStorageTexturesInVertexStage' } },\n  'writeonlyStorageTex': { class: 'writeonlyStorageTex', maxLimits: { COMPUTE: 'maxStorageTexturesPerShaderStage', FRAGMENT: 'maxStorageTexturesInFragmentStage', VERTEX: 'maxStorageTexturesInVertexStage' } },\n  'readwriteStorageTex': { class: 'readwriteStorageTex', maxLimits: { COMPUTE: 'maxStorageTexturesPerShaderStage', FRAGMENT: 'maxStorageTexturesInFragmentStage', VERTEX: 'maxStorageTexturesInVertexStage'} },\n};\n\n/**\n * Default `PerPipelineLayout` binding limits, by spec.\n */\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    /** Which `PerPipelineLayout` binding limit class. */\n    readonly class: k;\n    /**\n     * The name of the limit for the maximum number of allowed bindings with `hasDynamicOffset: true` in that class.\n     */\n    readonly maxDynamicLimit: (typeof kLimits)[number] | '';\n    // Add fields as needed\n  };\n} =\n  /* prettier-ignore */ {\n  'uniformBuf':          { class: 'uniformBuf', maxDynamicLimit: 'maxDynamicUniformBuffersPerPipelineLayout', },\n  'storageBuf':          { class: 'storageBuf', maxDynamicLimit: 'maxDynamicStorageBuffersPerPipelineLayout', },\n  'sampler':             { class: 'sampler',    maxDynamicLimit: '', },\n  'sampledTex':          { class: 'sampledTex', maxDynamicLimit: '', },\n  'readonlyStorageTex':  { class: 'readonlyStorageTex', maxDynamicLimit: '', },\n  'writeonlyStorageTex': { class: 'writeonlyStorageTex', maxDynamicLimit: '', },\n  'readwriteStorageTex': { class: 'readwriteStorageTex', maxDynamicLimit: '', },\n};\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: (typeof kPerStageBindingLimits)[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: (typeof kPerPipelineBindingLimits)[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} =\n  /* prettier-ignore */ {\n  uniformBuf:          { resource: 'uniformBuf',   perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:          { resource: 'storageBuf',   perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  filtSamp:            { resource: 'filtSamp',     perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  nonFiltSamp:         { resource: 'nonFiltSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp:         { resource: 'compareSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:          { resource: 'sampledTex',   perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  sampledTexMS:        { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  readonlyStorageTex:  { resource: 'readonlyStorageTex',   perStageLimitClass: kPerStageBindingLimits.readonlyStorageTex, perPipelineLimitClass: kPerPipelineBindingLimits.readonlyStorageTex, },\n  writeonlyStorageTex: { resource: 'writeonlyStorageTex',   perStageLimitClass: kPerStageBindingLimits.writeonlyStorageTex, perPipelineLimitClass: kPerPipelineBindingLimits.writeonlyStorageTex, },\n  readwriteStorageTex: { resource: 'readwriteStorageTex',   perStageLimitClass: kPerStageBindingLimits.readwriteStorageTex, perPipelineLimitClass: kPerPipelineBindingLimits.readwriteStorageTex, },\n};\n\n// Binding type info\n\nconst kValidStagesAll = {\n  validStages:\n    GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\n\n/** Binding type info (including class limits) for the specified GPUBufferBindingLayout. */\nexport function bufferBindingTypeInfo(d: GPUBufferBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'uniform') {\n    case 'uniform':           return { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          };\n    case 'storage':           return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, };\n    case 'read-only-storage': return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          };\n  }\n}\n/** List of all GPUBufferBindingType values. */\nexport const kBufferBindingTypes = ['uniform', 'storage', 'read-only-storage'] as const;\nassertTypeTrue<TypeEqual<GPUBufferBindingType, (typeof kBufferBindingTypes)[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUSamplerBindingLayout. */\nexport function samplerBindingTypeInfo(d: GPUSamplerBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'filtering') {\n    case 'filtering':     return { ...kBindingKind.filtSamp,    ...kValidStagesAll, };\n    case 'non-filtering': return { ...kBindingKind.nonFiltSamp, ...kValidStagesAll, };\n    case 'comparison':    return { ...kBindingKind.compareSamp, ...kValidStagesAll, };\n  }\n}\n/** List of all GPUSamplerBindingType values. */\nexport const kSamplerBindingTypes = ['filtering', 'non-filtering', 'comparison'] as const;\nassertTypeTrue<TypeEqual<GPUSamplerBindingType, (typeof kSamplerBindingTypes)[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUTextureBindingLayout. */\nexport function sampledTextureBindingTypeInfo(d: GPUTextureBindingLayout) {\n  /* prettier-ignore */\n  if (d.multisampled) {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTexMS, ...kValidStagesAll, };\n  } else {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTex,   ...kValidStagesAll, };\n  }\n}\n/** List of all GPUTextureSampleType values. */\nexport const kTextureSampleTypes = [\n  'float',\n  'unfilterable-float',\n  'depth',\n  'sint',\n  'uint',\n] as const;\nassertTypeTrue<TypeEqual<GPUTextureSampleType, (typeof kTextureSampleTypes)[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUStorageTextureAccess. */\nexport function storageTextureBindingTypeInfo(d: { access?: GPUStorageTextureAccess | undefined }) {\n  switch (d.access) {\n    case undefined:\n    case 'write-only':\n      return {\n        wgslAccess: 'write',\n        usage: GPUConst.TextureUsage.STORAGE_BINDING,\n        ...kBindingKind.writeonlyStorageTex,\n        ...kValidStagesStorageWrite,\n      };\n    case 'read-only':\n      return {\n        wgslAccess: 'read',\n        usage: GPUConst.TextureUsage.STORAGE_BINDING,\n        ...kBindingKind.readonlyStorageTex,\n        ...kValidStagesAll,\n      };\n    case 'read-write':\n      return {\n        wgslAccess: 'read_write',\n        usage: GPUConst.TextureUsage.STORAGE_BINDING,\n        ...kBindingKind.readwriteStorageTex,\n        ...kValidStagesStorageWrite,\n      };\n  }\n}\n/** List of all GPUStorageTextureAccess values. */\nexport const kStorageTextureAccessValues = ['read-only', 'read-write', 'write-only'] as const;\nassertTypeTrue<TypeEqual<GPUStorageTextureAccess, (typeof kStorageTextureAccessValues)[number]>>();\n\n/** GPUBindGroupLayoutEntry, but only the \"union\" fields, not the common fields. */\nexport type BGLEntry = Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n/** Binding type info (including class limits) for the specified BGLEntry. */\nexport function texBindingTypeInfo(e: BGLEntry) {\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable();\n}\n/** BindingTypeInfo (including class limits) for the specified BGLEntry. */\nexport function bindingTypeInfo(e: BGLEntry) {\n  if (e.buffer !== undefined) return bufferBindingTypeInfo(e.buffer);\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.sampler !== undefined) return samplerBindingTypeInfo(e.sampler);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable('GPUBindGroupLayoutEntry has no BindingLayout');\n}\n\n/**\n * Generate a list of possible buffer-typed BGLEntry values.\n *\n * Note: Generates different `type` options, but not `hasDynamicOffset` options.\n */\nexport function bufferBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ buffer: { type: undefined } }] : []),\n    { buffer: { type: 'uniform' } },\n    { buffer: { type: 'storage' } },\n    { buffer: { type: 'read-only-storage' } },\n  ] as const;\n}\n/** Generate a list of possible sampler-typed BGLEntry values. */\nexport function samplerBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ sampler: { type: undefined } }] : []),\n    { sampler: { type: 'comparison' } },\n    { sampler: { type: 'filtering' } },\n    { sampler: { type: 'non-filtering' } },\n  ] as const;\n}\n/**\n * Generate a list of possible texture-typed BGLEntry values.\n *\n * Note: Generates different `multisampled` options, but not `sampleType` or `viewDimension` options.\n */\nexport function textureBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined\n      ? [{ texture: { multisampled: undefined, sampleType: 'unfilterable-float' } } as const]\n      : []),\n    { texture: { multisampled: false, sampleType: 'unfilterable-float' } },\n    { texture: { multisampled: true, sampleType: 'unfilterable-float' } },\n  ] as const;\n}\n/**\n * Generate a list of possible storageTexture-typed BGLEntry values.\n *\n * Note: Generates different `access` options, but not `format` or `viewDimension` options.\n */\nexport function storageTextureBindingEntries(): readonly BGLEntry[] {\n  return [\n    { storageTexture: { access: 'write-only', format: 'r32float' } },\n    { storageTexture: { access: 'read-only', format: 'r32float' } },\n    { storageTexture: { access: 'read-write', format: 'r32float' } },\n  ] as const;\n}\n/** Generate a list of possible texture-or-storageTexture-typed BGLEntry values. */\nexport function sampledAndStorageBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [...textureBindingEntries(includeUndefined), ...storageTextureBindingEntries()] as const;\n}\n/**\n * Generate a list of possible BGLEntry values of every type, but not variants with different:\n * - buffer.hasDynamicOffset\n * - texture.sampleType\n * - texture.viewDimension\n * - storageTexture.viewDimension\n */\nexport function allBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...bufferBindingEntries(includeUndefined),\n    ...samplerBindingEntries(includeUndefined),\n    ...sampledAndStorageBindingEntries(includeUndefined),\n  ] as const;\n}\n\n// Shader stages\n\n/** List of all GPUShaderStage values. */\nexport type ShaderStageKey = keyof typeof GPUConst.ShaderStage;\nexport const kShaderStageKeys = Object.keys(GPUConst.ShaderStage) as ShaderStageKey[];\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n];\n/** List of all possible combinations of GPUShaderStage values. */\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\nexport const kShaderStageCombinationsWithStage: readonly GPUShaderStageFlags[] = [\n  1, 2, 3, 4, 5, 6, 7,\n];\n\n/**\n * List of all possible texture sampleCount values.\n *\n * MAINTENANCE_TODO: Switch existing tests to use kTextureSampleCounts\n */\nexport const kTextureSampleCounts = [1, 4] as const;\n\n// Sampler info\n\n/** List of all mipmap filter modes. */\nexport const kMipmapFilterModes: readonly GPUMipmapFilterMode[] = ['nearest', 'linear'];\nassertTypeTrue<TypeEqual<GPUMipmapFilterMode, (typeof kMipmapFilterModes)[number]>>();\n\n/** List of address modes. */\nexport const kAddressModes: readonly GPUAddressMode[] = [\n  'clamp-to-edge',\n  'repeat',\n  'mirror-repeat',\n];\nassertTypeTrue<TypeEqual<GPUAddressMode, (typeof kAddressModes)[number]>>();\n\n// Blend factors and Blend components\n\n/** List of all GPUBlendFactor values. */\nexport const kBlendFactors: readonly GPUBlendFactor[] = [\n  'zero',\n  'one',\n  'src',\n  'one-minus-src',\n  'src-alpha',\n  'one-minus-src-alpha',\n  'dst',\n  'one-minus-dst',\n  'dst-alpha',\n  'one-minus-dst-alpha',\n  'src-alpha-saturated',\n  'constant',\n  'one-minus-constant',\n  'src1',\n  'one-minus-src1',\n  'src1-alpha',\n  'one-minus-src1-alpha',\n];\n\n/** Check if `blendFactor` belongs to the blend factors in the extension \"dual-source-blending\". */\nexport function IsDualSourceBlendingFactor(blendFactor?: GPUBlendFactor): boolean {\n  switch (blendFactor) {\n    case 'src1':\n    case 'one-minus-src1':\n    case 'src1-alpha':\n    case 'one-minus-src1-alpha':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/** List of all GPUBlendOperation values. */\nexport const kBlendOperations: readonly GPUBlendOperation[] = [\n  'add',\n  'subtract',\n  'reverse-subtract',\n  'min',\n  'max',\n];\n\n// Primitive topologies\nexport const kPrimitiveTopology: readonly GPUPrimitiveTopology[] = [\n  'point-list',\n  'line-list',\n  'line-strip',\n  'triangle-list',\n  'triangle-strip',\n];\nassertTypeTrue<TypeEqual<GPUPrimitiveTopology, (typeof kPrimitiveTopology)[number]>>();\n\nexport const kIndexFormat: readonly GPUIndexFormat[] = ['uint16', 'uint32'];\nassertTypeTrue<TypeEqual<GPUIndexFormat, (typeof kIndexFormat)[number]>>();\n\n/** Info for each entry of GPUSupportedLimits */\nconst [kLimitInfoKeys, kLimitInfoDefaults, kLimitInfoData] =\n  /* prettier-ignore */ [\n                                               [    'class',    'core', 'compatibility',            'maximumValue'] as const,\n                                               [  'maximum',          ,                ,     kMaxUnsignedLongValue] as const, {\n  'maxTextureDimension1D':                     [           ,      8192,            4096,                          ],\n  'maxTextureDimension2D':                     [           ,      8192,            4096,                          ],\n  'maxTextureDimension3D':                     [           ,      2048,            1024,                          ],\n  'maxTextureArrayLayers':                     [           ,       256,             256,                          ],\n\n  'maxBindGroups':                             [           ,         4,               4,                          ],\n  'maxBindGroupsPlusVertexBuffers':            [           ,        24,              24,                          ],\n  'maxBindingsPerBindGroup':                   [           ,      1000,            1000,                          ],\n  'maxDynamicUniformBuffersPerPipelineLayout': [           ,         8,               8,                          ],\n  'maxDynamicStorageBuffersPerPipelineLayout': [           ,         4,               4,                          ],\n  'maxSampledTexturesPerShaderStage':          [           ,        16,              16,                          ],\n  'maxSamplersPerShaderStage':                 [           ,        16,              16,                          ],\n  'maxStorageBuffersInFragmentStage':          [           ,         8,               0,                          ],\n  'maxStorageBuffersInVertexStage':            [           ,         8,               0,                          ],\n  'maxStorageBuffersPerShaderStage':           [           ,         8,               4,                          ],\n  'maxStorageTexturesInFragmentStage':         [           ,         4,               0,                          ],\n  'maxStorageTexturesInVertexStage':           [           ,         4,               0,                          ],\n  'maxStorageTexturesPerShaderStage':          [           ,         4,               4,                          ],\n  'maxUniformBuffersPerShaderStage':           [           ,        12,              12,                          ],\n\n  'maxUniformBufferBindingSize':               [           ,     65536,           16384, kMaxUnsignedLongLongValue],\n  'maxStorageBufferBindingSize':               [           , 134217728,       134217728, kMaxUnsignedLongLongValue],\n  'minUniformBufferOffsetAlignment':           ['alignment',       256,             256,                          ],\n  'minStorageBufferOffsetAlignment':           ['alignment',       256,             256,                          ],\n\n  'maxVertexBuffers':                          [           ,         8,               8,                          ],\n  'maxBufferSize':                             [           , 268435456,       268435456, kMaxUnsignedLongLongValue],\n  'maxVertexAttributes':                       [           ,        16,              16,                          ],\n  'maxVertexBufferArrayStride':                [           ,      2048,            2048,                          ],\n  'maxInterStageShaderVariables':              [           ,        16,              15,                          ],\n\n  'maxColorAttachments':                       [           ,         8,               4,                          ],\n  'maxColorAttachmentBytesPerSample':          [           ,        32,              32,                          ],\n\n  'maxComputeWorkgroupStorageSize':            [           ,     16384,           16384,                          ],\n  'maxComputeInvocationsPerWorkgroup':         [           ,       256,             128,                          ],\n  'maxComputeWorkgroupSizeX':                  [           ,       256,             128,                          ],\n  'maxComputeWorkgroupSizeY':                  [           ,       256,             128,                          ],\n  'maxComputeWorkgroupSizeZ':                  [           ,        64,              64,                          ],\n  'maxComputeWorkgroupsPerDimension':          [           ,     65535,           65535,                          ],\n} as const];\n\n/**\n * Feature levels corresponding to core WebGPU and WebGPU\n * in compatibility mode. They can be passed to\n * getDefaultLimits though if you have access to an adapter\n * it's preferred to use getDefaultLimitsForAdapter.\n */\nexport const kFeatureLevels = ['core', 'compatibility'] as const;\nexport type FeatureLevel = (typeof kFeatureLevels)[number];\n\nconst kLimitKeys = ['class', 'default', 'maximumValue'] as const;\n\nconst kLimitInfoCore = makeTableRenameAndFilter(\n  { default: 'core' },\n  kLimitKeys,\n  kLimitInfoKeys,\n  kLimitInfoDefaults,\n  kLimitInfoData\n);\n\nconst kLimitInfoCompatibility = makeTableRenameAndFilter(\n  { default: 'compatibility' },\n  kLimitKeys,\n  kLimitInfoKeys,\n  kLimitInfoDefaults,\n  kLimitInfoData\n);\n\nconst kLimitInfos = {\n  core: kLimitInfoCore,\n  compatibility: kLimitInfoCompatibility,\n} as const;\n\nexport const kLimitClasses = Object.fromEntries(\n  Object.entries(kLimitInfoCore).map(([k, { class: c }]) => [k, c])\n);\n\nexport function getDefaultLimits(featureLevel: FeatureLevel) {\n  return kLimitInfos[featureLevel];\n}\n\nexport function getDefaultLimitsForAdapter(adapter: GPUAdapter) {\n  // MAINTENANCE_TODO: Remove casts once we have a standardized way to do this\n  // (see https://github.com/gpuweb/gpuweb/pull/5037#issuecomment-2576110161).\n  const adapterExtensions = adapter as unknown as {\n    isCompatibilityMode?: boolean;\n    featureLevel?: string;\n  };\n  const featureLevel =\n    adapterExtensions.featureLevel === 'compatibility' || adapterExtensions.isCompatibilityMode\n      ? 'compatibility'\n      : 'core';\n  return getDefaultLimits(featureLevel);\n}\n\nconst kEachStage = [\n  GPUConst.ShaderStage.COMPUTE,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.VERTEX,\n];\nfunction shaderStageFlagToStageName(stage: GPUShaderStageFlags) {\n  switch (stage) {\n    case GPUConst.ShaderStage.COMPUTE:\n      return 'COMPUTE';\n    case GPUConst.ShaderStage.FRAGMENT:\n      return 'FRAGMENT';\n    case GPUConst.ShaderStage.VERTEX:\n      return 'VERTEX';\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Get the limit of the number of things you can bind for\n * a given BGLEntry given the specified visibility. This is\n * the minimum across stages for the given visibility.\n */\nexport function getBindingLimitForBindingType(\n  device: GPUDevice,\n  visibility: GPUShaderStageFlags,\n  e: BGLEntry\n) {\n  const info = bindingTypeInfo(e);\n  const maxLimits = info.perStageLimitClass.maxLimits;\n  const limits = kEachStage\n    .filter(stage => stage & visibility)\n    .map(stage => device.limits[maxLimits[shaderStageFlagToStageName(stage)]]!);\n  return limits.length > 0 ? Math.min(...limits) : 0;\n}\n\n/** List of all entries of GPUSupportedLimits. */\nexport const kLimits = keysOf(kLimitInfoCore);\n\n/**\n * The number of color attachments to test.\n * The CTS needs to generate a consistent list of tests.\n * We can't use any default limits since they different from core to compat mode\n * So, tests should use this value and filter out any values that are out of\n * range for the current device.\n *\n * The test in maxColorAttachments.spec.ts tests that kMaxColorAttachmentsToTest\n * is large enough to cover all devices tested.\n */\nexport const kMaxColorAttachmentsToTest = 32;\n\n/** The size of indirect draw parameters in the indirectBuffer of drawIndirect */\nexport const kDrawIndirectParametersSize = 4;\n/** The size of indirect drawIndexed parameters in the indirectBuffer of drawIndexedIndirect */\nexport const kDrawIndexedIndirectParametersSize = 5;\n\n/** Per-GPUFeatureName info. */\nexport const kFeatureNameInfo: {\n  readonly [k in GPUFeatureName]: {};\n} =\n  /* prettier-ignore */ {\n  'bgra8unorm-storage':                 {},\n  'depth-clip-control':                 {},\n  'depth32float-stencil8':              {},\n  'texture-compression-bc':             {},\n  'texture-compression-bc-sliced-3d':   {},\n  'texture-compression-etc2':           {},\n  'texture-compression-astc':           {},\n  'texture-compression-astc-sliced-3d': {},\n  'timestamp-query':                    {},\n  'indirect-first-instance':            {},\n  'shader-f16':                         {},\n  'rg11b10ufloat-renderable':           {},\n  'float32-filterable':                 {},\n  'float32-blendable':                  {},\n  'clip-distances':                     {},\n  'dual-source-blending':               {},\n};\n/** List of all GPUFeatureName values. */\nexport const kFeatureNames = keysOf(kFeatureNameInfo);\n\n/** List of all known WGSL language features */\nexport const kKnownWGSLLanguageFeatures = [\n  'readonly_and_readwrite_storage_textures',\n  'packed_4x8_integer_dot_product',\n  'unrestricted_pointer_parameters',\n  'pointer_composite_access',\n] as const;\n\nexport type WGSLLanguageFeature = (typeof kKnownWGSLLanguageFeatures)[number];\n"],"mappings":"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"}