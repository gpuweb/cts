{"version":3,"file":"copy_to_texture.js","names":["assert","memcpy","AllFeaturesMaxLimitsGPUTest","TextureTestMixin","reifyExtent3D","reifyOrigin3D","makeInPlaceColorConversion","TexelView","kCopySubrectInfo","srcOrigin","x","y","dstOrigin","z","srcSize","width","height","dstSize","copyExtent","depthOrArrayLayers","TextureUploadingUtils","doFlipY","sourcePixels","bytesPerPixel","dstPixels","Uint8ClampedArray","i","j","srcPixelPos","dstPixelPos","src","start","length","dst","getExpectedDstPixelsFromSrcPixels","srcPixels","subRectSize","format","flipSrcBeforeCopy","srcDoFlipYDuringCopy","conversion","applyConversion","reifySrcOrigin","reifySrcSize","reifyDstOrigin","reifyDstSize","reifySubRectSize","divide","fromTexelsAsColors","coords","yInSubRect","src_y","pixelPos","rgba","R","G","B","A","clampToFormatRange","doTestAndCheckResult","imageCopyExternalImage","dstTextureCopyView","expTexelView","copySize","texelCompareOptions","device","queue","copyExternalImageToTexture","expectTexelViewComparisonIsOkInTexture","texture","origin"],"sources":["../../../src/webgpu/util/copy_to_texture.ts"],"sourcesContent":["import { assert, memcpy } from '../../common/util/util.js';\nimport { RegularTextureFormat } from '../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, TextureTestMixin } from '../gpu_test.js';\nimport { reifyExtent3D, reifyOrigin3D } from '../util/unions.js';\n\nimport { makeInPlaceColorConversion } from './color_space_conversion.js';\nimport { TexelView } from './texture/texel_view.js';\nimport { TexelCompareOptions } from './texture/texture_ok.js';\n\n/**\n * Predefined copy sub rect meta infos.\n */\nexport const kCopySubrectInfo = [\n  {\n    srcOrigin: { x: 2, y: 2 },\n    dstOrigin: { x: 0, y: 0, z: 0 },\n    srcSize: { width: 16, height: 16 },\n    dstSize: { width: 4, height: 4 },\n    copyExtent: { width: 4, height: 4, depthOrArrayLayers: 1 },\n  },\n  {\n    srcOrigin: { x: 10, y: 2 },\n    dstOrigin: { x: 0, y: 0, z: 0 },\n    srcSize: { width: 16, height: 16 },\n    dstSize: { width: 4, height: 4 },\n    copyExtent: { width: 4, height: 4, depthOrArrayLayers: 1 },\n  },\n  {\n    srcOrigin: { x: 2, y: 10 },\n    dstOrigin: { x: 0, y: 0, z: 0 },\n    srcSize: { width: 16, height: 16 },\n    dstSize: { width: 4, height: 4 },\n    copyExtent: { width: 4, height: 4, depthOrArrayLayers: 1 },\n  },\n  {\n    srcOrigin: { x: 10, y: 10 },\n    dstOrigin: { x: 0, y: 0, z: 0 },\n    srcSize: { width: 16, height: 16 },\n    dstSize: { width: 4, height: 4 },\n    copyExtent: { width: 4, height: 4, depthOrArrayLayers: 1 },\n  },\n  {\n    srcOrigin: { x: 2, y: 2 },\n    dstOrigin: { x: 2, y: 2, z: 0 },\n    srcSize: { width: 16, height: 16 },\n    dstSize: { width: 16, height: 16 },\n    copyExtent: { width: 4, height: 4, depthOrArrayLayers: 1 },\n  },\n  {\n    srcOrigin: { x: 10, y: 2 },\n    dstOrigin: { x: 2, y: 2, z: 0 },\n    srcSize: { width: 16, height: 16 },\n    dstSize: { width: 16, height: 16 },\n    copyExtent: { width: 4, height: 4, depthOrArrayLayers: 1 },\n  },\n] as const;\n\nexport class TextureUploadingUtils extends TextureTestMixin(AllFeaturesMaxLimitsGPUTest) {\n  doFlipY(\n    sourcePixels: Uint8ClampedArray,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): Uint8ClampedArray {\n    const dstPixels = new Uint8ClampedArray(width * height * bytesPerPixel);\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const srcPixelPos = i * width + j;\n        // WebGL readPixel returns pixels from bottom-left origin. Using CopyExternalImageToTexture\n        // to copy from WebGL Canvas keeps top-left origin. So the expectation from webgl.readPixel should\n        // be flipped.\n        const dstPixelPos = (height - i - 1) * width + j;\n\n        memcpy(\n          { src: sourcePixels, start: srcPixelPos * bytesPerPixel, length: bytesPerPixel },\n          { dst: dstPixels, start: dstPixelPos * bytesPerPixel }\n        );\n      }\n    }\n\n    return dstPixels;\n  }\n\n  getExpectedDstPixelsFromSrcPixels({\n    srcPixels,\n    srcOrigin,\n    srcSize,\n    dstOrigin,\n    dstSize,\n    subRectSize,\n    format,\n    flipSrcBeforeCopy,\n    srcDoFlipYDuringCopy,\n    conversion,\n  }: {\n    srcPixels: Uint8ClampedArray;\n    srcOrigin: GPUOrigin2D;\n    srcSize: GPUExtent3D;\n    dstOrigin: GPUOrigin3D;\n    dstSize: GPUExtent3D;\n    subRectSize: GPUExtent3D;\n    format: RegularTextureFormat;\n    flipSrcBeforeCopy: boolean;\n    srcDoFlipYDuringCopy: boolean;\n    conversion: {\n      srcPremultiplied: boolean;\n      dstPremultiplied: boolean;\n      srcColorSpace?: PredefinedColorSpace;\n      dstColorSpace?: PredefinedColorSpace;\n    };\n  }): TexelView {\n    const applyConversion = makeInPlaceColorConversion(conversion);\n\n    const reifySrcOrigin = reifyOrigin3D(srcOrigin);\n    const reifySrcSize = reifyExtent3D(srcSize);\n    const reifyDstOrigin = reifyOrigin3D(dstOrigin);\n    const reifyDstSize = reifyExtent3D(dstSize);\n    const reifySubRectSize = reifyExtent3D(subRectSize);\n\n    assert(\n      reifyDstOrigin.x + reifySubRectSize.width <= reifyDstSize.width &&\n        reifyDstOrigin.y + reifySubRectSize.height <= reifyDstSize.height,\n      'subrect is out of bounds'\n    );\n\n    const divide = 255.0;\n    return TexelView.fromTexelsAsColors(\n      format,\n      coords => {\n        assert(\n          coords.x >= reifyDstOrigin.x &&\n            coords.y >= reifyDstOrigin.y &&\n            coords.x < reifyDstOrigin.x + reifySubRectSize.width &&\n            coords.y < reifyDstOrigin.y + reifySubRectSize.height &&\n            coords.z === 0,\n          'out of bounds'\n        );\n        // Map dst coords to get candidate src pixel position in y.\n        let yInSubRect = coords.y - reifyDstOrigin.y;\n\n        // If srcDoFlipYDuringCopy is true, a flipY op has been applied to src during copy.\n        // WebGPU spec requires origin option relative to the top-left corner of the source image,\n        // increasing downward consistently.\n        // https://www.w3.org/TR/webgpu/#dom-gpuimagecopyexternalimage-flipy\n        // Flip only happens in copy rect contents and src origin always top-left.\n        // Get candidate src pixel position in y by mirroring in copy sub rect.\n        if (srcDoFlipYDuringCopy) yInSubRect = reifySubRectSize.height - 1 - yInSubRect;\n\n        let src_y = yInSubRect + reifySrcOrigin.y;\n\n        // Test might generate flipped source based on srcPixels, e.g. Create ImageBitmap based on srcPixels but set orientation to 'flipY'\n        // Get candidate src pixel position in y by mirroring in source.\n        if (flipSrcBeforeCopy) src_y = reifySrcSize.height - src_y - 1;\n\n        const pixelPos =\n          src_y * reifySrcSize.width + (coords.x - reifyDstOrigin.x) + reifySrcOrigin.x;\n\n        const rgba = {\n          R: srcPixels[pixelPos * 4] / divide,\n          G: srcPixels[pixelPos * 4 + 1] / divide,\n          B: srcPixels[pixelPos * 4 + 2] / divide,\n          A: srcPixels[pixelPos * 4 + 3] / divide,\n        };\n        applyConversion(rgba);\n        return rgba;\n      },\n      { clampToFormatRange: true }\n    );\n  }\n\n  doTestAndCheckResult(\n    imageCopyExternalImage: GPUCopyExternalImageSourceInfo,\n    dstTextureCopyView: GPUCopyExternalImageDestInfo,\n    expTexelView: TexelView,\n    copySize: Required<GPUExtent3DDict>,\n    texelCompareOptions: TexelCompareOptions\n  ): void {\n    this.device.queue.copyExternalImageToTexture(\n      imageCopyExternalImage,\n      dstTextureCopyView,\n      copySize\n    );\n\n    this.expectTexelViewComparisonIsOkInTexture(\n      { texture: dstTextureCopyView.texture, origin: dstTextureCopyView.origin },\n      expTexelView,\n      copySize,\n      texelCompareOptions\n    );\n  }\n}\n"],"mappings":"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"}