{"version":3,"file":"texel_data.spec.js","names":["description","makeTestGroup","assert","kEncodableTextureFormats","isColorTextureFormat","canCopyToAllAspectsOfTextureFormat","AllFeaturesMaxLimitsGPUTest","gammaCompress","floatAsNormalizedIntegerUnquantized","kTexelRepresentationInfo","getSingleDataType","getComponentReadbackTraits","g","isCopyDstColorTextureFormatOfType","format","type","doTest","t","params","skipIfTextureFormatNotSupported","componentData","rep","texelData","pack","texture","createTextureTracked","size","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","device","queue","writeTexture","bytesPerRow","byteLength","ReadbackTypedArray","shaderType","shader","componentOrder","map","C","join","toLowerCase","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","outputBuffer","createBufferTracked","length","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","submit","finish","idealReadbackData","c","value","decode","undefined","readBackValue","readGPUBufferRangeTyped","Float32Array","typedLength","expect","data","readBackValueToSRGB","Array","i","gammaCompressed","outputIndex","cleanup","check8UnormSRGB","inputValue","idealValue","kToleranceULP","Math","abs","R","G","B","expectGPUBufferValuesEqual","makeParam","fn","componentInfo","bitLength","A","test","u","combine","filter","beginSubcases","expand","max","pow","floor","offset","range","desc"],"sources":["../../../../src/webgpu/util/texture/texel_data.spec.ts"],"sourcesContent":["export const description = 'Test helpers for texel data produce the expected data in the shader';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport {\n  kEncodableTextureFormats,\n  EncodableTextureFormat,\n  isColorTextureFormat,\n  canCopyToAllAspectsOfTextureFormat,\n} from '../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest, GPUTest } from '../../gpu_test.js';\nimport { gammaCompress, floatAsNormalizedIntegerUnquantized } from '../conversion.js';\n\nimport {\n  kTexelRepresentationInfo,\n  getSingleDataType,\n  getComponentReadbackTraits,\n  ComponentDataType,\n} from './texel_data.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\nfunction isCopyDstColorTextureFormatOfType(\n  format: EncodableTextureFormat,\n  type: ComponentDataType\n) {\n  return (\n    isColorTextureFormat(format) &&\n    canCopyToAllAspectsOfTextureFormat(format) &&\n    getSingleDataType(format) === type\n  );\n}\n\nasync function doTest(\n  t: GPUTest & {\n    params: {\n      format: EncodableTextureFormat;\n      componentData: {\n        R?: number;\n        G?: number;\n        B?: number;\n        A?: number;\n      };\n    };\n  }\n) {\n  const { format } = t.params;\n  t.skipIfTextureFormatNotSupported(format);\n\n  const componentData = t.params.componentData;\n\n  const rep = kTexelRepresentationInfo[format];\n  const texelData = rep.pack(componentData);\n  const texture = t.createTextureTracked({\n    format,\n    size: [1, 1, 1],\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n  });\n\n  t.device.queue.writeTexture(\n    { texture },\n    texelData,\n    {\n      bytesPerRow: texelData.byteLength,\n    },\n    [1]\n  );\n\n  const { ReadbackTypedArray, shaderType } = getComponentReadbackTraits(getSingleDataType(format));\n\n  const shader = `\n  @group(0) @binding(0) var tex : texture_2d<${shaderType}>;\n\n  struct Output {\n    ${rep.componentOrder.map(C => `result${C} : ${shaderType},`).join('\\n')}\n  };\n  @group(0) @binding(1) var<storage, read_write> output : Output;\n\n  @compute @workgroup_size(1)\n  fn main() {\n      var texel : vec4<${shaderType}> = textureLoad(tex, vec2<i32>(0, 0), 0);\n      ${rep.componentOrder.map(C => `output.result${C} = texel.${C.toLowerCase()};`).join('\\n')}\n      return;\n  }`;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: shader,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const outputBuffer = t.createBufferTracked({\n    size: rep.componentOrder.length * 4,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: texture.createView(),\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: outputBuffer,\n        },\n      },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  t.device.queue.submit([encoder.finish()]);\n\n  const idealReadbackData = new ReadbackTypedArray(\n    rep.componentOrder.map(c => {\n      const value = rep.decode(componentData)[c];\n      assert(value !== undefined);\n      return value;\n    })\n  );\n\n  if (format === 'rgba8unorm-srgb' || format === 'bgra8unorm-srgb') {\n    // The SRGB -> float conversion is permitted a tolerance of 0.5f ULP on the SRGB side. The\n    // procedure for measuring this tolerance is to convert the result back into SRGB space\n    // using the ideal float -> SRGB conversion specified below but WITHOUT the rounding to integer,\n    // and taking the floating point difference versus the original SRGB value to yield the error.\n    // Exact conversion is required: 0.0f and 1.0f (the ends) must be exactly achievable.\n    const readBackValue = await t.readGPUBufferRangeTyped(outputBuffer, {\n      type: Float32Array,\n      typedLength: 4,\n    });\n    // Gamma correction shouldn't be applied to the alpha channel.\n    t.expect(idealReadbackData[3] === readBackValue.data[3]);\n\n    // Do the ideal float -> 8unorm-srgb conversion on the readback float value without the rounding\n    // to integer.\n    const readBackValueToSRGB = new Array(3);\n    for (let i = 0; i < 3; ++i) {\n      const gammaCompressed = gammaCompress(readBackValue.data[i]);\n      let outputIndex = i;\n      if (format === 'bgra8unorm-srgb' && (i === 0 || i === 2)) {\n        outputIndex = 2 - i;\n      }\n      readBackValueToSRGB[outputIndex] = floatAsNormalizedIntegerUnquantized(\n        gammaCompressed,\n        8,\n        false\n      );\n    }\n    readBackValue.cleanup();\n\n    // Take the floating point difference versus the original SRGB value to yield the error.\n    const check8UnormSRGB = (inputValue: number, idealValue: number) => {\n      const kToleranceULP = 0.5;\n      if (idealValue === 0 || idealValue === 255) {\n        t.expect(inputValue === idealValue);\n      } else {\n        t.expect(Math.abs(inputValue - idealValue) <= kToleranceULP);\n      }\n    };\n\n    assert(\n      componentData.R !== undefined &&\n        componentData.G !== undefined &&\n        componentData.B !== undefined\n    );\n    check8UnormSRGB(readBackValueToSRGB[0], componentData.R);\n    check8UnormSRGB(readBackValueToSRGB[1], componentData.G);\n    check8UnormSRGB(readBackValueToSRGB[2], componentData.B);\n  } else {\n    t.expectGPUBufferValuesEqual(outputBuffer, idealReadbackData);\n  }\n}\n\n// Make a test parameter by mapping a format and each component to a texel component\n// data value.\nfunction makeParam(\n  format: EncodableTextureFormat,\n  fn: (bitLength: number, index: number) => number\n) {\n  const rep = kTexelRepresentationInfo[format];\n  return {\n    R: rep.componentInfo.R ? fn(rep.componentInfo.R.bitLength, 0) : undefined,\n    G: rep.componentInfo.G ? fn(rep.componentInfo.G.bitLength, 1) : undefined,\n    B: rep.componentInfo.B ? fn(rep.componentInfo.B.bitLength, 2) : undefined,\n    A: rep.componentInfo.A ? fn(rep.componentInfo.A.bitLength, 3) : undefined,\n  };\n}\n\ng.test('unorm_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => isCopyDstColorTextureFormatOfType(format, 'unorm'))\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            return Math.floor(offset[i] * max(bitLength));\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('snorm_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => isCopyDstColorTextureFormatOfType(format, 'snorm'))\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength - 1) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength) - 1),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            const range = 2 * max(bitLength);\n            return -max(bitLength) + Math.floor(offset[i] * range);\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('uint_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => isCopyDstColorTextureFormatOfType(format, 'uint'))\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            return Math.floor(offset[i] * max(bitLength));\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('sint_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => isCopyDstColorTextureFormatOfType(format, 'sint'))\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength - 1) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength) - 1),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            const range = 2 * max(bitLength);\n            return -max(bitLength) + Math.floor(offset[i] * range);\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('float_texel_data_in_shader')\n  .desc(\n    `\nTODO: Test NaN, Infinity, -Infinity [1]`\n  )\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => isCopyDstColorTextureFormatOfType(format, 'float'))\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n\n          // [1]: Test NaN, Infinity, -Infinity\n\n          // Test some values\n          makeParam(format, () => 0.1199951171875),\n          makeParam(format, () => 1.4072265625),\n          makeParam(format, () => 24928),\n          makeParam(format, () => -0.1319580078125),\n          makeParam(format, () => -323.25),\n          makeParam(format, () => -7440),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            return [24896, -0.1319580078125, -323.25, -234.375][i];\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('ufloat_texel_data_in_shader')\n  .desc(\n    `\nNote: this uses values that are representable by both rg11b10ufloat and rgb9e5ufloat.\n\nTODO: Test NaN, Infinity`\n  )\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => isCopyDstColorTextureFormatOfType(format, 'ufloat'))\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n\n          // Test some values\n          makeParam(format, () => 128),\n          makeParam(format, () => 1984),\n          makeParam(format, () => 3968),\n\n          // Test scattered mixed values\n          makeParam(format, (bitLength, i) => {\n            return [128, 1984, 3968][i];\n          }),\n\n          // Test mixed values that are close in magnitude.\n          makeParam(format, (bitLength, i) => {\n            return [0.05859375, 0.03125, 0.03515625][i];\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n"],"mappings":"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"}