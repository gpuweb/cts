{"version":3,"file":"texture_ok.spec.js","names":["description","makeTestGroup","AllFeaturesMaxLimitsGPUTest","TexelView","textureContentIsOKByT2B","g","test","desc","params","u","combineWithParams","format","beginSubcases","data","opts","maxFractionalDiff","_ok","maxDiffULPsForFloatFormat","fn","t","size","texture","createTextureTracked","usage","GPUTextureUsage","COPY_DST","COPY_SRC","device","queue","writeTexture","Float32Array","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","_coords","result","expect","undefined","combine","_maxValue","mode","Int8Array","fromTexelsAsBytes","Uint8Array","maxDiffULPsForNormFormat","message","exp","coords","x","expectOK"],"sources":["../../../../src/webgpu/util/texture/texture_ok.spec.ts"],"sourcesContent":["export const description = 'checkPixels helpers behave as expected against real textures';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../gpu_test.js';\n\nimport { TexelView } from './texel_view.js';\nimport { textureContentIsOKByT2B } from './texture_ok.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('float32')\n  .desc(`Basic test that actual/expected must match, for float32.`)\n  .params(u =>\n    u\n      .combineWithParams([\n        { format: 'rgba32float' }, //\n        { format: 'rg32float' },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        // Expected data is 0.6 in all channels\n        { data: 0.6, opts: { maxFractionalDiff: 0.0000001 }, _ok: true },\n        { data: 0.6, opts: { maxDiffULPsForFloatFormat: 1 }, _ok: true },\n\n        { data: 0.5999, opts: { maxFractionalDiff: 0 }, _ok: false },\n        { data: 0.5999, opts: { maxFractionalDiff: 0.0001001 }, _ok: true },\n\n        { data: 0.6001, opts: { maxFractionalDiff: 0 }, _ok: false },\n        { data: 0.6001, opts: { maxFractionalDiff: 0.0001001 }, _ok: true },\n\n        { data: 0.5999, opts: { maxDiffULPsForFloatFormat: 1677 }, _ok: false },\n        { data: 0.5999, opts: { maxDiffULPsForFloatFormat: 1678 }, _ok: true },\n\n        { data: 0.6001, opts: { maxDiffULPsForFloatFormat: 1676 }, _ok: false },\n        { data: 0.6001, opts: { maxDiffULPsForFloatFormat: 1677 }, _ok: true },\n      ])\n  )\n  .fn(async t => {\n    const { format, data, opts, _ok } = t.params;\n\n    const size = [1, 1];\n    const texture = t.createTextureTracked({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.device.queue.writeTexture({ texture }, new Float32Array([data, data, data, data]), {}, size);\n\n    const expColor = { R: 0.6, G: 0.6, B: 0.6, A: 0.6 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n\n    const result = await textureContentIsOKByT2B(t, { texture }, size, { expTexelView }, opts);\n    t.expect((result === undefined) === _ok, `expected ${_ok}, got ${result === undefined}`);\n  });\n\ng.test('norm')\n  .desc(`Basic test that actual/expected must match, for unorm/snorm.`)\n  .params(u =>\n    u\n      .combine('mode', ['bytes', 'colors'] as const)\n      .combineWithParams([\n        { format: 'r8unorm', _maxValue: 255 },\n        { format: 'r8snorm', _maxValue: 127 },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        // Expected data is [10, 10]\n        { data: [10, 10], _ok: true },\n        { data: [10, 11], _ok: false },\n        { data: [11, 10], _ok: false },\n        { data: [11, 11], _ok: false },\n      ])\n  )\n  .fn(async t => {\n    const { mode, format, _maxValue, data, _ok } = t.params;\n\n    const size = [2, 1];\n    const texture = t.createTextureTracked({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.device.queue.writeTexture({ texture }, new Int8Array(data), {}, size);\n\n    let expTexelView;\n    switch (mode) {\n      case 'bytes':\n        expTexelView = TexelView.fromTexelsAsBytes(format, _coords => new Uint8Array([10]));\n        break;\n      case 'colors':\n        expTexelView = TexelView.fromTexelsAsColors(format, _coords => ({ R: 10 / _maxValue }));\n        break;\n    }\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture },\n      size,\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n    t.expect((result === undefined) === _ok, result?.message);\n  });\n\ng.test('snorm_min')\n  .desc(\n    `The minimum snorm value has two possible representations (e.g. -127 and -128). Ensure that\n    actual/expected can mismatch in both directions and pass the test.`\n  )\n  .params(u =>\n    u //\n      .combine('mode', ['bytes', 'colors'] as const)\n      .combineWithParams([\n        //\n        { format: 'r8snorm', _maxValue: 127 },\n      ] as const)\n  )\n  .fn(async t => {\n    const { mode, format, _maxValue } = t.params;\n\n    const data = [-_maxValue, -_maxValue - 1];\n\n    const size = [2, 1];\n    const texture = t.createTextureTracked({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.device.queue.writeTexture({ texture }, new Int8Array(data), {}, size);\n\n    let expTexelView;\n    switch (mode) {\n      case 'bytes':\n        {\n          // Actual value should be [-127,-128], expected value is [-128,-127], both should pass.\n          const exp = [-_maxValue - 1, -_maxValue];\n          expTexelView = TexelView.fromTexelsAsBytes(\n            format,\n            coords => new Uint8Array([exp[coords.x]])\n          );\n        }\n        break;\n      case 'colors':\n        expTexelView = TexelView.fromTexelsAsColors(format, _coords => ({ R: -1 }));\n        break;\n    }\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture },\n      size,\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n    t.expectOK(result);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAG,8DAA8D,CAEzF,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,2BAA2B,QAAQ,mBAAmB;;AAE/D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,uBAAuB,QAAQ,iBAAiB;;AAEzD,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACC,2BAA2B,CAAC;;AAE3DG,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACdC,IAAI,CAAE,0DAAyD,CAAC;AAChEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,iBAAiB,CAAC;AACjB,EAAEC,MAAM,EAAE,aAAa,CAAC,CAAC,EAAE;AAC3B,EAAEA,MAAM,EAAE,WAAW,CAAC,CAAC;AACf,CAAC;AACVC,aAAa,CAAC,CAAC;AACfF,iBAAiB,CAAC;AACjB;AACA,EAAEG,IAAI,EAAE,GAAG,EAAEC,IAAI,EAAE,EAAEC,iBAAiB,EAAE,SAAS,CAAC,CAAC,EAAEC,GAAG,EAAE,IAAI,CAAC,CAAC;AAChE,EAAEH,IAAI,EAAE,GAAG,EAAEC,IAAI,EAAE,EAAEG,yBAAyB,EAAE,CAAC,CAAC,CAAC,EAAED,GAAG,EAAE,IAAI,CAAC,CAAC;;AAEhE,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEC,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAEC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC5D,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEC,iBAAiB,EAAE,SAAS,CAAC,CAAC,EAAEC,GAAG,EAAE,IAAI,CAAC,CAAC;;AAEnE,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEC,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAEC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC5D,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEC,iBAAiB,EAAE,SAAS,CAAC,CAAC,EAAEC,GAAG,EAAE,IAAI,CAAC,CAAC;;AAEnE,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEG,yBAAyB,EAAE,IAAI,CAAC,CAAC,EAAED,GAAG,EAAE,KAAK,CAAC,CAAC;AACvE,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEG,yBAAyB,EAAE,IAAI,CAAC,CAAC,EAAED,GAAG,EAAE,IAAI,CAAC,CAAC;;AAEtE,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEG,yBAAyB,EAAE,IAAI,CAAC,CAAC,EAAED,GAAG,EAAE,KAAK,CAAC,CAAC;AACvE,EAAEH,IAAI,EAAE,MAAM,EAAEC,IAAI,EAAE,EAAEG,yBAAyB,EAAE,IAAI,CAAC,CAAC,EAAED,GAAG,EAAE,IAAI,CAAC,CAAC;AACvE;AACL,CAAC;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAER,MAAM,EAAEE,IAAI,EAAEC,IAAI,EAAEE,GAAG,CAAC,CAAC,GAAGG,CAAC,CAACX,MAAM;;EAE5C,MAAMY,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,MAAMC,OAAO,GAAGF,CAAC,CAACG,oBAAoB,CAAC;IACrCX,MAAM;IACNS,IAAI;IACJG,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;EACFP,CAAC,CAACQ,MAAM,CAACC,KAAK,CAACC,YAAY,CAAC,EAAER,OAAO,CAAC,CAAC,EAAE,IAAIS,YAAY,CAAC,CAACjB,IAAI,EAAEA,IAAI,EAAEA,IAAI,EAAEA,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEO,IAAI,CAAC;;EAE9F,MAAMW,QAAQ,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;EACnD,MAAMC,YAAY,GAAGjC,SAAS,CAACkC,kBAAkB,CAAC1B,MAAM,EAAE,CAAA2B,OAAO,KAAIP,QAAQ,CAAC;;EAE9E,MAAMQ,MAAM,GAAG,MAAMnC,uBAAuB,CAACe,CAAC,EAAE,EAAEE,OAAO,CAAC,CAAC,EAAED,IAAI,EAAE,EAAEgB,YAAY,CAAC,CAAC,EAAEtB,IAAI,CAAC;EAC1FK,CAAC,CAACqB,MAAM,CAAED,MAAM,KAAKE,SAAS,KAAMzB,GAAG,EAAG,YAAWA,GAAI,SAAQuB,MAAM,KAAKE,SAAU,EAAC,CAAC;AAC1F,CAAC,CAAC;;AAEJpC,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AACXC,IAAI,CAAE,8DAA6D,CAAC;AACpEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEiC,OAAO,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAU,CAAC;AAC7ChC,iBAAiB,CAAC;AACjB,EAAEC,MAAM,EAAE,SAAS,EAAEgC,SAAS,EAAE,GAAG,CAAC,CAAC;AACrC,EAAEhC,MAAM,EAAE,SAAS,EAAEgC,SAAS,EAAE,GAAG,CAAC,CAAC;AAC7B,CAAC;AACV/B,aAAa,CAAC,CAAC;AACfF,iBAAiB,CAAC;AACjB;AACA,EAAEG,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEG,GAAG,EAAE,IAAI,CAAC,CAAC;AAC7B,EAAEH,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEG,GAAG,EAAE,KAAK,CAAC,CAAC;AAC9B,EAAEH,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEG,GAAG,EAAE,KAAK,CAAC,CAAC;AAC9B,EAAEH,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEG,GAAG,EAAE,KAAK,CAAC,CAAC;AAC/B;AACL,CAAC;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEyB,IAAI,EAAEjC,MAAM,EAAEgC,SAAS,EAAE9B,IAAI,EAAEG,GAAG,CAAC,CAAC,GAAGG,CAAC,CAACX,MAAM;;EAEvD,MAAMY,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,MAAMC,OAAO,GAAGF,CAAC,CAACG,oBAAoB,CAAC;IACrCX,MAAM;IACNS,IAAI;IACJG,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;EACFP,CAAC,CAACQ,MAAM,CAACC,KAAK,CAACC,YAAY,CAAC,EAAER,OAAO,CAAC,CAAC,EAAE,IAAIwB,SAAS,CAAChC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAEO,IAAI,CAAC;;EAEvE,IAAIgB,YAAY;EAChB,QAAQQ,IAAI;IACV,KAAK,OAAO;MACVR,YAAY,GAAGjC,SAAS,CAAC2C,iBAAiB,CAACnC,MAAM,EAAE,CAAA2B,OAAO,KAAI,IAAIS,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACnF;IACF,KAAK,QAAQ;MACXX,YAAY,GAAGjC,SAAS,CAACkC,kBAAkB,CAAC1B,MAAM,EAAE,CAAA2B,OAAO,MAAK,EAAEN,CAAC,EAAE,EAAE,GAAGW,SAAS,CAAC,CAAC,CAAC,CAAC;MACvF;EACJ;;EAEA,MAAMJ,MAAM,GAAG,MAAMnC,uBAAuB;IAC1Ce,CAAC;IACD,EAAEE,OAAO,CAAC,CAAC;IACXD,IAAI;IACJ,EAAEgB,YAAY,CAAC,CAAC;IAChB,EAAEY,wBAAwB,EAAE,CAAC,CAAC;EAChC,CAAC;EACD7B,CAAC,CAACqB,MAAM,CAAED,MAAM,KAAKE,SAAS,KAAMzB,GAAG,EAAEuB,MAAM,EAAEU,OAAO,CAAC;AAC3D,CAAC,CAAC;;AAEJ5C,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC;AAChBC,IAAI;EACF;AACL;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCiC,OAAO,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAU,CAAC;AAC7ChC,iBAAiB,CAAC;AACjB;AACA,EAAEC,MAAM,EAAE,SAAS,EAAEgC,SAAS,EAAE,GAAG,CAAC,CAAC;AAC7B;AACd,CAAC;AACAzB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEyB,IAAI,EAAEjC,MAAM,EAAEgC,SAAS,CAAC,CAAC,GAAGxB,CAAC,CAACX,MAAM;;EAE5C,MAAMK,IAAI,GAAG,CAAC,CAAC8B,SAAS,EAAE,CAACA,SAAS,GAAG,CAAC,CAAC;;EAEzC,MAAMvB,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,MAAMC,OAAO,GAAGF,CAAC,CAACG,oBAAoB,CAAC;IACrCX,MAAM;IACNS,IAAI;IACJG,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;EACFP,CAAC,CAACQ,MAAM,CAACC,KAAK,CAACC,YAAY,CAAC,EAAER,OAAO,CAAC,CAAC,EAAE,IAAIwB,SAAS,CAAChC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAEO,IAAI,CAAC;;EAEvE,IAAIgB,YAAY;EAChB,QAAQQ,IAAI;IACV,KAAK,OAAO;MACV;QACE;QACA,MAAMM,GAAG,GAAG,CAAC,CAACP,SAAS,GAAG,CAAC,EAAE,CAACA,SAAS,CAAC;QACxCP,YAAY,GAAGjC,SAAS,CAAC2C,iBAAiB;UACxCnC,MAAM;UACN,CAAAwC,MAAM,KAAI,IAAIJ,UAAU,CAAC,CAACG,GAAG,CAACC,MAAM,CAACC,CAAC,CAAC,CAAC;QAC1C,CAAC;MACH;MACA;IACF,KAAK,QAAQ;MACXhB,YAAY,GAAGjC,SAAS,CAACkC,kBAAkB,CAAC1B,MAAM,EAAE,CAAA2B,OAAO,MAAK,EAAEN,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3E;EACJ;;EAEA,MAAMO,MAAM,GAAG,MAAMnC,uBAAuB;IAC1Ce,CAAC;IACD,EAAEE,OAAO,CAAC,CAAC;IACXD,IAAI;IACJ,EAAEgB,YAAY,CAAC,CAAC;IAChB,EAAEY,wBAAwB,EAAE,CAAC,CAAC;EAChC,CAAC;EACD7B,CAAC,CAACkC,QAAQ,CAACd,MAAM,CAAC;AACpB,CAAC,CAAC"}