{"version":3,"file":"color_space_conversions.spec.js","names":["description","Fixture","makeTestGroup","ErrorWithExtra","makeInPlaceColorConversion","clamp","TexelView","findFailedPixels","kTestColors","floatToU8","v","Math","round","min","max","g","test","desc","params","u","combineWithParams","srcColorSpace","dstColorSpace","beforeAllSubcases","t","skipIf","ImageData","fn","width","length","height","imgData","Uint8ClampedArray","map","flat","colorSpace","ctx","OffscreenCanvas","getContext","putImageData","expectedData","getImageData","data","conversionFn","srcPremultiplied","dstPremultiplied","convertedData","color","R","G","B","floatColor","A","subrectOrigin","subrectSize","areaDesc","bytesPerRow","rowsPerImage","format","actTexelView","fromTextureDataByReference","expTexelView","failedPixelsMessage","x","y","z","depthOrArrayLayers","maxDiffULPsForNormFormat","undefined","msg","expectOK"],"sources":["../../../../src/webgpu/util/texture/color_space_conversions.spec.ts"],"sourcesContent":["export const description = 'Color space conversion helpers';\n\nimport { Fixture } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { ErrorWithExtra } from '../../../common/util/util.js';\nimport { makeInPlaceColorConversion } from '../color_space_conversion.js';\nimport { clamp } from '../math.js';\n\nimport { TexelView } from './texel_view.js';\nimport { findFailedPixels } from './texture_ok.js';\n\nconst kTestColors = [\n  [0xff, 0, 0],\n  [0, 0xff, 0],\n  [0, 0, 0xff],\n  [0x80, 0x80, 0],\n  [0, 0x80, 0x80],\n  [0x80, 0, 0x80],\n] as const;\n\nfunction floatToU8(v: number) {\n  return clamp(Math.round(v * 255), { min: 0, max: 255 });\n}\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('util_matches_2d_canvas')\n  .desc(`Test color space conversion helpers matches canvas 2d's color space conversion`)\n  .params(u =>\n    u.combineWithParams([\n      { srcColorSpace: 'srgb', dstColorSpace: 'display-p3' },\n      { srcColorSpace: 'display-p3', dstColorSpace: 'srgb' },\n    ] as { srcColorSpace: PredefinedColorSpace; dstColorSpace: PredefinedColorSpace }[])\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(typeof ImageData === 'undefined', `ImageData does not exist in this environment`);\n  })\n  .fn(t => {\n    const { srcColorSpace, dstColorSpace } = t.params;\n\n    // putImageData an ImageData(srcColorSpace) in to a canvas2D(dstColorSpace)\n    // then call getImageData. This will convert the colors via the canvas 2D API\n    const width = kTestColors.length;\n    const height = 1;\n    const imgData = new ImageData(\n      new Uint8ClampedArray(kTestColors.map(v => [...v, 255]).flat()),\n      width,\n      height,\n      { colorSpace: srcColorSpace }\n    );\n    const ctx = new OffscreenCanvas(width, height).getContext('2d', {\n      colorSpace: dstColorSpace,\n    })!;\n    ctx.putImageData(imgData, 0, 0);\n    const expectedData = ctx.getImageData(0, 0, width, height).data;\n\n    const conversionFn = makeInPlaceColorConversion({\n      srcPremultiplied: false,\n      dstPremultiplied: false,\n      srcColorSpace,\n      dstColorSpace,\n    });\n\n    // Convert the data via our conversion functions\n    const convertedData = new Uint8ClampedArray(\n      kTestColors\n        .map(color => {\n          const [R, G, B] = color.map(v => v / 255);\n          const floatColor = { R, G, B, A: 1 };\n          conversionFn(floatColor);\n          return [\n            floatToU8(floatColor.R),\n            floatToU8(floatColor.G),\n            floatToU8(floatColor.B),\n            floatToU8(floatColor.A),\n          ];\n        })\n        .flat()\n    );\n\n    const subrectOrigin = [0, 0, 0];\n    const subrectSize = [width, height, 1];\n    const areaDesc = {\n      bytesPerRow: width * 4,\n      rowsPerImage: height,\n      subrectOrigin,\n      subrectSize,\n    };\n\n    const format = 'rgba8unorm';\n    const actTexelView = TexelView.fromTextureDataByReference(format, convertedData, areaDesc);\n    const expTexelView = TexelView.fromTextureDataByReference(format, expectedData, areaDesc);\n\n    const failedPixelsMessage = findFailedPixels(\n      format,\n      { x: 0, y: 0, z: 0 },\n      { width, height, depthOrArrayLayers: 1 },\n      { actTexelView, expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n\n    if (failedPixelsMessage !== undefined) {\n      const msg = 'Color space conversion had unexpected results:\\n' + failedPixelsMessage;\n      t.expectOK(\n        new ErrorWithExtra(msg, () => ({\n          expTexelView,\n          actTexelView,\n        }))\n      );\n    }\n  });\n"],"mappings":"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"}