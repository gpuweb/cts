{"version":3,"file":"video.spec.js","names":["description","makeTestGroup","unreachable","ttu","TextureUploadingUtils","createCanvas","startPlayingAndWaitForVideo","getVideoFrameFromVideoElement","getVideoElement","convertToUnorm8","kPredefinedColorSpace","kVideoNames","kVideoInfo","kVideoExpectedColors","getVideoElementFromCamera","getVideoFrameFromCamera","kHeight","kWidth","kFormat","g","createExternalTextureSamplingTestPipeline","t","colorAttachmentFormat","pipeline","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","createExternalTextureSamplingTestBindGroup","checkNonStandardIsZeroCopy","source","dstColorSpace","linearSampler","createSampler","externalTexture","importExternalTexture","colorSpace","expectZeroCopyNonStandard","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","expect","isZeroCopy","checkNonStandardIsZeroCopyIfAvailable","GPUExternalTexture","prototype","hasOwnProperty","test","desc","params","u","combineWithParams","combine","fn","videoName","sourceType","VideoFrame","skip","videoElement","colorAttachment","createTextureTracked","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","srcColorSpace","presentColors","display","expectSinglePixelComparisonsAreOkInTexture","texture","coord","x","y","exp","topLeftColor","topRightColor","bottomLeftColor","bottomRightColor","videoFrameFormat","canvas","canvasContext","getContext","ctx","rectWidth","Math","floor","rectHeight","fillStyle","fillRect","imageData","getImageData","frameInit","codedWidth","codedHeight","timestamp","frame","data","buffer","textureFormat","undefined","expected","topLeft","Uint8Array","topRight","bottomLeft","bottomRight","srcVideoHeight","srcVideoWidth","coded","cropParams","subRect","color","cropParam","visibleRect","close","outputTexture","STORAGE_BINDING","createComputePipeline","compute","constants","frameWidth","displayWidth","videoWidth","frameHeight","displayHeight","videoHeight","bg","encoder","pass","beginComputePass","dispatchWorkgroups","path","constraints","kDebugShowCanvasesOnScreen","video","webgpuCanvas","document","body","append","createElement","webgpuContext","configure","getCurrentTexture","drawImage","expectedView","getExpectedDstPixelsFromSrcPixels","srcPixels","srcOrigin","srcSize","dstOrigin","dstSize","subRectSize","flipSrcBeforeCopy","srcDoFlipYDuringCopy","conversion","srcPremultiplied","dstPremultiplied","expectTexelViewComparisonIsOkInTexture"],"sources":["../../../../src/webgpu/web_platform/external_texture/video.spec.ts"],"sourcesContent":["export const description = `\nTests for external textures from HTMLVideoElement (and other video-type sources?).\n\n- videos with various encodings/formats (webm vp8, webm vp9, ogg theora, mp4), video color spaces\n  (bt.601, bt.709, bt.2020) and dst color spaces(display-p3, srgb)\n\nTODO: consider whether external_texture and copyToTexture video tests should be in the same file\nTODO(#3193): Test video in BT.2020 color space\nTODO(#4364): Test camera capture with copyExternalImageToTexture (not necessarily in this file)\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport * as ttu from '../../texture_test_utils.js';\nimport { TextureUploadingUtils } from '../../util/copy_to_texture.js';\nimport { createCanvas } from '../../util/create_elements.js';\nimport {\n  startPlayingAndWaitForVideo,\n  getVideoFrameFromVideoElement,\n  getVideoElement,\n  convertToUnorm8,\n  kPredefinedColorSpace,\n  kVideoNames,\n  kVideoInfo,\n  kVideoExpectedColors,\n  getVideoElementFromCamera,\n  getVideoFrameFromCamera,\n} from '../../web_platform/util.js';\n\nconst kHeight = 16;\nconst kWidth = 16;\nconst kFormat = 'rgba8unorm';\n\nexport const g = makeTestGroup(TextureUploadingUtils);\n\nfunction createExternalTextureSamplingTestPipeline(\n  t: GPUTest,\n  colorAttachmentFormat: GPUTextureFormat = kFormat\n): GPURenderPipeline {\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        struct VertexOutput {\n          @builtin(position) Position : vec4f,\n          @location(0) fragUV : vec2f,\n        }\n\n        @vertex fn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n\n            const uv = array(\n              vec2(1.0, 0.0),\n              vec2(1.0, 1.0),\n              vec2(0.0, 1.0),\n              vec2(1.0, 0.0),\n              vec2(0.0, 1.0),\n              vec2(0.0, 0.0),\n            );\n\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            output.fragUV = uv[VertexIndex];\n            return output;\n        }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n        @group(0) @binding(0) var s : sampler;\n        @group(0) @binding(1) var t : texture_external;\n\n        @fragment fn main(@location(0) fragUV : vec2f)\n                                 -> @location(0) vec4f {\n            return textureSampleBaseClampToEdge(t, s, fragUV);\n        }\n        `,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: colorAttachmentFormat,\n        },\n      ],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  return pipeline;\n}\n\nfunction createExternalTextureSamplingTestBindGroup(\n  t: GPUTest,\n  checkNonStandardIsZeroCopy: true | undefined,\n  source: HTMLVideoElement | VideoFrame,\n  pipeline: GPURenderPipeline,\n  dstColorSpace: PredefinedColorSpace\n): GPUBindGroup {\n  const linearSampler = t.device.createSampler();\n\n  const externalTexture = t.device.importExternalTexture({\n    source,\n    colorSpace: dstColorSpace,\n  });\n\n  if (checkNonStandardIsZeroCopy) {\n    expectZeroCopyNonStandard(t, externalTexture);\n  }\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: linearSampler,\n      },\n      {\n        binding: 1,\n        resource: externalTexture,\n      },\n    ],\n  });\n\n  return bindGroup;\n}\n\n/**\n * Expect the non-standard `externalTexture.isZeroCopy` is true.\n */\nfunction expectZeroCopyNonStandard(t: GPUTest, externalTexture: GPUExternalTexture): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t.expect((externalTexture as any).isZeroCopy, '0-copy import failed.');\n}\n\n/**\n * `externalTexture.isZeroCopy` is a non-standard Chrome API for testing only.\n * It is exposed by enabling chrome://flags/#enable-webgpu-developer-features\n *\n * If the API is available, this function adds a parameter `checkNonStandardIsZeroCopy`.\n * Cases with that parameter set to `true` will fail if `externalTexture.isZeroCopy` is not true.\n */\nfunction checkNonStandardIsZeroCopyIfAvailable(): { checkNonStandardIsZeroCopy?: true }[] {\n  if (\n    typeof GPUExternalTexture !== 'undefined' &&\n    // eslint-disable-next-line no-prototype-builtins\n    GPUExternalTexture.prototype.hasOwnProperty('isZeroCopy')\n  ) {\n    return [{}, { checkNonStandardIsZeroCopy: true }];\n  } else {\n    return [{}];\n  }\n}\n\ng.test('importExternalTexture,sample')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sample from it\nfor several combinations of video format, video color spaces and dst color spaces.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('videoName', kVideoNames)\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combine('dstColorSpace', kPredefinedColorSpace)\n  )\n  .fn(async t => {\n    const { videoName, sourceType, dstColorSpace } = t.params;\n\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.createTextureTracked({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(\n        t,\n        t.params.checkNonStandardIsZeroCopy,\n        source,\n        pipeline,\n        dstColorSpace\n      );\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      const srcColorSpace = kVideoInfo[videoName].colorSpace;\n      const presentColors = kVideoExpectedColors[srcColorSpace][dstColorSpace];\n\n      // visible rect is whole frame, no clipping.\n      const expect = kVideoInfo[videoName].display;\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      ttu.expectSinglePixelComparisonsAreOkInTexture(t, { texture: colorAttachment }, [\n        // Top-left.\n        {\n          coord: { x: kWidth * 0.25, y: kHeight * 0.25 },\n          exp: convertToUnorm8(presentColors[expect.topLeftColor]),\n        },\n        // Top-right.\n        {\n          coord: { x: kWidth * 0.75, y: kHeight * 0.25 },\n          exp: convertToUnorm8(presentColors[expect.topRightColor]),\n        },\n        // Bottom-left.\n        {\n          coord: { x: kWidth * 0.25, y: kHeight * 0.75 },\n          exp: convertToUnorm8(presentColors[expect.bottomLeftColor]),\n        },\n        // Bottom-right.\n        {\n          coord: { x: kWidth * 0.75, y: kHeight * 0.75 },\n          exp: convertToUnorm8(presentColors[expect.bottomRightColor]),\n        },\n      ]);\n    });\n  });\n\ng.test('importExternalTexture,sample_non_YUV_video_frame')\n  .desc(\n    `\nTests that we can import an VideoFrame with non-YUV pixel format into a GPUExternalTexture and sample it.\n`\n  )\n  .params(u =>\n    u //\n      .combine('videoFrameFormat', ['RGBA', 'RGBX', 'BGRA', 'BGRX'] as const)\n  )\n  .fn(t => {\n    const { videoFrameFormat } = t.params;\n\n    if (typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const canvas = createCanvas(t, 'onscreen', kWidth, kHeight);\n\n    const canvasContext = canvas.getContext('2d');\n\n    if (canvasContext === null) {\n      t.skip(' onscreen canvas 2d context not available');\n    }\n\n    const ctx = canvasContext as CanvasRenderingContext2D;\n\n    const rectWidth = Math.floor(kWidth / 2);\n    const rectHeight = Math.floor(kHeight / 2);\n\n    // Red\n    ctx.fillStyle = `rgba(255, 0, 0, 1.0)`;\n    ctx.fillRect(0, 0, rectWidth, rectHeight);\n    // Lime\n    ctx.fillStyle = `rgba(0, 255, 0, 1.0)`;\n    ctx.fillRect(rectWidth, 0, kWidth - rectWidth, rectHeight);\n    // Blue\n    ctx.fillStyle = `rgba(0, 0, 255, 1.0)`;\n    ctx.fillRect(0, rectHeight, rectWidth, kHeight - rectHeight);\n    // Fuchsia\n    ctx.fillStyle = `rgba(255, 0, 255, 1.0)`;\n    ctx.fillRect(rectWidth, rectHeight, kWidth - rectWidth, kHeight - rectHeight);\n\n    const imageData = ctx.getImageData(0, 0, kWidth, kHeight);\n\n    // Create video frame with default color space 'srgb'\n    const frameInit: VideoFrameBufferInit = {\n      format: videoFrameFormat,\n      codedWidth: kWidth,\n      codedHeight: kHeight,\n      timestamp: 0,\n    };\n\n    const frame = new VideoFrame(imageData.data.buffer, frameInit);\n    let textureFormat: GPUTextureFormat = 'rgba8unorm';\n\n    if (videoFrameFormat === 'BGRA' || videoFrameFormat === 'BGRX') {\n      textureFormat = 'bgra8unorm';\n    }\n\n    const colorAttachment = t.createTextureTracked({\n      format: textureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = createExternalTextureSamplingTestPipeline(t, textureFormat);\n    const bindGroup = createExternalTextureSamplingTestBindGroup(\n      t,\n      undefined /* checkNonStandardIsZeroCopy */,\n      frame,\n      pipeline,\n      'srgb'\n    );\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, bindGroup);\n    passEncoder.draw(6);\n    passEncoder.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const expected = {\n      topLeft: new Uint8Array([255, 0, 0, 255]),\n      topRight: new Uint8Array([0, 255, 0, 255]),\n      bottomLeft: new Uint8Array([0, 0, 255, 255]),\n      bottomRight: new Uint8Array([255, 0, 255, 255]),\n    };\n\n    // For validation, we sample a few pixels away from the edges to avoid compression\n    // artifacts.\n    ttu.expectSinglePixelComparisonsAreOkInTexture(t, { texture: colorAttachment }, [\n      // Top-left.\n      {\n        coord: { x: kWidth * 0.25, y: kHeight * 0.25 },\n        exp: expected.topLeft,\n      },\n      // Top-right.\n      {\n        coord: { x: kWidth * 0.75, y: kHeight * 0.25 },\n        exp: expected.topRight,\n      },\n      // Bottom-left.\n      {\n        coord: { x: kWidth * 0.25, y: kHeight * 0.75 },\n        exp: expected.bottomLeft,\n      },\n      // Bottom-right.\n      {\n        coord: { x: kWidth * 0.75, y: kHeight * 0.75 },\n        exp: expected.bottomRight,\n      },\n    ]);\n  });\n\ng.test('importExternalTexture,sampleWithVideoFrameWithVisibleRectParam')\n  .desc(\n    `\nTests that we can import VideoFrames and sample the correct sub-rectangle when visibleRect\nparameters are present.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('videoName', kVideoNames)\n      .combine('dstColorSpace', kPredefinedColorSpace)\n  )\n  .fn(async t => {\n    const { videoName, dstColorSpace } = t.params;\n\n    const videoElement = getVideoElement(t, videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source = await getVideoFrameFromVideoElement(t, videoElement);\n\n      // All tested videos are derived from an image showing yellow, red, blue or green in each\n      // quadrant. In this test we crop the video to each quadrant and check that desired color\n      // is sampled from each corner of the cropped image.\n      // visible rect clip applies on raw decoded frame, which defines based on video frame coded size.\n      const srcVideoHeight = source.codedHeight;\n      const srcVideoWidth = source.codedWidth;\n\n      const srcColorSpace = kVideoInfo[videoName].colorSpace;\n      const presentColors = kVideoExpectedColors[srcColorSpace][dstColorSpace];\n\n      // The test crops raw decoded videos first and then apply transform. Expectation should\n      // use coded colors as reference.\n      const expect = kVideoInfo[videoName].coded;\n\n      const cropParams = [\n        // Top left\n        {\n          subRect: { x: 0, y: 0, width: srcVideoWidth / 2, height: srcVideoHeight / 2 },\n          color: convertToUnorm8(presentColors[expect.topLeftColor]),\n        },\n        // Top right\n        {\n          subRect: {\n            x: srcVideoWidth / 2,\n            y: 0,\n            width: srcVideoWidth / 2,\n            height: srcVideoHeight / 2,\n          },\n          color: convertToUnorm8(presentColors[expect.topRightColor]),\n        },\n        // Bottom left\n        {\n          subRect: {\n            x: 0,\n            y: srcVideoHeight / 2,\n            width: srcVideoWidth / 2,\n            height: srcVideoHeight / 2,\n          },\n          color: convertToUnorm8(presentColors[expect.bottomLeftColor]),\n        },\n        // Bottom right\n        {\n          subRect: {\n            x: srcVideoWidth / 2,\n            y: srcVideoHeight / 2,\n            width: srcVideoWidth / 2,\n            height: srcVideoHeight / 2,\n          },\n          color: convertToUnorm8(presentColors[expect.bottomRightColor]),\n        },\n      ];\n\n      for (const cropParam of cropParams) {\n        const subRect = new VideoFrame(source, { visibleRect: cropParam.subRect });\n\n        const colorAttachment = t.createTextureTracked({\n          format: kFormat,\n          size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        });\n\n        const pipeline = createExternalTextureSamplingTestPipeline(t);\n        const bindGroup = createExternalTextureSamplingTestBindGroup(\n          t,\n          t.params.checkNonStandardIsZeroCopy,\n          subRect,\n          pipeline,\n          dstColorSpace\n        );\n\n        const commandEncoder = t.device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: colorAttachment.createView(),\n              clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(6);\n        passEncoder.end();\n        t.device.queue.submit([commandEncoder.finish()]);\n\n        // For validation, we sample a few pixels away from the edges to avoid compression\n        // artifacts.\n        ttu.expectSinglePixelComparisonsAreOkInTexture(t, { texture: colorAttachment }, [\n          { coord: { x: kWidth * 0.1, y: kHeight * 0.1 }, exp: cropParam.color },\n          { coord: { x: kWidth * 0.9, y: kHeight * 0.1 }, exp: cropParam.color },\n          { coord: { x: kWidth * 0.1, y: kHeight * 0.9 }, exp: cropParam.color },\n          { coord: { x: kWidth * 0.9, y: kHeight * 0.9 }, exp: cropParam.color },\n        ]);\n\n        subRect.close();\n      }\n\n      source.close();\n    });\n  });\ng.test('importExternalTexture,compute')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture and use it in a\ncompute shader, for several combinations of video format, video color spaces and dst color spaces.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('videoName', kVideoNames)\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combine('dstColorSpace', kPredefinedColorSpace)\n  )\n  .fn(async t => {\n    const { videoName, sourceType, dstColorSpace } = t.params;\n\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n      const externalTexture = t.device.importExternalTexture({\n        source,\n        colorSpace: dstColorSpace,\n      });\n      if (t.params.checkNonStandardIsZeroCopy) {\n        expectZeroCopyNonStandard(t, externalTexture);\n      }\n      const outputTexture = t.createTextureTracked({\n        format: 'rgba8unorm',\n        size: [2, 2, 1],\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n      });\n\n      // Use display size of VideoFrame and video size of HTMLVideoElement as frame size. These sizes are presenting size which\n      // apply transformation in video metadata if any.\n\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          // Shader loads 4 pixels, and then store them in a storage texture.\n          module: t.device.createShaderModule({\n            code: `\n              override frameWidth : i32 = 0;\n              override frameHeight : i32 = 0;\n              @group(0) @binding(0) var t : texture_external;\n              @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n              @compute @workgroup_size(1) fn main() {\n                let coordTopLeft = vec2<i32>(frameWidth / 4, frameHeight / 4);\n                let coordTopRight = vec2<i32>(frameWidth / 4 * 3, frameHeight / 4);\n                let coordBottomLeft = vec2<i32>(frameWidth / 4, frameHeight / 4 * 3);\n                let coordBottomRight = vec2<i32>(frameWidth / 4 * 3, frameHeight / 4 * 3);\n                var yellow : vec4<f32> = textureLoad(t, coordTopLeft);\n                textureStore(outImage, vec2<i32>(0, 0), yellow);\n                var red : vec4<f32> = textureLoad(t, coordTopRight);\n                textureStore(outImage, vec2<i32>(0, 1), red);\n                var blue : vec4<f32> = textureLoad(t, coordBottomLeft);\n                textureStore(outImage, vec2<i32>(1, 0), blue);\n                var green : vec4<f32> = textureLoad(t, coordBottomRight);\n                textureStore(outImage, vec2<i32>(1, 1), green);\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n\n          // Use display size of VideoFrame and video size of HTMLVideoElement as frame size. These sizes are presenting size which\n          // apply transformation in video metadata if any.\n          constants: {\n            frameWidth:\n              sourceType === 'VideoFrame'\n                ? (source as VideoFrame).displayWidth\n                : (source as HTMLVideoElement).videoWidth,\n            frameHeight:\n              sourceType === 'VideoFrame'\n                ? (source as VideoFrame).displayHeight\n                : (source as HTMLVideoElement).videoHeight,\n          },\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [\n          { binding: 0, resource: externalTexture },\n          { binding: 1, resource: outputTexture.createView() },\n        ],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n\n      const srcColorSpace = kVideoInfo[videoName].colorSpace;\n      const presentColors = kVideoExpectedColors[srcColorSpace][dstColorSpace];\n\n      // visible rect is whole frame, no clipping.\n      const expect = kVideoInfo[videoName].display;\n\n      ttu.expectSinglePixelComparisonsAreOkInTexture(t, { texture: outputTexture }, [\n        // Top-left.\n        { coord: { x: 0, y: 0 }, exp: convertToUnorm8(presentColors[expect.topLeftColor]) },\n        // Top-right.\n        { coord: { x: 0, y: 1 }, exp: convertToUnorm8(presentColors[expect.topRightColor]) },\n        // Bottom-left.\n        { coord: { x: 1, y: 0 }, exp: convertToUnorm8(presentColors[expect.bottomLeftColor]) },\n        // Bottom-right.\n        { coord: { x: 1, y: 1 }, exp: convertToUnorm8(presentColors[expect.bottomRightColor]) },\n      ]);\n    });\n  });\n\ng.test('importExternalTexture,cameraCapture')\n  .desc(\n    `\nTests that we can import an VideoFrame from webcam into a GPUExternalTexture, sample from it and\ncompared with 2d canvas rendering result.\n`\n  )\n  .params(u =>\n    // NOTE: Be careful not to add too many parameters here, this test is SLOW to initialize!\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('path', ['HTMLVideoElement', 'MediaStreamTrackProcessor'] as const)\n      .combine('dstColorSpace', kPredefinedColorSpace)\n      .combine('constraints', [\n        true,\n        { width: 64, height: 48 },\n        { width: 100, height: 300 },\n      ] as const)\n  )\n  .fn(async t => {\n    const { path, dstColorSpace, constraints } = t.params;\n\n    // Enable this while debugging to show the \"actual\" and \"expected\" canvases on screen.\n    const kDebugShowCanvasesOnScreen = false;\n\n    let source: HTMLVideoElement | VideoFrame;\n    let frameWidth: number, frameHeight: number;\n    switch (path) {\n      case 'HTMLVideoElement': {\n        const video = await getVideoElementFromCamera(t, constraints, true);\n        frameWidth = video.videoWidth;\n        frameHeight = video.videoHeight;\n        source = video;\n        break;\n      }\n      case 'MediaStreamTrackProcessor': {\n        const frame = await getVideoFrameFromCamera(t, constraints);\n        frameWidth = frame.displayWidth;\n        frameHeight = frame.displayHeight;\n        source = frame;\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    // Use WebGPU + GPUExternalTexture to render the captured frame.\n    const webgpuCanvas = createCanvas(t, 'onscreen', frameWidth, frameHeight);\n    if (kDebugShowCanvasesOnScreen) {\n      document.body.append(document.createElement('br'));\n      document.body.append(webgpuCanvas);\n    }\n\n    const webgpuContext = webgpuCanvas.getContext('webgpu')!;\n    webgpuContext.configure({\n      device: t.device,\n      format: kFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n    const colorAttachment = webgpuContext.getCurrentTexture();\n\n    const pipeline = createExternalTextureSamplingTestPipeline(t);\n    const bindGroup = createExternalTextureSamplingTestBindGroup(\n      t,\n      t.params.checkNonStandardIsZeroCopy,\n      source,\n      pipeline,\n      dstColorSpace\n    );\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, bindGroup);\n    passEncoder.draw(6);\n    passEncoder.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    // Use 2d context canvas as expected result.\n    const canvas = createCanvas(t, 'onscreen', frameWidth, frameHeight);\n    if (kDebugShowCanvasesOnScreen) {\n      document.body.append(canvas);\n    }\n\n    const canvasContext = canvas.getContext('2d', { colorSpace: dstColorSpace });\n\n    if (canvasContext === null) {\n      t.skip(' onscreen canvas 2d context not available');\n    }\n\n    const ctx = canvasContext as CanvasRenderingContext2D;\n    ctx.drawImage(source, 0, 0, frameWidth, frameHeight);\n\n    const imageData = ctx.getImageData(0, 0, frameWidth, frameHeight, {\n      colorSpace: dstColorSpace,\n    });\n\n    const expectedView = t.getExpectedDstPixelsFromSrcPixels({\n      srcPixels: imageData.data,\n      srcOrigin: [0, 0],\n      srcSize: [frameWidth, frameHeight],\n      dstOrigin: [0, 0],\n      dstSize: [frameWidth, frameHeight],\n      subRectSize: [frameWidth, frameHeight],\n      format: 'rgba8unorm',\n      flipSrcBeforeCopy: false,\n      srcDoFlipYDuringCopy: false,\n      conversion: {\n        srcPremultiplied: false,\n        dstPremultiplied: true,\n      },\n    });\n\n    ttu.expectTexelViewComparisonIsOkInTexture(t, { texture: colorAttachment }, expectedView, [\n      frameWidth,\n      frameHeight,\n      1,\n    ]);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,WAAW,QAAQ,8BAA8B;;AAE1D,OAAO,KAAKC,GAAG,MAAM,6BAA6B;AAClD,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,YAAY,QAAQ,+BAA+B;AAC5D;EACEC,2BAA2B;EAC3BC,6BAA6B;EAC7BC,eAAe;EACfC,eAAe;EACfC,qBAAqB;EACrBC,WAAW;EACXC,UAAU;EACVC,oBAAoB;EACpBC,yBAAyB;EACzBC,uBAAuB;AAClB,4BAA4B;;AAEnC,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,MAAM,GAAG,EAAE;AACjB,MAAMC,OAAO,GAAG,YAAY;;AAE5B,OAAO,MAAMC,CAAC,GAAGlB,aAAa,CAACG,qBAAqB,CAAC;;AAErD,SAASgB,yCAAyCA;AAChDC,CAAU;AACVC,qBAAuC,GAAGJ,OAAO;AAC9B;EACnB,MAAMK,QAAQ,GAAGF,CAAC,CAACG,MAAM,CAACC,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE;MACNC,MAAM,EAAEP,CAAC,CAACG,MAAM,CAACK,kBAAkB,CAAC;QAClCC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRJ,MAAM,EAAEP,CAAC,CAACG,MAAM,CAACK,kBAAkB,CAAC;QAClCC,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE,MAAM;MAClBE,OAAO,EAAE;MACP;QACEC,MAAM,EAAEZ;MACV,CAAC;;IAEL,CAAC;IACDa,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAe,CAAC;EACzC,CAAC,CAAC;;EAEF,OAAOb,QAAQ;AACjB;;AAEA,SAASc,0CAA0CA;AACjDhB,CAAU;AACViB,0BAA4C;AAC5CC,MAAqC;AACrChB,QAA2B;AAC3BiB,aAAmC;AACrB;EACd,MAAMC,aAAa,GAAGpB,CAAC,CAACG,MAAM,CAACkB,aAAa,CAAC,CAAC;;EAE9C,MAAMC,eAAe,GAAGtB,CAAC,CAACG,MAAM,CAACoB,qBAAqB,CAAC;IACrDL,MAAM;IACNM,UAAU,EAAEL;EACd,CAAC,CAAC;;EAEF,IAAIF,0BAA0B,EAAE;IAC9BQ,yBAAyB,CAACzB,CAAC,EAAEsB,eAAe,CAAC;EAC/C;EACA,MAAMI,SAAS,GAAG1B,CAAC,CAACG,MAAM,CAACwB,eAAe,CAAC;IACzCtB,MAAM,EAAEH,QAAQ,CAAC0B,kBAAkB,CAAC,CAAC,CAAC;IACtCC,OAAO,EAAE;IACP;MACEC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAEX;IACZ,CAAC;IACD;MACEU,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAET;IACZ,CAAC;;EAEL,CAAC,CAAC;;EAEF,OAAOI,SAAS;AAClB;;AAEA;AACA;AACA;AACA,SAASD,yBAAyBA,CAACzB,CAAU,EAAEsB,eAAmC,EAAQ;;EAExFtB,CAAC,CAACgC,MAAM,CAAEV,eAAe,CAASW,UAAU,EAAE,uBAAuB,CAAC;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qCAAqCA,CAAA,EAA4C;EACxF;EACE,OAAOC,kBAAkB,KAAK,WAAW;;EAEzCA,kBAAkB,CAACC,SAAS,CAACC,cAAc,CAAC,YAAY,CAAC;EACzD;IACA,OAAO,CAAC,CAAC,CAAC,EAAE,EAAEpB,0BAA0B,EAAE,IAAI,CAAC,CAAC,CAAC;EACnD,CAAC,MAAM;IACL,OAAO,CAAC,CAAC,CAAC,CAAC;EACb;AACF;;AAEAnB,CAAC,CAACwC,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,iBAAiB,CAACR,qCAAqC,CAAC,CAAC,CAAC;AAC1DS,OAAO,CAAC,WAAW,EAAErD,WAAW,CAAC;AACjCqD,OAAO,CAAC,YAAY,EAAE,CAAC,cAAc,EAAE,YAAY,CAAU,CAAC;AAC9DA,OAAO,CAAC,eAAe,EAAEtD,qBAAqB;AACnD,CAAC;AACAuD,EAAE,CAAC,OAAM5C,CAAC,KAAI;EACb,MAAM,EAAE6C,SAAS,EAAEC,UAAU,EAAE3B,aAAa,CAAC,CAAC,GAAGnB,CAAC,CAACwC,MAAM;;EAEzD,IAAIM,UAAU,KAAK,YAAY,IAAI,OAAOC,UAAU,KAAK,WAAW,EAAE;IACpE/C,CAAC,CAACgD,IAAI,CAAC,2BAA2B,CAAC;EACrC;;EAEA,MAAMC,YAAY,GAAG9D,eAAe,CAACa,CAAC,EAAE6C,SAAS,CAAC;;EAElD,MAAM5D,2BAA2B,CAACgE,YAAY,EAAE,YAAY;IAC1D,MAAM/B,MAAM;IACV4B,UAAU,KAAK,YAAY;IACvB,MAAM5D,6BAA6B,CAACc,CAAC,EAAEiD,YAAY,CAAC;IACpDA,YAAY;;IAElB,MAAMC,eAAe,GAAGlD,CAAC,CAACmD,oBAAoB,CAAC;MAC7CtC,MAAM,EAAEhB,OAAO;MACfuD,IAAI,EAAE,EAAEC,KAAK,EAAEzD,MAAM,EAAE0D,MAAM,EAAE3D,OAAO,EAAE4D,kBAAkB,EAAE,CAAC,CAAC,CAAC;MAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;IACpD,CAAC,CAAC;;IAEF,MAAMzD,QAAQ,GAAGH,yCAAyC,CAACC,CAAC,CAAC;IAC7D,MAAM0B,SAAS,GAAGV,0CAA0C;MAC1DhB,CAAC;MACDA,CAAC,CAACwC,MAAM,CAACvB,0BAA0B;MACnCC,MAAM;MACNhB,QAAQ;MACRiB;IACF,CAAC;;IAED,MAAMyC,cAAc,GAAG5D,CAAC,CAACG,MAAM,CAAC0D,oBAAoB,CAAC,CAAC;IACtD,MAAMC,WAAW,GAAGF,cAAc,CAACG,eAAe,CAAC;MACjDC,gBAAgB,EAAE;MAChB;QACEC,IAAI,EAAEf,eAAe,CAACgB,UAAU,CAAC,CAAC;QAClCC,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEtE,CAAC,EAAE,GAAG,EAAEuE,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9CC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC;;IAEL,CAAC,CAAC;IACFV,WAAW,CAACW,WAAW,CAACvE,QAAQ,CAAC;IACjC4D,WAAW,CAACY,YAAY,CAAC,CAAC,EAAEhD,SAAS,CAAC;IACtCoC,WAAW,CAACa,IAAI,CAAC,CAAC,CAAC;IACnBb,WAAW,CAACc,GAAG,CAAC,CAAC;IACjB5E,CAAC,CAACG,MAAM,CAAC0E,KAAK,CAACC,MAAM,CAAC,CAAClB,cAAc,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEhD,MAAMC,aAAa,GAAGzF,UAAU,CAACsD,SAAS,CAAC,CAACrB,UAAU;IACtD,MAAMyD,aAAa,GAAGzF,oBAAoB,CAACwF,aAAa,CAAC,CAAC7D,aAAa,CAAC;;IAExE;IACA,MAAMa,MAAM,GAAGzC,UAAU,CAACsD,SAAS,CAAC,CAACqC,OAAO;;IAE5C;IACA;IACApG,GAAG,CAACqG,0CAA0C,CAACnF,CAAC,EAAE,EAAEoF,OAAO,EAAElC,eAAe,CAAC,CAAC,EAAE;IAC9E;IACA;MACEmC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;MAC9C6F,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAACyD,YAAY,CAAC;IACzD,CAAC;IACD;IACA;MACEJ,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;MAC9C6F,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC0D,aAAa,CAAC;IAC1D,CAAC;IACD;IACA;MACEL,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;MAC9C6F,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC2D,eAAe,CAAC;IAC5D,CAAC;IACD;IACA;MACEN,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;MAC9C6F,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC4D,gBAAgB,CAAC;IAC7D,CAAC;IACF,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJ9F,CAAC,CAACwC,IAAI,CAAC,kDAAkD,CAAC;AACvDC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCE,OAAO,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAU;AAC1E,CAAC;AACAC,EAAE,CAAC,CAAA5C,CAAC,KAAI;EACP,MAAM,EAAE6F,gBAAgB,CAAC,CAAC,GAAG7F,CAAC,CAACwC,MAAM;;EAErC,IAAI,OAAOO,UAAU,KAAK,WAAW,EAAE;IACrC/C,CAAC,CAACgD,IAAI,CAAC,2BAA2B,CAAC;EACrC;;EAEA,MAAM8C,MAAM,GAAG9G,YAAY,CAACgB,CAAC,EAAE,UAAU,EAAEJ,MAAM,EAAED,OAAO,CAAC;;EAE3D,MAAMoG,aAAa,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;EAE7C,IAAID,aAAa,KAAK,IAAI,EAAE;IAC1B/F,CAAC,CAACgD,IAAI,CAAC,2CAA2C,CAAC;EACrD;;EAEA,MAAMiD,GAAG,GAAGF,aAAyC;;EAErD,MAAMG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACxG,MAAM,GAAG,CAAC,CAAC;EACxC,MAAMyG,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACzG,OAAO,GAAG,CAAC,CAAC;;EAE1C;EACAsG,GAAG,CAACK,SAAS,GAAI,sBAAqB;EACtCL,GAAG,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEL,SAAS,EAAEG,UAAU,CAAC;EACzC;EACAJ,GAAG,CAACK,SAAS,GAAI,sBAAqB;EACtCL,GAAG,CAACM,QAAQ,CAACL,SAAS,EAAE,CAAC,EAAEtG,MAAM,GAAGsG,SAAS,EAAEG,UAAU,CAAC;EAC1D;EACAJ,GAAG,CAACK,SAAS,GAAI,sBAAqB;EACtCL,GAAG,CAACM,QAAQ,CAAC,CAAC,EAAEF,UAAU,EAAEH,SAAS,EAAEvG,OAAO,GAAG0G,UAAU,CAAC;EAC5D;EACAJ,GAAG,CAACK,SAAS,GAAI,wBAAuB;EACxCL,GAAG,CAACM,QAAQ,CAACL,SAAS,EAAEG,UAAU,EAAEzG,MAAM,GAAGsG,SAAS,EAAEvG,OAAO,GAAG0G,UAAU,CAAC;;EAE7E,MAAMG,SAAS,GAAGP,GAAG,CAACQ,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE7G,MAAM,EAAED,OAAO,CAAC;;EAEzD;EACA,MAAM+G,SAA+B,GAAG;IACtC7F,MAAM,EAAEgF,gBAAgB;IACxBc,UAAU,EAAE/G,MAAM;IAClBgH,WAAW,EAAEjH,OAAO;IACpBkH,SAAS,EAAE;EACb,CAAC;;EAED,MAAMC,KAAK,GAAG,IAAI/D,UAAU,CAACyD,SAAS,CAACO,IAAI,CAACC,MAAM,EAAEN,SAAS,CAAC;EAC9D,IAAIO,aAA+B,GAAG,YAAY;;EAElD,IAAIpB,gBAAgB,KAAK,MAAM,IAAIA,gBAAgB,KAAK,MAAM,EAAE;IAC9DoB,aAAa,GAAG,YAAY;EAC9B;;EAEA,MAAM/D,eAAe,GAAGlD,CAAC,CAACmD,oBAAoB,CAAC;IAC7CtC,MAAM,EAAEoG,aAAa;IACrB7D,IAAI,EAAE,EAAEC,KAAK,EAAEzD,MAAM,EAAE0D,MAAM,EAAE3D,OAAO,EAAE4D,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;;EAEF,MAAMzD,QAAQ,GAAGH,yCAAyC,CAACC,CAAC,EAAEiH,aAAa,CAAC;EAC5E,MAAMvF,SAAS,GAAGV,0CAA0C;IAC1DhB,CAAC;IACDkH,SAAS,CAAC;IACVJ,KAAK;IACL5G,QAAQ;IACR;EACF,CAAC;;EAED,MAAM0D,cAAc,GAAG5D,CAAC,CAACG,MAAM,CAAC0D,oBAAoB,CAAC,CAAC;EACtD,MAAMC,WAAW,GAAGF,cAAc,CAACG,eAAe,CAAC;IACjDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAEf,eAAe,CAACgB,UAAU,CAAC,CAAC;MAClCC,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEtE,CAAC,EAAE,GAAG,EAAEuE,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;MAC9CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC,CAAC;EACFV,WAAW,CAACW,WAAW,CAACvE,QAAQ,CAAC;EACjC4D,WAAW,CAACY,YAAY,CAAC,CAAC,EAAEhD,SAAS,CAAC;EACtCoC,WAAW,CAACa,IAAI,CAAC,CAAC,CAAC;EACnBb,WAAW,CAACc,GAAG,CAAC,CAAC;EACjB5E,CAAC,CAACG,MAAM,CAAC0E,KAAK,CAACC,MAAM,CAAC,CAAClB,cAAc,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEhD,MAAMoC,QAAQ,GAAG;IACfC,OAAO,EAAE,IAAIC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IACzCC,QAAQ,EAAE,IAAID,UAAU,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IAC1CE,UAAU,EAAE,IAAIF,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5CG,WAAW,EAAE,IAAIH,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;EAChD,CAAC;;EAED;EACA;EACAvI,GAAG,CAACqG,0CAA0C,CAACnF,CAAC,EAAE,EAAEoF,OAAO,EAAElC,eAAe,CAAC,CAAC,EAAE;EAC9E;EACA;IACEmC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;IAC9C6F,GAAG,EAAE2B,QAAQ,CAACC;EAChB,CAAC;EACD;EACA;IACE/B,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;IAC9C6F,GAAG,EAAE2B,QAAQ,CAACG;EAChB,CAAC;EACD;EACA;IACEjC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;IAC9C6F,GAAG,EAAE2B,QAAQ,CAACI;EAChB,CAAC;EACD;EACA;IACElC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,IAAI,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,IAAI,CAAC,CAAC;IAC9C6F,GAAG,EAAE2B,QAAQ,CAACK;EAChB,CAAC;EACF,CAAC;AACJ,CAAC,CAAC;;AAEJ1H,CAAC,CAACwC,IAAI,CAAC,gEAAgE,CAAC;AACrEC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,iBAAiB,CAACR,qCAAqC,CAAC,CAAC,CAAC;AAC1DS,OAAO,CAAC,WAAW,EAAErD,WAAW,CAAC;AACjCqD,OAAO,CAAC,eAAe,EAAEtD,qBAAqB;AACnD,CAAC;AACAuD,EAAE,CAAC,OAAM5C,CAAC,KAAI;EACb,MAAM,EAAE6C,SAAS,EAAE1B,aAAa,CAAC,CAAC,GAAGnB,CAAC,CAACwC,MAAM;;EAE7C,MAAMS,YAAY,GAAG9D,eAAe,CAACa,CAAC,EAAE6C,SAAS,CAAC;;EAElD,MAAM5D,2BAA2B,CAACgE,YAAY,EAAE,YAAY;IAC1D,MAAM/B,MAAM,GAAG,MAAMhC,6BAA6B,CAACc,CAAC,EAAEiD,YAAY,CAAC;;IAEnE;IACA;IACA;IACA;IACA,MAAMwE,cAAc,GAAGvG,MAAM,CAAC0F,WAAW;IACzC,MAAMc,aAAa,GAAGxG,MAAM,CAACyF,UAAU;;IAEvC,MAAM3B,aAAa,GAAGzF,UAAU,CAACsD,SAAS,CAAC,CAACrB,UAAU;IACtD,MAAMyD,aAAa,GAAGzF,oBAAoB,CAACwF,aAAa,CAAC,CAAC7D,aAAa,CAAC;;IAExE;IACA;IACA,MAAMa,MAAM,GAAGzC,UAAU,CAACsD,SAAS,CAAC,CAAC8E,KAAK;;IAE1C,MAAMC,UAAU,GAAG;IACjB;IACA;MACEC,OAAO,EAAE,EAAEvC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAElC,KAAK,EAAEqE,aAAa,GAAG,CAAC,EAAEpE,MAAM,EAAEmE,cAAc,GAAG,CAAC,CAAC,CAAC;MAC7EK,KAAK,EAAE1I,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAACyD,YAAY,CAAC;IAC3D,CAAC;IACD;IACA;MACEoC,OAAO,EAAE;QACPvC,CAAC,EAAEoC,aAAa,GAAG,CAAC;QACpBnC,CAAC,EAAE,CAAC;QACJlC,KAAK,EAAEqE,aAAa,GAAG,CAAC;QACxBpE,MAAM,EAAEmE,cAAc,GAAG;MAC3B,CAAC;MACDK,KAAK,EAAE1I,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC0D,aAAa,CAAC;IAC5D,CAAC;IACD;IACA;MACEmC,OAAO,EAAE;QACPvC,CAAC,EAAE,CAAC;QACJC,CAAC,EAAEkC,cAAc,GAAG,CAAC;QACrBpE,KAAK,EAAEqE,aAAa,GAAG,CAAC;QACxBpE,MAAM,EAAEmE,cAAc,GAAG;MAC3B,CAAC;MACDK,KAAK,EAAE1I,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC2D,eAAe,CAAC;IAC9D,CAAC;IACD;IACA;MACEkC,OAAO,EAAE;QACPvC,CAAC,EAAEoC,aAAa,GAAG,CAAC;QACpBnC,CAAC,EAAEkC,cAAc,GAAG,CAAC;QACrBpE,KAAK,EAAEqE,aAAa,GAAG,CAAC;QACxBpE,MAAM,EAAEmE,cAAc,GAAG;MAC3B,CAAC;MACDK,KAAK,EAAE1I,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC4D,gBAAgB,CAAC;IAC/D,CAAC,CACF;;;IAED,KAAK,MAAMmC,SAAS,IAAIH,UAAU,EAAE;MAClC,MAAMC,OAAO,GAAG,IAAI9E,UAAU,CAAC7B,MAAM,EAAE,EAAE8G,WAAW,EAAED,SAAS,CAACF,OAAO,CAAC,CAAC,CAAC;;MAE1E,MAAM3E,eAAe,GAAGlD,CAAC,CAACmD,oBAAoB,CAAC;QAC7CtC,MAAM,EAAEhB,OAAO;QACfuD,IAAI,EAAE,EAAEC,KAAK,EAAEzD,MAAM,EAAE0D,MAAM,EAAE3D,OAAO,EAAE4D,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;MACpD,CAAC,CAAC;;MAEF,MAAMzD,QAAQ,GAAGH,yCAAyC,CAACC,CAAC,CAAC;MAC7D,MAAM0B,SAAS,GAAGV,0CAA0C;QAC1DhB,CAAC;QACDA,CAAC,CAACwC,MAAM,CAACvB,0BAA0B;QACnC4G,OAAO;QACP3H,QAAQ;QACRiB;MACF,CAAC;;MAED,MAAMyC,cAAc,GAAG5D,CAAC,CAACG,MAAM,CAAC0D,oBAAoB,CAAC,CAAC;MACtD,MAAMC,WAAW,GAAGF,cAAc,CAACG,eAAe,CAAC;QACjDC,gBAAgB,EAAE;QAChB;UACEC,IAAI,EAAEf,eAAe,CAACgB,UAAU,CAAC,CAAC;UAClCC,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEtE,CAAC,EAAE,GAAG,EAAEuE,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;UAC9CC,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;QACX,CAAC;;MAEL,CAAC,CAAC;MACFV,WAAW,CAACW,WAAW,CAACvE,QAAQ,CAAC;MACjC4D,WAAW,CAACY,YAAY,CAAC,CAAC,EAAEhD,SAAS,CAAC;MACtCoC,WAAW,CAACa,IAAI,CAAC,CAAC,CAAC;MACnBb,WAAW,CAACc,GAAG,CAAC,CAAC;MACjB5E,CAAC,CAACG,MAAM,CAAC0E,KAAK,CAACC,MAAM,CAAC,CAAClB,cAAc,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;;MAEhD;MACA;MACAjG,GAAG,CAACqG,0CAA0C,CAACnF,CAAC,EAAE,EAAEoF,OAAO,EAAElC,eAAe,CAAC,CAAC,EAAE;MAC9E,EAAEmC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,GAAG,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,GAAG,CAAC,CAAC,EAAE6F,GAAG,EAAEuC,SAAS,CAACD,KAAK,CAAC,CAAC;MACtE,EAAEzC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,GAAG,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,GAAG,CAAC,CAAC,EAAE6F,GAAG,EAAEuC,SAAS,CAACD,KAAK,CAAC,CAAC;MACtE,EAAEzC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,GAAG,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,GAAG,CAAC,CAAC,EAAE6F,GAAG,EAAEuC,SAAS,CAACD,KAAK,CAAC,CAAC;MACtE,EAAEzC,KAAK,EAAE,EAAEC,CAAC,EAAE1F,MAAM,GAAG,GAAG,EAAE2F,CAAC,EAAE5F,OAAO,GAAG,GAAG,CAAC,CAAC,EAAE6F,GAAG,EAAEuC,SAAS,CAACD,KAAK,CAAC,CAAC;MACvE,CAAC;;MAEFD,OAAO,CAACI,KAAK,CAAC,CAAC;IACjB;;IAEA/G,MAAM,CAAC+G,KAAK,CAAC,CAAC;EAChB,CAAC,CAAC;AACJ,CAAC,CAAC;AACJnI,CAAC,CAACwC,IAAI,CAAC,+BAA+B,CAAC;AACpCC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,iBAAiB,CAACR,qCAAqC,CAAC,CAAC,CAAC;AAC1DS,OAAO,CAAC,WAAW,EAAErD,WAAW,CAAC;AACjCqD,OAAO,CAAC,YAAY,EAAE,CAAC,cAAc,EAAE,YAAY,CAAU,CAAC;AAC9DA,OAAO,CAAC,eAAe,EAAEtD,qBAAqB;AACnD,CAAC;AACAuD,EAAE,CAAC,OAAM5C,CAAC,KAAI;EACb,MAAM,EAAE6C,SAAS,EAAEC,UAAU,EAAE3B,aAAa,CAAC,CAAC,GAAGnB,CAAC,CAACwC,MAAM;;EAEzD,IAAIM,UAAU,KAAK,YAAY,IAAI,OAAOC,UAAU,KAAK,WAAW,EAAE;IACpE/C,CAAC,CAACgD,IAAI,CAAC,2BAA2B,CAAC;EACrC;;EAEA,MAAMC,YAAY,GAAG9D,eAAe,CAACa,CAAC,EAAE6C,SAAS,CAAC;;EAElD,MAAM5D,2BAA2B,CAACgE,YAAY,EAAE,YAAY;IAC1D,MAAM/B,MAAM;IACV4B,UAAU,KAAK,YAAY;IACvB,MAAM5D,6BAA6B,CAACc,CAAC,EAAEiD,YAAY,CAAC;IACpDA,YAAY;IAClB,MAAM3B,eAAe,GAAGtB,CAAC,CAACG,MAAM,CAACoB,qBAAqB,CAAC;MACrDL,MAAM;MACNM,UAAU,EAAEL;IACd,CAAC,CAAC;IACF,IAAInB,CAAC,CAACwC,MAAM,CAACvB,0BAA0B,EAAE;MACvCQ,yBAAyB,CAACzB,CAAC,EAAEsB,eAAe,CAAC;IAC/C;IACA,MAAM4G,aAAa,GAAGlI,CAAC,CAACmD,oBAAoB,CAAC;MAC3CtC,MAAM,EAAE,YAAY;MACpBuC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACfI,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAAC0E;IACpD,CAAC,CAAC;;IAEF;IACA;;IAEA,MAAMjI,QAAQ,GAAGF,CAAC,CAACG,MAAM,CAACiI,qBAAqB,CAAC;MAC9C/H,MAAM,EAAE,MAAM;MACdgI,OAAO,EAAE;QACP;QACA9H,MAAM,EAAEP,CAAC,CAACG,MAAM,CAACK,kBAAkB,CAAC;UAClCC,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACU,CAAC,CAAC;QACFC,UAAU,EAAE,MAAM;;QAElB;QACA;QACA4H,SAAS,EAAE;UACTC,UAAU;UACRzF,UAAU,KAAK,YAAY;UACtB5B,MAAM,CAAgBsH,YAAY;UAClCtH,MAAM,CAAsBuH,UAAU;UAC7CC,WAAW;UACT5F,UAAU,KAAK,YAAY;UACtB5B,MAAM,CAAgByH,aAAa;UACnCzH,MAAM,CAAsB0H;QACrC;MACF;IACF,CAAC,CAAC;;IAEF,MAAMC,EAAE,GAAG7I,CAAC,CAACG,MAAM,CAACwB,eAAe,CAAC;MAClCE,OAAO,EAAE;MACP,EAAEC,OAAO,EAAE,CAAC,EAAEC,QAAQ,EAAET,eAAe,CAAC,CAAC;MACzC,EAAEQ,OAAO,EAAE,CAAC,EAAEC,QAAQ,EAAEmG,aAAa,CAAChE,UAAU,CAAC,CAAC,CAAC,CAAC,CACrD;;MACD7D,MAAM,EAAEH,QAAQ,CAAC0B,kBAAkB,CAAC,CAAC;IACvC,CAAC,CAAC;;IAEF,MAAMkH,OAAO,GAAG9I,CAAC,CAACG,MAAM,CAAC0D,oBAAoB,CAAC,CAAC;IAC/C,MAAMkF,IAAI,GAAGD,OAAO,CAACE,gBAAgB,CAAC,CAAC;IACvCD,IAAI,CAACtE,WAAW,CAACvE,QAAQ,CAAC;IAC1B6I,IAAI,CAACrE,YAAY,CAAC,CAAC,EAAEmE,EAAE,CAAC;IACxBE,IAAI,CAACE,kBAAkB,CAAC,CAAC,CAAC;IAC1BF,IAAI,CAACnE,GAAG,CAAC,CAAC;IACV5E,CAAC,CAACG,MAAM,CAAC0E,KAAK,CAACC,MAAM,CAAC,CAACgE,OAAO,CAAC/D,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEzC,MAAMC,aAAa,GAAGzF,UAAU,CAACsD,SAAS,CAAC,CAACrB,UAAU;IACtD,MAAMyD,aAAa,GAAGzF,oBAAoB,CAACwF,aAAa,CAAC,CAAC7D,aAAa,CAAC;;IAExE;IACA,MAAMa,MAAM,GAAGzC,UAAU,CAACsD,SAAS,CAAC,CAACqC,OAAO;;IAE5CpG,GAAG,CAACqG,0CAA0C,CAACnF,CAAC,EAAE,EAAEoF,OAAO,EAAE8C,aAAa,CAAC,CAAC,EAAE;IAC5E;IACA,EAAE7C,KAAK,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEC,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAACyD,YAAY,CAAC,CAAC,CAAC,CAAC;IACnF;IACA,EAAEJ,KAAK,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEC,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC0D,aAAa,CAAC,CAAC,CAAC,CAAC;IACpF;IACA,EAAEL,KAAK,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEC,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC2D,eAAe,CAAC,CAAC,CAAC,CAAC;IACtF;IACA,EAAEN,KAAK,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEC,GAAG,EAAEpG,eAAe,CAAC6F,aAAa,CAACjD,MAAM,CAAC4D,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJ9F,CAAC,CAACwC,IAAI,CAAC,qCAAqC,CAAC;AAC1CC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACP;AACAA,CAAC,CAAC;AAAA,CACCC,iBAAiB,CAACR,qCAAqC,CAAC,CAAC,CAAC;AAC1DS,OAAO,CAAC,MAAM,EAAE,CAAC,kBAAkB,EAAE,2BAA2B,CAAU,CAAC;AAC3EA,OAAO,CAAC,eAAe,EAAEtD,qBAAqB,CAAC;AAC/CsD,OAAO,CAAC,aAAa,EAAE;AACtB,IAAI;AACJ,EAAEU,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC;AACzB,EAAED,KAAK,EAAE,GAAG,EAAEC,MAAM,EAAE,GAAG,CAAC,CAAC;AACnB;AACd,CAAC;AACAV,EAAE,CAAC,OAAM5C,CAAC,KAAI;EACb,MAAM,EAAEkJ,IAAI,EAAE/H,aAAa,EAAEgI,WAAW,CAAC,CAAC,GAAGnJ,CAAC,CAACwC,MAAM;;EAErD;EACA,MAAM4G,0BAA0B,GAAG,KAAK;;EAExC,IAAIlI,MAAqC;EACzC,IAAIqH,UAAkB,EAAEG,WAAmB;EAC3C,QAAQQ,IAAI;IACV,KAAK,kBAAkB,CAAE;QACvB,MAAMG,KAAK,GAAG,MAAM5J,yBAAyB,CAACO,CAAC,EAAEmJ,WAAW,EAAE,IAAI,CAAC;QACnEZ,UAAU,GAAGc,KAAK,CAACZ,UAAU;QAC7BC,WAAW,GAAGW,KAAK,CAACT,WAAW;QAC/B1H,MAAM,GAAGmI,KAAK;QACd;MACF;IACA,KAAK,2BAA2B,CAAE;QAChC,MAAMvC,KAAK,GAAG,MAAMpH,uBAAuB,CAACM,CAAC,EAAEmJ,WAAW,CAAC;QAC3DZ,UAAU,GAAGzB,KAAK,CAAC0B,YAAY;QAC/BE,WAAW,GAAG5B,KAAK,CAAC6B,aAAa;QACjCzH,MAAM,GAAG4F,KAAK;QACd;MACF;IACA;MACEjI,WAAW,CAAC,CAAC;EACjB;;EAEA;EACA,MAAMyK,YAAY,GAAGtK,YAAY,CAACgB,CAAC,EAAE,UAAU,EAAEuI,UAAU,EAAEG,WAAW,CAAC;EACzE,IAAIU,0BAA0B,EAAE;IAC9BG,QAAQ,CAACC,IAAI,CAACC,MAAM,CAACF,QAAQ,CAACG,aAAa,CAAC,IAAI,CAAC,CAAC;IAClDH,QAAQ,CAACC,IAAI,CAACC,MAAM,CAACH,YAAY,CAAC;EACpC;;EAEA,MAAMK,aAAa,GAAGL,YAAY,CAACtD,UAAU,CAAC,QAAQ,CAAE;EACxD2D,aAAa,CAACC,SAAS,CAAC;IACtBzJ,MAAM,EAAEH,CAAC,CAACG,MAAM;IAChBU,MAAM,EAAEhB,OAAO;IACf2D,KAAK,EAAEC,eAAe,CAACE,iBAAiB,GAAGF,eAAe,CAACC;EAC7D,CAAC,CAAC;EACF,MAAMR,eAAe,GAAGyG,aAAa,CAACE,iBAAiB,CAAC,CAAC;;EAEzD,MAAM3J,QAAQ,GAAGH,yCAAyC,CAACC,CAAC,CAAC;EAC7D,MAAM0B,SAAS,GAAGV,0CAA0C;IAC1DhB,CAAC;IACDA,CAAC,CAACwC,MAAM,CAACvB,0BAA0B;IACnCC,MAAM;IACNhB,QAAQ;IACRiB;EACF,CAAC;;EAED,MAAMyC,cAAc,GAAG5D,CAAC,CAACG,MAAM,CAAC0D,oBAAoB,CAAC,CAAC;EACtD,MAAMC,WAAW,GAAGF,cAAc,CAACG,eAAe,CAAC;IACjDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAEf,eAAe,CAACgB,UAAU,CAAC,CAAC;MAClCC,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEtE,CAAC,EAAE,GAAG,EAAEuE,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;MAC9CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC,CAAC;EACFV,WAAW,CAACW,WAAW,CAACvE,QAAQ,CAAC;EACjC4D,WAAW,CAACY,YAAY,CAAC,CAAC,EAAEhD,SAAS,CAAC;EACtCoC,WAAW,CAACa,IAAI,CAAC,CAAC,CAAC;EACnBb,WAAW,CAACc,GAAG,CAAC,CAAC;EACjB5E,CAAC,CAACG,MAAM,CAAC0E,KAAK,CAACC,MAAM,CAAC,CAAClB,cAAc,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMe,MAAM,GAAG9G,YAAY,CAACgB,CAAC,EAAE,UAAU,EAAEuI,UAAU,EAAEG,WAAW,CAAC;EACnE,IAAIU,0BAA0B,EAAE;IAC9BG,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC3D,MAAM,CAAC;EAC9B;;EAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,EAAE,EAAExE,UAAU,EAAEL,aAAa,CAAC,CAAC,CAAC;;EAE5E,IAAI4E,aAAa,KAAK,IAAI,EAAE;IAC1B/F,CAAC,CAACgD,IAAI,CAAC,2CAA2C,CAAC;EACrD;;EAEA,MAAMiD,GAAG,GAAGF,aAAyC;EACrDE,GAAG,CAAC6D,SAAS,CAAC5I,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEqH,UAAU,EAAEG,WAAW,CAAC;;EAEpD,MAAMlC,SAAS,GAAGP,GAAG,CAACQ,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE8B,UAAU,EAAEG,WAAW,EAAE;IAChElH,UAAU,EAAEL;EACd,CAAC,CAAC;;EAEF,MAAM4I,YAAY,GAAG/J,CAAC,CAACgK,iCAAiC,CAAC;IACvDC,SAAS,EAAEzD,SAAS,CAACO,IAAI;IACzBmD,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACjBC,OAAO,EAAE,CAAC5B,UAAU,EAAEG,WAAW,CAAC;IAClC0B,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACjBC,OAAO,EAAE,CAAC9B,UAAU,EAAEG,WAAW,CAAC;IAClC4B,WAAW,EAAE,CAAC/B,UAAU,EAAEG,WAAW,CAAC;IACtC7H,MAAM,EAAE,YAAY;IACpB0J,iBAAiB,EAAE,KAAK;IACxBC,oBAAoB,EAAE,KAAK;IAC3BC,UAAU,EAAE;MACVC,gBAAgB,EAAE,KAAK;MACvBC,gBAAgB,EAAE;IACpB;EACF,CAAC,CAAC;;EAEF7L,GAAG,CAAC8L,sCAAsC,CAAC5K,CAAC,EAAE,EAAEoF,OAAO,EAAElC,eAAe,CAAC,CAAC,EAAE6G,YAAY,EAAE;EACxFxB,UAAU;EACVG,WAAW;EACX,CAAC;EACF,CAAC;AACJ,CAAC,CAAC"}