{"version":3,"file":"configure.spec.js","names":["description","makeTestGroup","assert","kCanvasTextureFormats","kTextureUsages","GPUConst","kAllTextureFormats","kFeaturesForFormats","filterFormatsByFeature","textureFormatsAreViewCompatible","AllFeaturesMaxLimitsGPUTest","kAllCanvasTypes","createCanvas","g","test","desc","params","u","combine","fn","t","canvasType","canvas","ctx","getContext","GPUCanvasContext","configure","device","format","configuration","getConfiguration","expect","usage","GPUTextureUsage","RENDER_ATTACHMENT","viewFormats","length","colorSpace","toneMapping","mode","alphaMode","currentTexture","getCurrentTexture","dimension","width","height","depthOrArrayLayers","mipLevelCount","sampleCount","shouldThrow","unconfigure","newConfiguration","skipIfTextureFormatNotSupported","validFormat","canvasFormat","beginSubcases","expand","usageSet","Set","usage0","usage1","add","GPUTexture","TextureUsage","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","TEXTURE_BINDING","bgl","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","texture","createBindGroup","layout","resource","canUseStorageTextureInFragmentShader","isCompatibility","limits","maxStorageTexturesInFragmentStage","STORAGE_BINDING","storageTexture","access","COPY_DST","rgbaData","Uint8Array","writeTexture","COPY_SRC","size","dstTexture","createTextureTracked","copyTextureToTexture","zeroDimension","expectValidationError","viewFormatFeature","viewFormat","compatible"],"sources":["../../../../src/webgpu/web_platform/canvas/configure.spec.ts"],"sourcesContent":["export const description = `\nTests for GPUCanvasContext.configure.\n\nTODO:\n- Test colorSpace\n- Test toneMapping\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport { kCanvasTextureFormats, kTextureUsages } from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kAllTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  textureFormatsAreViewCompatible,\n} from '../../format_info.js';\nimport { AllFeaturesMaxLimitsGPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas } from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(AllFeaturesMaxLimitsGPUTest);\n\ng.test('defaults')\n  .desc(\n    `\n    Ensure that the defaults for GPUCanvasConfiguration are correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const { canvasType } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    const configuration = ctx.getConfiguration();\n    assert(configuration !== null);\n    t.expect(configuration.device === t.device);\n    t.expect(configuration.format === 'rgba8unorm');\n    t.expect(configuration.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n    t.expect(configuration.viewFormats.length === 0);\n    t.expect(configuration.colorSpace === 'srgb');\n    t.expect(configuration.toneMapping?.mode === 'standard');\n    t.expect(configuration.alphaMode === 'opaque');\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture.format === 'rgba8unorm');\n    t.expect(currentTexture.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n    t.expect(currentTexture.dimension === '2d');\n    t.expect(currentTexture.width === canvas.width);\n    t.expect(currentTexture.height === canvas.height);\n    t.expect(currentTexture.depthOrArrayLayers === 1);\n    t.expect(currentTexture.mipLevelCount === 1);\n    t.expect(currentTexture.sampleCount === 1);\n  });\n\ng.test('device')\n  .desc(\n    `\n    Ensure that configure reacts appropriately to various device states.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const { canvasType } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // getConfiguration returns null before configure.\n    t.expect(ctx.getConfiguration() === null);\n\n    // Calling configure without a device should throw a TypeError.\n    t.shouldThrow('TypeError', () => {\n      ctx.configure({\n        format: 'rgba8unorm',\n      } as GPUCanvasConfiguration);\n    });\n\n    // Device is not configured, so getCurrentTexture will throw an InvalidStateError.\n    t.shouldThrow('InvalidStateError', () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Calling configure with a device should succeed.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      alphaMode: 'opaque',\n    });\n\n    // getConfiguration will succeed after configure.\n    const configuration = ctx.getConfiguration();\n    assert(configuration !== null);\n    t.expect(configuration.device === t.device);\n    t.expect(configuration.format === 'rgba8unorm');\n    t.expect(configuration.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n    t.expect(configuration.viewFormats.length === 0);\n    t.expect(configuration.colorSpace === 'srgb');\n    t.expect(configuration.toneMapping?.mode === 'standard');\n    t.expect(configuration.alphaMode === 'opaque');\n\n    // getCurrentTexture will succeed with a valid device.\n    ctx.getCurrentTexture();\n\n    // Unconfiguring should cause the device to be cleared.\n    ctx.unconfigure();\n    t.shouldThrow('InvalidStateError', () => {\n      ctx.getCurrentTexture();\n    });\n\n    // getConfiguration returns null after unconfigure.\n    t.expect(ctx.getConfiguration() === null);\n\n    // Should be able to successfully configure again after unconfiguring.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      alphaMode: 'premultiplied',\n    });\n    ctx.getCurrentTexture();\n\n    // getConfiguration will succeed after configure.\n    const newConfiguration = ctx.getConfiguration();\n    assert(newConfiguration !== null);\n    t.expect(newConfiguration.device === t.device);\n    t.expect(newConfiguration.format === 'rgba8unorm');\n    t.expect(newConfiguration.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n    t.expect(newConfiguration.viewFormats.length === 0);\n    t.expect(newConfiguration.colorSpace === 'srgb');\n    t.expect(newConfiguration.toneMapping?.mode === 'standard');\n    t.expect(newConfiguration.alphaMode === 'premultiplied');\n  });\n\ng.test('format')\n  .desc(\n    `\n    Ensure that only valid texture formats are allowed when calling configure.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('format', kAllTextureFormats)\n  )\n  .fn(t => {\n    const { canvasType, format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Would prefer to use kCanvasTextureFormats.includes(format), but that's giving TS errors.\n    let validFormat = false;\n    for (const canvasFormat of kCanvasTextureFormats) {\n      if (format === canvasFormat) {\n        validFormat = true;\n        break;\n      }\n    }\n\n    if (validFormat) {\n      ctx.configure({\n        device: t.device,\n        format,\n      });\n      const configuration = ctx.getConfiguration();\n      t.expect(configuration!.format === format);\n    } else {\n      t.shouldThrow('TypeError', () => {\n        ctx.configure({\n          device: t.device,\n          format,\n        });\n      });\n    }\n  });\n\ng.test('usage')\n  .desc(\n    `\n    Ensure that getCurrentTexture returns a texture with the configured usages.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .expand('usage', () => {\n        const usageSet = new Set<number>();\n        for (const usage0 of kTextureUsages) {\n          for (const usage1 of kTextureUsages) {\n            usageSet.add(usage0 | usage1);\n          }\n        }\n        return usageSet;\n      })\n  )\n  .fn(t => {\n    const { canvasType, usage } = t.params;\n\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const configuration = ctx.getConfiguration();\n    t.expect(configuration!.usage === usage);\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture instanceof GPUTexture);\n    t.expect(currentTexture.usage === usage);\n\n    // Try to use the texture with the given usage\n\n    if (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: currentTexture.createView(),\n            clearValue: [1.0, 0.0, 0.0, 1.0],\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    if (usage & GPUConst.TextureUsage.TEXTURE_BINDING) {\n      const bgl = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: {},\n          },\n        ],\n      });\n\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: currentTexture.createView(),\n          },\n        ],\n      });\n    }\n\n    const canUseStorageTextureInFragmentShader =\n      !t.isCompatibility || t.device.limits.maxStorageTexturesInFragmentStage! > 0;\n\n    if (\n      (usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 &&\n      canUseStorageTextureInFragmentShader\n    ) {\n      const bgl = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            storageTexture: { access: 'write-only', format: currentTexture.format },\n          },\n        ],\n      });\n\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: currentTexture.createView(),\n          },\n        ],\n      });\n    }\n\n    if (usage & GPUConst.TextureUsage.COPY_DST) {\n      const rgbaData = new Uint8Array([255, 0, 0, 255]);\n\n      t.device.queue.writeTexture({ texture: currentTexture }, rgbaData, {}, [1, 1, 1]);\n    }\n\n    if (usage & GPUConst.TextureUsage.COPY_SRC) {\n      const size = [currentTexture.width, currentTexture.height, 1];\n      const dstTexture = t.createTextureTracked({\n        format: currentTexture.format,\n        usage: GPUTextureUsage.COPY_DST,\n        size,\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyTextureToTexture({ texture: currentTexture }, { texture: dstTexture }, size);\n      t.device.queue.submit([encoder.finish()]);\n    }\n  });\n\ng.test('alpha_mode')\n  .desc(\n    `\n    Ensure that all valid alphaMode values are allowed when calling configure.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .combine('alphaMode', ['opaque', 'premultiplied'] as const)\n  )\n  .fn(t => {\n    const { canvasType, alphaMode } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      alphaMode,\n    });\n\n    const configuration = ctx.getConfiguration();\n    t.expect(configuration!.alphaMode === alphaMode);\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture instanceof GPUTexture);\n  });\n\ng.test('size_zero_before_configure')\n  .desc(`Ensure a validation error is raised in configure() if the size of the canvas is zero.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('zeroDimension', ['width', 'height'] as const)\n  )\n  .fn(t => {\n    const { canvasType, zeroDimension } = t.params;\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    canvas[zeroDimension] = 0;\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Validation error, the canvas size is 0 which doesn't make a valid GPUTextureDescriptor.\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format: 'bgra8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n    });\n\n    canvas[zeroDimension] = 1;\n\n    // The size being incorrect doesn't make for an invalid configuration. Now that it is fixed\n    // getting textures from the canvas should work.\n    const currentTexture = ctx.getCurrentTexture();\n\n    // Try rendering to it even!\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: currentTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n  });\n\ng.test('size_zero_after_configure')\n  .desc(\n    `Ensure a validation error is raised after configure() if the size of the canvas becomes zero.`\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('zeroDimension', ['width', 'height'] as const)\n  )\n  .fn(t => {\n    const { canvasType, zeroDimension } = t.params;\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    canvas[zeroDimension] = 0;\n\n    // The size is incorrect, we should be getting an error texture and a validation error.\n    let currentTexture: GPUTexture;\n    t.expectValidationError(() => {\n      currentTexture = ctx.getCurrentTexture();\n    });\n\n    t.expect(currentTexture![zeroDimension] === 0);\n\n    // Using the texture should produce a validation error.\n    t.expectValidationError(() => {\n      currentTexture.createView();\n    });\n  });\n\ng.test('viewFormats')\n  .desc(\n    `Test the validation that viewFormats are compatible with the format (for all canvas format / view formats)`\n  )\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('format', kCanvasTextureFormats)\n      .combine('viewFormatFeature', kFeaturesForFormats)\n      .beginSubcases()\n      .expand('viewFormat', ({ viewFormatFeature }) =>\n        filterFormatsByFeature(viewFormatFeature, kAllTextureFormats)\n      )\n  )\n  .fn(t => {\n    const { canvasType, format, viewFormat } = t.params;\n\n    t.skipIfTextureFormatNotSupported(viewFormat);\n\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const compatible = textureFormatsAreViewCompatible(t.device, format, viewFormat);\n\n    // Test configure() produces an error if the formats aren't compatible.\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format,\n        viewFormats: [viewFormat],\n      });\n    }, !compatible);\n\n    const viewFormats = ctx.getConfiguration()!.viewFormats;\n    t.expect(viewFormats[0] === viewFormat);\n\n    // Likewise for getCurrentTexture().\n    let currentTexture: GPUTexture;\n    t.expectValidationError(() => {\n      currentTexture = ctx.getCurrentTexture();\n    }, !compatible);\n\n    // The returned texture is an error texture.\n    t.expectValidationError(() => {\n      currentTexture.createView();\n    }, !compatible);\n  });\n"],"mappings":"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"}