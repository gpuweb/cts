{"version":3,"file":"readbackFromWebGPUCanvas.spec.js","names":["description","makeTestGroup","ErrorWithExtra","assert","raceWithRejectOnTimeout","unreachable","kCanvasAlphaModes","kCanvasColorSpaces","kCanvasTextureFormats","GPUTest","checkElementsEqual","kAllCanvasTypes","createCanvas","createOnscreenCanvas","createOffscreenCanvas","TexelView","findFailedPixels","g","kPixelValue","kPixelValueFloat","expect","Uint8ClampedArray","convertRGBA8UnormBytesToColorSpace","expected","srcColorSpace","dstColorSpace","srcImgData","ImageData","colorSpace","data","set","dstCanvas","OffscreenCanvas","dstCtx","getContext","putImageData","getImageData","initWebGPUCanvasContent","t","format","alphaMode","canvasType","canvas","ctx","GPUCanvasContext","configure","device","usage","GPUTextureUsage","COPY_SRC","COPY_DST","canvasTexture","getCurrentTexture","tempTexture","createTextureTracked","size","width","height","depthOrArrayLayers","RENDER_ATTACHMENT","tempTextureView","createView","encoder","createCommandEncoder","clearOnePixel","origin","color","pass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","end","copyTextureToTexture","texture","queue","submit","finish","destroy","drawImageSourceIntoCanvas","image","drawImage","checkImageResultWithSameColorSpaceCanvas","sourceColorSpace","readPixelsFrom2DCanvasAndCompare","checkImageResultWithDifferentColorSpaceCanvas","sourceData","destinationColorSpace","fromWebGPUCtx","checkImageResult","maxDiffULPsForNormFormat","actual","subrectOrigin","subrectSize","areaDesc","bytesPerRow","rowsPerImage","actTexelView","fromTextureDataByReference","expTexelView","failedPixelsMessage","x","y","z","undefined","msg","expectOK","test","desc","params","u","combine","fn","snapshot","snapshotType","url","toDataURL","img","Image","src","decode","blobFromCanvas","Promise","resolve","toBlob","blob","URL","createObjectURL","createImageBitmap","offscreenCanvas","convertToBlob","skip","transferToImageBitmap","webgl","upload","expectCanvas","gl","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texSubImage2D","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixels","Uint8Array","readPixels","webgpuCanvasType","canvas2DType","webgpuCanvas","actualCanvas","kWidth","kHeight","ib","readbackCanvas","readbackCanvasType","readbackContext","alpha","i","byteLength","expectValidationError","shouldThrow"],"sources":["../../../../src/webgpu/web_platform/canvas/readbackFromWebGPUCanvas.spec.ts"],"sourcesContent":["export const description = `\nTests for readback from WebGPU Canvas.\n\nThis includes testing that colorSpace makes it through from the WebGPU canvas\nto the form of copy (toDataURL, toBlob, ImageBitmap, drawImage)\n\nThe color space support is tested by drawing the readback form of the WebGPU\ncanvas into a 2D canvas of a different color space via drawImage (A). Another\n2D canvas is created with the same source data and color space as the WebGPU\ncanvas and also drawn into another 2D canvas of a different color space (B).\nThe contents of A and B should match.\n\nTODO: implement all canvas types, see TODO on kCanvasTypes.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  ErrorWithExtra,\n  assert,\n  raceWithRejectOnTimeout,\n  unreachable,\n} from '../../../common/util/util.js';\nimport {\n  kCanvasAlphaModes,\n  kCanvasColorSpaces,\n  kCanvasTextureFormats,\n} from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { checkElementsEqual } from '../../util/check_contents.js';\nimport {\n  kAllCanvasTypes,\n  CanvasType,\n  createCanvas,\n  createOnscreenCanvas,\n  createOffscreenCanvas,\n} from '../../util/create_elements.js';\nimport { TexelView } from '../../util/texture/texel_view.js';\nimport { findFailedPixels } from '../../util/texture/texture_ok.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// We choose 0x66 as the value for each color and alpha channel\n// 0x66 / 0xff = 0.4\n// Given a pixel value of RGBA = (0x66, 0, 0, 0x66) in the source WebGPU canvas,\n// For alphaMode = opaque, the copy output should be RGBA = (0x66, 0, 0, 0xff)\n// For alphaMode = premultiplied, the copy output should be RGBA = (0xff, 0, 0, 0x66)\nconst kPixelValue = 0x66;\nconst kPixelValueFloat = 0x66 / 0xff; // 0.4\n\n// Use four pixels rectangle for the test:\n// blue: top-left;\n// green: top-right;\n// red: bottom-left;\n// yellow: bottom-right;\nconst expect = {\n  /* prettier-ignore */\n  'opaque': new Uint8ClampedArray([\n           0x00,        0x00, kPixelValue, 0xff, // blue\n           0x00, kPixelValue,        0x00, 0xff, // green\n    kPixelValue,        0x00,        0x00, 0xff, // red\n    kPixelValue, kPixelValue,        0x00, 0xff, // yellow\n  ]),\n  /* prettier-ignore */\n  'premultiplied': new Uint8ClampedArray([\n    0x00, 0x00, 0xff, kPixelValue, // blue\n    0x00, 0xff, 0x00, kPixelValue, // green\n    0xff, 0x00, 0x00, kPixelValue, // red\n    0xff, 0xff, 0x00, kPixelValue, // yellow\n  ]),\n};\n\n/**\n * Given 4 pixels in rgba8unorm format, puts them into an ImageData\n * of the specified color space and then puts them into an srgb color space\n * canvas (the default). If the color space is different there will be a\n * conversion. Returns the resulting 4 pixels in rgba8unorm format.\n */\nfunction convertRGBA8UnormBytesToColorSpace(\n  expected: Uint8ClampedArray,\n  srcColorSpace: PredefinedColorSpace,\n  dstColorSpace: PredefinedColorSpace\n) {\n  const srcImgData = new ImageData(2, 2, { colorSpace: srcColorSpace });\n  srcImgData.data.set(expected);\n  const dstCanvas = new OffscreenCanvas(2, 2);\n  const dstCtx = dstCanvas.getContext('2d', { colorSpace: dstColorSpace });\n  assert(dstCtx !== null);\n  dstCtx.putImageData(srcImgData, 0, 0);\n  return dstCtx.getImageData(0, 0, 2, 2).data;\n}\n\nfunction initWebGPUCanvasContent<T extends CanvasType>(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  alphaMode: GPUCanvasAlphaMode,\n  colorSpace: PredefinedColorSpace,\n  canvasType: T\n) {\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    alphaMode,\n    colorSpace,\n  });\n\n  const canvasTexture = ctx.getCurrentTexture();\n  const tempTexture = t.createTextureTracked({\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const tempTextureView = tempTexture.createView();\n  const encoder = t.device.createCommandEncoder();\n\n  const clearOnePixel = (origin: GPUOrigin3D, color: GPUColor) => {\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        { view: tempTextureView, clearValue: color, loadOp: 'clear', storeOp: 'store' },\n      ],\n    });\n    pass.end();\n    encoder.copyTextureToTexture(\n      { texture: tempTexture },\n      { texture: canvasTexture, origin },\n      { width: 1, height: 1 }\n    );\n  };\n\n  clearOnePixel([0, 0], [0, 0, kPixelValueFloat, kPixelValueFloat]);\n  clearOnePixel([1, 0], [0, kPixelValueFloat, 0, kPixelValueFloat]);\n  clearOnePixel([0, 1], [kPixelValueFloat, 0, 0, kPixelValueFloat]);\n  clearOnePixel([1, 1], [kPixelValueFloat, kPixelValueFloat, 0, kPixelValueFloat]);\n\n  t.device.queue.submit([encoder.finish()]);\n  tempTexture.destroy();\n\n  return canvas;\n}\n\nfunction drawImageSourceIntoCanvas(\n  t: GPUTest,\n  image: CanvasImageSource,\n  colorSpace: PredefinedColorSpace\n) {\n  const canvas = createOffscreenCanvas(t, 2, 2);\n  const ctx = canvas.getContext('2d', { colorSpace });\n  assert(ctx !== null);\n  ctx.drawImage(image, 0, 0);\n  return ctx;\n}\n\nfunction checkImageResultWithSameColorSpaceCanvas(\n  t: GPUTest,\n  image: CanvasImageSource,\n  sourceColorSpace: PredefinedColorSpace,\n  expect: Uint8ClampedArray\n) {\n  const ctx = drawImageSourceIntoCanvas(t, image, sourceColorSpace);\n  readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n}\n\nfunction checkImageResultWithDifferentColorSpaceCanvas(\n  t: GPUTest,\n  image: CanvasImageSource,\n  sourceColorSpace: PredefinedColorSpace,\n  sourceData: Uint8ClampedArray\n) {\n  const destinationColorSpace = sourceColorSpace === 'srgb' ? 'display-p3' : 'srgb';\n\n  // draw the WebGPU derived data into a canvas\n  const fromWebGPUCtx = drawImageSourceIntoCanvas(t, image, destinationColorSpace);\n\n  const expect = convertRGBA8UnormBytesToColorSpace(\n    sourceData,\n    sourceColorSpace,\n    destinationColorSpace\n  );\n\n  readPixelsFrom2DCanvasAndCompare(t, fromWebGPUCtx, expect, 2);\n}\n\nfunction checkImageResult(\n  t: GPUTest,\n  image: CanvasImageSource,\n  sourceColorSpace: PredefinedColorSpace,\n  expect: Uint8ClampedArray\n) {\n  // canvas(colorSpace)->img(colorSpace)->canvas(colorSpace).drawImage->canvas(colorSpace).getImageData->actual\n  // hard coded data->expected\n  checkImageResultWithSameColorSpaceCanvas(t, image, sourceColorSpace, expect);\n\n  // canvas(colorSpace)->img(colorSpace)->canvas(diffColorSpace).drawImage->canvas(diffColorSpace).getImageData->actual\n  // hard coded data->ImageData(colorSpace)->canvas(diffColorSpace).putImageData->canvas(diffColorSpace).getImageData->expected\n  checkImageResultWithDifferentColorSpaceCanvas(t, image, sourceColorSpace, expect);\n}\n\nfunction readPixelsFrom2DCanvasAndCompare(\n  t: GPUTest,\n  ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n  expect: Uint8ClampedArray,\n  maxDiffULPsForNormFormat = 0\n) {\n  const { width, height } = ctx.canvas;\n  const actual = ctx.getImageData(0, 0, width, height).data;\n\n  const subrectOrigin = [0, 0, 0];\n  const subrectSize = [width, height, 1];\n\n  const areaDesc = {\n    bytesPerRow: width * 4,\n    rowsPerImage: height,\n    subrectOrigin,\n    subrectSize,\n  };\n\n  const format = 'rgba8unorm';\n  const actTexelView = TexelView.fromTextureDataByReference(format, actual, areaDesc);\n  const expTexelView = TexelView.fromTextureDataByReference(format, expect, areaDesc);\n\n  const failedPixelsMessage = findFailedPixels(\n    format,\n    { x: 0, y: 0, z: 0 },\n    { width, height, depthOrArrayLayers: 1 },\n    { actTexelView, expTexelView },\n    { maxDiffULPsForNormFormat }\n  );\n\n  if (failedPixelsMessage !== undefined) {\n    const msg = 'Canvas had unexpected contents:\\n' + failedPixelsMessage;\n    t.expectOK(\n      new ErrorWithExtra(msg, () => ({\n        expTexelView,\n        actTexelView,\n      }))\n    );\n  }\n}\n\ng.test('onscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of canvas with WebGPU context is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - colorSpace = {\"srgb\", \"display-p3\"}\n    - snapshot methods = {convertToBlob, transferToImageBitmap, createImageBitmap}\n\n    TODO: Snapshot canvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('colorSpace', kCanvasColorSpaces)\n      .combine('snapshotType', ['toDataURL', 'toBlob', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const canvas = initWebGPUCanvasContent(\n      t,\n      t.params.format,\n      t.params.alphaMode,\n      t.params.colorSpace,\n      'onscreen'\n    );\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'toDataURL': {\n        const url = canvas.toDataURL();\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'toBlob': {\n        const blobFromCanvas = new Promise(resolve => {\n          canvas.toBlob(blob => resolve(blob));\n        });\n        const blob = (await blobFromCanvas) as Blob;\n        const url = URL.createObjectURL(blob);\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, t.params.colorSpace, expect[t.params.alphaMode]);\n  });\n\ng.test('offscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of offscreenCanvas with WebGPU context is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - colorSpace = {\"srgb\", \"display-p3\"}\n    - snapshot methods = {convertToBlob, transferToImageBitmap, createImageBitmap}\n\n    TODO: Snapshot offscreenCanvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('colorSpace', kCanvasColorSpaces)\n      .combine('snapshotType', ['convertToBlob', 'transferToImageBitmap', 'imageBitmap'] as const)\n  )\n  .fn(async t => {\n    const offscreenCanvas = initWebGPUCanvasContent(\n      t,\n      t.params.format,\n      t.params.alphaMode,\n      t.params.colorSpace,\n      'offscreen'\n    );\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'convertToBlob': {\n        if (typeof offscreenCanvas.convertToBlob === 'undefined') {\n          t.skip(\"Browser doesn't support OffscreenCanvas.convertToBlob\");\n          return;\n        }\n        const blob = await offscreenCanvas.convertToBlob();\n        snapshot = await createImageBitmap(blob);\n        break;\n      }\n      case 'transferToImageBitmap': {\n        if (typeof offscreenCanvas.transferToImageBitmap === 'undefined') {\n          t.skip(\"Browser doesn't support OffscreenCanvas.transferToImageBitmap\");\n          return;\n        }\n        snapshot = offscreenCanvas.transferToImageBitmap();\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(offscreenCanvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, t.params.colorSpace, expect[t.params.alphaMode]);\n  });\n\ng.test('onscreenCanvas,uploadToWebGL')\n  .desc(\n    `\n    Ensure upload WebGPU context canvas to webgl texture is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - upload methods = {texImage2D, texSubImage2D}\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('webgl', ['webgl', 'webgl2'])\n      .combine('upload', ['texImage2D', 'texSubImage2D'])\n  )\n  .fn(t => {\n    const { format, webgl, upload } = t.params;\n    const canvas = initWebGPUCanvasContent(t, format, t.params.alphaMode, 'srgb', 'onscreen');\n\n    const expectCanvas: HTMLCanvasElement = createOnscreenCanvas(t, canvas.width, canvas.height);\n    const gl = expectCanvas.getContext(webgl) as WebGLRenderingContext | WebGL2RenderingContext;\n    if (gl === null) {\n      return;\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    switch (upload) {\n      case 'texImage2D': {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      case 'texSubImage2D': {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          canvas.width,\n          canvas.height,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          null\n        );\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    const fb = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    const pixels = new Uint8Array(canvas.width * canvas.height * 4);\n    gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    const actual = new Uint8ClampedArray(pixels);\n\n    t.expectOK(checkElementsEqual(actual, expect[t.params.alphaMode]));\n  });\n\ng.test('drawTo2DCanvas')\n  .desc(\n    `\n    Ensure draw WebGPU context canvas to 2d context canvas/offscreenCanvas is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - colorSpace = {\"srgb\", \"display-p3\"}\n    - WebGPU canvas type = {\"onscreen\", \"offscreen\"}\n    - 2d canvas type = {\"onscreen\", \"offscreen\"}\n\n\n    * makes a webgpu canvas with the given colorSpace and puts data in via copy convoluted\n      copy process\n    * makes a 2d canvas with 'srgb' colorSpace (the default)\n    * draws the webgpu canvas into the 2d canvas so if the color spaces do not match\n      there will be a conversion.\n    * gets the pixels from the 2d canvas via getImageData\n    * compares them to hard coded values that are converted to expected values by copying\n      to an ImageData of the given color space, and then using putImageData into an srgb canvas.\n\n      canvas(colorSpace) -> canvas(srgb).drawImage -> canvas(srgb).getImageData -> actual\n      ImageData(colorSpace) -> canvas(srgb).putImageData -> canvas(srgb).getImageData -> expected\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('colorSpace', kCanvasColorSpaces)\n      .combine('webgpuCanvasType', kAllCanvasTypes)\n      .combine('canvas2DType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const { format, webgpuCanvasType, alphaMode, colorSpace, canvas2DType } = t.params;\n\n    const webgpuCanvas = initWebGPUCanvasContent(\n      t,\n      format,\n      alphaMode,\n      colorSpace,\n      webgpuCanvasType\n    );\n\n    const actualCanvas = createCanvas(t, canvas2DType, webgpuCanvas.width, webgpuCanvas.height);\n    const ctx = actualCanvas.getContext('2d') as CanvasRenderingContext2D;\n    if (ctx === null) {\n      t.skip(canvas2DType + ' canvas cannot get 2d context');\n      return;\n    }\n\n    ctx.drawImage(webgpuCanvas, 0, 0);\n\n    readPixelsFrom2DCanvasAndCompare(\n      t,\n      ctx,\n      convertRGBA8UnormBytesToColorSpace(expect[t.params.alphaMode], colorSpace, 'srgb')\n    );\n  });\n\ng.test('transferToImageBitmap_unconfigured_nonzero_size')\n  .desc(\n    `Regression test for a crash when calling transferImageBitmap on an unconfigured. Case where the canvas is not empty`\n  )\n  .params(u => u.combine('readbackCanvasType', ['onscreen', 'offscreen'] as const))\n  .fn(t => {\n    const kWidth = 2;\n    const kHeight = 3;\n    const canvas = createCanvas(t, 'offscreen', kWidth, kHeight);\n    canvas.getContext('webgpu');\n\n    // Transferring gives an ImageBitmap of the correct size filled with transparent black.\n    const ib = canvas.transferToImageBitmap();\n    t.expect(ib.width === kWidth);\n    t.expect(ib.height === kHeight);\n\n    const readbackCanvas = createCanvas(t, t.params.readbackCanvasType, kWidth, kHeight);\n    const readbackContext = readbackCanvas.getContext('2d', {\n      alpha: true,\n    });\n    if (readbackContext === null) {\n      t.skip('Cannot get a 2D canvas context');\n      return;\n    }\n\n    // Since there isn't a configuration we expect the ImageBitmap to have the default alphaMode of \"opaque\".\n    const expected = new Uint8ClampedArray(kWidth * kHeight * 4);\n    for (let i = 0; i < expected.byteLength; i += 4) {\n      expected[i + 0] = 0;\n      expected[i + 1] = 0;\n      expected[i + 2] = 0;\n      expected[i + 3] = 255;\n    }\n\n    readbackContext.drawImage(ib, 0, 0);\n    readPixelsFrom2DCanvasAndCompare(t, readbackContext, expected);\n  });\n\ng.test('transferToImageBitmap_zero_size')\n  .desc(\n    `Regression test for a crash when calling transferImageBitmap on an unconfigured. Case where the canvas is empty.\n\n    TODO: Spec and expect a particular Exception type here.`\n  )\n  .params(u => u.combine('configure', [true, false]))\n  .fn(t => {\n    const { configure } = t.params;\n    const canvas = createCanvas(t, 'offscreen', 0, 1);\n    const ctx = canvas.getContext('webgpu')!;\n\n    if (configure) {\n      t.expectValidationError(() => ctx.configure({ device: t.device, format: 'bgra8unorm' }));\n    }\n\n    // Transferring would give an empty ImageBitmap which is not possible, so an Exception is thrown.\n    t.shouldThrow(true, () => {\n      canvas.transferToImageBitmap();\n    });\n  });\n\ng.test('transferToImageBitmap_huge_size')\n  .desc(`Regression test for a crash when calling transferImageBitmap on a HUGE canvas.`)\n  .fn(t => {\n    const canvas = createCanvas(t, 'offscreen', 1000000, 1000000);\n    canvas.getContext('webgpu')!;\n\n    // Transferring to such a HUGE image bitmap would not be possible, so an Exception is thrown.\n    t.shouldThrow(true, () => {\n      canvas.transferToImageBitmap();\n    });\n  });\n"],"mappings":"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"}