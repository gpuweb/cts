{"version":3,"file":"canvas_complex.html.js","names":["assert","unreachable","getBlockInfoForColorTextureFormat","gammaDecompress","float32ToFloat16Bits","align","runRefTest","run","format","targets","t","shaderValue","isOutputSrgb","shaderValueStr","toFixed","copyBufferToTexture","ctx","rows","canvas","height","bytesPerBlock","bytesPerPixel","bytesPerRow","width","componentsPerPixel","buffer","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","red","green","blue","yellow","mapping","getMappedRange","data","Uint8Array","Uint16Array","i","j","pixel","set","unmap","encoder","createCommandEncoder","label","texture","getCurrentTexture","queue","submit","finish","getImageBitmap","Uint8ClampedArray","offset","imageData","ImageData","createImageBitmap","setupSrcTexture","imageBitmap","srcWidth","srcHeight","srcTexture","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","COPY_DST","copyExternalImageToTexture","source","copyTextureToTexture","mipLevel","origin","x","y","z","DrawTextureSample","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","sampler","createSampler","magFilter","minFilter","uniformBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","renderPassDescriptor","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","passEncoder","beginRenderPass","setPipeline","setBindGroup","draw","end","DrawVertexColor","DrawFragcoord","halfCanvasWidthStr","halfCanvasHeightStr","FragmentTextureStore","bg","outputTexture","ComputeWorkgroup1x1TextureStore","createComputePipeline","compute","pass","beginComputePass","dispatchWorkgroups","ComputeWorkgroup16x16TextureStore","canvasWidthStr","canvasHeightStr","cvs","writeCanvasMethod","getContext","GPUCanvasContext","STORAGE_BINDING","configure"],"sources":["../../../../src/webgpu/web_platform/reftests/canvas_complex.html.ts"],"sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { ColorTextureFormat, getBlockInfoForColorTextureFormat } from '../../format_info.js';\nimport { gammaDecompress, float32ToFloat16Bits } from '../../util/conversion.js';\nimport { align } from '../../util/math.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\ntype WriteCanvasMethod =\n  | 'copyBufferToTexture'\n  | 'copyTextureToTexture'\n  | 'copyExternalImageToTexture'\n  | 'DrawTextureSample'\n  | 'DrawVertexColor'\n  | 'DrawFragcoord'\n  | 'FragmentTextureStore'\n  | 'ComputeWorkgroup1x1TextureStore'\n  | 'ComputeWorkgroup16x16TextureStore';\n\nexport function run(\n  format: ColorTextureFormat,\n  targets: { cvs: HTMLCanvasElement; writeCanvasMethod: WriteCanvasMethod }[]\n) {\n  runRefTest(async t => {\n    let shaderValue: number = 0x66 / 0xff;\n    let isOutputSrgb = false;\n    switch (format) {\n      case 'bgra8unorm':\n      case 'rgba8unorm':\n      case 'rgba16float':\n        break;\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm-srgb':\n        // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n\n        // Reverse gammaCompress to get same value shader output as non-srgb formats:\n        shaderValue = gammaDecompress(shaderValue);\n        isOutputSrgb = true;\n        break;\n      default:\n        unreachable();\n    }\n    const shaderValueStr = shaderValue.toFixed(5);\n\n    function copyBufferToTexture(ctx: GPUCanvasContext) {\n      const rows = ctx.canvas.height;\n      const { bytesPerBlock: bytesPerPixel } = getBlockInfoForColorTextureFormat(format);\n      const bytesPerRow = align(bytesPerPixel * ctx.canvas.width, 256);\n      const componentsPerPixel = 4;\n\n      const buffer = t.device.createBuffer({\n        mappedAtCreation: true,\n        size: rows * bytesPerRow,\n        usage: GPUBufferUsage.COPY_SRC,\n      });\n      // These are run only once per test, so there are no wasted reallocations below.\n      let red: Uint8Array | Uint16Array;\n      let green: Uint8Array | Uint16Array;\n      let blue: Uint8Array | Uint16Array;\n      let yellow: Uint8Array | Uint16Array;\n\n      const mapping = buffer.getMappedRange();\n      let data: Uint8Array | Uint16Array;\n      switch (format) {\n        case 'bgra8unorm':\n        case 'bgra8unorm-srgb':\n          {\n            data = new Uint8Array(mapping);\n            red = new Uint8Array([0x00, 0x00, 0x66, 0xff]);\n            green = new Uint8Array([0x00, 0x66, 0x00, 0xff]);\n            blue = new Uint8Array([0x66, 0x00, 0x00, 0xff]);\n            yellow = new Uint8Array([0x00, 0x66, 0x66, 0xff]);\n          }\n          break;\n        case 'rgba8unorm':\n        case 'rgba8unorm-srgb':\n          {\n            data = new Uint8Array(mapping);\n            red = new Uint8Array([0x66, 0x00, 0x00, 0xff]);\n            green = new Uint8Array([0x00, 0x66, 0x00, 0xff]);\n            blue = new Uint8Array([0x00, 0x00, 0x66, 0xff]);\n            yellow = new Uint8Array([0x66, 0x66, 0x00, 0xff]);\n          }\n          break;\n        case 'rgba16float':\n          {\n            data = new Uint16Array(mapping);\n            red = new Uint16Array([\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(1.0),\n            ]);\n            green = new Uint16Array([\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(1.0),\n            ]);\n            blue = new Uint16Array([\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(1.0),\n            ]);\n            yellow = new Uint16Array([\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(1.0),\n            ]);\n          }\n          break;\n        default:\n          unreachable();\n      }\n      for (let i = 0; i < ctx.canvas.width; ++i)\n        for (let j = 0; j < ctx.canvas.height; ++j) {\n          let pixel: Uint8Array | Uint16Array;\n          if (i < ctx.canvas.width / 2) {\n            if (j < ctx.canvas.height / 2) {\n              pixel = red;\n            } else {\n              pixel = blue;\n            }\n          } else {\n            if (j < ctx.canvas.height / 2) {\n              pixel = green;\n            } else {\n              pixel = yellow;\n            }\n          }\n          data.set(pixel, (i + j * (bytesPerRow / bytesPerPixel)) * componentsPerPixel);\n        }\n      buffer.unmap();\n\n      const encoder = t.device.createCommandEncoder({\n        label: 'canvas_complex:copyBufferToTexture',\n      });\n      encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture: ctx.getCurrentTexture() }, [\n        ctx.canvas.width,\n        ctx.canvas.height,\n        1,\n      ]);\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function getImageBitmap(ctx: GPUCanvasContext): Promise<ImageBitmap> {\n      const data = new Uint8ClampedArray(ctx.canvas.width * ctx.canvas.height * 4);\n      for (let i = 0; i < ctx.canvas.width; ++i)\n        for (let j = 0; j < ctx.canvas.height; ++j) {\n          const offset = (i + j * ctx.canvas.width) * 4;\n          if (i < ctx.canvas.width / 2) {\n            if (j < ctx.canvas.height / 2) {\n              data.set([0x66, 0x00, 0x00, 0xff], offset);\n            } else {\n              data.set([0x00, 0x00, 0x66, 0xff], offset);\n            }\n          } else {\n            if (j < ctx.canvas.height / 2) {\n              data.set([0x00, 0x66, 0x00, 0xff], offset);\n            } else {\n              data.set([0x66, 0x66, 0x00, 0xff], offset);\n            }\n          }\n        }\n      const imageData = new ImageData(data, ctx.canvas.width, ctx.canvas.height);\n      return createImageBitmap(imageData);\n    }\n\n    function setupSrcTexture(imageBitmap: ImageBitmap): GPUTexture {\n      const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n      const srcTexture = t.device.createTexture({\n        size: [srcWidth, srcHeight, 1],\n        format,\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.COPY_SRC,\n      });\n      t.device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, [\n        imageBitmap.width,\n        imageBitmap.height,\n      ]);\n      return srcTexture;\n    }\n\n    async function copyExternalImageToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap(ctx);\n      t.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap },\n        { texture: ctx.getCurrentTexture() },\n        [imageBitmap.width, imageBitmap.height]\n      );\n    }\n\n    async function copyTextureToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap(ctx);\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const encoder = t.device.createCommandEncoder({\n        label: 'canvas_complex:copyTextureToTexture',\n      });\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { texture: ctx.getCurrentTexture(), mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        [imageBitmap.width, imageBitmap.height, 1]\n      );\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    async function DrawTextureSample(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap(ctx);\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var uv = array<vec2<f32>, 6>(\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(1.0, 1.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(0.0, 0.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\nfn gammaDecompress(n: f32) -> f32 {\n  var r = n;\n  if (r <= 0.04045) {\n    r = r * 25.0 / 323.0;\n  } else {\n    r = pow((200.0 * r + 11.0) / 121.0, 12.0 / 5.0);\n  }\n  r = clamp(r, 0.0, 1.0);\n  return r;\n}\n\n@fragment\nfn srgbMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  var result = textureSample(myTexture, mySampler, fragUV);\n  result.r = gammaDecompress(result.r);\n  result.g = gammaDecompress(result.g);\n  result.b = gammaDecompress(result.b);\n  return result;\n}\n\n@fragment\nfn linearMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n            `,\n          }),\n          entryPoint: isOutputSrgb ? 'srgbMain' : 'linearMain',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const sampler = t.device.createSampler({\n        magFilter: 'nearest',\n        minFilter: 'nearest',\n      });\n\n      const uniformBindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: sampler,\n          },\n          {\n            binding: 1,\n            resource: srcTexture.createView(),\n          },\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder({ label: 'DrawTextureSample' });\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, uniformBindGroup);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawVertexColor(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragColor : vec4<f32>,\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>( 0.5, -0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>(-0.5,  0.5));\n\n  var offset = array<vec2<f32>, 4>(\n    vec2<f32>( -0.5,  0.5),\n    vec2<f32>( 0.5, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>( 0.5,  -0.5));\n\n  var color = array<vec4<f32>, 4>(\n      vec4<f32>(${shaderValueStr}, 0.0, 0.0, 1.0),\n      vec4<f32>(0.0, ${shaderValueStr}, 0.0, 1.0),\n      vec4<f32>(0.0, 0.0, ${shaderValueStr}, 1.0),\n      vec4<f32>(${shaderValueStr}, ${shaderValueStr}, 0.0, 1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\n  output.fragColor = color[VertexIndex / 6u];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@fragment\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\n  return fragColor;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder({ label: 'DrawVertexColor' });\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(24, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawFragcoord(ctx: GPUCanvasContext) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@fragment\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x < ${halfCanvasWidthStr}u) {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder({ label: 'DrawFragcoord' });\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function FragmentTextureStore(ctx: GPUCanvasContext) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@fragment\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x < ${halfCanvasWidthStr}u) {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(coord), color);\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const outputTexture = t.device.createTexture({\n        format,\n        size: [ctx.canvas.width, ctx.canvas.height, 1],\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: outputTexture.createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder({ label: 'FragmentTextureStore' });\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bg);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function ComputeWorkgroup1x1TextureStore(ctx: GPUCanvasContext) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@compute @workgroup_size(1, 1, 1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (GlobalInvocationID.x < ${halfCanvasWidthStr}u) {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(GlobalInvocationID.xy), color);\n  return;\n}\n          `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder({ label: 'ComputeWorkgroup1x1TextureStore' });\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(ctx.canvas.width, ctx.canvas.height, 1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function ComputeWorkgroup16x16TextureStore(ctx: GPUCanvasContext) {\n      const canvasWidthStr = ctx.canvas.width.toFixed();\n      const canvasHeightStr = ctx.canvas.height.toFixed();\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@compute @workgroup_size(16, 16, 1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  if (GlobalInvocationID.x >= ${canvasWidthStr}u ||\n      GlobalInvocationID.y >= ${canvasHeightStr}u) {\n        return;\n  }\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (GlobalInvocationID.x < ${halfCanvasWidthStr}u) {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(GlobalInvocationID.xy), color);\n  return;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder({ label: 'ComputeWorkgroup16x16TextureStore' });\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(\n        align(ctx.canvas.width, 16) / 16,\n        align(ctx.canvas.height, 16) / 16,\n        1\n      );\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    for (const { cvs, writeCanvasMethod } of targets) {\n      const ctx = cvs.getContext('webgpu');\n      assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n      let usage: GPUTextureUsageFlags;\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n        case 'copyTextureToTexture':\n          usage = GPUTextureUsage.COPY_DST;\n          break;\n        case 'copyExternalImageToTexture':\n          usage = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'DrawTextureSample':\n        case 'DrawVertexColor':\n        case 'DrawFragcoord':\n          usage = GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'FragmentTextureStore':\n        case 'ComputeWorkgroup1x1TextureStore':\n        case 'ComputeWorkgroup16x16TextureStore':\n          usage = GPUTextureUsage.STORAGE_BINDING;\n          break;\n        default:\n          unreachable();\n      }\n\n      ctx.configure({\n        device: t.device,\n        format,\n        usage,\n      });\n\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n          copyBufferToTexture(ctx);\n          break;\n        case 'copyExternalImageToTexture':\n          await copyExternalImageToTexture(ctx);\n          break;\n        case 'copyTextureToTexture':\n          await copyTextureToTexture(ctx);\n          break;\n        case 'DrawTextureSample':\n          await DrawTextureSample(ctx);\n          break;\n        case 'DrawVertexColor':\n          DrawVertexColor(ctx);\n          break;\n        case 'DrawFragcoord':\n          DrawFragcoord(ctx);\n          break;\n        case 'FragmentTextureStore':\n          FragmentTextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup1x1TextureStore':\n          ComputeWorkgroup1x1TextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup16x16TextureStore':\n          ComputeWorkgroup16x16TextureStore(ctx);\n          break;\n        default:\n          unreachable();\n      }\n    }\n  });\n}\n"],"mappings":"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"}