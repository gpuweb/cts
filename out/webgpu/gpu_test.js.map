{"version":3,"file":"gpu_test.js","names":["Fixture","SubcaseBatchState","globalTestConfig","isCompatibilityDevice","getGPU","assert","makeValueTestVariant","memcpy","range","unreachable","kQueryTypeInfo","kEncodableTextureFormats","resolvePerAspectFormat","isCompressedTextureFormat","getRequiredFeatureForTextureFormat","isTextureFormatUsableAsStorageFormat","isTextureFormatUsableAsRenderAttachment","isTextureFormatMultisampled","is32Float","isSintOrUintFormat","isTextureFormatResolvable","isTextureFormatUsableAsReadWriteStorageTexture","isDepthTextureFormat","isStencilTextureFormat","getBlockInfoForTextureFormat","getBlockInfoForColorTextureFormat","checkElementsEqual","checkElementsBetween","CommandBufferMaker","DevicePool","align","roundDown","physicalMipSizeFromTexture","virtualMipSize","bytesInACompleteRow","getTextureCopyLayout","getTextureSubCopyLayout","kTexelRepresentationInfo","TexelView","textureContentIsOKByT2B","createTextureFromTexelViews","reifyExtent3D","reifyOrigin3D","devicePool","mismatchedDevicePool","kResourceStateValues","kResourceStates","initUncanonicalizedDeviceDescriptor","descriptor","requiredFeatures","Array","filter","f","undefined","mergeDeviceSelectionDescriptorIntoDeviceDescriptor","src","dst","srcFixed","push","Object","assign","requiredLimits","GPUTestSubcaseBatchState","skipIfRequirements","defaultQueue","useMismatchedDevice","postInit","acquireProvider","finalize","Promise","all","provider","then","x","release","mismatchedProvider","requestDeviceWithRequiredParametersOrSkip","isCompatibility","compatibility","descriptorModifier","acquire","recorder","catch","usesMismatchedDevice","selectDeviceOrSkipTestCase","selectDeviceForTextureFormatOrSkipTestCase","formats","isArray","features","Set","format","add","from","selectDeviceForQueryTypeOrSkipTestCase","types","map","t","feature","acquireMismatchedProvider","skipIfCopyTextureToTextureNotSupportedForFormat","skip","skipIfInterpolationTypeOrSamplingNotSupported","type","sampling","skipIf","skipIfLanguageFeatureNotSupported","langFeature","hasLanguageFeature","skipIfLanguageFeatureSupported","lf","wgslLanguageFeatures","has","GPUTestBase","MakeSharedState","params","device","queue","makeLimitVariant","limit","variant","limits","canCallCopyTextureToBufferWithTextureFormat","createCopyForMapRead","srcOffset","size","createBufferTracked","label","usage","GPUBufferUsage","MAP_READ","COPY_DST","c","createCommandEncoder","copyBufferToBuffer","submit","finish","createAlignedCopyForMapRead","offset","alignedOffset","subarrayByteStart","alignedSize","mappable","readGPUBufferRangeTyped","srcByteOffset","method","typedLength","BYTES_PER_ELEMENT","byteLength","mapOffset","mapSize","subarrayStart","mapAsync","GPUMapMode","READ","mapped","getMappedRange","data","subarray","cleanup","unmap","destroy","skipIfDeviceDoesNotHaveFeature","skipIfDeviceDoesNotSupportQueryType","skipIfDepthTextureCanNotBeUsedWithNonComparisonSampler","skipIfTextureFormatNotSupported","skipIfTextureFormatNotResolvable","skipIfTextureViewDimensionNotSupported","dimensions","dimension","skipIfTextureLoadNotSupportedForTextureType","skipIfTextureFormatNotUsableAsStorageTexture","skipIfTextureFormatNotUsableAsReadWriteStorageTexture","skipIfTextureFormatNotUsableAsRenderAttachment","skipIfTextureFormatNotMultisampled","skipIfTextureFormatNotBlendable","skipIfTextureFormatNotFilterable","skipIfTextureFormatDoesNotSupportUsage","GPUTextureUsage","RENDER_ATTACHMENT","STORAGE_BINDING","rec","expectGPUBufferValuesPassCheck","check","mode","readbackPromise","eventualAsyncExpectation","niceStack","readback","expectOK","expectGPUBufferValuesEqual","expected","a","constructor","length","expectGPUBufferRepeatsSingleValue","buffer","expectedValue","numRows","minBytesPerRow","bytesPerRow","valueSize","kMaxBufferSizeToCheckOnCpu","bufferSize","valueBytes","Uint8Array","rowValues","fill","rowBytes","concat","expectedContents","row","set","storageBuffer","STORAGE","expectedDataSize","Math","max","expectedDataBuffer","mappedAtCreation","expectedData","Uint32Array","value","values","min","padding","expectedBytes","Uint16Array","expectedWords","resultBuffer","COPY_SRC","readsPerRow","ceil","reducer","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","commandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","expectedResults","expectSingleColor","exp","slice","aspect","rowsPerImage","mipSize","copySize","rep","expectedTexelData","pack","encode","copyTextureToBuffer","texture","mipLevel","origin","y","z","readSinglePixelFrom2DTexture","expectSinglePixelBetweenTwoValuesIn2DTexture","generateWarningOnly","checkElementsBetweenFn","act","b","i","copy2DTextureToBufferUsingComputePass","componentCount","textureView","sampleCount","extent_","origin_","extent","width","height","kWorkgroupSizeX","kWorkgroupSizeY","textureSrcCode","computePipeline","uniformBuffer","makeBufferWithContents","UNIFORM","uniformBindGroup","encoder","floor","expectGPUError","fn","shouldError","pushErrorScope","returnValue","promise","popErrorScope","error","failed","GPUOutOfMemoryError","GPUValidationError","message","expectationFailed","debug","expectValidationError","gpuValidationError","validationFailed","trackForCleanup","createBuffer","createTextureTracked","createTexture","createQuerySetTracked","createQuerySet","dataArray","createEncoder","encoderType","attachmentInfo","occlusionQuerySet","targets","fullAttachmentInfo","colorFormats","rbEncoder","createRenderBundleEncoder","executeBundles","makeAttachmentView","createView","depthStencilAttachment","depthStencilFormat","view","depthReadOnly","stencilReadOnly","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","passDesc","colorAttachments","clearValue","loadOp","storeOp","beginRenderPass","GPUTest","init","sharedState","adapter","mismatchedDevice","expectDeviceLost","reason","getAdapterLimitsAsDeviceRequiredLimits","adapterLimits","key","removeNonExistentLimits","filteredLimits","applyLimitsToDescriptor","desc","getRequiredLimits","descWithMaxLimits","getAdapterFeaturesAsDeviceRequiredFeatures","applyFeaturesToDescriptor","getRequiredFeatures","existingRequiredFeatures","descWithRequiredFeatures","RequiredLimitsGPUTestSubcaseBatchState","requiredLimitsHelper","mod","keyModifier","baseKey","RequiredLimitsTestMixin","Base","RequiredLimitsImpl","MaxLimitsTestMixin","AllFeaturesMaxLimitsGPUTestSubcaseBatchState","selectMismatchedDeviceOrSkipTestCase","UniqueFeaturesOrLimitsGPUTest","AllFeaturesMaxLimitsGPUTest","s_deviceToResourcesMap","WeakMap","getPipelineToRenderTextureToRGB8UnormTexture","pipelineByPipelineType","Map","get","pipelineType","depthOrArrayLayers","textureType","layerCode","createRenderPipeline","vertex","fragment","TextureTestMixin","TextureExpectations","createTextureFromTexelView","texelView","createTextureFromTexelViewsMultipleMipmaps","texelViews","expectTexelViewComparisonIsOkInTexture","comparisonOptions","maxIntDiff","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","eventualExpectOK","expTexelView","expectSinglePixelComparisonsAreOkInTexture","includes","lowerCorner","upperCorner","expMap","coords","e","coord","coordKey","JSON","stringify","Symbol","iterator","fromTexelsAsBytes","res","fromTexelsAsColors","coordsF","expectTexturesToMatchByRendering","actualTexture","expectedTexture","readbackPromisesPerTexturePerLayer","ndx","attachmentSize","attachment","sampler","createSampler","numLayers","readbackPromisesPerLayer","layer","viewDescriptor","baseMipLevel","mipLevelCount","baseArrayLayer","arrayLayerCount","writeBuffer","draw","copyWholeTextureToNewBufferSimple","readbacksPerTexturePerLayer","readbackPromises","arrayNotAllTheSameValue","arr","msg","first","findIndex","v","Error","actualReadbacksPerLayer","expectedReadbacksPerLayer","actualReadback","expectedReadback","sameOk","blockWidth","blockHeight","bytesPerBlock","blocksPerRow","blocksPerColumn","copyWholeTextureToNewBuffer","resultDataLayout","updateLinearTextureDataSubBox","copyParams","dest","rowLength","texel","iterateBlockRows","srcOffsetElements","getTexelOffsetInBytes","dataLayout","dstOffsetElements","start","textureDataLayout","info","bytesPerImage"],"sources":["../../src/webgpu/gpu_test.ts"],"sourcesContent":["// MAINTENANCE_TODO: Remove all deprecated functions once they are no longer in use.\nimport {\n  Fixture,\n  FixtureClass,\n  FixtureClassInterface,\n  FixtureClassWithMixin,\n  SubcaseBatchState,\n  TestCaseRecorder,\n  TestParams,\n} from '../common/framework/fixture.js';\nimport { globalTestConfig, isCompatibilityDevice } from '../common/framework/test_config.js';\nimport { getGPU } from '../common/util/navigator_gpu.js';\nimport {\n  assert,\n  makeValueTestVariant,\n  memcpy,\n  range,\n  ValueTestVariant,\n  TypedArrayBufferView,\n  TypedArrayBufferViewConstructor,\n  unreachable,\n} from '../common/util/util.js';\n\nimport { kLimits, kQueryTypeInfo, WGSLLanguageFeature } from './capability_info.js';\nimport { InterpolationType, InterpolationSampling } from './constants.js';\nimport {\n  kEncodableTextureFormats,\n  resolvePerAspectFormat,\n  SizedTextureFormat,\n  EncodableTextureFormat,\n  isCompressedTextureFormat,\n  ColorTextureFormat,\n  getRequiredFeatureForTextureFormat,\n  isTextureFormatUsableAsStorageFormat,\n  isTextureFormatUsableAsRenderAttachment,\n  isTextureFormatMultisampled,\n  is32Float,\n  isSintOrUintFormat,\n  isTextureFormatResolvable,\n  isTextureFormatUsableAsReadWriteStorageTexture,\n  isDepthTextureFormat,\n  isStencilTextureFormat,\n  getBlockInfoForTextureFormat,\n  getBlockInfoForColorTextureFormat,\n} from './format_info.js';\nimport { checkElementsEqual, checkElementsBetween } from './util/check_contents.js';\nimport { CommandBufferMaker, EncoderType } from './util/command_buffer_maker.js';\nimport { ScalarType } from './util/conversion.js';\nimport {\n  CanonicalDeviceDescriptor,\n  DescriptorModifier,\n  DevicePool,\n  DeviceProvider,\n  UncanonicalizedDeviceDescriptor,\n} from './util/device_pool.js';\nimport { align, roundDown } from './util/math.js';\nimport { physicalMipSizeFromTexture, virtualMipSize } from './util/texture/base.js';\nimport {\n  bytesInACompleteRow,\n  getTextureCopyLayout,\n  getTextureSubCopyLayout,\n  LayoutOptions as TextureLayoutOptions,\n} from './util/texture/layout.js';\nimport { PerTexelComponent, kTexelRepresentationInfo } from './util/texture/texel_data.js';\nimport { TexelView } from './util/texture/texel_view.js';\nimport {\n  PerPixelComparison,\n  PixelExpectation,\n  TexelCompareOptions,\n  textureContentIsOKByT2B,\n} from './util/texture/texture_ok.js';\nimport { createTextureFromTexelViews } from './util/texture.js';\nimport { reifyExtent3D, reifyOrigin3D } from './util/unions.js';\n\n// Declarations for WebGPU items we want tests for that are not yet officially part of the spec.\ndeclare global {\n  // MAINTENANCE_TODO: remove once added to @webgpu/types\n  interface GPUSupportedLimits {\n    readonly maxStorageBuffersInFragmentStage?: number;\n    readonly maxStorageTexturesInFragmentStage?: number;\n    readonly maxStorageBuffersInVertexStage?: number;\n    readonly maxStorageTexturesInVertexStage?: number;\n  }\n}\n\nconst devicePool = new DevicePool();\n\n// MAINTENANCE_TODO: When DevicePool becomes able to provide multiple devices at once, use the\n// usual one instead of a new one.\nconst mismatchedDevicePool = new DevicePool();\n\nconst kResourceStateValues = ['valid', 'invalid', 'destroyed'] as const;\nexport type ResourceState = (typeof kResourceStateValues)[number];\nexport const kResourceStates: readonly ResourceState[] = kResourceStateValues;\n\n/** Various \"convenient\" shorthands for GPUDeviceDescriptors for selectDevice functions. */\nexport type DeviceSelectionDescriptor =\n  | UncanonicalizedDeviceDescriptor\n  | GPUFeatureName\n  | undefined\n  | Array<GPUFeatureName | undefined>;\n\nexport function initUncanonicalizedDeviceDescriptor(\n  descriptor: DeviceSelectionDescriptor\n): UncanonicalizedDeviceDescriptor {\n  if (typeof descriptor === 'string') {\n    return { requiredFeatures: [descriptor] };\n  } else if (descriptor instanceof Array) {\n    return {\n      requiredFeatures: descriptor.filter(f => f !== undefined) as GPUFeatureName[],\n    };\n  } else {\n    return descriptor ?? {};\n  }\n}\n\ntype DeviceDescriptorSimplified = {\n  requiredFeatures: GPUFeatureName[];\n  requiredLimits: Record<string, number>;\n  defaultQueue: GPUQueueDescriptor;\n};\n\nfunction mergeDeviceSelectionDescriptorIntoDeviceDescriptor(\n  src: DeviceSelectionDescriptor,\n  dst: DeviceDescriptorSimplified\n) {\n  const srcFixed = initUncanonicalizedDeviceDescriptor(src);\n  if (srcFixed) {\n    dst.requiredFeatures.push(...(srcFixed.requiredFeatures ?? []));\n    Object.assign(dst.requiredLimits, srcFixed.requiredLimits ?? {});\n  }\n}\n\nexport class GPUTestSubcaseBatchState extends SubcaseBatchState {\n  /** Provider for default device. */\n  private provider: Promise<DeviceProvider> | undefined;\n  /** Provider for mismatched device. */\n  private mismatchedProvider: Promise<DeviceProvider> | undefined;\n  /** The accumulated skip-if requirements for this subcase */\n  private skipIfRequirements: DeviceDescriptorSimplified = {\n    requiredFeatures: [],\n    requiredLimits: {},\n    defaultQueue: {},\n  };\n  /** Whether or not to provide a mismatched device */\n  private useMismatchedDevice = false;\n\n  override async postInit(): Promise<void> {\n    // Skip all subcases if there's no device.\n    await this.acquireProvider();\n  }\n\n  override async finalize(): Promise<void> {\n    await super.finalize();\n\n    // Ensure devicePool.release is called for both providers even if one rejects.\n    await Promise.all([\n      this.provider?.then(x => devicePool.release(x)),\n      this.mismatchedProvider?.then(x => mismatchedDevicePool.release(x)),\n    ]);\n  }\n\n  /** @internal MAINTENANCE_TODO: Make this not visible to test code? */\n  acquireProvider(): Promise<DeviceProvider> {\n    if (this.provider === undefined) {\n      this.requestDeviceWithRequiredParametersOrSkip(this.skipIfRequirements);\n    }\n    assert(this.provider !== undefined);\n    assert(!this.useMismatchedDevice || this.mismatchedProvider !== undefined);\n    return this.provider;\n  }\n\n  get isCompatibility() {\n    return globalTestConfig.compatibility;\n  }\n\n  /**\n   * Some tests or cases need particular feature flags or limits to be enabled.\n   * Call this function with a descriptor or feature name (or `undefined`) to select a\n   * GPUDevice with matching capabilities. If this isn't called, a default device is provided.\n   *\n   * If the request isn't supported, throws a SkipTestCase exception to skip the entire test case.\n   */\n  requestDeviceWithRequiredParametersOrSkip(\n    descriptor: DeviceSelectionDescriptor,\n    descriptorModifier?: DescriptorModifier\n  ): void {\n    assert(this.provider === undefined, \"Can't selectDeviceOrSkipTestCase() multiple times\");\n    this.provider = devicePool.acquire(\n      this.recorder,\n      initUncanonicalizedDeviceDescriptor(descriptor),\n      descriptorModifier\n    );\n    // Suppress uncaught promise rejection (we'll catch it later).\n    this.provider.catch(() => {});\n\n    if (this.useMismatchedDevice) {\n      this.mismatchedProvider = mismatchedDevicePool.acquire(\n        this.recorder,\n        initUncanonicalizedDeviceDescriptor(descriptor),\n        descriptorModifier\n      );\n      // Suppress uncaught promise rejection (we'll catch it later).\n      this.mismatchedProvider.catch(() => {});\n    }\n  }\n\n  /**\n   * Some tests need a second device which is different from the first.\n   * This requests a second device so it will be available during the test. If it is not called,\n   * no second device will be available. The second device will be created with the\n   * same features and limits as the first device.\n   */\n  usesMismatchedDevice() {\n    assert(this.provider === undefined, 'Can not call usedMismatchedDevice after device creation');\n    this.useMismatchedDevice = true;\n  }\n\n  /**\n   * Some tests or cases need particular feature flags or limits to be enabled.\n   * Call this function with a descriptor or feature name (or `undefined`) to add\n   * features or limits required by the subcase. If the features or limits are not\n   * available a SkipTestCase exception will be thrown to skip the entire test case.\n   */\n  selectDeviceOrSkipTestCase(descriptor: DeviceSelectionDescriptor): void {\n    mergeDeviceSelectionDescriptorIntoDeviceDescriptor(descriptor, this.skipIfRequirements);\n  }\n\n  /**\n   * Convenience function for {@link selectDeviceOrSkipTestCase}.\n   * Select a device with the features required by these texture format(s).\n   * If the device creation fails, then skip the test case.\n   */\n  selectDeviceForTextureFormatOrSkipTestCase(\n    formats: GPUTextureFormat | undefined | (GPUTextureFormat | undefined)[]\n  ): void {\n    if (!Array.isArray(formats)) {\n      formats = [formats];\n    }\n    const features = new Set<GPUFeatureName | undefined>();\n    for (const format of formats) {\n      if (format !== undefined) {\n        features.add(getRequiredFeatureForTextureFormat(format));\n      }\n    }\n\n    this.selectDeviceOrSkipTestCase(Array.from(features));\n  }\n\n  /**\n   * Convenience function for {@link selectDeviceOrSkipTestCase}.\n   * Select a device with the features required by these query type(s).\n   * If the device creation fails, then skip the test case.\n   */\n  selectDeviceForQueryTypeOrSkipTestCase(types: GPUQueryType | GPUQueryType[]): void {\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    const features = types.map(t => kQueryTypeInfo[t].feature);\n    this.selectDeviceOrSkipTestCase(features);\n  }\n\n  /** @internal MAINTENANCE_TODO: Make this not visible to test code? */\n  acquireMismatchedProvider(): Promise<DeviceProvider> | undefined {\n    return this.mismatchedProvider;\n  }\n\n  skipIfCopyTextureToTextureNotSupportedForFormat(...formats: (GPUTextureFormat | undefined)[]) {\n    if (this.isCompatibility) {\n      for (const format of formats) {\n        if (format && isCompressedTextureFormat(format)) {\n          this.skip(`copyTextureToTexture with ${format} is not supported in compatibility mode`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Skips test if the given interpolation type or sampling is not supported.\n   */\n  skipIfInterpolationTypeOrSamplingNotSupported({\n    type,\n    sampling,\n  }: {\n    type?: InterpolationType;\n    sampling?: InterpolationSampling;\n  }) {\n    if (this.isCompatibility) {\n      this.skipIf(\n        type === 'linear',\n        'interpolation type linear is not supported in compatibility mode'\n      );\n      this.skipIf(\n        sampling === 'sample',\n        'interpolation type linear is not supported in compatibility mode'\n      );\n      this.skipIf(\n        type === 'flat' && (!sampling || sampling === 'first'),\n        'interpolation type flat with sampling not set to either is not supported in compatibility mode'\n      );\n    }\n  }\n\n  /** Skips this test case if the `langFeature` is *not* supported. */\n  skipIfLanguageFeatureNotSupported(langFeature: WGSLLanguageFeature) {\n    if (!this.hasLanguageFeature(langFeature)) {\n      this.skip(`WGSL language feature '${langFeature}' is not supported`);\n    }\n  }\n\n  /** Skips this test case if the `langFeature` is supported. */\n  skipIfLanguageFeatureSupported(langFeature: WGSLLanguageFeature) {\n    if (this.hasLanguageFeature(langFeature)) {\n      this.skip(`WGSL language feature '${langFeature}' is supported`);\n    }\n  }\n\n  /** returns true iff the `langFeature` is supported  */\n  hasLanguageFeature(langFeature: WGSLLanguageFeature) {\n    const lf = getGPU(this.recorder).wgslLanguageFeatures;\n    return lf !== undefined && lf.has(langFeature);\n  }\n}\n\n/**\n * Base fixture for WebGPU tests.\n *\n * This class is a Fixture + a getter that returns a GPUDevice\n * as well as helpers that use that device.\n */\nexport class GPUTestBase extends Fixture<GPUTestSubcaseBatchState> {\n  public static override MakeSharedState(\n    recorder: TestCaseRecorder,\n    params: TestParams\n  ): GPUTestSubcaseBatchState {\n    return new GPUTestSubcaseBatchState(recorder, params);\n  }\n\n  // This must be overridden in derived classes\n  get device(): GPUDevice {\n    unreachable();\n    return null as unknown as GPUDevice;\n  }\n\n  /** GPUQueue for the test to use. (Same as `t.device.queue`.) */\n  get queue(): GPUQueue {\n    return this.device.queue;\n  }\n\n  get isCompatibility() {\n    return globalTestConfig.compatibility;\n  }\n\n  makeLimitVariant(limit: (typeof kLimits)[number], variant: ValueTestVariant) {\n    return makeValueTestVariant(this.device.limits[limit]!, variant);\n  }\n\n  canCallCopyTextureToBufferWithTextureFormat(format: GPUTextureFormat) {\n    return !this.isCompatibility || !isCompressedTextureFormat(format);\n  }\n\n  /** Snapshot a GPUBuffer's contents, returning a new GPUBuffer with the `MAP_READ` usage. */\n  private createCopyForMapRead(src: GPUBuffer, srcOffset: number, size: number): GPUBuffer {\n    assert(srcOffset % 4 === 0);\n    assert(size % 4 === 0);\n\n    const dst = this.createBufferTracked({\n      label: 'createCopyForMapRead',\n      size,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n\n    const c = this.device.createCommandEncoder({ label: 'createCopyForMapRead' });\n    c.copyBufferToBuffer(src, srcOffset, dst, 0, size);\n    this.queue.submit([c.finish()]);\n\n    return dst;\n  }\n\n  /**\n   * Offset and size passed to createCopyForMapRead must be divisible by 4. For that\n   * we might need to copy more bytes from the buffer than we want to map.\n   * begin and end values represent the part of the copied buffer that stores the contents\n   * we initially wanted to map.\n   * The copy will not cause an OOB error because the buffer size must be 4-aligned.\n   */\n  private createAlignedCopyForMapRead(\n    src: GPUBuffer,\n    size: number,\n    offset: number\n  ): { mappable: GPUBuffer; subarrayByteStart: number } {\n    const alignedOffset = roundDown(offset, 4);\n    const subarrayByteStart = offset - alignedOffset;\n    const alignedSize = align(size + subarrayByteStart, 4);\n    const mappable = this.createCopyForMapRead(src, alignedOffset, alignedSize);\n    return { mappable, subarrayByteStart };\n  }\n\n  /**\n   * Snapshot the current contents of a range of a GPUBuffer, and return them as a TypedArray.\n   * Also provides a cleanup() function to unmap and destroy the staging buffer.\n   */\n  async readGPUBufferRangeTyped<T extends TypedArrayBufferView>(\n    src: GPUBuffer,\n    {\n      srcByteOffset = 0,\n      method = 'copy',\n      type,\n      typedLength,\n    }: {\n      srcByteOffset?: number;\n      method?: 'copy' | 'map';\n      type: TypedArrayBufferViewConstructor<T>;\n      typedLength: number;\n    }\n  ): Promise<{ data: T; cleanup(): void }> {\n    assert(\n      srcByteOffset % type.BYTES_PER_ELEMENT === 0,\n      'srcByteOffset must be a multiple of BYTES_PER_ELEMENT'\n    );\n\n    const byteLength = typedLength * type.BYTES_PER_ELEMENT;\n    let mappable: GPUBuffer;\n    let mapOffset: number | undefined, mapSize: number | undefined, subarrayByteStart: number;\n    if (method === 'copy') {\n      ({ mappable, subarrayByteStart } = this.createAlignedCopyForMapRead(\n        src,\n        byteLength,\n        srcByteOffset\n      ));\n    } else if (method === 'map') {\n      mappable = src;\n      mapOffset = roundDown(srcByteOffset, 8);\n      mapSize = align(byteLength, 4);\n      subarrayByteStart = srcByteOffset - mapOffset;\n    } else {\n      unreachable();\n    }\n\n    assert(subarrayByteStart % type.BYTES_PER_ELEMENT === 0);\n    const subarrayStart = subarrayByteStart / type.BYTES_PER_ELEMENT;\n\n    // 2. Map the staging buffer, and create the TypedArray from it.\n    await mappable.mapAsync(GPUMapMode.READ, mapOffset, mapSize);\n    const mapped = new type(mappable.getMappedRange(mapOffset, mapSize));\n    const data = mapped.subarray(subarrayStart, typedLength) as T;\n\n    return {\n      data,\n      cleanup() {\n        mappable.unmap();\n        mappable.destroy();\n      },\n    };\n  }\n\n  /**\n   * Skips test if device does not have feature.\n   * Note: Try to use one of the more specific skipIf tests if possible.\n   */\n  skipIfDeviceDoesNotHaveFeature(feature: GPUFeatureName) {\n    this.skipIf(!this.device.features.has(feature), `device does not have feature: '${feature}'`);\n  }\n\n  /**\n   * Skips test if device des not support query type.\n   */\n  skipIfDeviceDoesNotSupportQueryType(...types: GPUQueryType[]) {\n    for (const type of types) {\n      const feature = kQueryTypeInfo[type].feature;\n      if (feature) {\n        this.skipIfDeviceDoesNotHaveFeature(feature);\n      }\n    }\n  }\n\n  skipIfDepthTextureCanNotBeUsedWithNonComparisonSampler() {\n    this.skipIf(\n      this.isCompatibility,\n      'depth textures are not usable with non-comparison samplers in compatibility mode'\n    );\n  }\n\n  /**\n   * Skips test if any format is not supported.\n   */\n  skipIfTextureFormatNotSupported(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (!format) {\n        continue;\n      }\n      if (format === 'bgra8unorm-srgb') {\n        if (isCompatibilityDevice(this.device)) {\n          this.skip(`texture format '${format}' is not supported`);\n        }\n      }\n      const feature = getRequiredFeatureForTextureFormat(format);\n      this.skipIf(\n        !!feature && !this.device.features.has(feature),\n        `texture format '${format}' requires feature: '${feature}`\n      );\n    }\n  }\n\n  skipIfTextureFormatNotResolvable(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (format === undefined) continue;\n      if (!isTextureFormatResolvable(this.device, format)) {\n        this.skip(`texture format '${format}' is not resolvable`);\n      }\n    }\n  }\n\n  skipIfTextureViewDimensionNotSupported(...dimensions: (GPUTextureViewDimension | undefined)[]) {\n    if (isCompatibilityDevice(this.device)) {\n      for (const dimension of dimensions) {\n        if (dimension === 'cube-array') {\n          this.skip(`texture view dimension '${dimension}' is not supported`);\n        }\n      }\n    }\n  }\n\n  skipIfCopyTextureToTextureNotSupportedForFormat(...formats: (GPUTextureFormat | undefined)[]) {\n    if (isCompatibilityDevice(this.device)) {\n      for (const format of formats) {\n        if (format && isCompressedTextureFormat(format)) {\n          this.skip(`copyTextureToTexture with ${format} is not supported`);\n        }\n      }\n    }\n  }\n\n  skipIfTextureLoadNotSupportedForTextureType(...types: (string | undefined | null)[]) {\n    if (this.isCompatibility) {\n      for (const type of types) {\n        switch (type) {\n          case 'texture_depth_2d':\n          case 'texture_depth_2d_array':\n          case 'texture_depth_multisampled_2d':\n            this.skip(`${type} is not supported by textureLoad in compatibility mode`);\n        }\n      }\n    }\n  }\n\n  skipIfTextureFormatNotUsableAsStorageTexture(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (format && !isTextureFormatUsableAsStorageFormat(this.device, format)) {\n        this.skip(`Texture with ${format} is not usable as a storage texture`);\n      }\n    }\n  }\n\n  skipIfTextureFormatNotUsableAsReadWriteStorageTexture(\n    ...formats: (GPUTextureFormat | undefined)[]\n  ) {\n    for (const format of formats) {\n      if (!format) continue;\n\n      if (!isTextureFormatUsableAsReadWriteStorageTexture(this.device, format)) {\n        this.skip(`Texture with ${format} is not usable as a storage texture`);\n      }\n    }\n  }\n\n  skipIfTextureFormatNotUsableAsRenderAttachment(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (format && !isTextureFormatUsableAsRenderAttachment(this.device, format)) {\n        this.skip(`Texture with ${format} is not usable as a render attachment`);\n      }\n    }\n  }\n\n  skipIfTextureFormatNotMultisampled(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (format === undefined) continue;\n      if (!isTextureFormatMultisampled(this.device, format)) {\n        this.skip(`texture format '${format}' does not support multisampling`);\n      }\n    }\n  }\n\n  skipIfTextureFormatNotBlendable(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (format === undefined) continue;\n      this.skipIf(isSintOrUintFormat(format), 'sint/uint formats are not blendable');\n      if (is32Float(format)) {\n        this.skipIf(\n          !this.device.features.has('float32-blendable'),\n          `texture format '${format}' is not blendable`\n        );\n      }\n    }\n  }\n\n  skipIfTextureFormatNotFilterable(...formats: (GPUTextureFormat | undefined)[]) {\n    for (const format of formats) {\n      if (format === undefined) continue;\n      this.skipIf(isSintOrUintFormat(format), 'sint/uint formats are not filterable');\n      if (is32Float(format)) {\n        this.skipIf(\n          !this.device.features.has('float32-filterable'),\n          `texture format '${format}' is not filterable`\n        );\n      }\n    }\n  }\n\n  skipIfTextureFormatDoesNotSupportUsage(\n    usage: GPUTextureUsageFlags,\n    ...formats: (GPUTextureFormat | undefined)[]\n  ) {\n    for (const format of formats) {\n      if (!format) continue;\n      if (usage & GPUTextureUsage.RENDER_ATTACHMENT) {\n        this.skipIfTextureFormatNotUsableAsRenderAttachment(format);\n      }\n      if (usage & GPUTextureUsage.STORAGE_BINDING) {\n        this.skipIfTextureFormatNotUsableAsStorageTexture(format);\n      }\n    }\n  }\n\n  /** Skips this test case if the `langFeature` is *not* supported. */\n  skipIfLanguageFeatureNotSupported(langFeature: WGSLLanguageFeature) {\n    if (!this.hasLanguageFeature(langFeature)) {\n      this.skip(`WGSL language feature '${langFeature}' is not supported`);\n    }\n  }\n\n  /** Skips this test case if the `langFeature` is supported. */\n  skipIfLanguageFeatureSupported(langFeature: WGSLLanguageFeature) {\n    if (this.hasLanguageFeature(langFeature)) {\n      this.skip(`WGSL language feature '${langFeature}' is supported`);\n    }\n  }\n\n  /** returns true if the `langFeature` is supported  */\n  hasLanguageFeature(langFeature: WGSLLanguageFeature) {\n    const lf = getGPU(this.rec).wgslLanguageFeatures;\n    return lf !== undefined && lf.has(langFeature);\n  }\n\n  /**\n   * Expect a GPUBuffer's contents to pass the provided check.\n   *\n   * A library of checks can be found in {@link webgpu/util/check_contents}.\n   */\n  expectGPUBufferValuesPassCheck<T extends TypedArrayBufferView>(\n    src: GPUBuffer,\n    check: (actual: T) => Error | undefined,\n    {\n      srcByteOffset = 0,\n      type,\n      typedLength,\n      method = 'copy',\n      mode = 'fail',\n    }: {\n      srcByteOffset?: number;\n      type: TypedArrayBufferViewConstructor<T>;\n      typedLength: number;\n      method?: 'copy' | 'map';\n      mode?: 'fail' | 'warn';\n    }\n  ) {\n    const readbackPromise = this.readGPUBufferRangeTyped(src, {\n      srcByteOffset,\n      type,\n      typedLength,\n      method,\n    });\n    this.eventualAsyncExpectation(async niceStack => {\n      const readback = await readbackPromise;\n      this.expectOK(check(readback.data), { mode, niceStack });\n      readback.cleanup();\n    });\n  }\n\n  /**\n   * Expect a GPUBuffer's contents to equal the values in the provided TypedArray.\n   */\n  expectGPUBufferValuesEqual(\n    src: GPUBuffer,\n    expected: TypedArrayBufferView,\n    srcByteOffset: number = 0,\n    { method = 'copy', mode = 'fail' }: { method?: 'copy' | 'map'; mode?: 'fail' | 'warn' } = {}\n  ): void {\n    this.expectGPUBufferValuesPassCheck(src, a => checkElementsEqual(a, expected), {\n      srcByteOffset,\n      type: expected.constructor as TypedArrayBufferViewConstructor,\n      typedLength: expected.length,\n      method,\n      mode,\n    });\n  }\n\n  /**\n   * Expect a buffer to consist exclusively of rows of some repeated expected value. The size of\n   * `expectedValue` must be 1, 2, or any multiple of 4 bytes. Rows in the buffer are expected to be\n   * zero-padded out to `bytesPerRow`. `minBytesPerRow` is the number of bytes per row that contain\n   * actual (non-padding) data and must be an exact multiple of the byte-length of `expectedValue`.\n   */\n  expectGPUBufferRepeatsSingleValue(\n    buffer: GPUBuffer,\n    {\n      expectedValue,\n      numRows,\n      minBytesPerRow,\n      bytesPerRow,\n    }: {\n      expectedValue: ArrayBuffer;\n      numRows: number;\n      minBytesPerRow: number;\n      bytesPerRow: number;\n    }\n  ) {\n    const valueSize = expectedValue.byteLength;\n    assert(valueSize === 1 || valueSize === 2 || valueSize % 4 === 0);\n    assert(minBytesPerRow % valueSize === 0);\n    assert(bytesPerRow % 4 === 0);\n\n    // If the buffer is small enough, just generate the full expected buffer contents and check\n    // against them on the CPU.\n    const kMaxBufferSizeToCheckOnCpu = 256 * 1024;\n    const bufferSize = bytesPerRow * (numRows - 1) + minBytesPerRow;\n    if (bufferSize <= kMaxBufferSizeToCheckOnCpu) {\n      const valueBytes = Array.from(new Uint8Array(expectedValue));\n      const rowValues = new Array(minBytesPerRow / valueSize).fill(valueBytes);\n      const rowBytes = new Uint8Array([].concat(...rowValues));\n      const expectedContents = new Uint8Array(bufferSize);\n      range(numRows, row => expectedContents.set(rowBytes, row * bytesPerRow));\n      this.expectGPUBufferValuesEqual(buffer, expectedContents);\n      return;\n    }\n\n    // Copy into a buffer suitable for STORAGE usage.\n    const storageBuffer = this.createBufferTracked({\n      label: 'expectGPUBufferRepeatsSingleValue:storageBuffer',\n      size: bufferSize,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n\n    // This buffer conveys the data we expect to see for a single value read. Since we read 32 bits at\n    // a time, for values smaller than 32 bits we pad this expectation with repeated value data, or\n    // with zeroes if the width of a row in the buffer is less than 4 bytes. For value sizes larger\n    // than 32 bits, we assume they're a multiple of 32 bits and expect to read exact matches of\n    // `expectedValue` as-is.\n    const expectedDataSize = Math.max(4, valueSize);\n    const expectedDataBuffer = this.createBufferTracked({\n      label: 'expectGPUBufferRepeatsSingleValue:expectedDataBuffer',\n      size: expectedDataSize,\n      usage: GPUBufferUsage.STORAGE,\n      mappedAtCreation: true,\n    });\n    const expectedData = new Uint32Array(expectedDataBuffer.getMappedRange());\n    if (valueSize === 1) {\n      const value = new Uint8Array(expectedValue)[0];\n      const values = new Array(Math.min(4, minBytesPerRow)).fill(value);\n      const padding = new Array(Math.max(0, 4 - values.length)).fill(0);\n      const expectedBytes = new Uint8Array(expectedData.buffer);\n      expectedBytes.set([...values, ...padding]);\n    } else if (valueSize === 2) {\n      const value = new Uint16Array(expectedValue)[0];\n      const expectedWords = new Uint16Array(expectedData.buffer);\n      expectedWords.set([value, minBytesPerRow > 2 ? value : 0]);\n    } else {\n      expectedData.set(new Uint32Array(expectedValue));\n    }\n    expectedDataBuffer.unmap();\n\n    // The output buffer has one 32-bit entry per buffer row. An entry's value will be 1 if every\n    // read from the corresponding row matches the expected data derived above, or 0 otherwise.\n    const resultBuffer = this.createBufferTracked({\n      label: 'expectGPUBufferRepeatsSingleValue:resultBuffer',\n      size: numRows * 4,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const readsPerRow = Math.ceil(minBytesPerRow / expectedDataSize);\n    const reducer = `\n    struct Buffer { data: array<u32>, };\n    @group(0) @binding(0) var<storage, read> expected: Buffer;\n    @group(0) @binding(1) var<storage, read> in: Buffer;\n    @group(0) @binding(2) var<storage, read_write> out: Buffer;\n    @compute @workgroup_size(1) fn reduce(\n        @builtin(global_invocation_id) id: vec3<u32>) {\n      let rowBaseIndex = id.x * ${bytesPerRow / 4}u;\n      let readSize = ${expectedDataSize / 4}u;\n      out.data[id.x] = 1u;\n      for (var i: u32 = 0u; i < ${readsPerRow}u; i = i + 1u) {\n        let elementBaseIndex = rowBaseIndex + i * readSize;\n        for (var j: u32 = 0u; j < readSize; j = j + 1u) {\n          if (in.data[elementBaseIndex + j] != expected.data[j]) {\n            out.data[id.x] = 0u;\n            return;\n          }\n        }\n      }\n    }\n    `;\n\n    const pipeline = this.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: this.device.createShaderModule({ code: reducer }),\n        entryPoint: 'reduce',\n      },\n    });\n\n    const bindGroup = this.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: expectedDataBuffer } },\n        { binding: 1, resource: { buffer: storageBuffer } },\n        { binding: 2, resource: { buffer: resultBuffer } },\n      ],\n    });\n\n    const commandEncoder = this.device.createCommandEncoder({\n      label: 'expectGPUBufferRepeatsSingleValue',\n    });\n    commandEncoder.copyBufferToBuffer(buffer, 0, storageBuffer, 0, bufferSize);\n    const pass = commandEncoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(numRows);\n    pass.end();\n    this.device.queue.submit([commandEncoder.finish()]);\n\n    const expectedResults = new Array(numRows).fill(1);\n    this.expectGPUBufferValuesEqual(resultBuffer, new Uint32Array(expectedResults));\n  }\n\n  // MAINTENANCE_TODO: add an expectContents for textures, which logs data: uris on failure\n\n  /**\n   * Expect an entire GPUTexture to have a single color at the given mip level (defaults to 0).\n   * MAINTENANCE_TODO: Remove this and/or replace it with a helper in TextureTestMixin.\n   */\n  expectSingleColor(\n    src: GPUTexture,\n    format: GPUTextureFormat,\n    {\n      size,\n      exp,\n      dimension = '2d',\n      slice = 0,\n      layout,\n    }: {\n      size: [number, number, number];\n      exp: PerTexelComponent<number>;\n      dimension?: GPUTextureDimension;\n      slice?: number;\n      layout?: TextureLayoutOptions;\n    }\n  ): void {\n    assert(\n      slice === 0 || dimension === '2d',\n      'texture slices are only implemented for 2d textures'\n    );\n\n    format = resolvePerAspectFormat(format, layout?.aspect);\n    const { byteLength, minBytesPerRow, bytesPerRow, rowsPerImage, mipSize } = getTextureCopyLayout(\n      format,\n      dimension,\n      size,\n      layout\n    );\n    // MAINTENANCE_TODO: getTextureCopyLayout does not return the proper size for array textures,\n    // i.e. it will leave the z/depth value as is instead of making it 1 when dealing with 2d\n    // texture arrays. Since we are passing in the dimension, we should update it to return the\n    // corrected size.\n    const copySize = [\n      mipSize[0],\n      dimension !== '1d' ? mipSize[1] : 1,\n      dimension === '3d' ? mipSize[2] : 1,\n    ];\n\n    const rep = kTexelRepresentationInfo[format as EncodableTextureFormat];\n    const expectedTexelData = rep.pack(rep.encode(exp));\n\n    const buffer = this.createBufferTracked({\n      label: 'expectSingleColor',\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const commandEncoder = this.device.createCommandEncoder({ label: 'expectSingleColor' });\n    commandEncoder.copyTextureToBuffer(\n      {\n        texture: src,\n        mipLevel: layout?.mipLevel,\n        origin: { x: 0, y: 0, z: slice },\n        aspect: layout?.aspect,\n      },\n      { buffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([commandEncoder.finish()]);\n\n    this.expectGPUBufferRepeatsSingleValue(buffer, {\n      expectedValue: expectedTexelData,\n      numRows: rowsPerImage * copySize[2],\n      minBytesPerRow,\n      bytesPerRow,\n    });\n  }\n\n  /**\n   * Return a GPUBuffer that data are going to be written into.\n   * MAINTENANCE_TODO: Remove this once expectSinglePixelBetweenTwoValuesIn2DTexture is removed.\n   */\n  private readSinglePixelFrom2DTexture(\n    src: GPUTexture,\n    format: SizedTextureFormat,\n    { x, y }: { x: number; y: number },\n    { slice = 0, layout }: { slice?: number; layout?: TextureLayoutOptions }\n  ): GPUBuffer {\n    const { byteLength, bytesPerRow, rowsPerImage } = getTextureSubCopyLayout(\n      format,\n      [1, 1],\n      layout\n    );\n    const buffer = this.createBufferTracked({\n      label: 'readSinglePixelFrom2DTexture',\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const commandEncoder = this.device.createCommandEncoder({\n      label: 'readSinglePixelFrom2DTexture',\n    });\n    commandEncoder.copyTextureToBuffer(\n      { texture: src, mipLevel: layout?.mipLevel, origin: { x, y, z: slice } },\n      { buffer, bytesPerRow, rowsPerImage },\n      [1, 1]\n    );\n    this.queue.submit([commandEncoder.finish()]);\n\n    return buffer;\n  }\n\n  /**\n   * Take a single pixel of a 2D texture, interpret it using a TypedArray of the `expected` type,\n   * and expect each value in that array to be between the corresponding \"expected\" values\n   * (either `a[i] <= actual[i] <= b[i]` or `a[i] >= actual[i] => b[i]`).\n   * MAINTENANCE_TODO: Remove this once there is a way to deal with undefined lerp-ed values.\n   */\n  expectSinglePixelBetweenTwoValuesIn2DTexture(\n    src: GPUTexture,\n    format: SizedTextureFormat,\n    { x, y }: { x: number; y: number },\n    {\n      exp,\n      slice = 0,\n      layout,\n      generateWarningOnly = false,\n      checkElementsBetweenFn = (act, [a, b]) =>\n        checkElementsBetween(act, [i => a[i] as number, i => b[i] as number]),\n    }: {\n      exp: [TypedArrayBufferView, TypedArrayBufferView];\n      slice?: number;\n      layout?: TextureLayoutOptions;\n      generateWarningOnly?: boolean;\n      checkElementsBetweenFn?: (\n        actual: TypedArrayBufferView,\n        expected: readonly [TypedArrayBufferView, TypedArrayBufferView]\n      ) => Error | undefined;\n    }\n  ): void {\n    assert(exp[0].constructor === exp[1].constructor);\n    const constructor = exp[0].constructor as TypedArrayBufferViewConstructor;\n    assert(exp[0].length === exp[1].length);\n    const typedLength = exp[0].length;\n\n    const buffer = this.readSinglePixelFrom2DTexture(src, format, { x, y }, { slice, layout });\n    this.expectGPUBufferValuesPassCheck(buffer, a => checkElementsBetweenFn(a, exp), {\n      type: constructor,\n      typedLength,\n      mode: generateWarningOnly ? 'warn' : 'fail',\n    });\n  }\n\n  /**\n   * Emulate a texture to buffer copy by using a compute shader\n   * to load texture values of a subregion of a 2d texture and write to a storage buffer.\n   * For sample count == 1, the buffer contains extent[0] * extent[1] of the sample.\n   * For sample count > 1, the buffer contains extent[0] * extent[1] * (N = sampleCount) values sorted\n   * in the order of their sample index [0, sampleCount - 1]\n   *\n   * This can be useful when the texture to buffer copy is not available to the texture format\n   * e.g. (depth24plus), or when the texture is multisampled.\n   *\n   * MAINTENANCE_TODO: extend texture dimension to 1d and 3d.\n   *\n   * @returns storage buffer containing the copied value from the texture.\n   */\n  copy2DTextureToBufferUsingComputePass(\n    type: ScalarType,\n    componentCount: number,\n    textureView: GPUTextureView,\n    sampleCount: number = 1,\n    extent_: GPUExtent3D = [1, 1, 1],\n    origin_: GPUOrigin3D = [0, 0, 0]\n  ): GPUBuffer {\n    const origin = reifyOrigin3D(origin_);\n    const extent = reifyExtent3D(extent_);\n    const width = extent.width;\n    const height = extent.height;\n    const kWorkgroupSizeX = 8;\n    const kWorkgroupSizeY = 8;\n    const textureSrcCode =\n      sampleCount === 1\n        ? `@group(0) @binding(0) var src: texture_2d<${type}>;`\n        : `@group(0) @binding(0) var src: texture_multisampled_2d<${type}>;`;\n    const code = `\n      struct Buffer {\n        data: array<${type}>,\n      };\n\n      ${textureSrcCode}\n      @group(0) @binding(1) var<storage, read_write> dst : Buffer;\n\n      struct Params {\n        origin: vec2u,\n        extent: vec2u,\n      };\n      @group(0) @binding(2) var<uniform> params : Params;\n\n      @compute @workgroup_size(${kWorkgroupSizeX}, ${kWorkgroupSizeY}, 1) fn main(@builtin(global_invocation_id) id : vec3u) {\n        let boundary = params.origin + params.extent;\n        let coord = params.origin + id.xy;\n        if (any(coord >= boundary)) {\n          return;\n        }\n        let offset = (id.x + id.y * params.extent.x) * ${componentCount} * ${sampleCount};\n        for (var sampleIndex = 0u; sampleIndex < ${sampleCount};\n          sampleIndex = sampleIndex + 1) {\n          let o = offset + sampleIndex * ${componentCount};\n          let v = textureLoad(src, coord.xy, sampleIndex);\n          for (var component = 0u; component < ${componentCount}; component = component + 1) {\n            dst.data[o + component] = v[component];\n          }\n        }\n      }\n    `;\n    const computePipeline = this.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: this.device.createShaderModule({\n          code,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    const storageBuffer = this.createBufferTracked({\n      label: 'copy2DTextureToBufferUsingComputePass:storageBuffer',\n      size: sampleCount * type.size * componentCount * width * height,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\n    });\n\n    const uniformBuffer = this.makeBufferWithContents(\n      new Uint32Array([origin.x, origin.y, width, height]),\n      GPUBufferUsage.UNIFORM\n    );\n\n    const uniformBindGroup = this.device.createBindGroup({\n      layout: computePipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: textureView,\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: storageBuffer,\n          },\n        },\n        {\n          binding: 2,\n          resource: {\n            buffer: uniformBuffer,\n          },\n        },\n      ],\n    });\n\n    const encoder = this.device.createCommandEncoder({\n      label: 'copy2DTextureToBufferUsingComputePass',\n    });\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(computePipeline);\n    pass.setBindGroup(0, uniformBindGroup);\n    pass.dispatchWorkgroups(\n      Math.floor((width + kWorkgroupSizeX - 1) / kWorkgroupSizeX),\n      Math.floor((height + kWorkgroupSizeY - 1) / kWorkgroupSizeY),\n      1\n    );\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    return storageBuffer;\n  }\n\n  /**\n   * Expect the specified WebGPU error to be generated when running the provided function.\n   */\n  expectGPUError<R>(filter: GPUErrorFilter, fn: () => R, shouldError: boolean = true): R {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (!shouldError) {\n      return fn();\n    }\n\n    this.device.pushErrorScope(filter);\n    const returnValue = fn();\n    const promise = this.device.popErrorScope();\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const error = await promise;\n\n      let failed = false;\n      switch (filter) {\n        case 'out-of-memory':\n          failed = !(error instanceof GPUOutOfMemoryError);\n          break;\n        case 'validation':\n          failed = !(error instanceof GPUValidationError);\n          break;\n      }\n\n      if (failed) {\n        niceStack.message = `Expected ${filter} error`;\n        this.rec.expectationFailed(niceStack);\n      } else {\n        niceStack.message = `Captured ${filter} error`;\n        if (error instanceof GPUValidationError) {\n          niceStack.message += ` - ${error.message}`;\n        }\n        this.rec.debug(niceStack);\n      }\n    });\n\n    return returnValue;\n  }\n\n  /**\n   * Expect a validation error inside the callback.\n   *\n   * Tests should always do just one WebGPU call in the callback, to make sure that's what's tested.\n   */\n  expectValidationError(fn: () => void, shouldError: boolean = true): void {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (shouldError) {\n      this.device.pushErrorScope('validation');\n    }\n\n    // Note: A return value is not allowed for the callback function. This is to avoid confusion\n    // about what the actual behavior would be; either of the following could be reasonable:\n    //   - Make expectValidationError async, and have it await on fn(). This causes an async split\n    //     between pushErrorScope and popErrorScope, so if the caller doesn't `await` on\n    //     expectValidationError (either accidentally or because it doesn't care to do so), then\n    //     other test code will be (nondeterministically) caught by the error scope.\n    //   - Make expectValidationError NOT await fn(), but just execute its first block (until the\n    //     first await) and return the return value (a Promise). This would be confusing because it\n    //     would look like the error scope includes the whole async function, but doesn't.\n    // If we do decide we need to return a value, we should use the latter semantic.\n    const returnValue = fn() as unknown;\n    assert(\n      returnValue === undefined,\n      'expectValidationError callback should not return a value (or be async)'\n    );\n\n    if (shouldError) {\n      const promise = this.device.popErrorScope();\n\n      this.eventualAsyncExpectation(async niceStack => {\n        const gpuValidationError = await promise;\n        if (!gpuValidationError) {\n          niceStack.message = 'Validation succeeded unexpectedly.';\n          this.rec.validationFailed(niceStack);\n        } else if (gpuValidationError instanceof GPUValidationError) {\n          niceStack.message = `Validation failed, as expected - ${gpuValidationError.message}`;\n          this.rec.debug(niceStack);\n        }\n      });\n    }\n  }\n\n  /** Create a GPUBuffer and track it for cleanup at the end of the test. */\n  createBufferTracked(descriptor: GPUBufferDescriptor): GPUBuffer {\n    return this.trackForCleanup(this.device.createBuffer(descriptor));\n  }\n\n  /** Create a GPUTexture and track it for cleanup at the end of the test. */\n  createTextureTracked(descriptor: GPUTextureDescriptor): GPUTexture {\n    return this.trackForCleanup(this.device.createTexture(descriptor));\n  }\n\n  /** Create a GPUQuerySet and track it for cleanup at the end of the test. */\n  createQuerySetTracked(descriptor: GPUQuerySetDescriptor): GPUQuerySet {\n    return this.trackForCleanup(this.device.createQuerySet(descriptor));\n  }\n\n  /**\n   * Creates a buffer with the contents of some TypedArray.\n   * The buffer size will always be aligned to 4 as we set mappedAtCreation === true when creating the\n   * buffer.\n   *\n   * MAINTENANCE_TODO: Several call sites would be simplified if this took ArrayBuffer as well.\n   */\n  makeBufferWithContents(dataArray: TypedArrayBufferView, usage: GPUBufferUsageFlags): GPUBuffer {\n    const buffer = this.createBufferTracked({\n      mappedAtCreation: true,\n      size: align(dataArray.byteLength, 4),\n      usage,\n    });\n    memcpy({ src: dataArray }, { dst: buffer.getMappedRange() });\n    buffer.unmap();\n    return buffer;\n  }\n\n  /**\n   * Returns a GPUCommandEncoder, GPUComputePassEncoder, GPURenderPassEncoder, or\n   * GPURenderBundleEncoder, and a `finish` method returning a GPUCommandBuffer.\n   * Allows testing methods which have the same signature across multiple encoder interfaces.\n   *\n   * @example\n   * ```\n   * g.test('popDebugGroup')\n   *   .params(u => u.combine('encoderType', kEncoderTypes))\n   *   .fn(t => {\n   *     const { encoder, finish } = t.createEncoder(t.params.encoderType);\n   *     encoder.popDebugGroup();\n   *   });\n   *\n   * g.test('writeTimestamp')\n   *   .params(u => u.combine('encoderType', ['non-pass', 'compute pass', 'render pass'] as const)\n   *   .fn(t => {\n   *     const { encoder, finish } = t.createEncoder(t.params.encoderType);\n   *     // Encoder type is inferred, so `writeTimestamp` can be used even though it doesn't exist\n   *     // on GPURenderBundleEncoder.\n   *     encoder.writeTimestamp(args);\n   *   });\n   * ```\n   */\n  createEncoder<T extends EncoderType>(\n    encoderType: T,\n    {\n      attachmentInfo,\n      occlusionQuerySet,\n      targets,\n    }: {\n      attachmentInfo?: GPURenderBundleEncoderDescriptor;\n      occlusionQuerySet?: GPUQuerySet;\n      targets?: GPUTextureView[];\n    } = {}\n  ): CommandBufferMaker<T> {\n    const fullAttachmentInfo = {\n      // Defaults if not overridden:\n      colorFormats: ['rgba8unorm'],\n      sampleCount: 1,\n      // Passed values take precedent.\n      ...attachmentInfo,\n    } as const;\n\n    switch (encoderType) {\n      case 'non-pass': {\n        const encoder = this.device.createCommandEncoder();\n\n        return new CommandBufferMaker(this, encoder, () => {\n          return encoder.finish();\n        });\n      }\n      case 'render bundle': {\n        const device = this.device;\n        const rbEncoder = device.createRenderBundleEncoder(fullAttachmentInfo);\n        const pass = this.createEncoder('render pass', { attachmentInfo, targets });\n\n        return new CommandBufferMaker(this, rbEncoder, () => {\n          pass.encoder.executeBundles([rbEncoder.finish()]);\n          return pass.finish();\n        });\n      }\n      case 'compute pass': {\n        const commandEncoder = this.device.createCommandEncoder();\n        const encoder = commandEncoder.beginComputePass();\n\n        return new CommandBufferMaker(this, encoder, () => {\n          encoder.end();\n          return commandEncoder.finish();\n        });\n      }\n      case 'render pass': {\n        const makeAttachmentView = (format: GPUTextureFormat) =>\n          this.createTextureTracked({\n            size: [16, 16, 1],\n            format,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            sampleCount: fullAttachmentInfo.sampleCount,\n          }).createView();\n\n        let depthStencilAttachment: GPURenderPassDepthStencilAttachment | undefined = undefined;\n        if (fullAttachmentInfo.depthStencilFormat !== undefined) {\n          depthStencilAttachment = {\n            view: makeAttachmentView(fullAttachmentInfo.depthStencilFormat),\n            depthReadOnly: fullAttachmentInfo.depthReadOnly,\n            stencilReadOnly: fullAttachmentInfo.stencilReadOnly,\n          };\n          if (\n            isDepthTextureFormat(fullAttachmentInfo.depthStencilFormat) &&\n            !fullAttachmentInfo.depthReadOnly\n          ) {\n            depthStencilAttachment.depthClearValue = 0;\n            depthStencilAttachment.depthLoadOp = 'clear';\n            depthStencilAttachment.depthStoreOp = 'discard';\n          }\n          if (\n            isStencilTextureFormat(fullAttachmentInfo.depthStencilFormat) &&\n            !fullAttachmentInfo.stencilReadOnly\n          ) {\n            depthStencilAttachment.stencilClearValue = 1;\n            depthStencilAttachment.stencilLoadOp = 'clear';\n            depthStencilAttachment.stencilStoreOp = 'discard';\n          }\n        }\n        const passDesc: GPURenderPassDescriptor = {\n          colorAttachments: Array.from(fullAttachmentInfo.colorFormats, (format, i) =>\n            format\n              ? {\n                  view: targets ? targets[i] : makeAttachmentView(format),\n                  clearValue: [0, 0, 0, 0],\n                  loadOp: 'clear',\n                  storeOp: 'store',\n                }\n              : null\n          ),\n          depthStencilAttachment,\n          occlusionQuerySet,\n        };\n\n        const commandEncoder = this.device.createCommandEncoder();\n        const encoder = commandEncoder.beginRenderPass(passDesc);\n        return new CommandBufferMaker(this, encoder, () => {\n          encoder.end();\n          return commandEncoder.finish();\n        });\n      }\n    }\n    unreachable();\n  }\n}\n\n/**\n * Fixture for WebGPU tests that uses a DeviceProvider\n */\nexport class GPUTest extends GPUTestBase {\n  // Should never be undefined in a test. If it is, init() must not have run/finished.\n  private provider: DeviceProvider | undefined;\n  private mismatchedProvider: DeviceProvider | undefined;\n\n  override async init() {\n    await super.init();\n\n    this.provider = await this.sharedState.acquireProvider();\n    this.mismatchedProvider = await this.sharedState.acquireMismatchedProvider();\n  }\n\n  /** GPUAdapter that the device was created from. */\n  get adapter(): GPUAdapter {\n    assert(this.provider !== undefined, 'internal error: DeviceProvider missing');\n    return this.provider.adapter;\n  }\n\n  /**\n   * GPUDevice for the test to use.\n   */\n  override get device(): GPUDevice {\n    assert(this.provider !== undefined, 'internal error: DeviceProvider missing');\n    return this.provider.device;\n  }\n\n  /**\n   * GPUDevice for tests requiring a second device different from the default one,\n   * e.g. for creating objects for by device_mismatch validation tests.\n   */\n  get mismatchedDevice(): GPUDevice {\n    assert(\n      this.mismatchedProvider !== undefined,\n      'usesMismatchedDevice or selectMismatchedDeviceOrSkipTestCase was not called in beforeAllSubcases'\n    );\n    return this.mismatchedProvider.device;\n  }\n\n  /**\n   * Expects that the device should be lost for a particular reason at the teardown of the test.\n   */\n  expectDeviceLost(reason: GPUDeviceLostReason): void {\n    assert(this.provider !== undefined, 'internal error: GPUDevice missing?');\n    this.provider.expectDeviceLost(reason);\n  }\n}\n\n/**\n * Gets the adapter limits as a standard JavaScript object.\n */\nfunction getAdapterLimitsAsDeviceRequiredLimits(adapter: GPUAdapter) {\n  const requiredLimits: Record<string, GPUSize64> = {};\n  const adapterLimits = adapter.limits as unknown as Record<string, GPUSize64>;\n  for (const key in adapter.limits) {\n    // MAINTENANCE_TODO: Remove this once minSubgroupSize is removed from\n    // chromium.\n    if (key === 'maxSubgroupSize' || key === 'minSubgroupSize') {\n      continue;\n    }\n    requiredLimits[key] = adapterLimits[key];\n  }\n  return requiredLimits;\n}\n\n/**\n * Removes limits that don't exist on the adapter.\n * A test might request a new limit that not all implementations support. The test itself\n * should check the requested limit using code that expects undefined.\n *\n * ```ts\n *    t.skipIf(limit < 2);     // BAD! Doesn't skip if unsupported because undefined is never less than 2.\n *    t.skipIf(!(limit >= 2)); // Good. Skips if limits is not >= 2. undefined is not >= 2.\n * ```\n */\nfunction removeNonExistentLimits(adapter: GPUAdapter, limits: Record<string, GPUSize64>) {\n  const filteredLimits: Record<string, GPUSize64> = {};\n  const adapterLimits = adapter.limits as unknown as Record<string, GPUSize64>;\n  for (const [limit, value] of Object.entries(limits)) {\n    if (adapterLimits[limit] !== undefined) {\n      filteredLimits[limit] = value;\n    }\n  }\n  return filteredLimits;\n}\n\nfunction applyLimitsToDescriptor(\n  adapter: GPUAdapter,\n  desc: CanonicalDeviceDescriptor | undefined,\n  getRequiredLimits: (adapter: GPUAdapter) => Record<string, number>\n) {\n  const descWithMaxLimits: CanonicalDeviceDescriptor = {\n    requiredFeatures: [],\n    defaultQueue: {},\n    ...desc,\n    requiredLimits: removeNonExistentLimits(adapter, getRequiredLimits(adapter)),\n  };\n  return descWithMaxLimits;\n}\n\nfunction getAdapterFeaturesAsDeviceRequiredFeatures(adapter: GPUAdapter): Iterable<GPUFeatureName> {\n  return [...adapter.features].filter(\n    f => f !== 'core-features-and-limits'\n  ) as Iterable<GPUFeatureName>;\n}\n\nfunction applyFeaturesToDescriptor(\n  adapter: GPUAdapter,\n  desc: CanonicalDeviceDescriptor | undefined,\n  getRequiredFeatures: (adapter: GPUAdapter) => Iterable<GPUFeatureName>\n) {\n  const existingRequiredFeatures = (desc && desc?.requiredFeatures) ?? [];\n  const descWithRequiredFeatures: CanonicalDeviceDescriptor = {\n    requiredLimits: {},\n    defaultQueue: {},\n    ...desc,\n    requiredFeatures: [...existingRequiredFeatures, ...getRequiredFeatures(adapter)],\n  };\n  return descWithRequiredFeatures;\n}\n\n/**\n * Used by RequiredLimitsTestMixin to allow you to request specific limits\n *\n * Supply a `getRequiredLimits` function that given a GPUAdapter, turns the limits\n * you want.\n *\n * Also supply a key function that returns a device key. You should generally return\n * the name of each limit you request and any math you did on the limit. For example\n *\n * ```js\n * {\n *   getRequiredLimits(adapter) {\n *     return {\n *       maxBindGroups: adapter.limits.maxBindGroups / 2,\n *       maxTextureDimensions2D: Math.max(adapter.limits.maxTextureDimensions2D, 8192),\n *     },\n *   },\n *   key() {\n *     return `\n *       maxBindGroups / 2,\n *       max(maxTextureDimension2D, 8192),\n *     `;\n *   },\n * }\n * ```\n *\n * Its important to note, the key is used BEFORE knowing the adapter limits to get a device\n * that was already created with the same key.\n */\ninterface RequiredLimitsHelper {\n  getRequiredLimits: (adapter: GPUAdapter) => Record<string, number>;\n  key(): string;\n}\n\n/**\n * Used by RequiredLimitsTest to request a device with all requested limits of the adapter.\n */\nexport class RequiredLimitsGPUTestSubcaseBatchState extends GPUTestSubcaseBatchState {\n  private requiredLimitsHelper: RequiredLimitsHelper;\n  constructor(\n    protected override readonly recorder: TestCaseRecorder,\n    public override readonly params: TestParams,\n    requiredLimitsHelper: RequiredLimitsHelper\n  ) {\n    super(recorder, params);\n    this.requiredLimitsHelper = requiredLimitsHelper;\n  }\n  override requestDeviceWithRequiredParametersOrSkip(\n    descriptor: DeviceSelectionDescriptor,\n    descriptorModifier?: DescriptorModifier\n  ): void {\n    const requiredLimitsHelper = this.requiredLimitsHelper;\n    const mod: DescriptorModifier = {\n      descriptorModifier(adapter: GPUAdapter, desc: CanonicalDeviceDescriptor | undefined) {\n        desc = descriptorModifier?.descriptorModifier\n          ? descriptorModifier.descriptorModifier(adapter, desc)\n          : desc;\n        return applyLimitsToDescriptor(adapter, desc, requiredLimitsHelper.getRequiredLimits);\n      },\n      keyModifier(baseKey: string) {\n        return `${baseKey}:${requiredLimitsHelper.key()}`;\n      },\n    };\n    super.requestDeviceWithRequiredParametersOrSkip(\n      initUncanonicalizedDeviceDescriptor(descriptor),\n      mod\n    );\n  }\n}\n\nexport type RequiredLimitsTestMixinType = {\n  // placeholder. Change to an interface if we need MaxLimits specific methods.\n};\n\n/**\n * A text mixin to make it relatively easy to request specific limits.\n */\nexport function RequiredLimitsTestMixin<F extends FixtureClass<GPUTestBase>>(\n  Base: F,\n  requiredLimitsHelper: RequiredLimitsHelper\n): FixtureClassWithMixin<F, RequiredLimitsTestMixinType> {\n  class RequiredLimitsImpl\n    extends (Base as FixtureClassInterface<GPUTestBase>)\n    implements RequiredLimitsTestMixinType\n  {\n    //\n    public static override MakeSharedState(\n      recorder: TestCaseRecorder,\n      params: TestParams\n    ): GPUTestSubcaseBatchState {\n      return new RequiredLimitsGPUTestSubcaseBatchState(recorder, params, requiredLimitsHelper);\n    }\n  }\n\n  return RequiredLimitsImpl as unknown as FixtureClassWithMixin<F, RequiredLimitsTestMixinType>;\n}\n\n/**\n * Requests all the max limits from the adapter.\n * @deprecated Use AllFeaturesMaxLimitsGPUTest or related.\n */\nexport function MaxLimitsTestMixin<F extends FixtureClass<GPUTestBase>>(Base: F) {\n  return RequiredLimitsTestMixin(Base, {\n    getRequiredLimits: getAdapterLimitsAsDeviceRequiredLimits,\n    key() {\n      return 'AllLimits';\n    },\n  });\n}\n\n/**\n * Used by AllFeaturesMaxLimitsGPUTest to request a device with all limits and features of the adapter.\n */\nexport class AllFeaturesMaxLimitsGPUTestSubcaseBatchState extends GPUTestSubcaseBatchState {\n  constructor(\n    protected override readonly recorder: TestCaseRecorder,\n    public override readonly params: TestParams\n  ) {\n    super(recorder, params);\n  }\n  override requestDeviceWithRequiredParametersOrSkip(\n    descriptor: DeviceSelectionDescriptor,\n    descriptorModifier?: DescriptorModifier\n  ): void {\n    const mod: DescriptorModifier = {\n      descriptorModifier(adapter: GPUAdapter, desc: CanonicalDeviceDescriptor | undefined) {\n        desc = descriptorModifier?.descriptorModifier\n          ? descriptorModifier.descriptorModifier(adapter, desc)\n          : desc;\n        desc = applyLimitsToDescriptor(adapter, desc, getAdapterLimitsAsDeviceRequiredLimits);\n        desc = applyFeaturesToDescriptor(adapter, desc, getAdapterFeaturesAsDeviceRequiredFeatures);\n        return desc;\n      },\n      keyModifier(baseKey: string) {\n        return `${baseKey}:AllFeaturesMaxLimits`;\n      },\n    };\n    super.requestDeviceWithRequiredParametersOrSkip(\n      initUncanonicalizedDeviceDescriptor(descriptor),\n      mod\n    );\n  }\n\n  /**\n   * Use skipIfDeviceDoesNotHaveFeature or similar. If you really need to test\n   * lack of a feature (for example tests under webgpu/api/validation/capability_checks)\n   * then use UniqueFeaturesAndLimitsGPUTest\n   */\n  override selectDeviceOrSkipTestCase(descriptor: DeviceSelectionDescriptor): void {\n    unreachable('this function should not be called in AllFeaturesMaxLimitsGPUTest');\n  }\n\n  /**\n   * Use skipIfDeviceDoesNotHaveFeature or similar.\n   */\n  override selectDeviceForQueryTypeOrSkipTestCase(types: GPUQueryType | GPUQueryType[]): void {\n    unreachable('this function should not be called in AllFeaturesMaxLimitsGPUTest');\n  }\n\n  /**\n   * Use skipIfDeviceDoesNotHaveFeature or skipIf(device.limits.maxXXX < requiredXXX) etc...\n   */\n  override selectDeviceForTextureFormatOrSkipTestCase(\n    formats: GPUTextureFormat | undefined | (GPUTextureFormat | undefined)[]\n  ): void {\n    unreachable('this function should not be called in AllFeaturesMaxLimitsGPUTest');\n  }\n\n  /**\n   * Use skipIfDeviceDoesNotHaveFeature or skipIf(device.limits.maxXXX < requiredXXX) etc...\n   */\n  selectMismatchedDeviceOrSkipTestCase(descriptor: DeviceSelectionDescriptor): void {\n    unreachable('this function should not be called in AllFeaturesMaxLimitsGPUTest');\n  }\n}\n\n/**\n * Most tests should be using `AllFeaturesMaxLimitsGPUTest`. The exceptions\n * are tests specifically validating limits like those under api/validation/capability_checks/limits\n * and those tests the specifically validate certain features fail validation if not enabled\n * like those under api/validation/capability_checks/feature.\n *\n * NOTE: The goal is to go through all existing tests and remove any direct use of GPUTest.\n * For each test, choose either AllFeaturesMaxLimitsGPUTest or UniqueFeaturesOrLimitsGPUTest.\n * This way we can track progress as we go through every test using GPUTest and check it is\n * testing everything it should test.\n */\nexport class UniqueFeaturesOrLimitsGPUTest extends GPUTest {}\n\n/**\n * A test that requests all features and maximum limits. This should be the default\n * test for the majority of tests, otherwise optional features will not be tested.\n * The exceptions are only tests that explicitly test the absence of a feature or\n * specific limits such as the tests under validation/capability_checks.\n *\n * As a concrete example to demonstrate the issue, texture format `rg11b10ufloat` is\n * optionally renderable and can optionally be used multisampled. Any test that tests\n * texture formats should test this format, skipping only if the feature is missing.\n * So, the default should be that the test tests `kAllTextureFormats` with the appropriate\n * filters from format_info.ts or the various helpers. This way, `rg11b10ufloat` will\n * included in the test and fail if not appropriately filtered. If instead you were\n * to use GPUTest then `rg11b10ufloat` would just be skipped as its never enabled.\n * You could enable it manually but that spreads enabling to every test instead of being\n * centralized in one place, here.\n */\nexport class AllFeaturesMaxLimitsGPUTest extends GPUTest {\n  public static override MakeSharedState(\n    recorder: TestCaseRecorder,\n    params: TestParams\n  ): GPUTestSubcaseBatchState {\n    return new AllFeaturesMaxLimitsGPUTestSubcaseBatchState(recorder, params);\n  }\n}\n\n/**\n * Texture expectation mixin can be applied on top of GPUTest to add texture\n * related expectation helpers.\n */\nexport interface TextureTestMixinType {\n  /**\n   * Creates a 1 mip level texture with the contents of a TexelView and tracks\n   * it for destruction for the test case.\n   */\n  createTextureFromTexelView(\n    texelView: TexelView,\n    desc: Omit<GPUTextureDescriptor, 'format'>\n  ): GPUTexture;\n\n  /**\n   * Creates a mipmapped texture where each mipmap level's (`i`) content is\n   * from `texelViews[i]` and tracks it for destruction for the test case.\n   */\n  createTextureFromTexelViewsMultipleMipmaps(\n    texelViews: TexelView[],\n    desc: Omit<GPUTextureDescriptor, 'format'>\n  ): GPUTexture;\n\n  /**\n   * Expects that comparing the subrect (defined via `size`) of a GPUTexture\n   * to the expected TexelView passes without error.\n   */\n  expectTexelViewComparisonIsOkInTexture(\n    src: GPUTexelCopyTextureInfo,\n    exp: TexelView,\n    size: GPUExtent3D,\n    comparisonOptions?: TexelCompareOptions\n  ): void;\n\n  /**\n   * Expects that a sparse set of pixels in the GPUTexture passes comparison against\n   * their expected colors without error.\n   */\n  expectSinglePixelComparisonsAreOkInTexture<E extends PixelExpectation>(\n    src: GPUTexelCopyTextureInfo,\n    exp: PerPixelComparison<E>[],\n    comparisonOptions?: TexelCompareOptions\n  ): void;\n\n  /**\n   * Renders the 2 given textures to an rgba8unorm texture at the size of the\n   * specified mipLevel, each time reading the contents of the result.\n   * Expects contents of both renders to match. Also expects contents described\n   * by origin and size to not be a constant value so as to make sure something\n   * interesting was actually compared.\n   *\n   * The point of this function is to compare compressed texture contents in\n   * compatibility mode. `copyTextureToBuffer` does not work for compressed\n   * textures in compatibility mode so instead, we pass 2 compressed texture\n   * to this function. Each one will be rendered to an `rgba8unorm` texture,\n   * the results of that `rgba8unorm` texture read via `copyTextureToBuffer`,\n   * and then results compared. This indirectly lets us compare the contents\n   * of the 2 compressed textures.\n   *\n   * Code calling this function would generate the textures where the\n   * `actualTexture` is generated calling `writeTexture`, `copyBufferToTexture`\n   * or `copyTextureToTexture` and `expectedTexture`'s data is generated entirely\n   * on the CPU in such a way that its content should match whatever process\n   * was used to generate `actualTexture`. Often this involves calling\n   * `updateLinearTextureDataSubBox`\n   */\n  expectTexturesToMatchByRendering(\n    actualTexture: GPUTexture,\n    expectedTexture: GPUTexture,\n    mipLevel: number,\n    origin: Required<GPUOrigin3DDict>,\n    size: Required<GPUExtent3DDict>\n  ): void;\n\n  /**\n   * Copies an entire texture's mipLevel to a buffer\n   */\n  copyWholeTextureToNewBufferSimple(texture: GPUTexture, mipLevel: number): GPUBuffer;\n\n  /**\n   * Copies an texture's mipLevel to a buffer\n   * The size of the buffer is specified by `byteLength`\n   */\n  copyWholeTextureToNewBuffer(\n    { texture, mipLevel }: { texture: GPUTexture; mipLevel: number | undefined },\n    resultDataLayout: {\n      bytesPerBlock: number;\n      byteLength: number;\n      bytesPerRow: number;\n      rowsPerImage: number;\n      mipSize: [number, number, number];\n    }\n  ): GPUBuffer;\n\n  /**\n   * Updates a Uint8Array with a cubic portion of data from another Uint8Array.\n   * Effectively it's a Uint8Array to Uint8Array copy that\n   * does the same thing as `writeTexture` but because the\n   * destination is a buffer you have to provide the parameters\n   * of the destination buffer similarly to how you'd provide them\n   * to `copyTextureToBuffer`\n   */\n  updateLinearTextureDataSubBox(\n    format: ColorTextureFormat,\n    copySize: Required<GPUExtent3DDict>,\n    copyParams: {\n      dest: LinearCopyParameters;\n      src: LinearCopyParameters;\n    }\n  ): void;\n\n  /**\n   * Gets a byte offset to a texel\n   */\n  getTexelOffsetInBytes(\n    textureDataLayout: Required<GPUTexelCopyBufferLayout>,\n    format: ColorTextureFormat,\n    texel: Required<GPUOrigin3DDict>,\n    origin?: Required<GPUOrigin3DDict>\n  ): number;\n\n  iterateBlockRows(\n    size: Required<GPUExtent3DDict>,\n    format: ColorTextureFormat\n  ): Generator<Required<GPUOrigin3DDict>>;\n}\n\ntype PipelineType = '2d' | '2d-array';\n\ntype ImageCopyTestResources = {\n  pipelineByPipelineType: Map<PipelineType, GPURenderPipeline>;\n};\n\nconst s_deviceToResourcesMap = new WeakMap<GPUDevice, ImageCopyTestResources>();\n\n/**\n * Gets a (cached) pipeline to render a texture to an rgba8unorm texture\n */\nfunction getPipelineToRenderTextureToRGB8UnormTexture(\n  device: GPUDevice,\n  texture: GPUTexture,\n  isCompatibility: boolean\n) {\n  if (!s_deviceToResourcesMap.has(device)) {\n    s_deviceToResourcesMap.set(device, {\n      pipelineByPipelineType: new Map<PipelineType, GPURenderPipeline>(),\n    });\n  }\n\n  const { pipelineByPipelineType } = s_deviceToResourcesMap.get(device)!;\n  const pipelineType: PipelineType =\n    isCompatibility && texture.depthOrArrayLayers > 1 ? '2d-array' : '2d';\n  if (!pipelineByPipelineType.get(pipelineType)) {\n    const [textureType, layerCode] =\n      pipelineType === '2d' ? ['texture_2d', ''] : ['texture_2d_array', ', uni.baseArrayLayer'];\n    const module = device.createShaderModule({\n      code: `\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        struct Uniforms {\n          baseArrayLayer: u32,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n            let pos = array(\n               vec2f(-1, -1),\n               vec2f(-1,  3),\n               vec2f( 3, -1),\n            );\n\n            var vsOutput: VSOutput;\n\n            let xy = pos[vertexIndex];\n\n            vsOutput.position = vec4f(xy, 0.0, 1.0);\n            vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n\n            return vsOutput;\n         }\n\n         @group(0) @binding(0) var ourSampler: sampler;\n         @group(0) @binding(1) var ourTexture: ${textureType}<f32>;\n         @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n         @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n            return textureSample(ourTexture, ourSampler, fsInput.texcoord${layerCode});\n         }\n      `,\n    });\n    const pipeline = device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vs',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n    pipelineByPipelineType.set(pipelineType, pipeline);\n  }\n  const pipeline = pipelineByPipelineType.get(pipelineType)!;\n  return { pipelineType, pipeline };\n}\n\ntype LinearCopyParameters = {\n  dataLayout: Required<GPUTexelCopyBufferLayout>;\n  origin: Required<GPUOrigin3DDict>;\n  data: Uint8Array;\n};\n\nexport function TextureTestMixin<F extends FixtureClass<GPUTestBase>>(\n  Base: F\n): FixtureClassWithMixin<F, TextureTestMixinType> {\n  class TextureExpectations\n    extends (Base as FixtureClassInterface<GPUTestBase>)\n    implements TextureTestMixinType\n  {\n    /**\n     * Creates a 1 mip level texture with the contents of a TexelView.\n     */\n    createTextureFromTexelView(\n      texelView: TexelView,\n      desc: Omit<GPUTextureDescriptor, 'format'>\n    ): GPUTexture {\n      return createTextureFromTexelViews(this, [texelView], desc);\n    }\n\n    createTextureFromTexelViewsMultipleMipmaps(\n      texelViews: TexelView[],\n      desc: Omit<GPUTextureDescriptor, 'format'>\n    ): GPUTexture {\n      return createTextureFromTexelViews(this, texelViews, desc);\n    }\n\n    expectTexelViewComparisonIsOkInTexture(\n      src: GPUTexelCopyTextureInfo,\n      exp: TexelView,\n      size: GPUExtent3D,\n      comparisonOptions = {\n        maxIntDiff: 0,\n        maxDiffULPsForNormFormat: 1,\n        maxDiffULPsForFloatFormat: 1,\n      }\n    ): void {\n      this.eventualExpectOK(\n        textureContentIsOKByT2B(this, src, size, { expTexelView: exp }, comparisonOptions)\n      );\n    }\n\n    expectSinglePixelComparisonsAreOkInTexture<E extends PixelExpectation>(\n      src: GPUTexelCopyTextureInfo,\n      exp: PerPixelComparison<E>[],\n      comparisonOptions = {\n        maxIntDiff: 0,\n        maxDiffULPsForNormFormat: 1,\n        maxDiffULPsForFloatFormat: 1,\n      }\n    ): void {\n      assert(exp.length > 0, 'must specify at least one pixel comparison');\n      assert(\n        (kEncodableTextureFormats as GPUTextureFormat[]).includes(src.texture.format),\n        () => `${src.texture.format} is not an encodable format`\n      );\n      const lowerCorner = [src.texture.width, src.texture.height, src.texture.depthOrArrayLayers];\n      const upperCorner = [0, 0, 0];\n      const expMap = new Map<string, E>();\n      const coords: Required<GPUOrigin3DDict>[] = [];\n      for (const e of exp) {\n        const coord = reifyOrigin3D(e.coord);\n        const coordKey = JSON.stringify(coord);\n        coords.push(coord);\n\n        // Compute the minimum sub-rect that encompasses all the pixel comparisons. The\n        // `lowerCorner` will become the origin, and the `upperCorner` will be used to compute the\n        // size.\n        lowerCorner[0] = Math.min(lowerCorner[0], coord.x);\n        lowerCorner[1] = Math.min(lowerCorner[1], coord.y);\n        lowerCorner[2] = Math.min(lowerCorner[2], coord.z);\n        upperCorner[0] = Math.max(upperCorner[0], coord.x);\n        upperCorner[1] = Math.max(upperCorner[1], coord.y);\n        upperCorner[2] = Math.max(upperCorner[2], coord.z);\n\n        // Build a sparse map of the coordinates to the expected colors for the texel view.\n        assert(\n          !expMap.has(coordKey),\n          () => `duplicate pixel expectation at coordinate (${coord.x},${coord.y},${coord.z})`\n        );\n        expMap.set(coordKey, e.exp);\n      }\n      const size: GPUExtent3D = [\n        upperCorner[0] - lowerCorner[0] + 1,\n        upperCorner[1] - lowerCorner[1] + 1,\n        upperCorner[2] - lowerCorner[2] + 1,\n      ];\n      let expTexelView: TexelView;\n      if (Symbol.iterator in exp[0].exp) {\n        expTexelView = TexelView.fromTexelsAsBytes(\n          src.texture.format as EncodableTextureFormat,\n          coord => {\n            const res = expMap.get(JSON.stringify(coord));\n            assert(\n              res !== undefined,\n              () => `invalid coordinate (${coord.x},${coord.y},${coord.z}) in sparse texel view`\n            );\n            return res as Uint8Array;\n          }\n        );\n      } else {\n        expTexelView = TexelView.fromTexelsAsColors(\n          src.texture.format as EncodableTextureFormat,\n          coord => {\n            const res = expMap.get(JSON.stringify(coord));\n            assert(\n              res !== undefined,\n              () => `invalid coordinate (${coord.x},${coord.y},${coord.z}) in sparse texel view`\n            );\n            return res as PerTexelComponent<number>;\n          }\n        );\n      }\n      const coordsF = (function* () {\n        for (const coord of coords) {\n          yield coord;\n        }\n      })();\n\n      this.eventualExpectOK(\n        textureContentIsOKByT2B(\n          this,\n          { ...src, origin: reifyOrigin3D(lowerCorner) },\n          size,\n          { expTexelView },\n          comparisonOptions,\n          coordsF\n        )\n      );\n    }\n\n    expectTexturesToMatchByRendering(\n      actualTexture: GPUTexture,\n      expectedTexture: GPUTexture,\n      mipLevel: number,\n      origin: Required<GPUOrigin3DDict>,\n      size: Required<GPUExtent3DDict>\n    ): void {\n      // Render every layer of both textures at mipLevel to an rgba8unorm texture\n      // that matches the size of the mipLevel. After each render, copy the\n      // result to a buffer and expect the results from both textures to match.\n      const { pipelineType, pipeline } = getPipelineToRenderTextureToRGB8UnormTexture(\n        this.device,\n        actualTexture,\n        this.isCompatibility\n      );\n      const readbackPromisesPerTexturePerLayer = [actualTexture, expectedTexture].map(\n        (texture, ndx) => {\n          const attachmentSize = virtualMipSize('2d', [texture.width, texture.height, 1], mipLevel);\n          const attachment = this.createTextureTracked({\n            label: `readback${ndx}`,\n            size: attachmentSize,\n            format: 'rgba8unorm',\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n          });\n\n          const sampler = this.device.createSampler();\n\n          const numLayers = texture.depthOrArrayLayers;\n          const readbackPromisesPerLayer = [];\n\n          const uniformBuffer = this.createBufferTracked({\n            label: 'expectTexturesToMatchByRendering:uniforBuffer',\n            size: 4,\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n          });\n\n          for (let layer = 0; layer < numLayers; ++layer) {\n            const viewDescriptor: GPUTextureViewDescriptor = {\n              baseMipLevel: mipLevel,\n              mipLevelCount: 1,\n              ...(!this.isCompatibility && {\n                baseArrayLayer: layer,\n                arrayLayerCount: 1,\n              }),\n              dimension: pipelineType,\n            };\n\n            const bindGroup = this.device.createBindGroup({\n              layout: pipeline.getBindGroupLayout(0),\n              entries: [\n                { binding: 0, resource: sampler },\n                {\n                  binding: 1,\n                  resource: texture.createView(viewDescriptor),\n                },\n                ...(pipelineType === '2d-array'\n                  ? [\n                      {\n                        binding: 2,\n                        resource: { buffer: uniformBuffer },\n                      },\n                    ]\n                  : []),\n              ],\n            });\n\n            this.device.queue.writeBuffer(uniformBuffer, 0, new Uint32Array([layer]));\n\n            const encoder = this.device.createCommandEncoder({\n              label: 'expectTexturesToMatchByRendering',\n            });\n            const pass = encoder.beginRenderPass({\n              colorAttachments: [\n                {\n                  view: attachment.createView(),\n                  clearValue: [0.5, 0.5, 0.5, 0.5],\n                  loadOp: 'clear',\n                  storeOp: 'store',\n                },\n              ],\n            });\n            pass.setPipeline(pipeline);\n            pass.setBindGroup(0, bindGroup);\n            pass.draw(3);\n            pass.end();\n            this.queue.submit([encoder.finish()]);\n\n            const buffer = this.copyWholeTextureToNewBufferSimple(attachment, 0);\n\n            readbackPromisesPerLayer.push(\n              this.readGPUBufferRangeTyped(buffer, {\n                type: Uint8Array,\n                typedLength: buffer.size,\n              })\n            );\n          }\n          return readbackPromisesPerLayer;\n        }\n      );\n\n      this.eventualAsyncExpectation(async niceStack => {\n        const readbacksPerTexturePerLayer = [];\n\n        // Wait for all buffers to be ready\n        for (const readbackPromises of readbackPromisesPerTexturePerLayer) {\n          readbacksPerTexturePerLayer.push(await Promise.all(readbackPromises));\n        }\n\n        function arrayNotAllTheSameValue(arr: TypedArrayBufferView | number[], msg?: string) {\n          const first = arr[0];\n          return arr.length <= 1 || arr.findIndex(v => v !== first) >= 0\n            ? undefined\n            : Error(`array is entirely ${first} so likely nothing was tested: ${msg || ''}`);\n        }\n\n        // Compare each layer of each texture as read from buffer.\n        const [actualReadbacksPerLayer, expectedReadbacksPerLayer] = readbacksPerTexturePerLayer;\n        for (let layer = 0; layer < actualReadbacksPerLayer.length; ++layer) {\n          const actualReadback = actualReadbacksPerLayer[layer];\n          const expectedReadback = expectedReadbacksPerLayer[layer];\n          const sameOk =\n            size.width === 0 ||\n            size.height === 0 ||\n            layer < origin.z ||\n            layer >= origin.z + size.depthOrArrayLayers;\n          this.expectOK(\n            sameOk ? undefined : arrayNotAllTheSameValue(actualReadback.data, 'actualTexture')\n          );\n          this.expectOK(\n            sameOk ? undefined : arrayNotAllTheSameValue(expectedReadback.data, 'expectedTexture')\n          );\n          this.expectOK(checkElementsEqual(actualReadback.data, expectedReadback.data), {\n            mode: 'fail',\n            niceStack,\n          });\n          actualReadback.cleanup();\n          expectedReadback.cleanup();\n        }\n      });\n    }\n\n    copyWholeTextureToNewBufferSimple(texture: GPUTexture, mipLevel: number) {\n      const { blockWidth, blockHeight, bytesPerBlock } = getBlockInfoForTextureFormat(\n        texture.format\n      );\n      const mipSize = physicalMipSizeFromTexture(texture, mipLevel);\n      assert(bytesPerBlock !== undefined);\n\n      const blocksPerRow = mipSize[0] / blockWidth;\n      const blocksPerColumn = mipSize[1] / blockHeight;\n\n      assert(blocksPerRow % 1 === 0);\n      assert(blocksPerColumn % 1 === 0);\n\n      const bytesPerRow = align(blocksPerRow * bytesPerBlock, 256);\n      const byteLength = bytesPerRow * blocksPerColumn * mipSize[2];\n\n      return this.copyWholeTextureToNewBuffer(\n        { texture, mipLevel },\n        {\n          bytesPerBlock,\n          bytesPerRow,\n          rowsPerImage: blocksPerColumn,\n          byteLength,\n        }\n      );\n    }\n\n    copyWholeTextureToNewBuffer(\n      { texture, mipLevel }: { texture: GPUTexture; mipLevel: number | undefined },\n      resultDataLayout: {\n        bytesPerBlock: number;\n        byteLength: number;\n        bytesPerRow: number;\n        rowsPerImage: number;\n      }\n    ): GPUBuffer {\n      const { byteLength, bytesPerRow, rowsPerImage } = resultDataLayout;\n      const buffer = this.createBufferTracked({\n        label: 'copyWholeTextureToNewBuffer:buffer',\n        size: align(byteLength, 4), // this is necessary because we need to copy and map data from this buffer\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n      });\n\n      const mipSize = physicalMipSizeFromTexture(texture, mipLevel || 0);\n      const encoder = this.device.createCommandEncoder({ label: 'copyWholeTextureToNewBuffer' });\n      encoder.copyTextureToBuffer(\n        { texture, mipLevel },\n        { buffer, bytesPerRow, rowsPerImage },\n        mipSize\n      );\n      this.device.queue.submit([encoder.finish()]);\n\n      return buffer;\n    }\n\n    updateLinearTextureDataSubBox(\n      format: ColorTextureFormat,\n      copySize: Required<GPUExtent3DDict>,\n      copyParams: {\n        dest: LinearCopyParameters;\n        src: LinearCopyParameters;\n      }\n    ): void {\n      const { src, dest } = copyParams;\n      const rowLength = bytesInACompleteRow(copySize.width, format);\n      for (const texel of this.iterateBlockRows(copySize, format)) {\n        const srcOffsetElements = this.getTexelOffsetInBytes(\n          src.dataLayout,\n          format,\n          texel,\n          src.origin\n        );\n        const dstOffsetElements = this.getTexelOffsetInBytes(\n          dest.dataLayout,\n          format,\n          texel,\n          dest.origin\n        );\n        memcpy(\n          { src: src.data, start: srcOffsetElements, length: rowLength },\n          { dst: dest.data, start: dstOffsetElements }\n        );\n      }\n    }\n\n    /** Offset for a particular texel in the linear texture data */\n    getTexelOffsetInBytes(\n      textureDataLayout: Required<GPUTexelCopyBufferLayout>,\n      format: ColorTextureFormat,\n      texel: Required<GPUOrigin3DDict>,\n      origin: Required<GPUOrigin3DDict> = { x: 0, y: 0, z: 0 }\n    ): number {\n      const { offset, bytesPerRow, rowsPerImage } = textureDataLayout;\n      const info = getBlockInfoForColorTextureFormat(format);\n\n      assert(texel.x % info.blockWidth === 0);\n      assert(texel.y % info.blockHeight === 0);\n      assert(origin.x % info.blockWidth === 0);\n      assert(origin.y % info.blockHeight === 0);\n\n      const bytesPerImage = rowsPerImage * bytesPerRow;\n\n      return (\n        offset +\n        (texel.z + origin.z) * bytesPerImage +\n        ((texel.y + origin.y) / info.blockHeight) * bytesPerRow +\n        ((texel.x + origin.x) / info.blockWidth) * info.bytesPerBlock\n      );\n    }\n\n    *iterateBlockRows(\n      size: Required<GPUExtent3DDict>,\n      format: ColorTextureFormat\n    ): Generator<Required<GPUOrigin3DDict>> {\n      if (size.width === 0 || size.height === 0 || size.depthOrArrayLayers === 0) {\n        // do not iterate anything for an empty region\n        return;\n      }\n      const info = getBlockInfoForTextureFormat(format);\n      assert(size.height % info.blockHeight === 0);\n      // Note: it's important that the order is in increasing memory address order.\n      for (let z = 0; z < size.depthOrArrayLayers; ++z) {\n        for (let y = 0; y < size.height; y += info.blockHeight) {\n          yield {\n            x: 0,\n            y,\n            z,\n          };\n        }\n      }\n    }\n  }\n\n  return TextureExpectations as unknown as FixtureClassWithMixin<F, TextureTestMixinType>;\n}\n"],"mappings":"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"}