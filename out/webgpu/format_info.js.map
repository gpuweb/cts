{"version":3,"file":"format_info.js","names":["isCompatibilityDevice","keysOf","assert","unreachable","align","kFormatUniversalDefaults","blockWidth","undefined","blockHeight","color","depth","stencil","colorRender","multisample","feature","baseFormat","bytesPerBlock","formatTableWithDefaults","defaults","table","Object","fromEntries","entries","map","k","row","kRegularTextureFormatInfo","r8unorm","type","copySrc","copyDst","storage","readWriteStorage","bytes","blend","resolve","byteCost","alignment","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","kSizedDepthStencilFormatInfo","stencil8","depth16unorm","depth32float","kUnsizedDepthStencilFormatInfo","depth24plus","kBCTextureFormatInfo","kETC2TextureFormatInfo","kASTCTextureFormatInfo","kCompressedTextureFormatInfo","kColorTextureFormatInfo","kEncodableTextureFormatInfo","kSizedTextureFormatInfo","kDepthStencilFormatInfo","kUncompressedTextureFormatInfo","kAllTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormats","kEncodableTextureFormats","kSizedTextureFormats","kDepthStencilFormats","kUncompressedTextureFormats","kAllTextureFormats","kTextureFormatInfo","kTextureFormatInfo_TypeCheck","kDepthTextureFormats","filter","v","kStencilTextureFormats","kPossibleStorageTextureFormats","f","kPossibleReadWriteStorageTextureFormats","kPossibleMultisampledTextureFormats","kPossibleColorRenderableTextureFormats","kDifferentBaseFormatTextureFormats","kDifferentBaseFormatRegularTextureFormats","kOptionalTextureFormats","t","kValidTextureFormatsForCopyE2T","kDepthStencilFormatCapabilityInBufferTextureCopy","CopyB2T","CopyT2B","texelAspectSize","kDepthStencilFormatResolvedAspect","all","resolvePerAspectFormat","format","aspect","resolved","sampleTypeForFormatAndAspect","info","depthStencilFormatCopyableAspects","appliedType","depthStencilBufferTextureCopySupported","supportedAspects","includes","depthStencilFormatAspectSize","textureDimensionAndFormatCompatible","dimension","textureFormatsAreViewCompatible","device","a","b","getBlockInfoForColorTextureFormat","getBlockInfoForSizedTextureFormat","getBlockInfoForEncodableTextureFormat","getBlockInfoForTextureFormat","getColorRenderByteCost","getColorRenderAlignment","getBaseFormatForTextureFormat","getBaseFormatForRegularTextureFormat","getRequiredFeatureForTextureFormat","getFeaturesForFormats","formats","Array","from","Set","filterFormatsByFeature","canCopyToAspectOfTextureFormat","isDepthTextureFormat","isStencilTextureFormat","isColorTextureFormat","canCopyFromAspectOfTextureFormat","canCopyToAllAspectsOfTextureFormat","canCopyFromAllAspectsOfTextureFormat","isCompressedTextureFormat","isDepthOrStencilTextureFormat","isEncodableTextureFormat","isTextureFormatUsableAsRenderAttachment","features","has","isTextureFormatColorRenderable","isTextureFormatBlendable","is32Float","getTextureFormatType","getTextureFormatColorType","isTextureFormatPossiblyUsableAsRenderAttachment","isTextureFormatPossiblyUsableAsColorRenderAttachment","isTextureFormatPossiblyMultisampled","isTextureFormatPossiblyStorageReadable","isTextureFormatPossiblyStorageReadWritable","is16Float","isTextureFormatPossiblyFilterableAsTextureF32","kCompatModeUnsupportedStorageTextureFormats","isTextureFormatUsableAsStorageFormat","indexOf","isTextureFormatUsableAsStorageFormatInCreateShaderModule","isTextureFormatUsableAsReadWriteStorageTexture","isRegularTextureFormat","isCompressedFloatTextureFormat","isSintOrUintFormat","kCompatModeUnsupportedMultisampledTextureFormats","isTextureFormatMultisampled","isTextureFormatResolvable","kFeaturesForFormats","computeBytesPerSampleFromFormats","bytesPerSample","alignedBytesPerSample","computeBytesPerSample","targets"],"sources":["../../src/webgpu/format_info.ts"],"sourcesContent":["import { isCompatibilityDevice } from '../common/framework/test_config.js';\nimport { keysOf } from '../common/util/data_tables.js';\nimport { assert, unreachable } from '../common/util/util.js';\n\nimport { align } from './util/math.js';\nimport { ImageCopyType } from './util/texture/layout.js';\n\n//\n// Texture format tables\n//\n\n/**\n * Defaults applied to all texture format tables automatically. Used only inside\n * `formatTableWithDefaults`. This ensures keys are never missing, always explicitly `undefined`.\n *\n * All top-level keys must be defined here, or they won't be exposed at all.\n * Documentation is also written here; this makes it propagate through to the end types.\n */\nconst kFormatUniversalDefaults = {\n  /** Texel block width. */\n  blockWidth: undefined,\n  /** Texel block height. */\n  blockHeight: undefined,\n  color: undefined,\n  depth: undefined,\n  stencil: undefined,\n  /**\n   * Info when this format can be used as a color render target. The format may require a feature\n   * to actually be used as a render target. Eg: rg11b10ufloat which requires rg11b10ufloat-renderable\n   * Call {@link isTextureFormatPossiblyUsableAsColorRenderAttachment} before having a device\n   * Call {@link isTextureFormatColorRenderable}(device, format) to find out for a particular device.\n   * Use {@link kPossibleColorRenderableTextureFormats} for params.\n   */\n  colorRender: undefined,\n  /**\n   * Whether the format can possibly be used as a multisample texture. The format may require a\n   * feature to actually multisampled. Eg: rg11b10ufloat which requires rg11b10ufloat-renderable\n   * Call {@link isTextureFormatPossiblyMultisampled} before having a device\n   * Call {@link isTextureFormatMultisampled}(device, format) to find out for a particular device.\n   * Use {@link kPossibleMultisampledTextureFormats} for params.\n   */\n  multisample: undefined,\n  /** Optional feature required to use this format, or `undefined` if none. */\n  feature: undefined,\n  /** The base format for srgb formats. Specified on both srgb and equivalent non-srgb formats. */\n  baseFormat: undefined,\n\n  /** @deprecated Use `.color.bytes`, `.depth.bytes`, or `.stencil.bytes`. */\n  bytesPerBlock: undefined,\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in TextureFormatInfo_TypeCheck.\n} as const;\n/**\n * Takes `table` and applies `defaults` to every row, i.e. for each row,\n * `{ ... kUniversalDefaults, ...defaults, ...row }`.\n * This only operates at the first level; it doesn't support defaults in nested objects.\n */\nfunction formatTableWithDefaults<Defaults extends {}, Table extends { readonly [K: string]: {} }>({\n  defaults,\n  table,\n}: {\n  defaults: Defaults;\n  table: Table;\n}): {\n  readonly [F in keyof Table]: {\n    readonly [K in keyof typeof kFormatUniversalDefaults]: K extends keyof Table[F]\n      ? Table[F][K]\n      : K extends keyof Defaults\n      ? Defaults[K]\n      : (typeof kFormatUniversalDefaults)[K];\n  };\n} {\n  return Object.fromEntries(\n    Object.entries(table).map(([k, row]) => [\n      k,\n      { ...kFormatUniversalDefaults, ...defaults, ...row },\n    ])\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ) as any;\n}\n\n/** \"plain color formats\", plus rgb9e5ufloat. */\nconst kRegularTextureFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1 },\n  table: {\n    // plain, 8 bits per component\n\n    r8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    bgra8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bgra8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 16 bits per component\n\n    r16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 32 bits per component\n\n    r32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, mixed component width, 32 bits per texel\n\n    rgb10a2uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgb10a2unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg11b10ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // packed\n\n    rgb9e5ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// MAINTENANCE_TODO: Distinguishing \"sized\" and \"unsized\" depth stencil formats doesn't make sense\n// because one aspect can be sized and one can be unsized. This should be cleaned up, but is kept\n// this way during a migration phase.\nconst kSizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    stencil8: {\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      bytesPerBlock: 1,\n    },\n    depth16unorm: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      bytesPerBlock: 2,\n    },\n    depth32float: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      bytesPerBlock: 4,\n    },\n  },\n} as const);\nconst kUnsizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    depth24plus: {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n    },\n    'depth24plus-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n    },\n    'depth32float-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      feature: 'depth32float-stencil8',\n    },\n  },\n} as const);\n\nconst kBCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-bc',\n  },\n  table: {\n    'bc1-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc1-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc2-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc2-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc3-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc3-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc4-r-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc4-r-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc5-rg-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc5-rg-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc6h-rgb-ufloat': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc6h-rgb-float': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc7-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc7-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kETC2TextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-etc2',\n  },\n  table: {\n    'etc2-rgb8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgb8a1unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8a1unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgba8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-r11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-r11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-rg11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-rg11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kASTCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    multisample: false,\n    feature: 'texture-compression-astc',\n  },\n  table: {\n    'astc-4x4-unorm': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-4x4-unorm-srgb': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x4-unorm': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x4-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x5-unorm': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x5-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x5-unorm': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x5-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x6-unorm': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x6-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x5-unorm': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x5-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x6-unorm': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x6-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x8-unorm': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x8-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x5-unorm': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x5-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x6-unorm': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x6-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x8-unorm': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x8-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x10-unorm': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x10-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x10-unorm': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x10-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x12-unorm': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x12-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// Definitions for use locally.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo } as const;\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n\n/** A \"regular\" texture format (uncompressed, sized, single-plane color formats). */\n/* prettier-ignore */ export type      RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\n/** A sized depth/stencil texture format. */\n/* prettier-ignore */ export type   SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\n/** An unsized depth/stencil texture format. */\n/* prettier-ignore */ export type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\n/** A compressed (block) texture format. */\n/* prettier-ignore */ export type   CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\n/** A color texture format (regular | compressed). */\n/* prettier-ignore */ export type        ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\n/** An encodable texture format (regular | sized depth/stencil). */\n/* prettier-ignore */ export type    EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\n/** A sized texture format (regular | sized depth/stencil | compressed). */\n/* prettier-ignore */ export type        SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\n/** A depth/stencil format (sized | unsized). */\n/* prettier-ignore */ export type        DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\n/** An uncompressed (block size 1x1) format (regular | depth/stencil). */\n/* prettier-ignore */ export type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\n\n/* prettier-ignore */ export const      kRegularTextureFormats: readonly      RegularTextureFormat[] = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const   kSizedDepthStencilFormats: readonly   SizedDepthStencilFormat[] = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUnsizedDepthStencilFormats: readonly UnsizedDepthStencilFormat[] = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kCompressedTextureFormats: readonly   CompressedTextureFormat[] = keysOf(  kCompressedTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats: readonly        ColorTextureFormat[] = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats: readonly    EncodableTextureFormat[] = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats: readonly        SizedTextureFormat[] = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats: readonly        DepthStencilFormat[] = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats: readonly UncompressedTextureFormat[] = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats: readonly          GPUTextureFormat[] = keysOf(         kAllTextureFormatInfo);\n\n/** Per-GPUTextureFormat-per-aspect info. */\ninterface TextureFormatAspectInfo {\n  /** Whether the aspect can be used as `COPY_SRC`. */\n  copySrc: boolean;\n  /** Whether the aspect can be used as `COPY_DST`. */\n  copyDst: boolean;\n  /** Whether the aspect can be used as `STORAGE`. */\n  storage: boolean;\n  /** Whether the aspect can be used as `STORAGE` with `read-write` storage texture access. */\n  readWriteStorage: boolean;\n  /** The \"texel block copy footprint\" of one texel block; `undefined` if the aspect is unsized. */\n  bytes: number | undefined;\n}\n/** Per GPUTextureFormat-per-aspect info for color aspects. */\ninterface TextureFormatColorAspectInfo extends TextureFormatAspectInfo {\n  bytes: number;\n  /** \"Best\" sample type of the format. \"float\" also implies \"unfilterable-float\". */\n  type: 'float' | 'uint' | 'sint' | 'unfilterable-float';\n}\n/** Per GPUTextureFormat-per-aspect info for depth aspects. */\ninterface TextureFormatDepthAspectInfo extends TextureFormatAspectInfo {\n  /** \"depth\" also implies \"unfilterable-float\". */\n  type: 'depth';\n}\n/** Per GPUTextureFormat-per-aspect info for stencil aspects. */\ninterface TextureFormatStencilAspectInfo extends TextureFormatAspectInfo {\n  bytes: 1;\n  type: 'uint';\n}\n\n/**\n * Per-GPUTextureFormat info.\n * This is not actually the type of values in kTextureFormatInfo; that type is fully const\n * so that it can be narrowed very precisely at usage sites by the compiler.\n * This type exists only as a type check on the inferred type of kTextureFormatInfo.\n */\ntype TextureFormatInfo_TypeCheck = {\n  blockWidth: number;\n  blockHeight: number;\n  multisample: boolean;\n  baseFormat: GPUTextureFormat | undefined;\n  feature: GPUFeatureName | undefined;\n\n  bytesPerBlock: number | undefined;\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in kUniversalDefaults.\n} & (\n  | {\n      /** Color aspect info. */\n      color: TextureFormatColorAspectInfo;\n      /** Defined if the format is a color format that can be used as `RENDER_ATTACHMENT`. */\n      colorRender:\n        | undefined\n        | {\n            /** Whether the format is blendable. */\n            blend: boolean;\n            /** Whether the format can be a multisample resolve target. */\n            resolve: boolean;\n            /** The \"render target pixel byte cost\" of the format. */\n            byteCost: number;\n            /** The \"render target component alignment\" of the format. */\n            alignment: number;\n          };\n    }\n  | (\n      | {\n          /** Depth aspect info. */\n          depth: TextureFormatDepthAspectInfo;\n          /** Stencil aspect info. */\n          stencil: undefined | TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n      | {\n          /** Stencil aspect info. */\n          stencil: TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n    )\n);\n\n/**\n * DO NOT EXPORT THIS - functions that need info from this table should use the appropriate\n * method for their needs.\n *\n * For a list of textures formats for test parameters there are:\n *\n * Lists of formats that might require features to be enabled\n * * kPossibleColorRenderableTextureFormats\n * * kPossibleStorageTextureFormats\n * * kPossibleReadWriteStorageTextureFormats\n * * kPossibleMultisampledTextureFormats\n *\n * Lists of formats that end in -srgb\n * * kDifferentBaseFormatTextureFormats  (includes compressed textures)\n * * kDifferentBaseFormatRegularTextureFormats (does not include compressed textures)\n *\n * Formats that require a feature to use at all (mostly compressed formats)\n * * kOptionalTextureFormats\n *\n * Misc\n * * kRegularTextureFormats\n * * kSizedDepthStencilFormats\n * * kUnsizedDepthStencilFormats\n * * kCompressedTextureFormats\n * * kUncompressedTextureFormats\n * * kColorTextureFormats - color formats including compressed and sint/uint\n * * kEncodableTextureFormats - formats that TexelView supports.\n * * kSizedTextureFormats - formats that have a known size (so not depth24plus ...)\n * * kDepthStencilFormats - depth, stencil, depth-stencil\n * * kDepthTextureFormats - depth and depth-stencil\n * * kStencilTextureFormats - stencil and depth-stencil\n * * kAllTextureFormats\n *\n * If one of the list above does not work, add a new one or to filter in beforeAllSubcases you generally want to use\n * You will not know if you can actually use a texture for the given use case until the test runs and has a device.\n *\n * * isTextureFormatPossiblyUsableAsRenderAttachment\n * * isTextureFormatPossiblyUsableAsColorRenderAttachment\n * * isTextureFormatPossiblyMultisampled\n * * isTextureFormatPossiblyStorageReadable\n * * isTextureFormatPossiblyStorageReadWritable\n * * isTextureFormatPossiblyFilterableAsTextureF32\n *\n * These are also usable before or during a test\n *\n * * isColorTextureFormat\n * * isDepthTextureFormat\n * * isStencilTextureFormat\n * * isDepthOrStencilTextureFormat\n * * isEncodableTextureFormat\n * * isRegularTextureFormat\n * * isCompressedFloatTextureFormat\n * * isSintOrUintFormat\n *\n * To skip a test use the `skipIfXXX` tests in `GPUTest` if possible. Otherwise these functions\n * require a device to give a correct answer.\n *\n * * isTextureFormatUsableAsRenderAttachment\n * * isTextureFormatColorRenderable\n * * isTextureFormatResolvable\n * * isTextureFormatBlendable\n * * isTextureFormatMultisampled\n * * isTextureFormatUsableAsStorageFormat\n * * isTextureFormatUsableAsReadWriteStorageTexture\n * * isTextureFormatUsableAsStorageFormatInCreateShaderModule\n *\n * Per-GPUTextureFormat info.\n */\nconst kTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n  ...kBCTextureFormatInfo,\n  ...kETC2TextureFormatInfo,\n  ...kASTCTextureFormatInfo,\n} as const;\n\n/** Defining this variable verifies the type of kTextureFormatInfo2. It is not used. */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst kTextureFormatInfo_TypeCheck: {\n  readonly [F in GPUTextureFormat]: TextureFormatInfo_TypeCheck;\n} = kTextureFormatInfo;\n\n// Depth texture formats including formats that also support stencil\nexport const kDepthTextureFormats = [\n  ...kDepthStencilFormats.filter(v => kTextureFormatInfo[v].depth),\n] as const;\n// Stencil texture formats including formats that also support depth\nexport const kStencilTextureFormats = kDepthStencilFormats.filter(\n  v => kTextureFormatInfo[v].stencil\n);\n\n// Texture formats that may possibly be used as a storage texture.\n// Some may require certain features to be enabled.\nexport const kPossibleStorageTextureFormats = [\n  ...kRegularTextureFormats.filter(f => kTextureFormatInfo[f].color?.storage),\n  'bgra8unorm',\n] as const;\n\n// Texture formats that may possibly be used as a storage texture.\n// Some may require certain features to be enabled.\nexport const kPossibleReadWriteStorageTextureFormats = [\n  ...kPossibleStorageTextureFormats.filter(f => kTextureFormatInfo[f].color?.readWriteStorage),\n] as const;\n\n// Texture formats that may possibly be multisampled.\n// Some may require certain features to be enabled.\nexport const kPossibleMultisampledTextureFormats = [\n  ...kRegularTextureFormats.filter(f => kTextureFormatInfo[f].multisample),\n  ...kDepthStencilFormats.filter(f => kTextureFormatInfo[f].multisample),\n] as const;\n\n// Texture formats that may possibly be color renderable.\n// Some may require certain features to be enabled.\nexport const kPossibleColorRenderableTextureFormats = [\n  ...kRegularTextureFormats.filter(f => kTextureFormatInfo[f].colorRender),\n] as const;\nexport type PossibleColorRenderTextureFormat =\n  (typeof kPossibleColorRenderableTextureFormats)[number];\n\n// Texture formats that have a different base format. This is effectively all -srgb formats\n// including compressed formats.\nexport const kDifferentBaseFormatTextureFormats = kColorTextureFormats.filter(\n  f => kTextureFormatInfo[f].baseFormat && kTextureFormatInfo[f].baseFormat !== f\n);\n\n// \"Regular\" texture formats that have a different base format. This is effectively all -srgb formats\n// except compressed formats.\nexport const kDifferentBaseFormatRegularTextureFormats = kRegularTextureFormats.filter(\n  f => kTextureFormatInfo[f].baseFormat && kTextureFormatInfo[f].baseFormat !== f\n);\n\n// Textures formats that are optional\nexport const kOptionalTextureFormats = kAllTextureFormats.filter(\n  t => kTextureFormatInfo[t].feature !== undefined\n);\n\n/** Valid GPUTextureFormats for `copyExternalImageToTexture`, by spec. */\nexport const kValidTextureFormatsForCopyE2T = [\n  'r8unorm',\n  'r16float',\n  'r32float',\n  'rg8unorm',\n  'rg16float',\n  'rg32float',\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rgba16float',\n  'rgba32float',\n] as const;\n\n//\n// Other related stuff\n//\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': -1 },\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 2, 'stencil-only': -1 },\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': -1 },\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n} as const;\n\n/** `kDepthStencilFormatResolvedAspect[format][aspect]` returns the aspect-specific format for a\n *  depth-stencil format, or `undefined` if the format doesn't have the aspect.\n */\nexport const kDepthStencilFormatResolvedAspect: {\n  readonly [k in DepthStencilFormat]: {\n    readonly [a in GPUTextureAspect]: DepthStencilFormat | undefined;\n  };\n} = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    all: 'depth24plus',\n    'depth-only': 'depth24plus',\n    'stencil-only': undefined,\n  },\n  'depth24plus-stencil8': {\n    all: 'depth24plus-stencil8',\n    'depth-only': 'depth24plus',\n    'stencil-only': 'stencil8',\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    all: 'depth16unorm',\n    'depth-only': 'depth16unorm',\n    'stencil-only': undefined,\n  },\n  depth32float: {\n    all: 'depth32float',\n    'depth-only': 'depth32float',\n    'stencil-only': undefined,\n  },\n  'depth32float-stencil8': {\n    all: 'depth32float-stencil8',\n    'depth-only': 'depth32float',\n    'stencil-only': 'stencil8',\n  },\n  stencil8: {\n    all: 'stencil8',\n    'depth-only': undefined,\n    'stencil-only': 'stencil8',\n  },\n} as const;\n\n/**\n * @returns the GPUTextureFormat corresponding to the @param aspect of @param format.\n * This allows choosing the correct format for depth-stencil aspects when creating pipelines that\n * will have to match the resolved format of views, or to get per-aspect information like the\n * `blockByteSize`.\n *\n * Many helpers use an `undefined` `aspect` to means `'all'` so this is also the default for this\n * function.\n */\nexport function resolvePerAspectFormat(\n  format: GPUTextureFormat,\n  aspect?: GPUTextureAspect\n): GPUTextureFormat {\n  if (aspect === 'all' || aspect === undefined) {\n    return format;\n  }\n  assert(!!kTextureFormatInfo[format].depth || !!kTextureFormatInfo[format].stencil);\n  const resolved = kDepthStencilFormatResolvedAspect[format as DepthStencilFormat][aspect ?? 'all'];\n  assert(resolved !== undefined);\n  return resolved;\n}\n\n/**\n * @returns the sample type of the specified aspect of the specified format.\n */\nexport function sampleTypeForFormatAndAspect(\n  format: GPUTextureFormat,\n  aspect: GPUTextureAspect\n): 'uint' | 'depth' | 'float' | 'sint' | 'unfilterable-float' {\n  const info = kTextureFormatInfo[format];\n  if (info.color) {\n    assert(aspect === 'all', `color format ${format} used with aspect ${aspect}`);\n    return info.color.type;\n  } else if (info.depth && info.stencil) {\n    if (aspect === 'depth-only') {\n      return info.depth.type;\n    } else if (aspect === 'stencil-only') {\n      return info.stencil.type;\n    } else {\n      unreachable(`depth-stencil format ${format} used with aspect ${aspect}`);\n    }\n  } else if (info.depth) {\n    assert(aspect !== 'stencil-only', `depth-only format ${format} used with aspect ${aspect}`);\n    return info.depth.type;\n  } else if (info.stencil) {\n    assert(aspect !== 'depth-only', `stencil-only format ${format} used with aspect ${aspect}`);\n    return info.stencil.type;\n  }\n  unreachable();\n}\n\n/**\n * Gets all copyable aspects for copies between texture and buffer for specified depth/stencil format and copy type, by spec.\n */\nexport function depthStencilFormatCopyableAspects(\n  type: ImageCopyType,\n  format: DepthStencilFormat\n): readonly GPUTextureAspect[] {\n  const appliedType = type === 'WriteTexture' ? 'CopyB2T' : type;\n  return kDepthStencilFormatCapabilityInBufferTextureCopy[format][appliedType];\n}\n\n/**\n * Computes whether a copy between a depth/stencil texture aspect and a buffer is supported, by spec.\n */\nexport function depthStencilBufferTextureCopySupported(\n  type: ImageCopyType,\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] = depthStencilFormatCopyableAspects(\n    type,\n    format\n  );\n  return supportedAspects.includes(aspect);\n}\n\n/**\n * Returns the byte size of the depth or stencil aspect of the specified depth/stencil format,\n * or -1 if none.\n */\nexport function depthStencilFormatAspectSize(\n  format: DepthStencilFormat,\n  aspect: 'depth-only' | 'stencil-only'\n) {\n  const texelAspectSize =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format].texelAspectSize[aspect];\n  assert(texelAspectSize > 0);\n  return texelAspectSize;\n}\n\n/**\n * Returns true iff a texture can be created with the provided GPUTextureDimension\n * (defaulting to 2d) and GPUTextureFormat, by spec.\n */\nexport function textureDimensionAndFormatCompatible(\n  dimension: undefined | GPUTextureDimension,\n  format: GPUTextureFormat\n): boolean {\n  const info = kAllTextureFormatInfo[format];\n  return !(\n    (dimension === '1d' || dimension === '3d') &&\n    (info.blockWidth > 1 || info.depth || info.stencil)\n  );\n}\n\n/**\n * Check if two formats are view format compatible.\n */\nexport function textureFormatsAreViewCompatible(\n  device: GPUDevice,\n  a: GPUTextureFormat,\n  b: GPUTextureFormat\n) {\n  return isCompatibilityDevice(device)\n    ? a === b\n    : a === b || a + '-srgb' === b || b + '-srgb' === a;\n}\n\n/**\n * Gets the block width, height, and bytes per block for a color texture format.\n * This is for color textures only. For all texture formats @see {@link getBlockInfoForTextureFormat}\n * The point of this function is bytesPerBlock is always defined so no need to check that it's not\n * vs getBlockInfoForTextureFormat where it may not be defined.\n */\nexport function getBlockInfoForColorTextureFormat(format: ColorTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return {\n    blockWidth: info.blockWidth,\n    blockHeight: info.blockHeight,\n    bytesPerBlock: info.color?.bytes,\n  };\n}\n\n/**\n * Gets the block width, height, and bytes per block for a sized texture format.\n * This is for sized textures only. For all texture formats @see {@link getBlockInfoForTextureFormat}\n * The point of this function is bytesPerBlock is always defined so no need to check that it's not\n * vs getBlockInfoForTextureFormat where it may not be defined.\n */\nexport function getBlockInfoForSizedTextureFormat(format: SizedTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color?.bytes || info.depth?.bytes || info.stencil?.bytes;\n  assert(!!bytesPerBlock);\n  return {\n    blockWidth: info.blockWidth,\n    blockHeight: info.blockHeight,\n    bytesPerBlock,\n  };\n}\n\n/**\n * Gets the block width, height, and bytes per block for an encodable texture format.\n * This is for encodable textures only. For all texture formats @see {@link getBlockInfoForTextureFormat}\n * The point of this function is bytesPerBlock is always defined so no need to check that it's not\n * vs getBlockInfoForTextureFormat where it may not be defined.\n */\nexport function getBlockInfoForEncodableTextureFormat(format: EncodableTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color?.bytes || info.depth?.bytes || info.stencil?.bytes;\n  assert(!!bytesPerBlock);\n  return {\n    blockWidth: info.blockWidth,\n    blockHeight: info.blockHeight,\n    bytesPerBlock,\n  };\n}\n\n/**\n * Gets the block width, height, and bytes per block for a color texture format.\n * Note that bytesPerBlock will be undefined if format's size is undefined.\n * If you are only using color or encodable formats, @see {@link getBlockInfoForColorTextureFormat}\n * or {@link getBlockInfoForEncodableTextureFormat}\n */\nexport function getBlockInfoForTextureFormat(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return {\n    blockWidth: info.blockWidth,\n    blockHeight: info.blockHeight,\n    bytesPerBlock: info.color?.bytes ?? info.depth?.bytes ?? info.stencil?.bytes,\n  };\n}\n\n/**\n * Returns the \"byteCost\" of rendering to a color texture format.\n */\nexport function getColorRenderByteCost(format: PossibleColorRenderTextureFormat) {\n  const byteCost = kTextureFormatInfo[format].colorRender?.byteCost;\n  // MAINTENANCE_TODO: remove this assert. The issue is typescript thinks\n  // PossibleColorRenderTextureFormat contains all texture formats and not just\n  // a filtered list.\n  assert(byteCost !== undefined);\n  return byteCost;\n}\n\n/**\n * Returns the \"alignment\" of rendering to a color texture format.\n */\nexport function getColorRenderAlignment(format: PossibleColorRenderTextureFormat) {\n  const alignment = kTextureFormatInfo[format].colorRender?.alignment;\n  // MAINTENANCE_TODO: remove this assert. The issue is typescript thinks\n  // PossibleColorRenderTextureFormat contains all texture formats and not just\n  // a filtered list.\n  assert(alignment !== undefined);\n  return alignment;\n}\n\n/**\n * Gets the baseFormat for a texture format.\n */\nexport function getBaseFormatForTextureFormat(\n  format: (typeof kDifferentBaseFormatTextureFormats)[number]\n): ColorTextureFormat {\n  return kTextureFormatInfo[format].baseFormat!;\n}\n\nexport function getBaseFormatForRegularTextureFormat(\n  format: RegularTextureFormat\n): RegularTextureFormat | undefined {\n  return kTextureFormatInfo[format].baseFormat as RegularTextureFormat;\n}\n\n/**\n * Gets the feature needed for a give texture format or undefined if none.\n */\nexport function getRequiredFeatureForTextureFormat(format: GPUTextureFormat) {\n  return kTextureFormatInfo[format].feature;\n}\n\nexport function getFeaturesForFormats<T>(\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (GPUFeatureName | undefined)[] {\n  return Array.from(new Set(formats.map(f => (f ? kTextureFormatInfo[f].feature : undefined))));\n}\n\nexport function filterFormatsByFeature<T>(\n  feature: GPUFeatureName | undefined,\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (T & (GPUTextureFormat | undefined))[] {\n  return formats.filter(f => f === undefined || kTextureFormatInfo[f].feature === feature);\n}\n\nexport function canCopyToAspectOfTextureFormat(format: GPUTextureFormat, aspect: GPUTextureAspect) {\n  const info = kTextureFormatInfo[format];\n  switch (aspect) {\n    case 'depth-only':\n      assert(isDepthTextureFormat(format));\n      return info.depth && info.depth.copyDst;\n    case 'stencil-only':\n      assert(isStencilTextureFormat(format));\n      return info.stencil && info.stencil.copyDst;\n    case 'all':\n      return (\n        (!isDepthTextureFormat(format) || info.depth?.copyDst) &&\n        (!isStencilTextureFormat(format) || info.stencil?.copyDst) &&\n        (!isColorTextureFormat(format) || !info.color?.copyDst)\n      );\n  }\n}\n\nexport function canCopyFromAspectOfTextureFormat(\n  format: GPUTextureFormat,\n  aspect: GPUTextureAspect\n) {\n  const info = kTextureFormatInfo[format];\n  switch (aspect) {\n    case 'depth-only':\n      assert(isDepthTextureFormat(format));\n      return info.depth && info.depth.copySrc;\n    case 'stencil-only':\n      assert(isStencilTextureFormat(format));\n      return info.stencil && info.stencil.copySrc;\n    case 'all':\n      return (\n        (!isDepthTextureFormat(format) || info.depth?.copySrc) &&\n        (!isStencilTextureFormat(format) || info.stencil?.copySrc) &&\n        (!isColorTextureFormat(format) || !info.color?.copySrc)\n      );\n  }\n}\n\n/**\n * Returns true if all aspects of texture can be copied to (used with COPY_DST)\n */\nexport function canCopyToAllAspectsOfTextureFormat(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return (\n    (!info.color || info.color.copyDst) &&\n    (!info.depth || info.depth.copyDst) &&\n    (!info.stencil || info.stencil.copyDst)\n  );\n}\n\n/**\n * Returns true if all aspects of texture can be copied from (used with COPY_SRC)\n */\nexport function canCopyFromAllAspectsOfTextureFormat(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return (\n    (!info.color || info.color.copySrc) &&\n    (!info.depth || info.depth.copySrc) &&\n    (!info.stencil || info.stencil.copySrc)\n  );\n}\n\nexport function isCompressedTextureFormat(format: GPUTextureFormat) {\n  return format in kCompressedTextureFormatInfo;\n}\n\nexport function isColorTextureFormat(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].color;\n}\n\nexport function isDepthTextureFormat(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].depth;\n}\n\nexport function isStencilTextureFormat(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].stencil;\n}\n\nexport function isDepthOrStencilTextureFormat(format: GPUTextureFormat) {\n  return isDepthTextureFormat(format) || isStencilTextureFormat(format);\n}\n\nexport function isEncodableTextureFormat(format: GPUTextureFormat) {\n  return kEncodableTextureFormats.includes(format as EncodableTextureFormat);\n}\n\n/**\n * Returns if a texture can be used as a render attachment. some color formats and all\n * depth textures and stencil textures are usable with usage RENDER_ATTACHMENT.\n */\nexport function isTextureFormatUsableAsRenderAttachment(\n  device: GPUDevice,\n  format: GPUTextureFormat\n) {\n  if (format === 'rg11b10ufloat') {\n    return device.features.has('rg11b10ufloat-renderable');\n  }\n  return kTextureFormatInfo[format].colorRender || isDepthOrStencilTextureFormat(format);\n}\n\n/**\n * Returns if a texture can be used as a \"colorAttachment\".\n */\nexport function isTextureFormatColorRenderable(\n  device: GPUDevice,\n  format: GPUTextureFormat\n): boolean {\n  if (format === 'rg11b10ufloat') {\n    return device.features.has('rg11b10ufloat-renderable');\n  }\n  return !!kAllTextureFormatInfo[format].colorRender;\n}\n\n/**\n * Returns if a texture can be blended.\n */\nexport function isTextureFormatBlendable(device: GPUDevice, format: GPUTextureFormat): boolean {\n  if (!isTextureFormatColorRenderable(device, format)) {\n    return false;\n  }\n  if (format === 'rg11b10ufloat') {\n    return device.features.has('rg11b10ufloat-renderable');\n  }\n  if (is32Float(format)) {\n    return device.features.has('float32-blendable');\n  }\n  return !!kAllTextureFormatInfo[format].colorRender?.blend;\n}\n\n/**\n * Returns the texture's type (float, unsigned-float, sint, uint, depth)\n */\nexport function getTextureFormatType(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type ?? info.stencil?.type;\n  assert(!!type);\n  return type;\n}\n\n/**\n * Returns the regular texture's type (float, unsigned-float, sint, uint)\n */\nexport function getTextureFormatColorType(format: RegularTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type;\n  assert(!!type);\n  return type;\n}\n\n/**\n * Returns true if a texture can possibly be used as a render attachment.\n * The texture may require certain features to be enabled.\n */\nexport function isTextureFormatPossiblyUsableAsRenderAttachment(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return isDepthOrStencilTextureFormat(format) || !!info.colorRender;\n}\n\n/**\n * Returns true if a texture can possibly be used as a color render attachment.\n * The texture may require certain features to be enabled.\n */\nexport function isTextureFormatPossiblyUsableAsColorRenderAttachment(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return !!info.colorRender;\n}\n\n/**\n * Returns true if a texture can possibly be used multisampled.\n * The texture may require certain features to be enabled.\n */\nexport function isTextureFormatPossiblyMultisampled(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return info.multisample;\n}\n\n/**\n * Returns true if a texture can possibly be used as a storage texture.\n * The texture may require certain features to be enabled.\n */\nexport function isTextureFormatPossiblyStorageReadable(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].color?.storage;\n}\n\n/**\n * Returns true if a texture can possibly be used as a read-write storage texture.\n * The texture may require certain features to be enabled.\n */\nexport function isTextureFormatPossiblyStorageReadWritable(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].color?.readWriteStorage;\n}\n\nexport function is16Float(format: GPUTextureFormat) {\n  return format === 'r16float' || format === 'rg16float' || format === 'rgba16float';\n}\n\nexport function is32Float(format: GPUTextureFormat) {\n  return format === 'r32float' || format === 'rg32float' || format === 'rgba32float';\n}\n\n/**\n * Returns true if texture is filterable as `texture_xxx<f32>`\n *\n * examples:\n * * 'rgba8unorm' -> true\n * * 'depth16unorm' -> false\n * * 'rgba32float' -> true (you need to enable feature 'float32-filterable')\n */\nexport function isTextureFormatPossiblyFilterableAsTextureF32(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return info.color?.type === 'float' || is32Float(format);\n}\n\nexport const kCompatModeUnsupportedStorageTextureFormats: readonly GPUTextureFormat[] = [\n  'rg32float',\n  'rg32sint',\n  'rg32uint',\n] as const;\n\n/**\n * Return true if the format can be used as a storage texture.\n * Note: Some formats can be compiled in a shader but can not be used\n * in a pipeline or elsewhere. This function returns whether or not the format\n * can be used in general. If you want to know if the format can used when compiling\n * a shader @see {@link isTextureFormatUsableAsStorageFormatInCreateShaderModule}\n */\nexport function isTextureFormatUsableAsStorageFormat(\n  device: GPUDevice,\n  format: GPUTextureFormat\n): boolean {\n  if (isCompatibilityDevice(device)) {\n    if (kCompatModeUnsupportedStorageTextureFormats.indexOf(format) >= 0) {\n      return false;\n    }\n  }\n  if (format === 'bgra8unorm' && device.features.has('bgra8unorm-storage')) {\n    return true;\n  }\n  const info = kTextureFormatInfo[format];\n  return !!(info.color?.storage || info.depth?.storage || info.stencil?.storage);\n}\n\n/**\n * Returns true if format can be used with createShaderModule on the device.\n * Some formats may require a feature to be enabled before they can be used\n * as a storage texture. Others, can't be used in a pipeline but can be compiled\n * in a shader. Examples are rg32float, rg32uint, rg32sint which are not usable\n * in compat mode but shaders can be compiled. Similarly, bgra8unorm can be\n * compiled but can't be used in a pipeline unless feature 'bgra8unorm-storage'\n * is available.\n */\nexport function isTextureFormatUsableAsStorageFormatInCreateShaderModule(\n  device: GPUDevice,\n  format: GPUTextureFormat\n): boolean {\n  if (format === 'bgra8unorm') {\n    return true;\n  }\n  const info = kTextureFormatInfo[format];\n  return !!(info.color?.storage || info.depth?.storage || info.stencil?.storage);\n}\n\nexport function isTextureFormatUsableAsReadWriteStorageTexture(\n  device: GPUDevice,\n  format: GPUTextureFormat\n): boolean {\n  return (\n    isTextureFormatUsableAsStorageFormat(device, format) &&\n    !!kTextureFormatInfo[format].color?.readWriteStorage\n  );\n}\n\nexport function isRegularTextureFormat(format: GPUTextureFormat) {\n  return format in kRegularTextureFormatInfo;\n}\n\n/**\n * Returns true if format is both compressed and a float format, for example 'bc6h-rgb-ufloat'.\n */\nexport function isCompressedFloatTextureFormat(format: GPUTextureFormat) {\n  return isCompressedTextureFormat(format) && format.includes('float');\n}\n\n/**\n * Returns true if format is sint or uint\n */\nexport function isSintOrUintFormat(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type ?? info.stencil?.type;\n  return type === 'sint' || type === 'uint';\n}\n\n/**\n * Returns true if format can be multisampled.\n */\nexport const kCompatModeUnsupportedMultisampledTextureFormats: readonly GPUTextureFormat[] = [\n  'r8uint',\n  'r8sint',\n  'rg8uint',\n  'rg8sint',\n  'rgba8uint',\n  'rgba8sint',\n  'r16uint',\n  'r16sint',\n  'rg16uint',\n  'rg16sint',\n  'rgba16uint',\n  'rgba16sint',\n  'rgb10a2uint',\n  'rgba16float',\n  'r32float',\n] as const;\n\n/**\n * Returns true if you can make a multisampled texture from the given format.\n */\nexport function isTextureFormatMultisampled(device: GPUDevice, format: GPUTextureFormat): boolean {\n  if (isCompatibilityDevice(device)) {\n    if (kCompatModeUnsupportedMultisampledTextureFormats.indexOf(format) >= 0) {\n      return false;\n    }\n  }\n  if (format === 'rg11b10ufloat') {\n    return device.features.has('rg11b10ufloat-renderable');\n  }\n  return kAllTextureFormatInfo[format].multisample;\n}\n\n/**\n * Returns true if a texture can be \"resolved\". uint/sint formats can be multisampled but\n * can not be resolved.\n */\nexport function isTextureFormatResolvable(device: GPUDevice, format: GPUTextureFormat): boolean {\n  if (format === 'rg11b10ufloat') {\n    return device.features.has('rg11b10ufloat-renderable');\n  }\n  // You can't resolve a non-multisampled format.\n  if (!isTextureFormatMultisampled(device, format)) {\n    return false;\n  }\n  const info = kAllTextureFormatInfo[format];\n  return !!info.colorRender?.resolve;\n}\n\n// MAINTENANCE_TODD: See if we can remove this. This doesn't seem useful since\n// formats are not on/off by feature. Some are on but a feature allows them to be\n// used in more cases, like going from un-renderable to renderable, etc...\nexport const kFeaturesForFormats = getFeaturesForFormats(kAllTextureFormats);\n\n/**\n * Given an array of texture formats return the number of bytes per sample.\n */\nexport function computeBytesPerSampleFromFormats(formats: readonly GPUTextureFormat[]) {\n  let bytesPerSample = 0;\n  for (const format of formats) {\n    // MAINTENANCE_TODO: Add colorRender to rg11b10ufloat format in kTextureFormatInfo\n    // The issue is if we add it now lots of tests will break as they'll think they can\n    // render to the format but are not enabling 'rg11b10ufloat-renderable'. Once we\n    // get the CTS refactored (see issue 4181), then fix this.\n    const info = kTextureFormatInfo[format];\n    const alignedBytesPerSample = align(bytesPerSample, info.colorRender!.alignment);\n    bytesPerSample = alignedBytesPerSample + info.colorRender!.byteCost;\n  }\n  return bytesPerSample;\n}\n\n/**\n * Given an array of GPUColorTargetState return the number of bytes per sample\n */\nexport function computeBytesPerSample(targets: GPUColorTargetState[]) {\n  return computeBytesPerSampleFromFormats(targets.map(({ format }) => format));\n}\n"],"mappings":"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"}