{"version":3,"file":"format_info.js","names":["isCompatibilityDevice","keysOf","assert","unreachable","align","kFormatUniversalDefaults","blockWidth","undefined","blockHeight","color","depth","stencil","colorRender","multisample","feature","baseFormat","bytesPerBlock","formatTableWithDefaults","defaults","table","Object","fromEntries","entries","map","k","row","kRegularTextureFormatInfo","r8unorm","type","copySrc","copyDst","storage","readWriteStorage","bytes","blend","resolve","byteCost","alignment","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","kSizedDepthStencilFormatInfo","stencil8","depth16unorm","depth32float","kUnsizedDepthStencilFormatInfo","depth24plus","kBCTextureFormatInfo","kETC2TextureFormatInfo","kASTCTextureFormatInfo","kCompressedTextureFormatInfo","kColorTextureFormatInfo","kEncodableTextureFormatInfo","kSizedTextureFormatInfo","kDepthStencilFormatInfo","kUncompressedTextureFormatInfo","kAllTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormats","kEncodableTextureFormats","kSizedTextureFormats","kDepthStencilFormats","kUncompressedTextureFormats","kAllTextureFormats","kRenderableColorTextureFormats","filter","v","kTextureFormatInfo","kTextureFormatInfo_TypeCheck","kValidTextureFormatsForCopyE2T","kDepthStencilFormatCapabilityInBufferTextureCopy","CopyB2T","CopyT2B","texelAspectSize","kDepthStencilFormatResolvedAspect","all","resolvePerAspectFormat","format","aspect","resolved","sampleTypeForFormatAndAspect","info","depthStencilFormatCopyableAspects","appliedType","depthStencilBufferTextureCopySupported","supportedAspects","includes","depthStencilFormatAspectSize","textureDimensionAndFormatCompatible","dimension","viewCompatibleDeprecated","compatibilityMode","a","b","textureFormatsAreViewCompatible","device","getBlockInfoForColorTextureFormat","getBaseFormatForTextureFormat","getRequiredFeatureForTextureFormat","getFeaturesForFormats","formats","Array","from","Set","f","filterFormatsByFeature","isCompressedTextureFormat","isDepthTextureFormat","isStencilTextureFormat","isDepthOrStencilTextureFormat","isEncodableTextureFormat","canUseAsRenderTargetDeprecated","isTextureFormatUsableAsRenderAttachment","features","has","isTextureFormatColorRenderable","is16Float","is32Float","isFilterableAsTextureF32","kCompatModeUnsupportedStorageTextureFormats","isTextureFormatUsableAsStorageFormatDeprecated","isCompatibilityMode","indexOf","isTextureFormatUsableAsStorageFormat","isRegularTextureFormat","isCompressedFloatTextureFormat","isSintOrUintFormat","kCompatModeUnsupportedMultisampledTextureFormats","isMultisampledTextureFormatDeprecated","isTextureFormatMultisampled","isTextureFormatResolvable","kFeaturesForFormats","computeBytesPerSampleFromFormats","bytesPerSample","alignedBytesPerSample","computeBytesPerSample","targets"],"sources":["../../src/webgpu/format_info.ts"],"sourcesContent":["// MAINTENANCE_TODO: Remove all deprecated functions once they are no longer in use.\nimport { isCompatibilityDevice } from '../common/framework/test_config.js';\nimport { keysOf } from '../common/util/data_tables.js';\nimport { assert, unreachable } from '../common/util/util.js';\n\nimport { align } from './util/math.js';\nimport { ImageCopyType } from './util/texture/layout.js';\n\n//\n// Texture format tables\n//\n\n/**\n * Defaults applied to all texture format tables automatically. Used only inside\n * `formatTableWithDefaults`. This ensures keys are never missing, always explicitly `undefined`.\n *\n * All top-level keys must be defined here, or they won't be exposed at all.\n * Documentation is also written here; this makes it propagate through to the end types.\n */\nconst kFormatUniversalDefaults = {\n  /** Texel block width. */\n  blockWidth: undefined,\n  /** Texel block height. */\n  blockHeight: undefined,\n  color: undefined,\n  depth: undefined,\n  stencil: undefined,\n  colorRender: undefined,\n  /** Whether the format can be used in a multisample texture. */\n  multisample: undefined,\n  /** Optional feature required to use this format, or `undefined` if none. */\n  feature: undefined,\n  /** The base format for srgb formats. Specified on both srgb and equivalent non-srgb formats. */\n  baseFormat: undefined,\n\n  /** @deprecated Use `.color.bytes`, `.depth.bytes`, or `.stencil.bytes`. */\n  bytesPerBlock: undefined,\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in TextureFormatInfo_TypeCheck.\n} as const;\n/**\n * Takes `table` and applies `defaults` to every row, i.e. for each row,\n * `{ ... kUniversalDefaults, ...defaults, ...row }`.\n * This only operates at the first level; it doesn't support defaults in nested objects.\n */\nfunction formatTableWithDefaults<Defaults extends {}, Table extends { readonly [K: string]: {} }>({\n  defaults,\n  table,\n}: {\n  defaults: Defaults;\n  table: Table;\n}): {\n  readonly [F in keyof Table]: {\n    readonly [K in keyof typeof kFormatUniversalDefaults]: K extends keyof Table[F]\n      ? Table[F][K]\n      : K extends keyof Defaults\n      ? Defaults[K]\n      : (typeof kFormatUniversalDefaults)[K];\n  };\n} {\n  return Object.fromEntries(\n    Object.entries(table).map(([k, row]) => [\n      k,\n      { ...kFormatUniversalDefaults, ...defaults, ...row },\n    ])\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ) as any;\n}\n\n/** \"plain color formats\", plus rgb9e5ufloat. */\nconst kRegularTextureFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1 },\n  table: {\n    // plain, 8 bits per component\n\n    r8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    bgra8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bgra8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 16 bits per component\n\n    r16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 32 bits per component\n\n    r32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, mixed component width, 32 bits per texel\n\n    rgb10a2uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgb10a2unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg11b10ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // packed\n\n    rgb9e5ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// MAINTENANCE_TODO: Distinguishing \"sized\" and \"unsized\" depth stencil formats doesn't make sense\n// because one aspect can be sized and one can be unsized. This should be cleaned up, but is kept\n// this way during a migration phase.\nconst kSizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    stencil8: {\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      bytesPerBlock: 1,\n    },\n    depth16unorm: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      bytesPerBlock: 2,\n    },\n    depth32float: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      bytesPerBlock: 4,\n    },\n  },\n} as const);\nconst kUnsizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    depth24plus: {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n    },\n    'depth24plus-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n    },\n    'depth32float-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      feature: 'depth32float-stencil8',\n    },\n  },\n} as const);\n\nconst kBCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-bc',\n  },\n  table: {\n    'bc1-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc1-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc2-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc2-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc3-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc3-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc4-r-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc4-r-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc5-rg-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc5-rg-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc6h-rgb-ufloat': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc6h-rgb-float': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc7-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc7-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kETC2TextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-etc2',\n  },\n  table: {\n    'etc2-rgb8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgb8a1unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8a1unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgba8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-r11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-r11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-rg11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-rg11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kASTCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    multisample: false,\n    feature: 'texture-compression-astc',\n  },\n  table: {\n    'astc-4x4-unorm': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-4x4-unorm-srgb': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x4-unorm': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x4-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x5-unorm': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x5-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x5-unorm': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x5-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x6-unorm': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x6-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x5-unorm': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x5-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x6-unorm': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x6-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x8-unorm': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x8-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x5-unorm': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x5-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x6-unorm': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x6-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x8-unorm': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x8-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x10-unorm': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x10-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x10-unorm': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x10-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x12-unorm': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x12-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo } as const;\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n\n/** A \"regular\" texture format (uncompressed, sized, single-plane color formats). */\n/* prettier-ignore */ export type      RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\n/** A sized depth/stencil texture format. */\n/* prettier-ignore */ export type   SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\n/** An unsized depth/stencil texture format. */\n/* prettier-ignore */ export type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\n/** A compressed (block) texture format. */\n/* prettier-ignore */ export type   CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\n/** A color texture format (regular | compressed). */\n/* prettier-ignore */ export type        ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\n/** An encodable texture format (regular | sized depth/stencil). */\n/* prettier-ignore */ export type    EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\n/** A sized texture format (regular | sized depth/stencil | compressed). */\n/* prettier-ignore */ export type        SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\n/** A depth/stencil format (sized | unsized). */\n/* prettier-ignore */ export type        DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\n/** An uncompressed (block size 1x1) format (regular | depth/stencil). */\n/* prettier-ignore */ export type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\n\n/* prettier-ignore */ export const      kRegularTextureFormats: readonly      RegularTextureFormat[] = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const   kSizedDepthStencilFormats: readonly   SizedDepthStencilFormat[] = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUnsizedDepthStencilFormats: readonly UnsizedDepthStencilFormat[] = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kCompressedTextureFormats: readonly   CompressedTextureFormat[] = keysOf(  kCompressedTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats: readonly        ColorTextureFormat[] = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats: readonly    EncodableTextureFormat[] = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats: readonly        SizedTextureFormat[] = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats: readonly        DepthStencilFormat[] = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats: readonly UncompressedTextureFormat[] = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats: readonly          GPUTextureFormat[] = keysOf(         kAllTextureFormatInfo);\n\n// CompressedTextureFormat are unrenderable so filter from RegularTextureFormats for color targets is enough\nexport const kRenderableColorTextureFormats = kRegularTextureFormats.filter(\n  v => kColorTextureFormatInfo[v].colorRender\n);\n\n/** Per-GPUTextureFormat-per-aspect info. */\ninterface TextureFormatAspectInfo {\n  /** Whether the aspect can be used as `COPY_SRC`. */\n  copySrc: boolean;\n  /** Whether the aspect can be used as `COPY_DST`. */\n  copyDst: boolean;\n  /** Whether the aspect can be used as `STORAGE`. */\n  storage: boolean;\n  /** Whether the aspect can be used as `STORAGE` with `read-write` storage texture access. */\n  readWriteStorage: boolean;\n  /** The \"texel block copy footprint\" of one texel block; `undefined` if the aspect is unsized. */\n  bytes: number | undefined;\n}\n/** Per GPUTextureFormat-per-aspect info for color aspects. */\ninterface TextureFormatColorAspectInfo extends TextureFormatAspectInfo {\n  bytes: number;\n  /** \"Best\" sample type of the format. \"float\" also implies \"unfilterable-float\". */\n  type: 'float' | 'uint' | 'sint' | 'unfilterable-float';\n}\n/** Per GPUTextureFormat-per-aspect info for depth aspects. */\ninterface TextureFormatDepthAspectInfo extends TextureFormatAspectInfo {\n  /** \"depth\" also implies \"unfilterable-float\". */\n  type: 'depth';\n}\n/** Per GPUTextureFormat-per-aspect info for stencil aspects. */\ninterface TextureFormatStencilAspectInfo extends TextureFormatAspectInfo {\n  bytes: 1;\n  type: 'uint';\n}\n\n/**\n * Per-GPUTextureFormat info.\n * This is not actually the type of values in kTextureFormatInfo; that type is fully const\n * so that it can be narrowed very precisely at usage sites by the compiler.\n * This type exists only as a type check on the inferred type of kTextureFormatInfo.\n */\ntype TextureFormatInfo_TypeCheck = {\n  blockWidth: number;\n  blockHeight: number;\n  multisample: boolean;\n  baseFormat: GPUTextureFormat | undefined;\n  feature: GPUFeatureName | undefined;\n\n  bytesPerBlock: number | undefined;\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in kUniversalDefaults.\n} & (\n  | {\n      /** Color aspect info. */\n      color: TextureFormatColorAspectInfo;\n      /** Defined if the format is a color format that can be used as `RENDER_ATTACHMENT`. */\n      colorRender:\n        | undefined\n        | {\n            /** Whether the format is blendable. */\n            blend: boolean;\n            /** Whether the format can be a multisample resolve target. */\n            resolve: boolean;\n            /** The \"render target pixel byte cost\" of the format. */\n            byteCost: number;\n            /** The \"render target component alignment\" of the format. */\n            alignment: number;\n          };\n    }\n  | (\n      | {\n          /** Depth aspect info. */\n          depth: TextureFormatDepthAspectInfo;\n          /** Stencil aspect info. */\n          stencil: undefined | TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n      | {\n          /** Stencil aspect info. */\n          stencil: TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n    )\n);\n\n// MAINTENANCE_TODO: make this private to avoid tests wrongly trying to\n// filter things on their own. Various features make this hard to do correctly\n// so we'd prefer to put filtering here, in a central place and add other functions\n// to get at this data so that they always have enough info to give the correct answer.\n/** Per-GPUTextureFormat info. */\n/** @deprecated */\nexport const kTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n  ...kBCTextureFormatInfo,\n  ...kETC2TextureFormatInfo,\n  ...kASTCTextureFormatInfo,\n} as const;\n\n/** Defining this variable verifies the type of kTextureFormatInfo2. It is not used. */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst kTextureFormatInfo_TypeCheck: {\n  readonly [F in GPUTextureFormat]: TextureFormatInfo_TypeCheck;\n} = kTextureFormatInfo;\n\n/** Valid GPUTextureFormats for `copyExternalImageToTexture`, by spec. */\nexport const kValidTextureFormatsForCopyE2T = [\n  'r8unorm',\n  'r16float',\n  'r32float',\n  'rg8unorm',\n  'rg16float',\n  'rg32float',\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rgba16float',\n  'rgba32float',\n] as const;\n\n//\n// Other related stuff\n//\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': -1 },\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 2, 'stencil-only': -1 },\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': -1 },\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n} as const;\n\n/** `kDepthStencilFormatResolvedAspect[format][aspect]` returns the aspect-specific format for a\n *  depth-stencil format, or `undefined` if the format doesn't have the aspect.\n */\nexport const kDepthStencilFormatResolvedAspect: {\n  readonly [k in DepthStencilFormat]: {\n    readonly [a in GPUTextureAspect]: DepthStencilFormat | undefined;\n  };\n} = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    all: 'depth24plus',\n    'depth-only': 'depth24plus',\n    'stencil-only': undefined,\n  },\n  'depth24plus-stencil8': {\n    all: 'depth24plus-stencil8',\n    'depth-only': 'depth24plus',\n    'stencil-only': 'stencil8',\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    all: 'depth16unorm',\n    'depth-only': 'depth16unorm',\n    'stencil-only': undefined,\n  },\n  depth32float: {\n    all: 'depth32float',\n    'depth-only': 'depth32float',\n    'stencil-only': undefined,\n  },\n  'depth32float-stencil8': {\n    all: 'depth32float-stencil8',\n    'depth-only': 'depth32float',\n    'stencil-only': 'stencil8',\n  },\n  stencil8: {\n    all: 'stencil8',\n    'depth-only': undefined,\n    'stencil-only': 'stencil8',\n  },\n} as const;\n\n/**\n * @returns the GPUTextureFormat corresponding to the @param aspect of @param format.\n * This allows choosing the correct format for depth-stencil aspects when creating pipelines that\n * will have to match the resolved format of views, or to get per-aspect information like the\n * `blockByteSize`.\n *\n * Many helpers use an `undefined` `aspect` to means `'all'` so this is also the default for this\n * function.\n */\nexport function resolvePerAspectFormat(\n  format: GPUTextureFormat,\n  aspect?: GPUTextureAspect\n): GPUTextureFormat {\n  if (aspect === 'all' || aspect === undefined) {\n    return format;\n  }\n  assert(!!kTextureFormatInfo[format].depth || !!kTextureFormatInfo[format].stencil);\n  const resolved = kDepthStencilFormatResolvedAspect[format as DepthStencilFormat][aspect ?? 'all'];\n  assert(resolved !== undefined);\n  return resolved;\n}\n\n/**\n * @returns the sample type of the specified aspect of the specified format.\n */\nexport function sampleTypeForFormatAndAspect(\n  format: GPUTextureFormat,\n  aspect: GPUTextureAspect\n): 'uint' | 'depth' | 'float' | 'sint' | 'unfilterable-float' {\n  const info = kTextureFormatInfo[format];\n  if (info.color) {\n    assert(aspect === 'all', `color format ${format} used with aspect ${aspect}`);\n    return info.color.type;\n  } else if (info.depth && info.stencil) {\n    if (aspect === 'depth-only') {\n      return info.depth.type;\n    } else if (aspect === 'stencil-only') {\n      return info.stencil.type;\n    } else {\n      unreachable(`depth-stencil format ${format} used with aspect ${aspect}`);\n    }\n  } else if (info.depth) {\n    assert(aspect !== 'stencil-only', `depth-only format ${format} used with aspect ${aspect}`);\n    return info.depth.type;\n  } else if (info.stencil) {\n    assert(aspect !== 'depth-only', `stencil-only format ${format} used with aspect ${aspect}`);\n    return info.stencil.type;\n  }\n  unreachable();\n}\n\n/**\n * Gets all copyable aspects for copies between texture and buffer for specified depth/stencil format and copy type, by spec.\n */\nexport function depthStencilFormatCopyableAspects(\n  type: ImageCopyType,\n  format: DepthStencilFormat\n): readonly GPUTextureAspect[] {\n  const appliedType = type === 'WriteTexture' ? 'CopyB2T' : type;\n  return kDepthStencilFormatCapabilityInBufferTextureCopy[format][appliedType];\n}\n\n/**\n * Computes whether a copy between a depth/stencil texture aspect and a buffer is supported, by spec.\n */\nexport function depthStencilBufferTextureCopySupported(\n  type: ImageCopyType,\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] = depthStencilFormatCopyableAspects(\n    type,\n    format\n  );\n  return supportedAspects.includes(aspect);\n}\n\n/**\n * Returns the byte size of the depth or stencil aspect of the specified depth/stencil format,\n * or -1 if none.\n */\nexport function depthStencilFormatAspectSize(\n  format: DepthStencilFormat,\n  aspect: 'depth-only' | 'stencil-only'\n) {\n  const texelAspectSize =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format].texelAspectSize[aspect];\n  assert(texelAspectSize > 0);\n  return texelAspectSize;\n}\n\n/**\n * Returns true iff a texture can be created with the provided GPUTextureDimension\n * (defaulting to 2d) and GPUTextureFormat, by spec.\n */\nexport function textureDimensionAndFormatCompatible(\n  dimension: undefined | GPUTextureDimension,\n  format: GPUTextureFormat\n): boolean {\n  const info = kAllTextureFormatInfo[format];\n  return !(\n    (dimension === '1d' || dimension === '3d') &&\n    (info.blockWidth > 1 || info.depth || info.stencil)\n  );\n}\n\n/** @deprecated */\nexport function viewCompatibleDeprecated(\n  compatibilityMode: boolean,\n  a: GPUTextureFormat,\n  b: GPUTextureFormat\n): boolean {\n  return compatibilityMode ? a === b : a === b || a + '-srgb' === b || b + '-srgb' === a;\n}\n\n/**\n * Check if two formats are view format compatible.\n */\nexport function textureFormatsAreViewCompatible(\n  device: GPUDevice,\n  a: GPUTextureFormat,\n  b: GPUTextureFormat\n) {\n  return isCompatibilityDevice(device)\n    ? a === b\n    : a === b || a + '-srgb' === b || b + '-srgb' === a;\n}\n\n/**\n * Gets the block width, height, and bytes per block for a color texture format.\n */\nexport function getBlockInfoForColorTextureFormat(format: ColorTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return {\n    blockWidth: info.blockWidth,\n    blockHeight: info.blockHeight,\n    bytesPerBlock: info.color.bytes,\n  };\n}\n\n/**\n * Gets the baseFormat for a texture format.\n */\nexport function getBaseFormatForTextureFormat(format: GPUTextureFormat) {\n  return kTextureFormatInfo[format].baseFormat;\n}\n\n/**\n * Gets the feature needed for a give texture format or undefined if none.\n */\nexport function getRequiredFeatureForTextureFormat(format: GPUTextureFormat) {\n  return kTextureFormatInfo[format].feature;\n}\n\nexport function getFeaturesForFormats<T>(\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (GPUFeatureName | undefined)[] {\n  return Array.from(new Set(formats.map(f => (f ? kTextureFormatInfo[f].feature : undefined))));\n}\n\nexport function filterFormatsByFeature<T>(\n  feature: GPUFeatureName | undefined,\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (T & (GPUTextureFormat | undefined))[] {\n  return formats.filter(f => f === undefined || kTextureFormatInfo[f].feature === feature);\n}\n\nexport function isCompressedTextureFormat(format: GPUTextureFormat) {\n  return format in kCompressedTextureFormatInfo;\n}\n\nexport function isDepthTextureFormat(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].depth;\n}\n\nexport function isStencilTextureFormat(format: GPUTextureFormat) {\n  return !!kTextureFormatInfo[format].stencil;\n}\n\nexport function isDepthOrStencilTextureFormat(format: GPUTextureFormat) {\n  return isDepthTextureFormat(format) || isStencilTextureFormat(format);\n}\n\nexport function isEncodableTextureFormat(format: GPUTextureFormat) {\n  return kEncodableTextureFormats.includes(format as EncodableTextureFormat);\n}\n\n/** @deprecated use isTextureFormatUsableAsRenderAttachment */\nexport function canUseAsRenderTargetDeprecated(format: GPUTextureFormat) {\n  return kTextureFormatInfo[format].colorRender || isDepthOrStencilTextureFormat(format);\n}\n\n/**\n * Returns if a texture can be used as a render attachment. some color formats and all\n * depth textures and stencil textures are usable with usage RENDER_ATTACHMENT.\n */\nexport function isTextureFormatUsableAsRenderAttachment(\n  device: GPUDevice,\n  format: GPUTextureFormat\n) {\n  if (format === 'rg11b10ufloat' && device.features.has('rg11b10ufloat-renderable')) {\n    return true;\n  }\n  return kTextureFormatInfo[format].colorRender || isDepthOrStencilTextureFormat(format);\n}\n\n/**\n * Returns if a texture can be used as a \"colorAttachment\".\n */\nexport function isTextureFormatColorRenderable(\n  device: GPUDevice,\n  format: GPUTextureFormat\n): boolean {\n  if (format === 'rg11b10ufloat' && device.features.has('rg11b10ufloat-renderable')) {\n    return true;\n  }\n  return !!kAllTextureFormatInfo[format].colorRender;\n}\n\nexport function is16Float(format: GPUTextureFormat) {\n  return format === 'r16float' || format === 'rg16float' || format === 'rgba16float';\n}\n\nexport function is32Float(format: GPUTextureFormat) {\n  return format === 'r32float' || format === 'rg32float' || format === 'rgba32float';\n}\n\n/**\n * Returns true if texture is filterable as `texture_xxx<f32>`\n *\n * examples:\n * * 'rgba8unorm' -> true\n * * 'depth16unorm' -> false\n * * 'rgba32float' -> true (you need to enable feature 'float32-filterable')\n */\nexport function isFilterableAsTextureF32(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  return info.color?.type === 'float' || is32Float(format);\n}\n\nexport const kCompatModeUnsupportedStorageTextureFormats: readonly GPUTextureFormat[] = [\n  'rg32float',\n  'rg32sint',\n  'rg32uint',\n] as const;\n\n/** @deprecated */\nexport function isTextureFormatUsableAsStorageFormatDeprecated(\n  format: GPUTextureFormat,\n  isCompatibilityMode: boolean\n): boolean {\n  if (isCompatibilityMode) {\n    if (kCompatModeUnsupportedStorageTextureFormats.indexOf(format) >= 0) {\n      return false;\n    }\n  }\n  const info = kTextureFormatInfo[format];\n  return !!(info.color?.storage || info.depth?.storage || info.stencil?.storage);\n}\n\nexport function isTextureFormatUsableAsStorageFormat(\n  device: GPUDevice,\n  format: GPUTextureFormat\n): boolean {\n  if (isCompatibilityDevice(device)) {\n    if (kCompatModeUnsupportedStorageTextureFormats.indexOf(format) >= 0) {\n      return false;\n    }\n  }\n  if (format === 'bgra8unorm' && device.features.has('bgra8unorm-storage')) {\n    return true;\n  }\n  const info = kTextureFormatInfo[format];\n  return !!(info.color?.storage || info.depth?.storage || info.stencil?.storage);\n}\n\nexport function isRegularTextureFormat(format: GPUTextureFormat) {\n  return format in kRegularTextureFormatInfo;\n}\n\n/**\n * Returns true if format is both compressed and a float format, for example 'bc6h-rgb-ufloat'.\n */\nexport function isCompressedFloatTextureFormat(format: GPUTextureFormat) {\n  return isCompressedTextureFormat(format) && format.includes('float');\n}\n\n/**\n * Returns true if format is sint or uint\n */\nexport function isSintOrUintFormat(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type ?? info.stencil?.type;\n  return type === 'sint' || type === 'uint';\n}\n\n/**\n * Returns true of format can be multisampled.\n */\nexport const kCompatModeUnsupportedMultisampledTextureFormats: readonly GPUTextureFormat[] = [\n  'r8uint',\n  'r8sint',\n  'rg8uint',\n  'rg8sint',\n  'rgba8uint',\n  'rgba8sint',\n  'r16uint',\n  'r16sint',\n  'rg16uint',\n  'rg16sint',\n  'rgba16uint',\n  'rgba16sint',\n  'rgb10a2uint',\n  'rgba16float',\n  'r32float',\n] as const;\n\n/** @deprecated use isTextureFormatMultisampled */\nexport function isMultisampledTextureFormatDeprecated(\n  format: GPUTextureFormat,\n  isCompatibilityMode: boolean\n): boolean {\n  if (isCompatibilityMode) {\n    if (kCompatModeUnsupportedMultisampledTextureFormats.indexOf(format) >= 0) {\n      return false;\n    }\n  }\n  return kAllTextureFormatInfo[format].multisample;\n}\n\n/**\n * Returns true if you can make a multisampled texture from the given format.\n */\nexport function isTextureFormatMultisampled(device: GPUDevice, format: GPUTextureFormat): boolean {\n  if (isCompatibilityDevice(device)) {\n    if (kCompatModeUnsupportedMultisampledTextureFormats.indexOf(format) >= 0) {\n      return false;\n    }\n  }\n  if (format === 'rg11b10ufloat' && device.features.has('rg11b10ufloat-renderable')) {\n    return true;\n  }\n  return kAllTextureFormatInfo[format].multisample;\n}\n\n/**\n * Returns true of a texture can be \"resolved\". uint/sint formats can be multisampled but\n * can not be resolved.\n */\nexport function isTextureFormatResolvable(device: GPUDevice, format: GPUTextureFormat): boolean {\n  if (format === 'rg11b10ufloat' && device.features.has('rg11b10ufloat-renderable')) {\n    return true;\n  }\n  // You can't resolve a non-multisampled format.\n  if (!isTextureFormatMultisampled(device, format)) {\n    return false;\n  }\n  const info = kAllTextureFormatInfo[format];\n  return !!info.colorRender?.resolve;\n}\n\nexport const kFeaturesForFormats = getFeaturesForFormats(kAllTextureFormats);\n\n/**\n * Given an array of texture formats return the number of bytes per sample.\n */\nexport function computeBytesPerSampleFromFormats(formats: readonly GPUTextureFormat[]) {\n  let bytesPerSample = 0;\n  for (const format of formats) {\n    const info = kTextureFormatInfo[format];\n    const alignedBytesPerSample = align(bytesPerSample, info.colorRender!.alignment);\n    bytesPerSample = alignedBytesPerSample + info.colorRender!.byteCost;\n  }\n  return bytesPerSample;\n}\n\n/**\n * Given an array of GPUColorTargetState return the number of bytes per sample\n */\nexport function computeBytesPerSample(targets: GPUColorTargetState[]) {\n  return computeBytesPerSampleFromFormats(targets.map(({ format }) => format));\n}\n"],"mappings":"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"}