{"version":3,"file":"test_case_recorder.js","names":["SkipTestCase","UnexpectedPassError","globalTestConfig","now","assert","LogMessageWithStack","LogSeverity","kMaxLogStacks","kMinSeverityForStack","Warn","logSeverityToString","status","NotRun","Pass","Skip","TestCaseRecorder","nonskippedSubcaseCount","inSubCase","subCaseStatus","finalCaseStatus","hideStacksBelowSeverity","startTime","logs","logLinesAtCurrentSeverity","debugging","constructor","result","start","finish","timeMilliseconds","timems","Math","ceil","threw","Error","beginSubCase","endSubCase","expectedStatus","max","injectResult","injectedResult","Object","assign","debug","ex","logImpl","info","skipped","warn","expectationFailed","ExpectFailed","validationFailed","ValidationFailed","passed","name","ThrewException","level","baseException","testHeartbeatCallback","logMessage","wrapError","log","setStackHidden","push","makeDeferredSubRecorder","prefix","deferUntilPromise","Proxy","get","target","k","then"],"sources":["../../../../src/common/internal/logging/test_case_recorder.ts"],"sourcesContent":["import { SkipTestCase, UnexpectedPassError } from '../../framework/fixture.js';\nimport { globalTestConfig } from '../../framework/test_config.js';\nimport { now, assert } from '../../util/util.js';\n\nimport { LogMessageWithStack } from './log_message.js';\nimport { Expectation, LiveTestCaseResult, Status } from './result.js';\n\nenum LogSeverity {\n  NotRun = 0,\n  Skip = 1,\n  Pass = 2,\n  Warn = 3,\n  ExpectFailed = 4,\n  ValidationFailed = 5,\n  ThrewException = 6,\n}\n\nconst kMaxLogStacks = 2;\nconst kMinSeverityForStack = LogSeverity.Warn;\n\nfunction logSeverityToString(status: LogSeverity): Status {\n  switch (status) {\n    case LogSeverity.NotRun:\n      return 'notrun';\n    case LogSeverity.Pass:\n      return 'pass';\n    case LogSeverity.Skip:\n      return 'skip';\n    case LogSeverity.Warn:\n      return 'warn';\n    default:\n      return 'fail'; // Everything else is an error\n  }\n}\n\n/** Holds onto a LiveTestCaseResult owned by the Logger, and writes the results into it. */\nexport class TestCaseRecorder {\n  readonly result: LiveTestCaseResult;\n  public nonskippedSubcaseCount: number = 0;\n  private inSubCase: boolean = false;\n  private subCaseStatus = LogSeverity.NotRun;\n  private finalCaseStatus = LogSeverity.NotRun;\n  private hideStacksBelowSeverity = kMinSeverityForStack;\n  private startTime = -1;\n  private logs: LogMessageWithStack[] = [];\n  private logLinesAtCurrentSeverity = 0;\n  public debugging = false;\n\n  constructor(result: LiveTestCaseResult, debugging: boolean) {\n    this.result = result;\n    this.debugging = debugging;\n  }\n\n  start(): void {\n    assert(this.startTime < 0, 'TestCaseRecorder cannot be reused');\n    this.startTime = now();\n  }\n\n  finish(): void {\n    // This is a framework error. If this assert is hit, it won't be localized\n    // to a test. The whole test run will fail out.\n    assert(this.startTime >= 0, 'internal error: finish() before start()');\n\n    const timeMilliseconds = now() - this.startTime;\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil(timeMilliseconds * 1000) / 1000;\n\n    if (this.finalCaseStatus === LogSeverity.Skip && this.nonskippedSubcaseCount !== 0) {\n      this.threw(new Error('internal error: case is \"skip\" but has nonskipped subcases'));\n    }\n\n    // Convert numeric enum back to string (but expose 'exception' as 'fail')\n    this.result.status = logSeverityToString(this.finalCaseStatus);\n\n    this.result.logs = this.logs;\n  }\n\n  beginSubCase() {\n    this.subCaseStatus = LogSeverity.NotRun;\n    this.inSubCase = true;\n  }\n\n  endSubCase(expectedStatus: Expectation) {\n    if (this.subCaseStatus !== LogSeverity.Skip) {\n      this.nonskippedSubcaseCount++;\n    }\n    try {\n      if (expectedStatus === 'fail') {\n        if (this.subCaseStatus <= LogSeverity.Warn) {\n          throw new UnexpectedPassError();\n        } else {\n          this.subCaseStatus = LogSeverity.Pass;\n        }\n      }\n    } finally {\n      this.inSubCase = false;\n      this.finalCaseStatus = Math.max(this.finalCaseStatus, this.subCaseStatus);\n    }\n  }\n\n  injectResult(injectedResult: LiveTestCaseResult): void {\n    Object.assign(this.result, injectedResult);\n  }\n\n  debug(ex: Error): void {\n    if (!this.debugging) return;\n    this.logImpl(LogSeverity.Pass, 'DEBUG', ex);\n  }\n\n  info(ex: Error): void {\n    // We need this to use the lowest LogSeverity so it doesn't override the current severity for this test case.\n    this.logImpl(LogSeverity.NotRun, 'INFO', ex);\n  }\n\n  skipped(ex: SkipTestCase): void {\n    this.logImpl(LogSeverity.Skip, 'SKIP', ex);\n  }\n\n  warn(ex: Error): void {\n    this.logImpl(LogSeverity.Warn, 'WARN', ex);\n  }\n\n  expectationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ExpectFailed, 'EXPECTATION FAILED', ex);\n  }\n\n  validationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ValidationFailed, 'VALIDATION FAILED', ex);\n  }\n\n  passed(): void {\n    if (this.inSubCase) {\n      this.subCaseStatus = Math.max(this.subCaseStatus, LogSeverity.Pass);\n    } else {\n      this.finalCaseStatus = Math.max(this.finalCaseStatus, LogSeverity.Pass);\n    }\n  }\n\n  threw(ex: unknown): void {\n    if (ex instanceof SkipTestCase) {\n      this.skipped(ex);\n      return;\n    }\n    // logImpl will discard the original error's ex.name. Preserve it here.\n    const name = ex instanceof Error ? `EXCEPTION: ${ex.name}` : 'EXCEPTION';\n    this.logImpl(LogSeverity.ThrewException, name, ex);\n  }\n\n  private logImpl(level: LogSeverity, name: string, baseException: unknown): void {\n    assert(baseException instanceof Error, 'test threw a non-Error object');\n    globalTestConfig.testHeartbeatCallback();\n    const logMessage = LogMessageWithStack.wrapError(name, baseException);\n\n    // Final case status should be the \"worst\" of all log entries.\n    if (this.inSubCase) {\n      this.subCaseStatus = Math.max(this.subCaseStatus, level);\n    } else {\n      this.finalCaseStatus = Math.max(this.finalCaseStatus, level);\n    }\n\n    // setFirstLineOnly for all logs except `kMaxLogStacks` stacks at the highest severity\n    if (level > this.hideStacksBelowSeverity) {\n      this.logLinesAtCurrentSeverity = 0;\n      this.hideStacksBelowSeverity = level;\n\n      // Go back and setFirstLineOnly for everything of a lower log level\n      for (const log of this.logs) {\n        log.setStackHidden('below max severity');\n      }\n    }\n    if (level === this.hideStacksBelowSeverity) {\n      this.logLinesAtCurrentSeverity++;\n    } else if (level < kMinSeverityForStack) {\n      logMessage.setStackHidden('');\n    } else if (level < this.hideStacksBelowSeverity) {\n      logMessage.setStackHidden('below max severity');\n    }\n    if (this.logLinesAtCurrentSeverity > kMaxLogStacks) {\n      logMessage.setStackHidden(`only ${kMaxLogStacks} shown`);\n    }\n\n    this.logs.push(logMessage);\n  }\n\n  /**\n   * Make a recorder that will defer all calls until `deferUntilPromise` resolves.\n   * This is used for running subcases, which run concurrently, to ensure that\n   * logs from all the previous subcases have been flushed before flushing new logs,\n   * so all logs are in order as if the subcases had not been concurrent.\n   */\n  makeDeferredSubRecorder(prefix: string, deferUntilPromise: Promise<void>) {\n    return new Proxy(this, {\n      get: (target, k) => {\n        switch (k) {\n          case 'logImpl':\n            return function (level: LogSeverity, name: string, baseException: unknown) {\n              globalTestConfig.testHeartbeatCallback();\n              void deferUntilPromise.then(() => {\n                target.logImpl(level, prefix + name, baseException);\n              });\n            };\n          case 'beginSubCase':\n            return function () {\n              globalTestConfig.testHeartbeatCallback();\n              void deferUntilPromise.then(() => {\n                target.beginSubCase();\n              });\n            };\n          case 'endSubCase':\n            return function (expectedStatus: Expectation) {\n              globalTestConfig.testHeartbeatCallback();\n              void deferUntilPromise.then(() => {\n                target.endSubCase(expectedStatus);\n              });\n            };\n          default:\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            return (target as any)[k];\n        }\n      },\n    });\n  }\n}\n"],"mappings":"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"}