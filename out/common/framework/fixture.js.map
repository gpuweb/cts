{"version":3,"file":"fixture.js","names":["assert","unreachable","SkipTestCase","Error","UnexpectedPassError","TestCaseRecorder","SubcaseBatchState","constructor","recorder","params","init","postInit","finalize","skip","msg","skipIf","cond","Fixture","eventualExpectations","numOutstandingAsyncExpectations","objectsToCleanUp","MakeSharedState","sharedState","rec","_sharedState","_params","length","p","shift","ex","threw","o","WEBGL_lose_context","getExtension","loseContext","destroy","destroyAsync","close","src","srcObject","trackForCleanup","Promise","eventualAsyncExpectation","then","GPUDevice","push","lost","tryTrackForCleanup","WebGLRenderingContext","WebGL2RenderingContext","requestDeviceTracked","adapter","desc","undefined","requestDevice","debug","debugging","info","warn","fail","expectationFailed","immediateAsyncExpectation","fn","ret","promise","expectErrorValue","expectedError","niceStack","message","actualName","name","shouldResolve","m","shouldReject","expectedName","allowMissingStack","stack","exMessage","shouldThrow","expect","toString","expectOK","error","mode","handleError","Array","isArray","e","eventualExpectOK"],"sources":["../../../src/common/framework/fixture.ts"],"sourcesContent":["import { TestCaseRecorder } from '../internal/logging/test_case_recorder.js';\nimport { JSONWithUndefined } from '../internal/params_utils.js';\nimport { assert, ExceptionCheckOptions, unreachable } from '../util/util.js';\n\nexport class SkipTestCase extends Error {}\nexport class UnexpectedPassError extends Error {}\n\nexport { TestCaseRecorder } from '../internal/logging/test_case_recorder.js';\n\n/** The fully-general type for params passed to a test function invocation. */\nexport type TestParams = {\n  readonly [k: string]: JSONWithUndefined;\n};\n\ntype DestroyableObject =\n  | { destroy(): void }\n  | { destroyAsync(): Promise<void> }\n  | { close(): void }\n  | { getExtension(extensionName: 'WEBGL_lose_context'): WEBGL_lose_context }\n  | HTMLVideoElement;\n\nexport class SubcaseBatchState {\n  constructor(\n    protected readonly recorder: TestCaseRecorder,\n    /** The case parameters for this test fixture shared state. Subcase params are not included. */\n    public readonly params: TestParams\n  ) {}\n\n  /**\n   * Runs before the `.before()` function.\n   * @internal MAINTENANCE_TODO: Make this not visible to test code?\n   */\n  async init() {}\n  /**\n   * Runs between the `.before()` function and the subcases.\n   * @internal MAINTENANCE_TODO: Make this not visible to test code?\n   */\n  async postInit() {}\n  /**\n   * Runs after all subcases finish.\n   * @internal MAINTENANCE_TODO: Make this not visible to test code?\n   */\n  async finalize() {}\n\n  /** Throws an exception marking the subcase as skipped. */\n  skip(msg: string): never {\n    throw new SkipTestCase(msg);\n  }\n\n  /** Throws an exception making the subcase as skipped if condition is true */\n  skipIf(cond: boolean, msg: string | (() => string) = '') {\n    if (cond) {\n      this.skip(typeof msg === 'function' ? msg() : msg);\n    }\n  }\n}\n\n/**\n * A Fixture is a class used to instantiate each test sub/case at run time.\n * A new instance of the Fixture is created for every single test subcase\n * (i.e. every time the test function is run).\n */\nexport class Fixture<S extends SubcaseBatchState = SubcaseBatchState> {\n  private _params: unknown;\n  private _sharedState: S;\n  /**\n   * Interface for recording logs and test status.\n   *\n   * @internal\n   */\n  readonly rec: TestCaseRecorder;\n  private eventualExpectations: Array<Promise<unknown>> = [];\n  private numOutstandingAsyncExpectations = 0;\n  private objectsToCleanUp: DestroyableObject[] = [];\n\n  public static MakeSharedState(recorder: TestCaseRecorder, params: TestParams): SubcaseBatchState {\n    return new SubcaseBatchState(recorder, params);\n  }\n\n  /** @internal */\n  constructor(sharedState: S, rec: TestCaseRecorder, params: TestParams) {\n    this._sharedState = sharedState;\n    this.rec = rec;\n    this._params = params;\n  }\n\n  /**\n   * Returns the (case+subcase) parameters for this test function invocation.\n   */\n  get params(): unknown {\n    return this._params;\n  }\n\n  /**\n   * Gets the test fixture's shared state. This object is shared between subcases\n   * within the same testcase.\n   */\n  get sharedState(): S {\n    return this._sharedState;\n  }\n\n  /**\n   * Override this to do additional pre-test-function work in a derived fixture.\n   * This has to be a member function instead of an async `createFixture` function, because\n   * we need to be able to ergonomically override it in subclasses.\n   *\n   * @internal MAINTENANCE_TODO: Make this not visible to test code?\n   */\n  async init(): Promise<void> {}\n\n  /**\n   * Override this to do additional post-test-function work in a derived fixture.\n   *\n   * Called even if init was unsuccessful.\n   *\n   * @internal MAINTENANCE_TODO: Make this not visible to test code?\n   */\n  async finalize(): Promise<void> {\n    assert(\n      this.numOutstandingAsyncExpectations === 0,\n      'there were outstanding immediateAsyncExpectations (e.g. expectUncapturedError) at the end of the test'\n    );\n\n    // Loop to exhaust the eventualExpectations in case they chain off each other.\n    while (this.eventualExpectations.length) {\n      const p = this.eventualExpectations.shift()!;\n      try {\n        await p;\n      } catch (ex) {\n        this.rec.threw(ex);\n      }\n    }\n\n    // And clean up any objects now that they're done being used.\n    for (const o of this.objectsToCleanUp) {\n      if ('getExtension' in o) {\n        const WEBGL_lose_context = o.getExtension('WEBGL_lose_context');\n        if (WEBGL_lose_context) WEBGL_lose_context.loseContext();\n      } else if ('destroy' in o) {\n        o.destroy();\n      } else if ('destroyAsync' in o) {\n        await o.destroyAsync();\n      } else if ('close' in o) {\n        o.close();\n      } else {\n        // HTMLVideoElement\n        o.src = '';\n        o.srcObject = null;\n      }\n    }\n  }\n\n  /**\n   * Tracks an object to be cleaned up after the test finishes.\n   *\n   * Usually when creating buffers/textures/query sets, you can use the helpers in GPUTest instead.\n   */\n  trackForCleanup<T extends DestroyableObject | Promise<DestroyableObject>>(o: T): T {\n    if (o instanceof Promise) {\n      this.eventualAsyncExpectation(() =>\n        o.then(\n          o => this.trackForCleanup(o),\n          () => {}\n        )\n      );\n      return o;\n    }\n\n    if (o instanceof GPUDevice) {\n      this.objectsToCleanUp.push({\n        async destroyAsync() {\n          o.destroy();\n          await o.lost;\n        },\n      });\n    } else {\n      this.objectsToCleanUp.push(o);\n    }\n    return o;\n  }\n\n  /** Tracks an object, if it's destroyable, to be cleaned up after the test finishes. */\n  tryTrackForCleanup<T>(o: T): T {\n    if (typeof o === 'object' && o !== null) {\n      if (\n        'destroy' in o ||\n        'close' in o ||\n        o instanceof WebGLRenderingContext ||\n        o instanceof WebGL2RenderingContext\n      ) {\n        this.objectsToCleanUp.push(o as unknown as DestroyableObject);\n      }\n    }\n    return o;\n  }\n\n  /** Call requestDevice() and track the device for cleanup. */\n  requestDeviceTracked(adapter: GPUAdapter, desc: GPUDeviceDescriptor | undefined = undefined) {\n    // eslint-disable-next-line no-restricted-syntax\n    return this.trackForCleanup(adapter.requestDevice(desc));\n  }\n\n  /** Log a debug message. */\n  debug(msg: string | (() => string)): void {\n    if (!this.rec.debugging) return;\n    if (typeof msg === 'function') {\n      msg = msg();\n    }\n    this.rec.debug(new Error(msg));\n  }\n\n  /**\n   * Log an info message.\n   * **Use sparingly. Use `debug()` instead if logs are only needed with debug logging enabled.**\n   */\n  info(msg: string): void {\n    this.rec.info(new Error(msg));\n  }\n\n  /** Throws an exception marking the subcase as skipped. */\n  skip(msg: string): never {\n    throw new SkipTestCase(msg);\n  }\n\n  /** Throws an exception marking the subcase as skipped if condition is true */\n  skipIf(cond: boolean, msg: string | (() => string) = '') {\n    if (cond) {\n      this.skip(typeof msg === 'function' ? msg() : msg);\n    }\n  }\n\n  /** Log a warning and increase the result status to \"Warn\". */\n  warn(msg?: string): void {\n    this.rec.warn(new Error(msg));\n  }\n\n  /** Log an error and increase the result status to \"ExpectFailed\". */\n  fail(msg?: string): void {\n    this.rec.expectationFailed(new Error(msg));\n  }\n\n  /**\n   * Wraps an async function. Tracks its status to fail if the test tries to report a test status\n   * before the async work has finished.\n   */\n  protected async immediateAsyncExpectation<T>(fn: () => Promise<T>): Promise<T> {\n    this.numOutstandingAsyncExpectations++;\n    const ret = await fn();\n    this.numOutstandingAsyncExpectations--;\n    return ret;\n  }\n\n  /**\n   * Wraps an async function, passing it an `Error` object recording the original stack trace.\n   * The async work will be implicitly waited upon before reporting a test status.\n   */\n  eventualAsyncExpectation<T>(fn: (niceStack: Error) => Promise<T>): void {\n    const promise = fn(new Error());\n    this.eventualExpectations.push(promise);\n  }\n\n  private expectErrorValue(expectedError: string | true, ex: unknown, niceStack: Error): void {\n    if (!(ex instanceof Error)) {\n      niceStack.message = `THREW non-error value, of type ${typeof ex}: ${ex}`;\n      this.rec.expectationFailed(niceStack);\n      return;\n    }\n    const actualName = ex.name;\n    if (expectedError !== true && actualName !== expectedError) {\n      niceStack.message = `THREW ${actualName}, instead of ${expectedError}: ${ex}`;\n      this.rec.expectationFailed(niceStack);\n    } else {\n      niceStack.message = `OK: threw ${actualName}: ${ex.message}`;\n      this.rec.debug(niceStack);\n    }\n  }\n\n  /** Expect that the provided promise resolves (fulfills). */\n  shouldResolve(p: Promise<unknown>, msg?: string): void {\n    this.eventualAsyncExpectation(async niceStack => {\n      const m = msg ? ': ' + msg : '';\n      try {\n        await p;\n        niceStack.message = 'resolved as expected' + m;\n      } catch (ex) {\n        niceStack.message = `REJECTED${m}`;\n        if (ex instanceof Error) {\n          niceStack.message += '\\n' + ex.message;\n        }\n        this.rec.expectationFailed(niceStack);\n      }\n    });\n  }\n\n  /** Expect that the provided promise rejects, with the provided exception name. */\n  shouldReject(\n    expectedName: string,\n    p: Promise<unknown>,\n    { allowMissingStack = false, message }: ExceptionCheckOptions = {}\n  ): void {\n    this.eventualAsyncExpectation(async niceStack => {\n      const m = message ? ': ' + message : '';\n      try {\n        await p;\n        niceStack.message = 'DID NOT REJECT' + m;\n        this.rec.expectationFailed(niceStack);\n      } catch (ex) {\n        this.expectErrorValue(expectedName, ex, niceStack);\n        if (!allowMissingStack) {\n          if (!(ex instanceof Error && typeof ex.stack === 'string')) {\n            const exMessage = ex instanceof Error ? ex.message : '?';\n            niceStack.message = `rejected as expected, but missing stack (${exMessage})${m}`;\n            this.rec.expectationFailed(niceStack);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Expect that the provided function throws (if `true` or `string`) or not (if `false`).\n   * If a string is provided, expect that the throw exception has that name.\n   *\n   * MAINTENANCE_TODO: Change to `string | false` so the exception name is always checked.\n   */\n  shouldThrow(\n    expectedError: string | boolean,\n    fn: () => void,\n    { allowMissingStack = false, message }: ExceptionCheckOptions = {}\n  ) {\n    const m = message ? ': ' + message : '';\n    try {\n      fn();\n      if (expectedError === false) {\n        this.rec.debug(new Error('did not throw, as expected' + m));\n      } else {\n        this.rec.expectationFailed(new Error('unexpectedly did not throw' + m));\n      }\n    } catch (ex) {\n      if (expectedError === false) {\n        this.rec.expectationFailed(new Error('threw unexpectedly' + m));\n      } else {\n        this.expectErrorValue(expectedError, ex, new Error(m));\n        if (!allowMissingStack) {\n          if (!(ex instanceof Error && typeof ex.stack === 'string')) {\n            this.rec.expectationFailed(new Error('threw as expected, but missing stack' + m));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Expect that a condition is true.\n   *\n   * Note: You can pass a boolean condition, or a function that returns a boolean.\n   * The advantage to passing a function is that if it's short it is self documenting.\n   *\n   * t.expect(size >= maxSize);      // prints Expect OK:\n   * t.expect(() => size >= maxSize) // prints Expect OK: () => size >= maxSize\n   */\n  expect(cond: boolean | (() => boolean), msg?: string): boolean {\n    if (typeof cond === 'function') {\n      if (msg === undefined) {\n        msg = cond.toString();\n      }\n      cond = cond();\n    }\n    if (cond) {\n      const m = msg ? ': ' + msg : '';\n      this.rec.debug(new Error('expect OK' + m));\n    } else {\n      this.rec.expectationFailed(new Error(msg));\n    }\n    return cond;\n  }\n\n  /**\n   * If the argument is an `Error`, fail (or warn). If it's `undefined`, no-op.\n   * If the argument is an array, apply the above behavior on each of elements.\n   */\n  expectOK(\n    error: Error | undefined | (Error | undefined)[],\n    { mode = 'fail', niceStack }: { mode?: 'fail' | 'warn'; niceStack?: Error } = {}\n  ): void {\n    const handleError = (error: Error | undefined) => {\n      if (error instanceof Error) {\n        if (niceStack) {\n          error.stack = niceStack.stack;\n        }\n        if (mode === 'fail') {\n          this.rec.expectationFailed(error);\n        } else if (mode === 'warn') {\n          this.rec.warn(error);\n        } else {\n          unreachable();\n        }\n      }\n    };\n\n    if (Array.isArray(error)) {\n      for (const e of error) {\n        handleError(e);\n      }\n    } else {\n      handleError(error);\n    }\n  }\n\n  eventualExpectOK(\n    error: Promise<Error | undefined | (Error | undefined)[]>,\n    { mode = 'fail' }: { mode?: 'fail' | 'warn' } = {}\n  ) {\n    this.eventualAsyncExpectation(async niceStack => {\n      this.expectOK(await error, { mode, niceStack });\n    });\n  }\n}\n\nexport type SubcaseBatchStateFromFixture<F> = F extends Fixture<infer S> ? S : never;\n\n/**\n * FixtureClass encapsulates a constructor for fixture and a corresponding\n * shared state factory function. An interface version of the type is also\n * defined for mixin declaration use ONLY. The interface version is necessary\n * because mixin classes need a constructor with a single any[] rest\n * parameter.\n */\nexport type FixtureClass<F extends Fixture = Fixture> = {\n  new (sharedState: SubcaseBatchStateFromFixture<F>, log: TestCaseRecorder, params: TestParams): F;\n  MakeSharedState(recorder: TestCaseRecorder, params: TestParams): SubcaseBatchStateFromFixture<F>;\n};\nexport type FixtureClassInterface<F extends Fixture = Fixture> = {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  new (...args: any[]): F;\n  MakeSharedState(recorder: TestCaseRecorder, params: TestParams): SubcaseBatchStateFromFixture<F>;\n};\nexport type FixtureClassWithMixin<FC, M> = FC extends FixtureClass<infer F>\n  ? FixtureClass<F & M>\n  : never;\n"],"mappings":"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"}