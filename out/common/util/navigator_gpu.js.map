{"version":3,"file":"navigator_gpu.js","names":["globalTestConfig","ErrorWithExtra","assert","objectEquals","defaultGPUProvider","navigator","gpu","undefined","gpuProvider","setGPUProvider","provider","impl","s_defaultLimits","defaultRequestAdapterOptions","setDefaultRequestAdapterOptions","options","Error","getDefaultRequestAdapterOptions","copyLimits","objLike","obj","key","getGPU","recorder","enforceDefaultLimits","origRequestAdapterFn","requestAdapter","origRequestDeviceFn","GPUAdapter","prototype","requestDevice","tempAdapter","call","tempDevice","limits","destroy","adapter","Object","fromEntries","entries","map","v","defineProperty","get","desc","requiredLimits","value","limit","beyondLimit","condition","startsWith","DOMException","oldFn","promise","then","adapterInfo","info","infoString","vendor","architecture","device","debug"],"sources":["../../../src/common/util/navigator_gpu.ts"],"sourcesContent":["// eslint-disable-next-line import/no-restricted-paths\nimport { TestCaseRecorder } from '../framework/fixture.js';\nimport { globalTestConfig } from '../framework/test_config.js';\n\nimport { ErrorWithExtra, assert, objectEquals } from './util.js';\n\n/**\n * Finds and returns the `navigator.gpu` object (or equivalent, for non-browser implementations).\n * Throws an exception if not found.\n */\nfunction defaultGPUProvider(): GPU {\n  assert(\n    typeof navigator !== 'undefined' && navigator.gpu !== undefined,\n    'No WebGPU implementation found'\n  );\n  return navigator.gpu;\n}\n\n/**\n * GPUProvider is a function that creates and returns a new GPU instance.\n * May throw an exception if a GPU cannot be created.\n */\nexport type GPUProvider = () => GPU;\n\nlet gpuProvider: GPUProvider = defaultGPUProvider;\n\n/**\n * Sets the function to create and return a new GPU instance.\n */\nexport function setGPUProvider(provider: GPUProvider) {\n  assert(impl === undefined, 'setGPUProvider() should not be after getGPU()');\n  gpuProvider = provider;\n}\n\nlet impl: GPU | undefined = undefined;\nlet s_defaultLimits: Record<string, GPUSize64> | undefined = undefined;\n\nlet defaultRequestAdapterOptions: GPURequestAdapterOptions | undefined;\n\nexport function setDefaultRequestAdapterOptions(options: GPURequestAdapterOptions) {\n  // It's okay to call this if you don't change the options\n  if (objectEquals(options, defaultRequestAdapterOptions)) {\n    return;\n  }\n  if (impl) {\n    throw new Error('must call setDefaultRequestAdapterOptions before getGPU');\n  }\n  defaultRequestAdapterOptions = { ...options };\n}\n\nexport function getDefaultRequestAdapterOptions() {\n  return defaultRequestAdapterOptions;\n}\n\nfunction copyLimits(objLike: GPUSupportedLimits) {\n  const obj: Record<string, number> = {};\n  for (const key in objLike) {\n    obj[key] = (objLike as unknown as Record<string, number>)[key];\n  }\n  return obj;\n}\n\n/**\n * Finds and returns the `navigator.gpu` object (or equivalent, for non-browser implementations).\n * Throws an exception if not found.\n */\nexport function getGPU(recorder: TestCaseRecorder | null): GPU {\n  if (impl) {\n    return impl;\n  }\n\n  impl = gpuProvider();\n\n  if (globalTestConfig.enforceDefaultLimits) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const origRequestAdapterFn = impl.requestAdapter;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const origRequestDeviceFn = GPUAdapter.prototype.requestDevice;\n\n    impl.requestAdapter = async function (options?: GPURequestAdapterOptions) {\n      if (!s_defaultLimits) {\n        const tempAdapter = await origRequestAdapterFn.call(this, {\n          ...defaultRequestAdapterOptions,\n          ...options,\n        });\n        // eslint-disable-next-line no-restricted-syntax\n        const tempDevice = await tempAdapter?.requestDevice();\n        s_defaultLimits = copyLimits(tempDevice!.limits);\n        tempDevice?.destroy();\n      }\n      const adapter = await origRequestAdapterFn.call(this, {\n        ...defaultRequestAdapterOptions,\n        ...options,\n      });\n      if (adapter) {\n        const limits = Object.fromEntries(\n          Object.entries(s_defaultLimits).map(([key, v]) => [key, v])\n        );\n\n        Object.defineProperty(adapter, 'limits', {\n          get() {\n            return limits;\n          },\n        });\n      }\n      return adapter;\n    };\n\n    const enforceDefaultLimits = (adapter: GPUAdapter, desc: GPUDeviceDescriptor | undefined) => {\n      if (desc?.requiredLimits) {\n        for (const [key, value] of Object.entries(desc.requiredLimits)) {\n          const limit = s_defaultLimits![key];\n          if (limit !== undefined && value !== undefined) {\n            const [beyondLimit, condition] = key.startsWith('max')\n              ? [value > limit, 'greater']\n              : [value < limit, 'less'];\n            if (beyondLimit) {\n              throw new DOMException(\n                `requestedLimit ${value} for ${key} is ${condition} than adapter limit ${limit}`,\n                'OperationError'\n              );\n            }\n          }\n        }\n      }\n    };\n\n    GPUAdapter.prototype.requestDevice = async function (\n      this: GPUAdapter,\n      desc?: GPUDeviceDescriptor | undefined\n    ) {\n      // We need to enforce the default limits because even though we patched the adapter to\n      // show defaults for adapter.limits, there are tests that test we throw when we request more than the max.\n      // In other words.\n      //\n      //   adapter.requestDevice({ requiredLimits: {\n      //     maxXXX: addapter.limits.maxXXX + 1,  // should throw\n      //   });\n      //\n      // But unless we enforce this manually, it won't actual through if the adapter's\n      // true limits are higher than we patched above.\n      enforceDefaultLimits(this, desc);\n      return await origRequestDeviceFn.call(this, desc);\n    };\n  }\n\n  if (defaultRequestAdapterOptions) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const oldFn = impl.requestAdapter;\n    impl.requestAdapter = function (\n      options?: GPURequestAdapterOptions\n    ): Promise<GPUAdapter | null> {\n      const promise = oldFn.call(this, { ...defaultRequestAdapterOptions, ...options });\n      if (recorder) {\n        void promise.then(adapter => {\n          if (adapter) {\n            const adapterInfo = adapter.info;\n            const infoString = `Adapter: ${adapterInfo.vendor} / ${adapterInfo.architecture} / ${adapterInfo.device}`;\n            recorder.debug(new ErrorWithExtra(infoString, () => ({ adapterInfo })));\n          }\n        });\n      }\n      return promise;\n    };\n  }\n\n  return impl;\n}\n"],"mappings":"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"}