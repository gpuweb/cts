{"version":3,"file":"data_tables.js","names":["keysOf","obj","Object","keys","numericKeysOf","map","n","Number","objectsToRecord","objects","record","reduce","type","toString","makeTable","members","defaults","table","result","k","v","entries","item","i","length","makeTableRenameAndFilter","columnRenames","columnsKept","columns","keyToIndex","Map","name","remappedName","undefined","indexOf","member","ndx","get"],"sources":["../../../src/common/util/data_tables.ts"],"sourcesContent":["import { ResolveType, ZipKeysWithValues } from './types.js';\n\nexport type valueof<K> = K[keyof K];\n\nexport function keysOf<T extends string>(obj: { [k in T]?: unknown }): readonly T[] {\n  return Object.keys(obj) as unknown[] as T[];\n}\n\nexport function numericKeysOf<T>(obj: object): readonly T[] {\n  return Object.keys(obj).map(n => Number(n)) as unknown[] as T[];\n}\n\n/**\n * @returns a new Record from `objects`, using the string returned by Object.toString() as the keys\n * and the objects as the values.\n */\nexport function objectsToRecord<T extends Object>(objects: readonly T[]): Record<string, T> {\n  const record = {};\n  return objects.reduce((obj, type) => {\n    return {\n      ...obj,\n      [type.toString()]: type,\n    };\n  }, record);\n}\n\n/**\n * Creates an info lookup object from a more nicely-formatted table. See below for examples.\n *\n * Note: Using `as const` on the arguments to this function is necessary to infer the correct type.\n */\nexport function makeTable<\n  Members extends readonly string[],\n  Defaults extends readonly unknown[],\n  Table extends { readonly [k: string]: readonly unknown[] },\n>(\n  members: Members,\n  defaults: Defaults,\n  table: Table\n): {\n  readonly [k in keyof Table]: ResolveType<ZipKeysWithValues<Members, Table[k], Defaults>>;\n} {\n  const result: { [k: string]: { [m: string]: unknown } } = {};\n  for (const [k, v] of Object.entries<readonly unknown[]>(table)) {\n    const item: { [m: string]: unknown } = {};\n    for (let i = 0; i < members.length; ++i) {\n      item[members[i]] = v[i] ?? defaults[i];\n    }\n    result[k] = item;\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return result as any;\n}\n\n/**\n * Creates an info lookup object from a more nicely-formatted table.\n *\n * Note: Using `as const` on the arguments to this function is necessary to infer the correct type.\n *\n * Example:\n *\n * ```\n * const t = makeTableWithDefaults(\n *   { c: 'default' },       // columnRenames\n *   ['a', 'default', 'd'],  // columnsKept\n *   ['a', 'b', 'c', 'd'],   // columns\n *   [123, 456, 789, 1011],  // defaults\n *   {                       // table\n *     foo: [1, 2, 3, 4],\n *     bar: [5,  ,  , 8],\n *     moo: [ , 9,10,  ],\n *   }\n * );\n *\n * // t = {\n * //   foo: { a:   1, default:   3, d:    4 },\n * //   bar: { a:   5, default: 789, d:    8 },\n * //   moo: { a: 123, default:  10, d: 1011 },\n * // };\n * ```\n *\n * MAINTENANCE_TODO: `ZipKeysWithValues<Members, Table[k], Defaults>` is incorrect\n * because Members no longer maps to Table[k]. It's not clear if this is even possible to fix\n * because it requires mapping, not zipping. Maybe passing in a index mapping\n * would fix it (which is gross) but if you have columnsKept as [0, 2, 3] then maybe it would\n * be possible to generate the correct type? I don't think we can generate the map at compile time\n * so we'd have to hand code it. Other ideas, don't generate kLimitsInfoCore and kLimitsInfoCompat\n * where they are keys of infos. Instead, generate kLimitsInfoCoreDefaults, kLimitsInfoCoreMaximums,\n * kLimitsInfoCoreClasses where each is just a `{[k: string]: type}`. Could zip those after or,\n * maybe that suggests passing in the hard coded indices would work.\n *\n * @param columnRenames the name of the column in the table that will be assigned to the 'default' property of each entry.\n * @param columnsKept the names of properties you want in the generated lookup table. This must be a subset of the columns of the tables except for the name 'default' which is looked from the previous argument.\n * @param columns the names of the columns of the name\n * @param defaults the default value by column for any element in a row of the table that is undefined\n * @param table named table rows.\n */\nexport function makeTableRenameAndFilter<\n  Members extends readonly string[],\n  DataMembers extends readonly string[],\n  Defaults extends readonly unknown[],\n  Table extends { readonly [k: string]: readonly unknown[] },\n>(\n  columnRenames: { [key: string]: string },\n  columnsKept: Members,\n  columns: DataMembers,\n  defaults: Defaults,\n  table: Table\n): {\n  readonly [k in keyof Table]: ResolveType<ZipKeysWithValues<Members, Table[k], Defaults>>;\n} {\n  const result: { [k: string]: { [m: string]: unknown } } = {};\n  const keyToIndex = new Map<string, number>(\n    columnsKept.map(name => {\n      const remappedName = columnRenames[name] === undefined ? name : columnRenames[name];\n      return [name, columns.indexOf(remappedName)];\n    })\n  );\n  for (const [k, v] of Object.entries<readonly unknown[]>(table)) {\n    const item: { [m: string]: unknown } = {};\n    for (const member of columnsKept) {\n      const ndx = keyToIndex.get(member)!;\n      item[member] = v[ndx] ?? defaults[ndx];\n    }\n    result[k] = item;\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return result as any;\n}\n"],"mappings":";;;;AAIA,OAAO,SAASA,MAAMA,CAAmBC,GAA2B,EAAgB;EAClF,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;AACzB;;AAEA,OAAO,SAASG,aAAaA,CAAIH,GAAW,EAAgB;EAC1D,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACI,GAAG,CAAC,CAAAC,CAAC,KAAIC,MAAM,CAACD,CAAC,CAAC,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAAmBC,OAAqB,EAAqB;EAC1F,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,OAAOD,OAAO,CAACE,MAAM,CAAC,CAACV,GAAG,EAAEW,IAAI,KAAK;IACnC,OAAO;MACL,GAAGX,GAAG;MACN,CAACW,IAAI,CAACC,QAAQ,CAAC,CAAC,GAAGD;IACrB,CAAC;EACH,CAAC,EAAEF,MAAM,CAAC;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,SAASA;;;;;AAKvBC,OAAgB;AAChBC,QAAkB;AAClBC,KAAY;;;AAGZ;EACA,MAAMC,MAAiD,GAAG,CAAC,CAAC;EAC5D,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIlB,MAAM,CAACmB,OAAO,CAAqBJ,KAAK,CAAC,EAAE;IAC9D,MAAMK,IAA8B,GAAG,CAAC,CAAC;IACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,CAACS,MAAM,EAAE,EAAED,CAAC,EAAE;MACvCD,IAAI,CAACP,OAAO,CAACQ,CAAC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC,IAAIP,QAAQ,CAACO,CAAC,CAAC;IACxC;IACAL,MAAM,CAACC,CAAC,CAAC,GAAGG,IAAI;EAClB;;EAEA,OAAOJ,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,wBAAwBA;;;;;;AAMtCC,aAAwC;AACxCC,WAAoB;AACpBC,OAAoB;AACpBZ,QAAkB;AAClBC,KAAY;;;AAGZ;EACA,MAAMC,MAAiD,GAAG,CAAC,CAAC;EAC5D,MAAMW,UAAU,GAAG,IAAIC,GAAG;IACxBH,WAAW,CAACtB,GAAG,CAAC,CAAA0B,IAAI,KAAI;MACtB,MAAMC,YAAY,GAAGN,aAAa,CAACK,IAAI,CAAC,KAAKE,SAAS,GAAGF,IAAI,GAAGL,aAAa,CAACK,IAAI,CAAC;MACnF,OAAO,CAACA,IAAI,EAAEH,OAAO,CAACM,OAAO,CAACF,YAAY,CAAC,CAAC;IAC9C,CAAC;EACH,CAAC;EACD,KAAK,MAAM,CAACb,CAAC,EAAEC,CAAC,CAAC,IAAIlB,MAAM,CAACmB,OAAO,CAAqBJ,KAAK,CAAC,EAAE;IAC9D,MAAMK,IAA8B,GAAG,CAAC,CAAC;IACzC,KAAK,MAAMa,MAAM,IAAIR,WAAW,EAAE;MAChC,MAAMS,GAAG,GAAGP,UAAU,CAACQ,GAAG,CAACF,MAAM,CAAE;MACnCb,IAAI,CAACa,MAAM,CAAC,GAAGf,CAAC,CAACgB,GAAG,CAAC,IAAIpB,QAAQ,CAACoB,GAAG,CAAC;IACxC;IACAlB,MAAM,CAACC,CAAC,CAAC,GAAGG,IAAI;EAClB;;EAEA,OAAOJ,MAAM;AACf"}